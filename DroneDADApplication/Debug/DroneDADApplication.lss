
DroneDADApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fe60  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e4  20000000  0000fe60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000408  200001e4  00010044  000201e4  2**2
                  ALLOC
  3 .stack        00002004  200005ec  0001044c  000201e4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005efb1  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007671  00000000  00000000  0007f216  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000074f1  00000000  00000000  00086887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000014c0  00000000  00000000  0008dd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001310  00000000  00000000  0008f238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010004  00000000  00000000  00090548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ffdd  00000000  00000000  000a054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000950d5  00000000  00000000  000c0529  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005364  00000000  00000000  00155600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	f0 25 00 20 11 9e 00 00 09 9f 00 00 09 9f 00 00     .%. ............
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	09 9f 00 00 00 00 00 00 00 00 00 00 09 9f 00 00     ................
      3c:	09 9f 00 00 09 9f 00 00 09 9f 00 00 09 9f 00 00     ................

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      4c:	c1 61 00 00 d5 5c 00 00 09 9f 00 00 09 9f 00 00     .a...\..........
		if (time.hour == 0) {
      5c:	09 9f 00 00 09 9f 00 00 91 77 00 00 a9 77 00 00     .........w...w..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	c1 77 00 00 d9 77 00 00 f1 77 00 00 09 78 00 00     .w...w...w...x..
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      7c:	c5 6d 00 00 d9 6d 00 00 ed 6d 00 00 09 9f 00 00     .m...m...m......
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      8c:	09 9f 00 00 09 9f 00 00 00 00 00 00 00 00 00 00     ................
      9c:	09 9f 00 00 09 9f 00 00 09 9f 00 00 09 9f 00 00     ................
			alarm.time.hour = alarm.time.hour % 12;
      ac:	09 9f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	200001e4 	.word	0x200001e4
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0000fe60 	.word	0x0000fe60

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e8 	.word	0x200001e8
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0000fe60 	.word	0x0000fe60
     10c:	0000fe60 	.word	0x0000fe60
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000099c5 	.word	0x000099c5
     190:	20000000 	.word	0x20000000
     194:	0000c9d1 	.word	0x0000c9d1
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1dc:	230f      	movs	r3, #15
     1de:	18fb      	adds	r3, r7, r3
     1e0:	1dfa      	adds	r2, r7, #7
     1e2:	7812      	ldrb	r2, [r2, #0]
     1e4:	09d2      	lsrs	r2, r2, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1e8:	230e      	movs	r3, #14
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1f8:	230f      	movs	r3, #15
     1fa:	18fb      	adds	r3, r7, r3
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d10f      	bne.n	222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681a      	ldr	r2, [r3, #0]
     216:	230e      	movs	r3, #14
     218:	18fb      	adds	r3, r7, r3
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	01db      	lsls	r3, r3, #7
     21e:	18d3      	adds	r3, r2, r3
     220:	e000      	b.n	224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     222:	2300      	movs	r3, #0
	}
}
     224:	0018      	movs	r0, r3
     226:	46bd      	mov	sp, r7
     228:	b004      	add	sp, #16
     22a:	bd80      	pop	{r7, pc}
     22c:	41004400 	.word	0x41004400

00000230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     23c:	1dfb      	adds	r3, r7, #7
     23e:	781b      	ldrb	r3, [r3, #0]
     240:	0018      	movs	r0, r3
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <port_get_group_from_gpio_pin+0x20>)
     244:	4798      	blx	r3
     246:	0003      	movs	r3, r0
}
     248:	0018      	movs	r0, r3
     24a:	46bd      	mov	sp, r7
     24c:	b002      	add	sp, #8
     24e:	bd80      	pop	{r7, pc}
     250:	000001d1 	.word	0x000001d1

00000254 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     254:	b580      	push	{r7, lr}
     256:	b082      	sub	sp, #8
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     262:	687b      	ldr	r3, [r7, #4]
     264:	2201      	movs	r2, #1
     266:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2200      	movs	r2, #0
     26c:	709a      	strb	r2, [r3, #2]
}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	46bd      	mov	sp, r7
     272:	b002      	add	sp, #8
     274:	bd80      	pop	{r7, pc}
	...

00000278 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	0002      	movs	r2, r0
     280:	1dfb      	adds	r3, r7, #7
     282:	701a      	strb	r2, [r3, #0]
     284:	1dbb      	adds	r3, r7, #6
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     28a:	1dfb      	adds	r3, r7, #7
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	0018      	movs	r0, r3
     290:	4b0d      	ldr	r3, [pc, #52]	; (2c8 <port_pin_set_output_level+0x50>)
     292:	4798      	blx	r3
     294:	0003      	movs	r3, r0
     296:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     298:	1dfb      	adds	r3, r7, #7
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	221f      	movs	r2, #31
     29e:	4013      	ands	r3, r2
     2a0:	2201      	movs	r2, #1
     2a2:	409a      	lsls	r2, r3
     2a4:	0013      	movs	r3, r2
     2a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2a8:	1dbb      	adds	r3, r7, #6
     2aa:	781b      	ldrb	r3, [r3, #0]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	68ba      	ldr	r2, [r7, #8]
     2b4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2b6:	e002      	b.n	2be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	68ba      	ldr	r2, [r7, #8]
     2bc:	615a      	str	r2, [r3, #20]
}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	46bd      	mov	sp, r7
     2c2:	b004      	add	sp, #16
     2c4:	bd80      	pop	{r7, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000231 	.word	0x00000231

000002cc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     2d0:	4b04      	ldr	r3, [pc, #16]	; (2e4 <system_interrupt_enable_global+0x18>)
     2d2:	2201      	movs	r2, #1
     2d4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2da:	b662      	cpsie	i
}
     2dc:	46c0      	nop			; (mov r8, r8)
     2de:	46bd      	mov	sp, r7
     2e0:	bd80      	pop	{r7, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	2000000f 	.word	0x2000000f

000002e8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <chip_isr+0x18>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d002      	beq.n	2fa <chip_isr+0x12>
		gpfIsr();
     2f4:	4b02      	ldr	r3, [pc, #8]	; (300 <chip_isr+0x18>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	4798      	blx	r3
	}
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	20000200 	.word	0x20000200

00000304 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     30a:	1d3b      	adds	r3, r7, #4
     30c:	0018      	movs	r0, r3
     30e:	4b10      	ldr	r3, [pc, #64]	; (350 <init_chip_pins+0x4c>)
     310:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     312:	1d3b      	adds	r3, r7, #4
     314:	2201      	movs	r2, #1
     316:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     318:	1d3b      	adds	r3, r7, #4
     31a:	0019      	movs	r1, r3
     31c:	201b      	movs	r0, #27
     31e:	4b0d      	ldr	r3, [pc, #52]	; (354 <init_chip_pins+0x50>)
     320:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     322:	1d3b      	adds	r3, r7, #4
     324:	0019      	movs	r1, r3
     326:	201c      	movs	r0, #28
     328:	4b0a      	ldr	r3, [pc, #40]	; (354 <init_chip_pins+0x50>)
     32a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     32c:	1d3b      	adds	r3, r7, #4
     32e:	0019      	movs	r1, r3
     330:	2028      	movs	r0, #40	; 0x28
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <init_chip_pins+0x50>)
     334:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     336:	2100      	movs	r1, #0
     338:	201c      	movs	r0, #28
     33a:	4b07      	ldr	r3, [pc, #28]	; (358 <init_chip_pins+0x54>)
     33c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     33e:	2100      	movs	r1, #0
     340:	201b      	movs	r0, #27
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <init_chip_pins+0x54>)
     344:	4798      	blx	r3
}
     346:	46c0      	nop			; (mov r8, r8)
     348:	46bd      	mov	sp, r7
     34a:	b002      	add	sp, #8
     34c:	bd80      	pop	{r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00000255 	.word	0x00000255
     354:	00007001 	.word	0x00007001
     358:	00000279 	.word	0x00000279

0000035c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     35c:	b580      	push	{r7, lr}
     35e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     360:	4b0c      	ldr	r3, [pc, #48]	; (394 <nm_bsp_init+0x38>)
     362:	2200      	movs	r2, #0
     364:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     366:	4b0c      	ldr	r3, [pc, #48]	; (398 <nm_bsp_init+0x3c>)
     368:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     36a:	4b0c      	ldr	r3, [pc, #48]	; (39c <nm_bsp_init+0x40>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	2201      	movs	r2, #1
     370:	4013      	ands	r3, r2
     372:	d004      	beq.n	37e <nm_bsp_init+0x22>
     374:	4b09      	ldr	r3, [pc, #36]	; (39c <nm_bsp_init+0x40>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	2202      	movs	r2, #2
     37a:	4013      	ands	r3, r2
     37c:	d101      	bne.n	382 <nm_bsp_init+0x26>
	    delay_init();
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <nm_bsp_init+0x44>)
     380:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <nm_bsp_init+0x48>)
     384:	4798      	blx	r3

	system_interrupt_enable_global();
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <nm_bsp_init+0x4c>)
     388:	4798      	blx	r3

	return M2M_SUCCESS;
     38a:	2300      	movs	r3, #0
}
     38c:	0018      	movs	r0, r3
     38e:	46bd      	mov	sp, r7
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	20000200 	.word	0x20000200
     398:	00000305 	.word	0x00000305
     39c:	e000e010 	.word	0xe000e010
     3a0:	00000149 	.word	0x00000149
     3a4:	000003ad 	.word	0x000003ad
     3a8:	000002cd 	.word	0x000002cd

000003ac <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     3b0:	2100      	movs	r1, #0
     3b2:	201c      	movs	r0, #28
     3b4:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <nm_bsp_reset+0x38>)
     3b6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     3b8:	2100      	movs	r1, #0
     3ba:	201b      	movs	r0, #27
     3bc:	4b09      	ldr	r3, [pc, #36]	; (3e4 <nm_bsp_reset+0x38>)
     3be:	4798      	blx	r3
	nm_bsp_sleep(1);
     3c0:	2001      	movs	r0, #1
     3c2:	4b09      	ldr	r3, [pc, #36]	; (3e8 <nm_bsp_reset+0x3c>)
     3c4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     3c6:	2101      	movs	r1, #1
     3c8:	201c      	movs	r0, #28
     3ca:	4b06      	ldr	r3, [pc, #24]	; (3e4 <nm_bsp_reset+0x38>)
     3cc:	4798      	blx	r3
	nm_bsp_sleep(10);
     3ce:	200a      	movs	r0, #10
     3d0:	4b05      	ldr	r3, [pc, #20]	; (3e8 <nm_bsp_reset+0x3c>)
     3d2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     3d4:	2101      	movs	r1, #1
     3d6:	201b      	movs	r0, #27
     3d8:	4b02      	ldr	r3, [pc, #8]	; (3e4 <nm_bsp_reset+0x38>)
     3da:	4798      	blx	r3
}
     3dc:	46c0      	nop			; (mov r8, r8)
     3de:	46bd      	mov	sp, r7
     3e0:	bd80      	pop	{r7, pc}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	00000279 	.word	0x00000279
     3e8:	000003ed 	.word	0x000003ed

000003ec <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     3ec:	b580      	push	{r7, lr}
     3ee:	b082      	sub	sp, #8
     3f0:	af00      	add	r7, sp, #0
     3f2:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     3f4:	e002      	b.n	3fc <nm_bsp_sleep+0x10>
		delay_ms(1);
     3f6:	2001      	movs	r0, #1
     3f8:	4b05      	ldr	r3, [pc, #20]	; (410 <nm_bsp_sleep+0x24>)
     3fa:	4798      	blx	r3
	while (u32TimeMsec--) {
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	1e5a      	subs	r2, r3, #1
     400:	607a      	str	r2, [r7, #4]
     402:	2b00      	cmp	r3, #0
     404:	d1f7      	bne.n	3f6 <nm_bsp_sleep+0xa>
	}
}
     406:	46c0      	nop			; (mov r8, r8)
     408:	46bd      	mov	sp, r7
     40a:	b002      	add	sp, #8
     40c:	bd80      	pop	{r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	000001a1 	.word	0x000001a1

00000414 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     414:	b580      	push	{r7, lr}
     416:	b086      	sub	sp, #24
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     41c:	4b15      	ldr	r3, [pc, #84]	; (474 <nm_bsp_register_isr+0x60>)
     41e:	687a      	ldr	r2, [r7, #4]
     420:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     422:	230c      	movs	r3, #12
     424:	18fb      	adds	r3, r7, r3
     426:	0018      	movs	r0, r3
     428:	4b13      	ldr	r3, [pc, #76]	; (478 <nm_bsp_register_isr+0x64>)
     42a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     42c:	230c      	movs	r3, #12
     42e:	18fb      	adds	r3, r7, r3
     430:	2229      	movs	r2, #41	; 0x29
     432:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     434:	230c      	movs	r3, #12
     436:	18fb      	adds	r3, r7, r3
     438:	2200      	movs	r2, #0
     43a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     43c:	230c      	movs	r3, #12
     43e:	18fb      	adds	r3, r7, r3
     440:	2201      	movs	r2, #1
     442:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     444:	230c      	movs	r3, #12
     446:	18fb      	adds	r3, r7, r3
     448:	2202      	movs	r2, #2
     44a:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     44c:	230c      	movs	r3, #12
     44e:	18fb      	adds	r3, r7, r3
     450:	0019      	movs	r1, r3
     452:	2009      	movs	r0, #9
     454:	4b09      	ldr	r3, [pc, #36]	; (47c <nm_bsp_register_isr+0x68>)
     456:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     458:	4b09      	ldr	r3, [pc, #36]	; (480 <nm_bsp_register_isr+0x6c>)
     45a:	2200      	movs	r2, #0
     45c:	2109      	movs	r1, #9
     45e:	0018      	movs	r0, r3
     460:	4b08      	ldr	r3, [pc, #32]	; (484 <nm_bsp_register_isr+0x70>)
     462:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     464:	2100      	movs	r1, #0
     466:	2009      	movs	r0, #9
     468:	4b07      	ldr	r3, [pc, #28]	; (488 <nm_bsp_register_isr+0x74>)
     46a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     46c:	46c0      	nop			; (mov r8, r8)
     46e:	46bd      	mov	sp, r7
     470:	b006      	add	sp, #24
     472:	bd80      	pop	{r7, pc}
     474:	20000200 	.word	0x20000200
     478:	00005fe1 	.word	0x00005fe1
     47c:	00006015 	.word	0x00006015
     480:	000002e9 	.word	0x000002e9
     484:	00005be1 	.word	0x00005be1
     488:	00005c45 	.word	0x00005c45

0000048c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     48c:	b580      	push	{r7, lr}
     48e:	b082      	sub	sp, #8
     490:	af00      	add	r7, sp, #0
     492:	0002      	movs	r2, r0
     494:	1dfb      	adds	r3, r7, #7
     496:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     498:	1dfb      	adds	r3, r7, #7
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	2b00      	cmp	r3, #0
     49e:	d004      	beq.n	4aa <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     4a0:	2100      	movs	r1, #0
     4a2:	2009      	movs	r0, #9
     4a4:	4b05      	ldr	r3, [pc, #20]	; (4bc <nm_bsp_interrupt_ctrl+0x30>)
     4a6:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     4a8:	e003      	b.n	4b2 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     4aa:	2100      	movs	r1, #0
     4ac:	2009      	movs	r0, #9
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <nm_bsp_interrupt_ctrl+0x34>)
     4b0:	4798      	blx	r3
}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	46bd      	mov	sp, r7
     4b6:	b002      	add	sp, #8
     4b8:	bd80      	pop	{r7, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00005c45 	.word	0x00005c45
     4c0:	00005c8d 	.word	0x00005c8d

000004c4 <system_pinmux_get_group_from_gpio_pin>:
{
     4c4:	b580      	push	{r7, lr}
     4c6:	b084      	sub	sp, #16
     4c8:	af00      	add	r7, sp, #0
     4ca:	0002      	movs	r2, r0
     4cc:	1dfb      	adds	r3, r7, #7
     4ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4d0:	230f      	movs	r3, #15
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	1dfa      	adds	r2, r7, #7
     4d6:	7812      	ldrb	r2, [r2, #0]
     4d8:	09d2      	lsrs	r2, r2, #7
     4da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4dc:	230e      	movs	r3, #14
     4de:	18fb      	adds	r3, r7, r3
     4e0:	1dfa      	adds	r2, r7, #7
     4e2:	7812      	ldrb	r2, [r2, #0]
     4e4:	0952      	lsrs	r2, r2, #5
     4e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     4e8:	4b0d      	ldr	r3, [pc, #52]	; (520 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     4ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     4ec:	230f      	movs	r3, #15
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d10f      	bne.n	516 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     4f6:	230f      	movs	r3, #15
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	781b      	ldrb	r3, [r3, #0]
     4fc:	009b      	lsls	r3, r3, #2
     4fe:	2210      	movs	r2, #16
     500:	4694      	mov	ip, r2
     502:	44bc      	add	ip, r7
     504:	4463      	add	r3, ip
     506:	3b08      	subs	r3, #8
     508:	681a      	ldr	r2, [r3, #0]
     50a:	230e      	movs	r3, #14
     50c:	18fb      	adds	r3, r7, r3
     50e:	781b      	ldrb	r3, [r3, #0]
     510:	01db      	lsls	r3, r3, #7
     512:	18d3      	adds	r3, r2, r3
     514:	e000      	b.n	518 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     516:	2300      	movs	r3, #0
}
     518:	0018      	movs	r0, r3
     51a:	46bd      	mov	sp, r7
     51c:	b004      	add	sp, #16
     51e:	bd80      	pop	{r7, pc}
     520:	41004400 	.word	0x41004400

00000524 <port_get_group_from_gpio_pin>:
{
     524:	b580      	push	{r7, lr}
     526:	b082      	sub	sp, #8
     528:	af00      	add	r7, sp, #0
     52a:	0002      	movs	r2, r0
     52c:	1dfb      	adds	r3, r7, #7
     52e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     530:	1dfb      	adds	r3, r7, #7
     532:	781b      	ldrb	r3, [r3, #0]
     534:	0018      	movs	r0, r3
     536:	4b03      	ldr	r3, [pc, #12]	; (544 <port_get_group_from_gpio_pin+0x20>)
     538:	4798      	blx	r3
     53a:	0003      	movs	r3, r0
}
     53c:	0018      	movs	r0, r3
     53e:	46bd      	mov	sp, r7
     540:	b002      	add	sp, #8
     542:	bd80      	pop	{r7, pc}
     544:	000004c5 	.word	0x000004c5

00000548 <port_get_config_defaults>:
{
     548:	b580      	push	{r7, lr}
     54a:	b082      	sub	sp, #8
     54c:	af00      	add	r7, sp, #0
     54e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     550:	687b      	ldr	r3, [r7, #4]
     552:	2200      	movs	r2, #0
     554:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     556:	687b      	ldr	r3, [r7, #4]
     558:	2201      	movs	r2, #1
     55a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	2200      	movs	r2, #0
     560:	709a      	strb	r2, [r3, #2]
}
     562:	46c0      	nop			; (mov r8, r8)
     564:	46bd      	mov	sp, r7
     566:	b002      	add	sp, #8
     568:	bd80      	pop	{r7, pc}
	...

0000056c <port_pin_set_output_level>:
{
     56c:	b580      	push	{r7, lr}
     56e:	b084      	sub	sp, #16
     570:	af00      	add	r7, sp, #0
     572:	0002      	movs	r2, r0
     574:	1dfb      	adds	r3, r7, #7
     576:	701a      	strb	r2, [r3, #0]
     578:	1dbb      	adds	r3, r7, #6
     57a:	1c0a      	adds	r2, r1, #0
     57c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     57e:	1dfb      	adds	r3, r7, #7
     580:	781b      	ldrb	r3, [r3, #0]
     582:	0018      	movs	r0, r3
     584:	4b0d      	ldr	r3, [pc, #52]	; (5bc <port_pin_set_output_level+0x50>)
     586:	4798      	blx	r3
     588:	0003      	movs	r3, r0
     58a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     58c:	1dfb      	adds	r3, r7, #7
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	221f      	movs	r2, #31
     592:	4013      	ands	r3, r2
     594:	2201      	movs	r2, #1
     596:	409a      	lsls	r2, r3
     598:	0013      	movs	r3, r2
     59a:	60bb      	str	r3, [r7, #8]
	if (level) {
     59c:	1dbb      	adds	r3, r7, #6
     59e:	781b      	ldrb	r3, [r3, #0]
     5a0:	2b00      	cmp	r3, #0
     5a2:	d003      	beq.n	5ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5a4:	68fb      	ldr	r3, [r7, #12]
     5a6:	68ba      	ldr	r2, [r7, #8]
     5a8:	619a      	str	r2, [r3, #24]
}
     5aa:	e002      	b.n	5b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     5ac:	68fb      	ldr	r3, [r7, #12]
     5ae:	68ba      	ldr	r2, [r7, #8]
     5b0:	615a      	str	r2, [r3, #20]
}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	46bd      	mov	sp, r7
     5b6:	b004      	add	sp, #16
     5b8:	bd80      	pop	{r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000525 	.word	0x00000525

000005c0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b082      	sub	sp, #8
     5c4:	af00      	add	r7, sp, #0
     5c6:	0002      	movs	r2, r0
     5c8:	1dfb      	adds	r3, r7, #7
     5ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5cc:	4b06      	ldr	r3, [pc, #24]	; (5e8 <system_interrupt_enable+0x28>)
     5ce:	1dfa      	adds	r2, r7, #7
     5d0:	7812      	ldrb	r2, [r2, #0]
     5d2:	0011      	movs	r1, r2
     5d4:	221f      	movs	r2, #31
     5d6:	400a      	ands	r2, r1
     5d8:	2101      	movs	r1, #1
     5da:	4091      	lsls	r1, r2
     5dc:	000a      	movs	r2, r1
     5de:	601a      	str	r2, [r3, #0]
}
     5e0:	46c0      	nop			; (mov r8, r8)
     5e2:	46bd      	mov	sp, r7
     5e4:	b002      	add	sp, #8
     5e6:	bd80      	pop	{r7, pc}
     5e8:	e000e100 	.word	0xe000e100

000005ec <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     5ec:	b580      	push	{r7, lr}
     5ee:	b082      	sub	sp, #8
     5f0:	af00      	add	r7, sp, #0
     5f2:	0002      	movs	r2, r0
     5f4:	1dfb      	adds	r3, r7, #7
     5f6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5f8:	4a07      	ldr	r2, [pc, #28]	; (618 <system_interrupt_disable+0x2c>)
     5fa:	1dfb      	adds	r3, r7, #7
     5fc:	781b      	ldrb	r3, [r3, #0]
     5fe:	0019      	movs	r1, r3
     600:	231f      	movs	r3, #31
     602:	400b      	ands	r3, r1
     604:	2101      	movs	r1, #1
     606:	4099      	lsls	r1, r3
     608:	000b      	movs	r3, r1
     60a:	0019      	movs	r1, r3
     60c:	2380      	movs	r3, #128	; 0x80
     60e:	50d1      	str	r1, [r2, r3]
}
     610:	46c0      	nop			; (mov r8, r8)
     612:	46bd      	mov	sp, r7
     614:	b002      	add	sp, #8
     616:	bd80      	pop	{r7, pc}
     618:	e000e100 	.word	0xe000e100

0000061c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     61c:	b580      	push	{r7, lr}
     61e:	b084      	sub	sp, #16
     620:	af00      	add	r7, sp, #0
     622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     624:	687b      	ldr	r3, [r7, #4]
     626:	681b      	ldr	r3, [r3, #0]
     628:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	69db      	ldr	r3, [r3, #28]
     62e:	1e5a      	subs	r2, r3, #1
     630:	4193      	sbcs	r3, r2
     632:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     634:	0018      	movs	r0, r3
     636:	46bd      	mov	sp, r7
     638:	b004      	add	sp, #16
     63a:	bd80      	pop	{r7, pc}

0000063c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     63c:	b580      	push	{r7, lr}
     63e:	b082      	sub	sp, #8
     640:	af00      	add	r7, sp, #0
     642:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     644:	687b      	ldr	r3, [r7, #4]
     646:	2201      	movs	r2, #1
     648:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     64a:	687b      	ldr	r3, [r7, #4]
     64c:	2200      	movs	r2, #0
     64e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     650:	687b      	ldr	r3, [r7, #4]
     652:	2200      	movs	r2, #0
     654:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     656:	687b      	ldr	r3, [r7, #4]
     658:	22c0      	movs	r2, #192	; 0xc0
     65a:	0392      	lsls	r2, r2, #14
     65c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     65e:	687b      	ldr	r3, [r7, #4]
     660:	2200      	movs	r2, #0
     662:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     664:	687b      	ldr	r3, [r7, #4]
     666:	2200      	movs	r2, #0
     668:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     66a:	687b      	ldr	r3, [r7, #4]
     66c:	2201      	movs	r2, #1
     66e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     670:	687b      	ldr	r3, [r7, #4]
     672:	2201      	movs	r2, #1
     674:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     676:	687b      	ldr	r3, [r7, #4]
     678:	2200      	movs	r2, #0
     67a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     67c:	687b      	ldr	r3, [r7, #4]
     67e:	2224      	movs	r2, #36	; 0x24
     680:	2100      	movs	r1, #0
     682:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     684:	687b      	ldr	r3, [r7, #4]
     686:	3318      	adds	r3, #24
     688:	220c      	movs	r2, #12
     68a:	2100      	movs	r1, #0
     68c:	0018      	movs	r0, r3
     68e:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <spi_get_config_defaults+0x7c>)
     690:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     692:	687b      	ldr	r3, [r7, #4]
     694:	4a09      	ldr	r2, [pc, #36]	; (6bc <spi_get_config_defaults+0x80>)
     696:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     698:	687b      	ldr	r3, [r7, #4]
     69a:	2200      	movs	r2, #0
     69c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2200      	movs	r2, #0
     6a2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	2200      	movs	r2, #0
     6a8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	2200      	movs	r2, #0
     6ae:	635a      	str	r2, [r3, #52]	; 0x34

};
     6b0:	46c0      	nop			; (mov r8, r8)
     6b2:	46bd      	mov	sp, r7
     6b4:	b002      	add	sp, #8
     6b6:	bd80      	pop	{r7, pc}
     6b8:	0000cdc3 	.word	0x0000cdc3
     6bc:	000186a0 	.word	0x000186a0

000006c0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	220a      	movs	r2, #10
     6cc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	2200      	movs	r2, #0
     6d2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2200      	movs	r2, #0
     6d8:	709a      	strb	r2, [r3, #2]
}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	46bd      	mov	sp, r7
     6de:	b002      	add	sp, #8
     6e0:	bd80      	pop	{r7, pc}
	...

000006e4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	b084      	sub	sp, #16
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
     6ec:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     6ee:	683b      	ldr	r3, [r7, #0]
     6f0:	781a      	ldrb	r2, [r3, #0]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     6f6:	683b      	ldr	r3, [r7, #0]
     6f8:	785a      	ldrb	r2, [r3, #1]
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     6fe:	683b      	ldr	r3, [r7, #0]
     700:	789a      	ldrb	r2, [r3, #2]
     702:	687b      	ldr	r3, [r7, #4]
     704:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     706:	230c      	movs	r3, #12
     708:	18fb      	adds	r3, r7, r3
     70a:	0018      	movs	r0, r3
     70c:	4b0b      	ldr	r3, [pc, #44]	; (73c <spi_attach_slave+0x58>)
     70e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     710:	230c      	movs	r3, #12
     712:	18fb      	adds	r3, r7, r3
     714:	2201      	movs	r2, #1
     716:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     718:	687b      	ldr	r3, [r7, #4]
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	220c      	movs	r2, #12
     71e:	18ba      	adds	r2, r7, r2
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4b06      	ldr	r3, [pc, #24]	; (740 <spi_attach_slave+0x5c>)
     726:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     728:	687b      	ldr	r3, [r7, #4]
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	2101      	movs	r1, #1
     72e:	0018      	movs	r0, r3
     730:	4b04      	ldr	r3, [pc, #16]	; (744 <spi_attach_slave+0x60>)
     732:	4798      	blx	r3
}
     734:	46c0      	nop			; (mov r8, r8)
     736:	46bd      	mov	sp, r7
     738:	b004      	add	sp, #16
     73a:	bd80      	pop	{r7, pc}
     73c:	00000549 	.word	0x00000549
     740:	00007001 	.word	0x00007001
     744:	0000056d 	.word	0x0000056d

00000748 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     748:	b580      	push	{r7, lr}
     74a:	b084      	sub	sp, #16
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     750:	687b      	ldr	r3, [r7, #4]
     752:	681b      	ldr	r3, [r3, #0]
     754:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     756:	687b      	ldr	r3, [r7, #4]
     758:	681b      	ldr	r3, [r3, #0]
     75a:	0018      	movs	r0, r3
     75c:	4b0b      	ldr	r3, [pc, #44]	; (78c <spi_enable+0x44>)
     75e:	4798      	blx	r3
     760:	0003      	movs	r3, r0
     762:	0018      	movs	r0, r3
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <spi_enable+0x48>)
     766:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     768:	46c0      	nop			; (mov r8, r8)
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	0018      	movs	r0, r3
     76e:	4b09      	ldr	r3, [pc, #36]	; (794 <spi_enable+0x4c>)
     770:	4798      	blx	r3
     772:	1e03      	subs	r3, r0, #0
     774:	d1f9      	bne.n	76a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     776:	68fb      	ldr	r3, [r7, #12]
     778:	681b      	ldr	r3, [r3, #0]
     77a:	2202      	movs	r2, #2
     77c:	431a      	orrs	r2, r3
     77e:	68fb      	ldr	r3, [r7, #12]
     780:	601a      	str	r2, [r3, #0]
}
     782:	46c0      	nop			; (mov r8, r8)
     784:	46bd      	mov	sp, r7
     786:	b004      	add	sp, #16
     788:	bd80      	pop	{r7, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	0000774d 	.word	0x0000774d
     790:	000005c1 	.word	0x000005c1
     794:	0000061d 	.word	0x0000061d

00000798 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     798:	b580      	push	{r7, lr}
     79a:	b084      	sub	sp, #16
     79c:	af00      	add	r7, sp, #0
     79e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	681b      	ldr	r3, [r3, #0]
     7a4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	0018      	movs	r0, r3
     7ac:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <spi_disable+0x50>)
     7ae:	4798      	blx	r3
     7b0:	0003      	movs	r3, r0
     7b2:	0018      	movs	r0, r3
     7b4:	4b0d      	ldr	r3, [pc, #52]	; (7ec <spi_disable+0x54>)
     7b6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     7b8:	46c0      	nop			; (mov r8, r8)
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	0018      	movs	r0, r3
     7be:	4b0c      	ldr	r3, [pc, #48]	; (7f0 <spi_disable+0x58>)
     7c0:	4798      	blx	r3
     7c2:	1e03      	subs	r3, r0, #0
     7c4:	d1f9      	bne.n	7ba <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     7c6:	68fb      	ldr	r3, [r7, #12]
     7c8:	228f      	movs	r2, #143	; 0x8f
     7ca:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     7cc:	68fb      	ldr	r3, [r7, #12]
     7ce:	228f      	movs	r2, #143	; 0x8f
     7d0:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	681b      	ldr	r3, [r3, #0]
     7d6:	2202      	movs	r2, #2
     7d8:	4393      	bics	r3, r2
     7da:	001a      	movs	r2, r3
     7dc:	68fb      	ldr	r3, [r7, #12]
     7de:	601a      	str	r2, [r3, #0]
}
     7e0:	46c0      	nop			; (mov r8, r8)
     7e2:	46bd      	mov	sp, r7
     7e4:	b004      	add	sp, #16
     7e6:	bd80      	pop	{r7, pc}
     7e8:	0000774d 	.word	0x0000774d
     7ec:	000005ed 	.word	0x000005ed
     7f0:	0000061d 	.word	0x0000061d

000007f4 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     7f4:	b580      	push	{r7, lr}
     7f6:	b084      	sub	sp, #16
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     802:	68fb      	ldr	r3, [r7, #12]
     804:	7e1b      	ldrb	r3, [r3, #24]
     806:	b2db      	uxtb	r3, r3
     808:	001a      	movs	r2, r3
     80a:	2302      	movs	r3, #2
     80c:	4013      	ands	r3, r2
     80e:	1e5a      	subs	r2, r3, #1
     810:	4193      	sbcs	r3, r2
     812:	b2db      	uxtb	r3, r3
}
     814:	0018      	movs	r0, r3
     816:	46bd      	mov	sp, r7
     818:	b004      	add	sp, #16
     81a:	bd80      	pop	{r7, pc}

0000081c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     81c:	b580      	push	{r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     824:	687b      	ldr	r3, [r7, #4]
     826:	681b      	ldr	r3, [r3, #0]
     828:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     82a:	68fb      	ldr	r3, [r7, #12]
     82c:	7e1b      	ldrb	r3, [r3, #24]
     82e:	b2db      	uxtb	r3, r3
     830:	001a      	movs	r2, r3
     832:	2301      	movs	r3, #1
     834:	4013      	ands	r3, r2
     836:	1e5a      	subs	r2, r3, #1
     838:	4193      	sbcs	r3, r2
     83a:	b2db      	uxtb	r3, r3
}
     83c:	0018      	movs	r0, r3
     83e:	46bd      	mov	sp, r7
     840:	b004      	add	sp, #16
     842:	bd80      	pop	{r7, pc}

00000844 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af00      	add	r7, sp, #0
     84a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	681b      	ldr	r3, [r3, #0]
     850:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     852:	68fb      	ldr	r3, [r7, #12]
     854:	7e1b      	ldrb	r3, [r3, #24]
     856:	b2db      	uxtb	r3, r3
     858:	001a      	movs	r2, r3
     85a:	2304      	movs	r3, #4
     85c:	4013      	ands	r3, r2
     85e:	1e5a      	subs	r2, r3, #1
     860:	4193      	sbcs	r3, r2
     862:	b2db      	uxtb	r3, r3
}
     864:	0018      	movs	r0, r3
     866:	46bd      	mov	sp, r7
     868:	b004      	add	sp, #16
     86a:	bd80      	pop	{r7, pc}

0000086c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
     874:	000a      	movs	r2, r1
     876:	1cbb      	adds	r3, r7, #2
     878:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	681b      	ldr	r3, [r3, #0]
     87e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     880:	687b      	ldr	r3, [r7, #4]
     882:	0018      	movs	r0, r3
     884:	4b0a      	ldr	r3, [pc, #40]	; (8b0 <spi_write+0x44>)
     886:	4798      	blx	r3
     888:	0003      	movs	r3, r0
     88a:	001a      	movs	r2, r3
     88c:	2301      	movs	r3, #1
     88e:	4053      	eors	r3, r2
     890:	b2db      	uxtb	r3, r3
     892:	2b00      	cmp	r3, #0
     894:	d001      	beq.n	89a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     896:	2305      	movs	r3, #5
     898:	e006      	b.n	8a8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     89a:	1cbb      	adds	r3, r7, #2
     89c:	881b      	ldrh	r3, [r3, #0]
     89e:	05db      	lsls	r3, r3, #23
     8a0:	0dda      	lsrs	r2, r3, #23
     8a2:	68fb      	ldr	r3, [r7, #12]
     8a4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     8a6:	2300      	movs	r3, #0
}
     8a8:	0018      	movs	r0, r3
     8aa:	46bd      	mov	sp, r7
     8ac:	b004      	add	sp, #16
     8ae:	bd80      	pop	{r7, pc}
     8b0:	0000081d 	.word	0x0000081d

000008b4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     8b4:	b580      	push	{r7, lr}
     8b6:	b084      	sub	sp, #16
     8b8:	af00      	add	r7, sp, #0
     8ba:	6078      	str	r0, [r7, #4]
     8bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8be:	687b      	ldr	r3, [r7, #4]
     8c0:	681b      	ldr	r3, [r3, #0]
     8c2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8c4:	687b      	ldr	r3, [r7, #4]
     8c6:	0018      	movs	r0, r3
     8c8:	4b1b      	ldr	r3, [pc, #108]	; (938 <spi_read+0x84>)
     8ca:	4798      	blx	r3
     8cc:	0003      	movs	r3, r0
     8ce:	001a      	movs	r2, r3
     8d0:	2301      	movs	r3, #1
     8d2:	4053      	eors	r3, r2
     8d4:	b2db      	uxtb	r3, r3
     8d6:	2b00      	cmp	r3, #0
     8d8:	d001      	beq.n	8de <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     8da:	2310      	movs	r3, #16
     8dc:	e027      	b.n	92e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     8de:	230f      	movs	r3, #15
     8e0:	18fb      	adds	r3, r7, r3
     8e2:	2200      	movs	r2, #0
     8e4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8e6:	68bb      	ldr	r3, [r7, #8]
     8e8:	8b5b      	ldrh	r3, [r3, #26]
     8ea:	b29b      	uxth	r3, r3
     8ec:	001a      	movs	r2, r3
     8ee:	2304      	movs	r3, #4
     8f0:	4013      	ands	r3, r2
     8f2:	d006      	beq.n	902 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     8f4:	230f      	movs	r3, #15
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	221e      	movs	r2, #30
     8fa:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8fc:	68bb      	ldr	r3, [r7, #8]
     8fe:	2204      	movs	r2, #4
     900:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     902:	687b      	ldr	r3, [r7, #4]
     904:	799b      	ldrb	r3, [r3, #6]
     906:	2b01      	cmp	r3, #1
     908:	d108      	bne.n	91c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     90a:	68bb      	ldr	r3, [r7, #8]
     90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     90e:	b29b      	uxth	r3, r3
     910:	05db      	lsls	r3, r3, #23
     912:	0ddb      	lsrs	r3, r3, #23
     914:	b29a      	uxth	r2, r3
     916:	683b      	ldr	r3, [r7, #0]
     918:	801a      	strh	r2, [r3, #0]
     91a:	e005      	b.n	928 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     91c:	68bb      	ldr	r3, [r7, #8]
     91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     920:	b2db      	uxtb	r3, r3
     922:	b29a      	uxth	r2, r3
     924:	683b      	ldr	r3, [r7, #0]
     926:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     928:	230f      	movs	r3, #15
     92a:	18fb      	adds	r3, r7, r3
     92c:	781b      	ldrb	r3, [r3, #0]
}
     92e:	0018      	movs	r0, r3
     930:	46bd      	mov	sp, r7
     932:	b004      	add	sp, #16
     934:	bd80      	pop	{r7, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	00000845 	.word	0x00000845

0000093c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     93c:	b580      	push	{r7, lr}
     93e:	b086      	sub	sp, #24
     940:	af00      	add	r7, sp, #0
     942:	60f8      	str	r0, [r7, #12]
     944:	60b9      	str	r1, [r7, #8]
     946:	1dbb      	adds	r3, r7, #6
     948:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     94a:	2313      	movs	r3, #19
     94c:	18fb      	adds	r3, r7, r3
     94e:	2200      	movs	r2, #0
     950:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     952:	2317      	movs	r3, #23
     954:	18fb      	adds	r3, r7, r3
     956:	2200      	movs	r2, #0
     958:	701a      	strb	r2, [r3, #0]
     95a:	2316      	movs	r3, #22
     95c:	18fb      	adds	r3, r7, r3
     95e:	2200      	movs	r2, #0
     960:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     962:	2314      	movs	r3, #20
     964:	18fb      	adds	r3, r7, r3
     966:	2200      	movs	r2, #0
     968:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     96a:	2310      	movs	r3, #16
     96c:	18fb      	adds	r3, r7, r3
     96e:	2200      	movs	r2, #0
     970:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     972:	68bb      	ldr	r3, [r7, #8]
     974:	2b00      	cmp	r3, #0
     976:	d102      	bne.n	97e <spi_rw+0x42>
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	2b00      	cmp	r3, #0
     97c:	d003      	beq.n	986 <spi_rw+0x4a>
     97e:	1dbb      	adds	r3, r7, #6
     980:	881b      	ldrh	r3, [r3, #0]
     982:	2b00      	cmp	r3, #0
     984:	d102      	bne.n	98c <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     986:	230f      	movs	r3, #15
     988:	425b      	negs	r3, r3
     98a:	e07e      	b.n	a8a <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	2b00      	cmp	r3, #0
     990:	d106      	bne.n	9a0 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     992:	2313      	movs	r3, #19
     994:	18fb      	adds	r3, r7, r3
     996:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     998:	2317      	movs	r3, #23
     99a:	18fb      	adds	r3, r7, r3
     99c:	2201      	movs	r2, #1
     99e:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     9a0:	68bb      	ldr	r3, [r7, #8]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d106      	bne.n	9b4 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     9a6:	2313      	movs	r3, #19
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     9ac:	2316      	movs	r3, #22
     9ae:	18fb      	adds	r3, r7, r3
     9b0:	2201      	movs	r2, #1
     9b2:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     9b4:	4937      	ldr	r1, [pc, #220]	; (a94 <spi_rw+0x158>)
     9b6:	4b38      	ldr	r3, [pc, #224]	; (a98 <spi_rw+0x15c>)
     9b8:	2201      	movs	r2, #1
     9ba:	0018      	movs	r0, r3
     9bc:	4b37      	ldr	r3, [pc, #220]	; (a9c <spi_rw+0x160>)
     9be:	4798      	blx	r3

	while (u16Sz) {
     9c0:	e04c      	b.n	a5c <spi_rw+0x120>
		txd_data = *pu8Mosi;
     9c2:	68fb      	ldr	r3, [r7, #12]
     9c4:	781a      	ldrb	r2, [r3, #0]
     9c6:	2314      	movs	r3, #20
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     9cc:	46c0      	nop			; (mov r8, r8)
     9ce:	4b32      	ldr	r3, [pc, #200]	; (a98 <spi_rw+0x15c>)
     9d0:	0018      	movs	r0, r3
     9d2:	4b33      	ldr	r3, [pc, #204]	; (aa0 <spi_rw+0x164>)
     9d4:	4798      	blx	r3
     9d6:	0003      	movs	r3, r0
     9d8:	001a      	movs	r2, r3
     9da:	2301      	movs	r3, #1
     9dc:	4053      	eors	r3, r2
     9de:	b2db      	uxtb	r3, r3
     9e0:	2b00      	cmp	r3, #0
     9e2:	d1f4      	bne.n	9ce <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     9e4:	46c0      	nop			; (mov r8, r8)
     9e6:	2314      	movs	r3, #20
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	881a      	ldrh	r2, [r3, #0]
     9ec:	4b2a      	ldr	r3, [pc, #168]	; (a98 <spi_rw+0x15c>)
     9ee:	0011      	movs	r1, r2
     9f0:	0018      	movs	r0, r3
     9f2:	4b2c      	ldr	r3, [pc, #176]	; (aa4 <spi_rw+0x168>)
     9f4:	4798      	blx	r3
     9f6:	1e03      	subs	r3, r0, #0
     9f8:	d1f5      	bne.n	9e6 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	4b26      	ldr	r3, [pc, #152]	; (a98 <spi_rw+0x15c>)
     9fe:	0018      	movs	r0, r3
     a00:	4b29      	ldr	r3, [pc, #164]	; (aa8 <spi_rw+0x16c>)
     a02:	4798      	blx	r3
     a04:	0003      	movs	r3, r0
     a06:	001a      	movs	r2, r3
     a08:	2301      	movs	r3, #1
     a0a:	4053      	eors	r3, r2
     a0c:	b2db      	uxtb	r3, r3
     a0e:	2b00      	cmp	r3, #0
     a10:	d1f4      	bne.n	9fc <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	2310      	movs	r3, #16
     a16:	18fa      	adds	r2, r7, r3
     a18:	4b1f      	ldr	r3, [pc, #124]	; (a98 <spi_rw+0x15c>)
     a1a:	0011      	movs	r1, r2
     a1c:	0018      	movs	r0, r3
     a1e:	4b23      	ldr	r3, [pc, #140]	; (aac <spi_rw+0x170>)
     a20:	4798      	blx	r3
     a22:	1e03      	subs	r3, r0, #0
     a24:	d1f6      	bne.n	a14 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     a26:	2310      	movs	r3, #16
     a28:	18fb      	adds	r3, r7, r3
     a2a:	881b      	ldrh	r3, [r3, #0]
     a2c:	b2da      	uxtb	r2, r3
     a2e:	68bb      	ldr	r3, [r7, #8]
     a30:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     a32:	1dbb      	adds	r3, r7, #6
     a34:	881a      	ldrh	r2, [r3, #0]
     a36:	1dbb      	adds	r3, r7, #6
     a38:	3a01      	subs	r2, #1
     a3a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     a3c:	2316      	movs	r3, #22
     a3e:	18fb      	adds	r3, r7, r3
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d102      	bne.n	a4c <spi_rw+0x110>
			pu8Miso++;
     a46:	68bb      	ldr	r3, [r7, #8]
     a48:	3301      	adds	r3, #1
     a4a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     a4c:	2317      	movs	r3, #23
     a4e:	18fb      	adds	r3, r7, r3
     a50:	781b      	ldrb	r3, [r3, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d102      	bne.n	a5c <spi_rw+0x120>
			pu8Mosi++;
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	3301      	adds	r3, #1
     a5a:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     a5c:	1dbb      	adds	r3, r7, #6
     a5e:	881b      	ldrh	r3, [r3, #0]
     a60:	2b00      	cmp	r3, #0
     a62:	d1ae      	bne.n	9c2 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
     a64:	46c0      	nop			; (mov r8, r8)
     a66:	4b0c      	ldr	r3, [pc, #48]	; (a98 <spi_rw+0x15c>)
     a68:	0018      	movs	r0, r3
     a6a:	4b11      	ldr	r3, [pc, #68]	; (ab0 <spi_rw+0x174>)
     a6c:	4798      	blx	r3
     a6e:	0003      	movs	r3, r0
     a70:	001a      	movs	r2, r3
     a72:	2301      	movs	r3, #1
     a74:	4053      	eors	r3, r2
     a76:	b2db      	uxtb	r3, r3
     a78:	2b00      	cmp	r3, #0
     a7a:	d1f4      	bne.n	a66 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     a7c:	4905      	ldr	r1, [pc, #20]	; (a94 <spi_rw+0x158>)
     a7e:	4b06      	ldr	r3, [pc, #24]	; (a98 <spi_rw+0x15c>)
     a80:	2200      	movs	r2, #0
     a82:	0018      	movs	r0, r3
     a84:	4b05      	ldr	r3, [pc, #20]	; (a9c <spi_rw+0x160>)
     a86:	4798      	blx	r3

	return M2M_SUCCESS;
     a88:	2300      	movs	r3, #0
}
     a8a:	0018      	movs	r0, r3
     a8c:	46bd      	mov	sp, r7
     a8e:	b006      	add	sp, #24
     a90:	bd80      	pop	{r7, pc}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	200002c0 	.word	0x200002c0
     a98:	200002c4 	.word	0x200002c4
     a9c:	00007e75 	.word	0x00007e75
     aa0:	0000081d 	.word	0x0000081d
     aa4:	0000086d 	.word	0x0000086d
     aa8:	00000845 	.word	0x00000845
     aac:	000008b5 	.word	0x000008b5
     ab0:	000007f5 	.word	0x000007f5

00000ab4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	b092      	sub	sp, #72	; 0x48
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     abc:	2347      	movs	r3, #71	; 0x47
     abe:	18fb      	adds	r3, r7, r3
     ac0:	2200      	movs	r2, #0
     ac2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     ac4:	2308      	movs	r3, #8
     ac6:	18fb      	adds	r3, r7, r3
     ac8:	0018      	movs	r0, r3
     aca:	4b26      	ldr	r3, [pc, #152]	; (b64 <nm_bus_init+0xb0>)
     acc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     ace:	2308      	movs	r3, #8
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	220e      	movs	r2, #14
     ad4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     ad6:	2308      	movs	r3, #8
     ad8:	18fa      	adds	r2, r7, r3
     ada:	4b23      	ldr	r3, [pc, #140]	; (b68 <nm_bus_init+0xb4>)
     adc:	0011      	movs	r1, r2
     ade:	0018      	movs	r0, r3
     ae0:	4b22      	ldr	r3, [pc, #136]	; (b6c <nm_bus_init+0xb8>)
     ae2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     ae4:	230c      	movs	r3, #12
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	0018      	movs	r0, r3
     aea:	4b21      	ldr	r3, [pc, #132]	; (b70 <nm_bus_init+0xbc>)
     aec:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     aee:	230c      	movs	r3, #12
     af0:	18fb      	adds	r3, r7, r3
     af2:	22c0      	movs	r2, #192	; 0xc0
     af4:	0392      	lsls	r2, r2, #14
     af6:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     af8:	230c      	movs	r3, #12
     afa:	18fb      	adds	r3, r7, r3
     afc:	4a1d      	ldr	r2, [pc, #116]	; (b74 <nm_bus_init+0xc0>)
     afe:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     b00:	230c      	movs	r3, #12
     b02:	18fb      	adds	r3, r7, r3
     b04:	4a1c      	ldr	r2, [pc, #112]	; (b78 <nm_bus_init+0xc4>)
     b06:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     b08:	230c      	movs	r3, #12
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	2201      	movs	r2, #1
     b0e:	4252      	negs	r2, r2
     b10:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     b12:	230c      	movs	r3, #12
     b14:	18fb      	adds	r3, r7, r3
     b16:	4a19      	ldr	r2, [pc, #100]	; (b7c <nm_bus_init+0xc8>)
     b18:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     b1a:	230c      	movs	r3, #12
     b1c:	18fb      	adds	r3, r7, r3
     b1e:	2200      	movs	r2, #0
     b20:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     b22:	230c      	movs	r3, #12
     b24:	18fb      	adds	r3, r7, r3
     b26:	4a16      	ldr	r2, [pc, #88]	; (b80 <nm_bus_init+0xcc>)
     b28:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     b2a:	230c      	movs	r3, #12
     b2c:	18fa      	adds	r2, r7, r3
     b2e:	4915      	ldr	r1, [pc, #84]	; (b84 <nm_bus_init+0xd0>)
     b30:	4b15      	ldr	r3, [pc, #84]	; (b88 <nm_bus_init+0xd4>)
     b32:	0018      	movs	r0, r3
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <nm_bus_init+0xd8>)
     b36:	4798      	blx	r3
     b38:	1e03      	subs	r3, r0, #0
     b3a:	d002      	beq.n	b42 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     b3c:	2306      	movs	r3, #6
     b3e:	425b      	negs	r3, r3
     b40:	e00c      	b.n	b5c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     b42:	4b11      	ldr	r3, [pc, #68]	; (b88 <nm_bus_init+0xd4>)
     b44:	0018      	movs	r0, r3
     b46:	4b12      	ldr	r3, [pc, #72]	; (b90 <nm_bus_init+0xdc>)
     b48:	4798      	blx	r3

	nm_bsp_reset();
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <nm_bus_init+0xe0>)
     b4c:	4798      	blx	r3
	nm_bsp_sleep(1);
     b4e:	2001      	movs	r0, #1
     b50:	4b11      	ldr	r3, [pc, #68]	; (b98 <nm_bus_init+0xe4>)
     b52:	4798      	blx	r3
#endif
	return result;
     b54:	2347      	movs	r3, #71	; 0x47
     b56:	18fb      	adds	r3, r7, r3
     b58:	781b      	ldrb	r3, [r3, #0]
     b5a:	b25b      	sxtb	r3, r3
}
     b5c:	0018      	movs	r0, r3
     b5e:	46bd      	mov	sp, r7
     b60:	b012      	add	sp, #72	; 0x48
     b62:	bd80      	pop	{r7, pc}
     b64:	000006c1 	.word	0x000006c1
     b68:	200002c0 	.word	0x200002c0
     b6c:	000006e5 	.word	0x000006e5
     b70:	0000063d 	.word	0x0000063d
     b74:	000c0002 	.word	0x000c0002
     b78:	000d0002 	.word	0x000d0002
     b7c:	000f0002 	.word	0x000f0002
     b80:	00b71b00 	.word	0x00b71b00
     b84:	42001000 	.word	0x42001000
     b88:	200002c4 	.word	0x200002c4
     b8c:	00007ce5 	.word	0x00007ce5
     b90:	00000749 	.word	0x00000749
     b94:	000003ad 	.word	0x000003ad
     b98:	000003ed 	.word	0x000003ed

00000b9c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     b9c:	b590      	push	{r4, r7, lr}
     b9e:	b085      	sub	sp, #20
     ba0:	af00      	add	r7, sp, #0
     ba2:	0002      	movs	r2, r0
     ba4:	6039      	str	r1, [r7, #0]
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     baa:	230f      	movs	r3, #15
     bac:	18fb      	adds	r3, r7, r3
     bae:	2200      	movs	r2, #0
     bb0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     bb2:	1dfb      	adds	r3, r7, #7
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b03      	cmp	r3, #3
     bb8:	d10f      	bne.n	bda <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     bba:	683b      	ldr	r3, [r7, #0]
     bbc:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	6818      	ldr	r0, [r3, #0]
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	6859      	ldr	r1, [r3, #4]
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	891b      	ldrh	r3, [r3, #8]
     bca:	220f      	movs	r2, #15
     bcc:	18bc      	adds	r4, r7, r2
     bce:	001a      	movs	r2, r3
     bd0:	4b10      	ldr	r3, [pc, #64]	; (c14 <nm_bus_ioctl+0x78>)
     bd2:	4798      	blx	r3
     bd4:	0003      	movs	r3, r0
     bd6:	7023      	strb	r3, [r4, #0]
		}
		break;
     bd8:	e013      	b.n	c02 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     bda:	230f      	movs	r3, #15
     bdc:	18fb      	adds	r3, r7, r3
     bde:	22ff      	movs	r2, #255	; 0xff
     be0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     be2:	230e      	movs	r3, #14
     be4:	33ff      	adds	r3, #255	; 0xff
     be6:	001a      	movs	r2, r3
     be8:	490b      	ldr	r1, [pc, #44]	; (c18 <nm_bus_ioctl+0x7c>)
     bea:	4b0c      	ldr	r3, [pc, #48]	; (c1c <nm_bus_ioctl+0x80>)
     bec:	0018      	movs	r0, r3
     bee:	4b0c      	ldr	r3, [pc, #48]	; (c20 <nm_bus_ioctl+0x84>)
     bf0:	4798      	blx	r3
     bf2:	4b0c      	ldr	r3, [pc, #48]	; (c24 <nm_bus_ioctl+0x88>)
     bf4:	0018      	movs	r0, r3
     bf6:	4b0c      	ldr	r3, [pc, #48]	; (c28 <nm_bus_ioctl+0x8c>)
     bf8:	4798      	blx	r3
     bfa:	200d      	movs	r0, #13
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <nm_bus_ioctl+0x90>)
     bfe:	4798      	blx	r3
			break;
     c00:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     c02:	230f      	movs	r3, #15
     c04:	18fb      	adds	r3, r7, r3
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	b25b      	sxtb	r3, r3
}
     c0a:	0018      	movs	r0, r3
     c0c:	46bd      	mov	sp, r7
     c0e:	b005      	add	sp, #20
     c10:	bd90      	pop	{r4, r7, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	0000093d 	.word	0x0000093d
     c18:	0000e4d4 	.word	0x0000e4d4
     c1c:	0000e4ac 	.word	0x0000e4ac
     c20:	0000cf25 	.word	0x0000cf25
     c24:	0000e4c0 	.word	0x0000e4c0
     c28:	0000d041 	.word	0x0000d041
     c2c:	0000cf59 	.word	0x0000cf59

00000c30 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     c30:	b580      	push	{r7, lr}
     c32:	b082      	sub	sp, #8
     c34:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     c36:	1dfb      	adds	r3, r7, #7
     c38:	2200      	movs	r2, #0
     c3a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     c3c:	1d3b      	adds	r3, r7, #4
     c3e:	0018      	movs	r0, r3
     c40:	4b13      	ldr	r3, [pc, #76]	; (c90 <nm_bus_deinit+0x60>)
     c42:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c44:	1d3b      	adds	r3, r7, #4
     c46:	2200      	movs	r2, #0
     c48:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     c4a:	1d3b      	adds	r3, r7, #4
     c4c:	2200      	movs	r2, #0
     c4e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     c50:	4b10      	ldr	r3, [pc, #64]	; (c94 <nm_bus_deinit+0x64>)
     c52:	0018      	movs	r0, r3
     c54:	4b10      	ldr	r3, [pc, #64]	; (c98 <nm_bus_deinit+0x68>)
     c56:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     c58:	1d3b      	adds	r3, r7, #4
     c5a:	0019      	movs	r1, r3
     c5c:	200c      	movs	r0, #12
     c5e:	4b0f      	ldr	r3, [pc, #60]	; (c9c <nm_bus_deinit+0x6c>)
     c60:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     c62:	1d3b      	adds	r3, r7, #4
     c64:	0019      	movs	r1, r3
     c66:	200f      	movs	r0, #15
     c68:	4b0c      	ldr	r3, [pc, #48]	; (c9c <nm_bus_deinit+0x6c>)
     c6a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     c6c:	1d3b      	adds	r3, r7, #4
     c6e:	0019      	movs	r1, r3
     c70:	200d      	movs	r0, #13
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <nm_bus_deinit+0x6c>)
     c74:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     c76:	1d3b      	adds	r3, r7, #4
     c78:	0019      	movs	r1, r3
     c7a:	200e      	movs	r0, #14
     c7c:	4b07      	ldr	r3, [pc, #28]	; (c9c <nm_bus_deinit+0x6c>)
     c7e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     c80:	1dfb      	adds	r3, r7, #7
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	b25b      	sxtb	r3, r3
}
     c86:	0018      	movs	r0, r3
     c88:	46bd      	mov	sp, r7
     c8a:	b002      	add	sp, #8
     c8c:	bd80      	pop	{r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00000549 	.word	0x00000549
     c94:	200002c4 	.word	0x200002c4
     c98:	00000799 	.word	0x00000799
     c9c:	00007001 	.word	0x00007001

00000ca0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	b084      	sub	sp, #16
     ca4:	af00      	add	r7, sp, #0
     ca6:	60f8      	str	r0, [r7, #12]
     ca8:	60b9      	str	r1, [r7, #8]
     caa:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     cac:	687b      	ldr	r3, [r7, #4]
     cae:	2b00      	cmp	r3, #0
     cb0:	d010      	beq.n	cd4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	781a      	ldrb	r2, [r3, #0]
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	701a      	strb	r2, [r3, #0]
		pDst++;
     cba:	68fb      	ldr	r3, [r7, #12]
     cbc:	3301      	adds	r3, #1
     cbe:	60fb      	str	r3, [r7, #12]
		pSrc++;
     cc0:	68bb      	ldr	r3, [r7, #8]
     cc2:	3301      	adds	r3, #1
     cc4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	3b01      	subs	r3, #1
     cca:	607b      	str	r3, [r7, #4]
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	2b00      	cmp	r3, #0
     cd0:	d1ef      	bne.n	cb2 <m2m_memcpy+0x12>
     cd2:	e000      	b.n	cd6 <m2m_memcpy+0x36>
	if(sz == 0) return;
     cd4:	46c0      	nop			; (mov r8, r8)
}
     cd6:	46bd      	mov	sp, r7
     cd8:	b004      	add	sp, #16
     cda:	bd80      	pop	{r7, pc}

00000cdc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     cdc:	b580      	push	{r7, lr}
     cde:	b084      	sub	sp, #16
     ce0:	af00      	add	r7, sp, #0
     ce2:	60f8      	str	r0, [r7, #12]
     ce4:	607a      	str	r2, [r7, #4]
     ce6:	230b      	movs	r3, #11
     ce8:	18fb      	adds	r3, r7, r3
     cea:	1c0a      	adds	r2, r1, #0
     cec:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d00e      	beq.n	d12 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     cf4:	68fb      	ldr	r3, [r7, #12]
     cf6:	220b      	movs	r2, #11
     cf8:	18ba      	adds	r2, r7, r2
     cfa:	7812      	ldrb	r2, [r2, #0]
     cfc:	701a      	strb	r2, [r3, #0]
		pBuf++;
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	3301      	adds	r3, #1
     d02:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	3b01      	subs	r3, #1
     d08:	607b      	str	r3, [r7, #4]
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	2b00      	cmp	r3, #0
     d0e:	d1f1      	bne.n	cf4 <m2m_memset+0x18>
     d10:	e000      	b.n	d14 <m2m_memset+0x38>
	if(sz == 0) return;
     d12:	46c0      	nop			; (mov r8, r8)
}
     d14:	46bd      	mov	sp, r7
     d16:	b004      	add	sp, #16
     d18:	bd80      	pop	{r7, pc}

00000d1a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     d1a:	b580      	push	{r7, lr}
     d1c:	b084      	sub	sp, #16
     d1e:	af00      	add	r7, sp, #0
     d20:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     d22:	230e      	movs	r3, #14
     d24:	18fb      	adds	r3, r7, r3
     d26:	2200      	movs	r2, #0
     d28:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     d2a:	e009      	b.n	d40 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     d2c:	230e      	movs	r3, #14
     d2e:	18fb      	adds	r3, r7, r3
     d30:	881a      	ldrh	r2, [r3, #0]
     d32:	230e      	movs	r3, #14
     d34:	18fb      	adds	r3, r7, r3
     d36:	3201      	adds	r2, #1
     d38:	801a      	strh	r2, [r3, #0]
		pcStr++;
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	3301      	adds	r3, #1
     d3e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     d40:	687b      	ldr	r3, [r7, #4]
     d42:	781b      	ldrb	r3, [r3, #0]
     d44:	2b00      	cmp	r3, #0
     d46:	d1f1      	bne.n	d2c <m2m_strlen+0x12>
	}
	return u16StrLen;
     d48:	230e      	movs	r3, #14
     d4a:	18fb      	adds	r3, r7, r3
     d4c:	881b      	ldrh	r3, [r3, #0]
}
     d4e:	0018      	movs	r0, r3
     d50:	46bd      	mov	sp, r7
     d52:	b004      	add	sp, #16
     d54:	bd80      	pop	{r7, pc}
	...

00000d58 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <isr+0x18>)
     d5e:	78db      	ldrb	r3, [r3, #3]
     d60:	b2db      	uxtb	r3, r3
     d62:	3301      	adds	r3, #1
     d64:	b2da      	uxtb	r2, r3
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <isr+0x18>)
     d68:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	46bd      	mov	sp, r7
     d6e:	bd80      	pop	{r7, pc}
     d70:	20000300 	.word	0x20000300

00000d74 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     d74:	b590      	push	{r4, r7, lr}
     d76:	b083      	sub	sp, #12
     d78:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     d7a:	1dfb      	adds	r3, r7, #7
     d7c:	2200      	movs	r2, #0
     d7e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     d80:	4b14      	ldr	r3, [pc, #80]	; (dd4 <hif_set_rx_done+0x60>)
     d82:	2200      	movs	r2, #0
     d84:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     d86:	2001      	movs	r0, #1
     d88:	4b13      	ldr	r3, [pc, #76]	; (dd8 <hif_set_rx_done+0x64>)
     d8a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     d8c:	1dfc      	adds	r4, r7, #7
     d8e:	003b      	movs	r3, r7
     d90:	4a12      	ldr	r2, [pc, #72]	; (ddc <hif_set_rx_done+0x68>)
     d92:	0019      	movs	r1, r3
     d94:	0010      	movs	r0, r2
     d96:	4b12      	ldr	r3, [pc, #72]	; (de0 <hif_set_rx_done+0x6c>)
     d98:	4798      	blx	r3
     d9a:	0003      	movs	r3, r0
     d9c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     d9e:	1dfb      	adds	r3, r7, #7
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b25b      	sxtb	r3, r3
     da4:	2b00      	cmp	r3, #0
     da6:	d10d      	bne.n	dc4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     da8:	683b      	ldr	r3, [r7, #0]
     daa:	2202      	movs	r2, #2
     dac:	4313      	orrs	r3, r2
     dae:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     db0:	683b      	ldr	r3, [r7, #0]
     db2:	1dfc      	adds	r4, r7, #7
     db4:	4a09      	ldr	r2, [pc, #36]	; (ddc <hif_set_rx_done+0x68>)
     db6:	0019      	movs	r1, r3
     db8:	0010      	movs	r0, r2
     dba:	4b0a      	ldr	r3, [pc, #40]	; (de4 <hif_set_rx_done+0x70>)
     dbc:	4798      	blx	r3
     dbe:	0003      	movs	r3, r0
     dc0:	7023      	strb	r3, [r4, #0]
     dc2:	e000      	b.n	dc6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     dc4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     dc6:	1dfb      	adds	r3, r7, #7
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	b25b      	sxtb	r3, r3

}
     dcc:	0018      	movs	r0, r3
     dce:	46bd      	mov	sp, r7
     dd0:	b003      	add	sp, #12
     dd2:	bd90      	pop	{r4, r7, pc}
     dd4:	20000300 	.word	0x20000300
     dd8:	0000048d 	.word	0x0000048d
     ddc:	00001070 	.word	0x00001070
     de0:	00002d19 	.word	0x00002d19
     de4:	00002d3d 	.word	0x00002d3d

00000de8 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     de8:	b580      	push	{r7, lr}
     dea:	b082      	sub	sp, #8
     dec:	af00      	add	r7, sp, #0
     dee:	603a      	str	r2, [r7, #0]
     df0:	1dfb      	adds	r3, r7, #7
     df2:	1c02      	adds	r2, r0, #0
     df4:	701a      	strb	r2, [r3, #0]
     df6:	1d3b      	adds	r3, r7, #4
     df8:	1c0a      	adds	r2, r1, #0
     dfa:	801a      	strh	r2, [r3, #0]


}
     dfc:	46c0      	nop			; (mov r8, r8)
     dfe:	46bd      	mov	sp, r7
     e00:	b002      	add	sp, #8
     e02:	bd80      	pop	{r7, pc}

00000e04 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     e04:	b590      	push	{r4, r7, lr}
     e06:	b083      	sub	sp, #12
     e08:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     e0a:	1dfb      	adds	r3, r7, #7
     e0c:	2200      	movs	r2, #0
     e0e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     e10:	4b16      	ldr	r3, [pc, #88]	; (e6c <hif_chip_wake+0x68>)
     e12:	789b      	ldrb	r3, [r3, #2]
     e14:	b2db      	uxtb	r3, r3
     e16:	2b00      	cmp	r3, #0
     e18:	d003      	beq.n	e22 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     e1a:	1dfb      	adds	r3, r7, #7
     e1c:	781b      	ldrb	r3, [r3, #0]
     e1e:	b25b      	sxtb	r3, r3
     e20:	e01f      	b.n	e62 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     e22:	4b12      	ldr	r3, [pc, #72]	; (e6c <hif_chip_wake+0x68>)
     e24:	785b      	ldrb	r3, [r3, #1]
     e26:	b2db      	uxtb	r3, r3
     e28:	2b00      	cmp	r3, #0
     e2a:	d10e      	bne.n	e4a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e2c:	4b0f      	ldr	r3, [pc, #60]	; (e6c <hif_chip_wake+0x68>)
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	b2db      	uxtb	r3, r3
     e32:	2b00      	cmp	r3, #0
     e34:	d009      	beq.n	e4a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     e36:	1dfc      	adds	r4, r7, #7
     e38:	4b0d      	ldr	r3, [pc, #52]	; (e70 <hif_chip_wake+0x6c>)
     e3a:	4798      	blx	r3
     e3c:	0003      	movs	r3, r0
     e3e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     e40:	1dfb      	adds	r3, r7, #7
     e42:	781b      	ldrb	r3, [r3, #0]
     e44:	b25b      	sxtb	r3, r3
     e46:	2b00      	cmp	r3, #0
     e48:	d107      	bne.n	e5a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     e4a:	4b08      	ldr	r3, [pc, #32]	; (e6c <hif_chip_wake+0x68>)
     e4c:	785b      	ldrb	r3, [r3, #1]
     e4e:	b2db      	uxtb	r3, r3
     e50:	3301      	adds	r3, #1
     e52:	b2da      	uxtb	r2, r3
     e54:	4b05      	ldr	r3, [pc, #20]	; (e6c <hif_chip_wake+0x68>)
     e56:	705a      	strb	r2, [r3, #1]
     e58:	e000      	b.n	e5c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     e5a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     e5c:	1dfb      	adds	r3, r7, #7
     e5e:	781b      	ldrb	r3, [r3, #0]
     e60:	b25b      	sxtb	r3, r3
}
     e62:	0018      	movs	r0, r3
     e64:	46bd      	mov	sp, r7
     e66:	b003      	add	sp, #12
     e68:	bd90      	pop	{r4, r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	20000300 	.word	0x20000300
     e70:	000027ed 	.word	0x000027ed

00000e74 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     e74:	b580      	push	{r7, lr}
     e76:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     e78:	4b07      	ldr	r3, [pc, #28]	; (e98 <hif_chip_sleep_sc+0x24>)
     e7a:	785b      	ldrb	r3, [r3, #1]
     e7c:	b2db      	uxtb	r3, r3
     e7e:	2b00      	cmp	r3, #0
     e80:	d006      	beq.n	e90 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     e82:	4b05      	ldr	r3, [pc, #20]	; (e98 <hif_chip_sleep_sc+0x24>)
     e84:	785b      	ldrb	r3, [r3, #1]
     e86:	b2db      	uxtb	r3, r3
     e88:	3b01      	subs	r3, #1
     e8a:	b2da      	uxtb	r2, r3
     e8c:	4b02      	ldr	r3, [pc, #8]	; (e98 <hif_chip_sleep_sc+0x24>)
     e8e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     e90:	2300      	movs	r3, #0
}
     e92:	0018      	movs	r0, r3
     e94:	46bd      	mov	sp, r7
     e96:	bd80      	pop	{r7, pc}
     e98:	20000300 	.word	0x20000300

00000e9c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     e9c:	b590      	push	{r4, r7, lr}
     e9e:	b083      	sub	sp, #12
     ea0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     ea2:	1dfb      	adds	r3, r7, #7
     ea4:	2200      	movs	r2, #0
     ea6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     ea8:	4b10      	ldr	r3, [pc, #64]	; (eec <hif_chip_sleep+0x50>)
     eaa:	785b      	ldrb	r3, [r3, #1]
     eac:	b2db      	uxtb	r3, r3
     eae:	2b00      	cmp	r3, #0
     eb0:	d006      	beq.n	ec0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     eb2:	4b0e      	ldr	r3, [pc, #56]	; (eec <hif_chip_sleep+0x50>)
     eb4:	785b      	ldrb	r3, [r3, #1]
     eb6:	b2db      	uxtb	r3, r3
     eb8:	3b01      	subs	r3, #1
     eba:	b2da      	uxtb	r2, r3
     ebc:	4b0b      	ldr	r3, [pc, #44]	; (eec <hif_chip_sleep+0x50>)
     ebe:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     ec0:	4b0a      	ldr	r3, [pc, #40]	; (eec <hif_chip_sleep+0x50>)
     ec2:	785b      	ldrb	r3, [r3, #1]
     ec4:	b2db      	uxtb	r3, r3
     ec6:	2b00      	cmp	r3, #0
     ec8:	d109      	bne.n	ede <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     eca:	4b08      	ldr	r3, [pc, #32]	; (eec <hif_chip_sleep+0x50>)
     ecc:	781b      	ldrb	r3, [r3, #0]
     ece:	b2db      	uxtb	r3, r3
     ed0:	2b00      	cmp	r3, #0
     ed2:	d004      	beq.n	ede <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     ed4:	1dfc      	adds	r4, r7, #7
     ed6:	4b06      	ldr	r3, [pc, #24]	; (ef0 <hif_chip_sleep+0x54>)
     ed8:	4798      	blx	r3
     eda:	0003      	movs	r3, r0
     edc:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     ede:	1dfb      	adds	r3, r7, #7
     ee0:	781b      	ldrb	r3, [r3, #0]
     ee2:	b25b      	sxtb	r3, r3
}
     ee4:	0018      	movs	r0, r3
     ee6:	46bd      	mov	sp, r7
     ee8:	b003      	add	sp, #12
     eea:	bd90      	pop	{r4, r7, pc}
     eec:	20000300 	.word	0x20000300
     ef0:	00002715 	.word	0x00002715

00000ef4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	b082      	sub	sp, #8
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     efc:	4b09      	ldr	r3, [pc, #36]	; (f24 <hif_init+0x30>)
     efe:	2228      	movs	r2, #40	; 0x28
     f00:	2100      	movs	r1, #0
     f02:	0018      	movs	r0, r3
     f04:	4b08      	ldr	r3, [pc, #32]	; (f28 <hif_init+0x34>)
     f06:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <hif_init+0x38>)
     f0a:	0018      	movs	r0, r3
     f0c:	4b08      	ldr	r3, [pc, #32]	; (f30 <hif_init+0x3c>)
     f0e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     f10:	4b08      	ldr	r3, [pc, #32]	; (f34 <hif_init+0x40>)
     f12:	0019      	movs	r1, r3
     f14:	2003      	movs	r0, #3
     f16:	4b08      	ldr	r3, [pc, #32]	; (f38 <hif_init+0x44>)
     f18:	4798      	blx	r3
	return M2M_SUCCESS;
     f1a:	2300      	movs	r3, #0
}
     f1c:	0018      	movs	r0, r3
     f1e:	46bd      	mov	sp, r7
     f20:	b002      	add	sp, #8
     f22:	bd80      	pop	{r7, pc}
     f24:	20000300 	.word	0x20000300
     f28:	00000cdd 	.word	0x00000cdd
     f2c:	00000d59 	.word	0x00000d59
     f30:	00000415 	.word	0x00000415
     f34:	00000de9 	.word	0x00000de9
     f38:	000019b1 	.word	0x000019b1

00000f3c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     f3c:	b590      	push	{r4, r7, lr}
     f3e:	b089      	sub	sp, #36	; 0x24
     f40:	af00      	add	r7, sp, #0
     f42:	0004      	movs	r4, r0
     f44:	0008      	movs	r0, r1
     f46:	603a      	str	r2, [r7, #0]
     f48:	0019      	movs	r1, r3
     f4a:	1dfb      	adds	r3, r7, #7
     f4c:	1c22      	adds	r2, r4, #0
     f4e:	701a      	strb	r2, [r3, #0]
     f50:	1dbb      	adds	r3, r7, #6
     f52:	1c02      	adds	r2, r0, #0
     f54:	701a      	strb	r2, [r3, #0]
     f56:	1d3b      	adds	r3, r7, #4
     f58:	1c0a      	adds	r2, r1, #0
     f5a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     f5c:	231f      	movs	r3, #31
     f5e:	18fb      	adds	r3, r7, r3
     f60:	22ff      	movs	r2, #255	; 0xff
     f62:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     f64:	1dbb      	adds	r3, r7, #6
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	227f      	movs	r2, #127	; 0x7f
     f6a:	4013      	ands	r3, r2
     f6c:	b2da      	uxtb	r2, r3
     f6e:	2318      	movs	r3, #24
     f70:	18fb      	adds	r3, r7, r3
     f72:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     f74:	2318      	movs	r3, #24
     f76:	18fb      	adds	r3, r7, r3
     f78:	1dfa      	adds	r2, r7, #7
     f7a:	7812      	ldrb	r2, [r2, #0]
     f7c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     f7e:	2318      	movs	r3, #24
     f80:	18fb      	adds	r3, r7, r3
     f82:	2208      	movs	r2, #8
     f84:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f88:	2b00      	cmp	r3, #0
     f8a:	d011      	beq.n	fb0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     f8c:	2318      	movs	r3, #24
     f8e:	18fb      	adds	r3, r7, r3
     f90:	885b      	ldrh	r3, [r3, #2]
     f92:	b29a      	uxth	r2, r3
     f94:	2338      	movs	r3, #56	; 0x38
     f96:	18f9      	adds	r1, r7, r3
     f98:	2334      	movs	r3, #52	; 0x34
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	8809      	ldrh	r1, [r1, #0]
     f9e:	881b      	ldrh	r3, [r3, #0]
     fa0:	18cb      	adds	r3, r1, r3
     fa2:	b29b      	uxth	r3, r3
     fa4:	18d3      	adds	r3, r2, r3
     fa6:	b29a      	uxth	r2, r3
     fa8:	2318      	movs	r3, #24
     faa:	18fb      	adds	r3, r7, r3
     fac:	805a      	strh	r2, [r3, #2]
     fae:	e00a      	b.n	fc6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     fb0:	2318      	movs	r3, #24
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	885b      	ldrh	r3, [r3, #2]
     fb6:	b29a      	uxth	r2, r3
     fb8:	1d3b      	adds	r3, r7, #4
     fba:	881b      	ldrh	r3, [r3, #0]
     fbc:	18d3      	adds	r3, r2, r3
     fbe:	b29a      	uxth	r2, r3
     fc0:	2318      	movs	r3, #24
     fc2:	18fb      	adds	r3, r7, r3
     fc4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     fc6:	231f      	movs	r3, #31
     fc8:	18fc      	adds	r4, r7, r3
     fca:	4bb0      	ldr	r3, [pc, #704]	; (128c <hif_send+0x350>)
     fcc:	4798      	blx	r3
     fce:	0003      	movs	r3, r0
     fd0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     fd2:	231f      	movs	r3, #31
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	781b      	ldrb	r3, [r3, #0]
     fd8:	b25b      	sxtb	r3, r3
     fda:	2b00      	cmp	r3, #0
     fdc:	d000      	beq.n	fe0 <hif_send+0xa4>
     fde:	e127      	b.n	1230 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     fe0:	2300      	movs	r3, #0
     fe2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     fe4:	230e      	movs	r3, #14
     fe6:	18fb      	adds	r3, r7, r3
     fe8:	2200      	movs	r2, #0
     fea:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     fec:	2300      	movs	r3, #0
     fee:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     ff0:	1dfb      	adds	r3, r7, #7
     ff2:	781a      	ldrb	r2, [r3, #0]
     ff4:	697b      	ldr	r3, [r7, #20]
     ff6:	4313      	orrs	r3, r2
     ff8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     ffa:	1dbb      	adds	r3, r7, #6
     ffc:	781b      	ldrb	r3, [r3, #0]
     ffe:	021a      	lsls	r2, r3, #8
    1000:	697b      	ldr	r3, [r7, #20]
    1002:	4313      	orrs	r3, r2
    1004:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    1006:	2318      	movs	r3, #24
    1008:	18fb      	adds	r3, r7, r3
    100a:	885b      	ldrh	r3, [r3, #2]
    100c:	b29b      	uxth	r3, r3
    100e:	041a      	lsls	r2, r3, #16
    1010:	697b      	ldr	r3, [r7, #20]
    1012:	4313      	orrs	r3, r2
    1014:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1016:	697b      	ldr	r3, [r7, #20]
    1018:	221f      	movs	r2, #31
    101a:	18bc      	adds	r4, r7, r2
    101c:	4a9c      	ldr	r2, [pc, #624]	; (1290 <hif_send+0x354>)
    101e:	0019      	movs	r1, r3
    1020:	0010      	movs	r0, r2
    1022:	4b9c      	ldr	r3, [pc, #624]	; (1294 <hif_send+0x358>)
    1024:	4798      	blx	r3
    1026:	0003      	movs	r3, r0
    1028:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    102a:	231f      	movs	r3, #31
    102c:	18fb      	adds	r3, r7, r3
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	b25b      	sxtb	r3, r3
    1032:	2b00      	cmp	r3, #0
    1034:	d000      	beq.n	1038 <hif_send+0xfc>
    1036:	e115      	b.n	1264 <hif_send+0x328>

		reg = 0UL;
    1038:	2300      	movs	r3, #0
    103a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    103c:	697b      	ldr	r3, [r7, #20]
    103e:	2202      	movs	r2, #2
    1040:	4313      	orrs	r3, r2
    1042:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1044:	697b      	ldr	r3, [r7, #20]
    1046:	221f      	movs	r2, #31
    1048:	18bc      	adds	r4, r7, r2
    104a:	4a93      	ldr	r2, [pc, #588]	; (1298 <hif_send+0x35c>)
    104c:	0019      	movs	r1, r3
    104e:	0010      	movs	r0, r2
    1050:	4b90      	ldr	r3, [pc, #576]	; (1294 <hif_send+0x358>)
    1052:	4798      	blx	r3
    1054:	0003      	movs	r3, r0
    1056:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1058:	231f      	movs	r3, #31
    105a:	18fb      	adds	r3, r7, r3
    105c:	781b      	ldrb	r3, [r3, #0]
    105e:	b25b      	sxtb	r3, r3
    1060:	2b00      	cmp	r3, #0
    1062:	d000      	beq.n	1066 <hif_send+0x12a>
    1064:	e100      	b.n	1268 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    1066:	2300      	movs	r3, #0
    1068:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    106a:	230e      	movs	r3, #14
    106c:	18fb      	adds	r3, r7, r3
    106e:	2200      	movs	r2, #0
    1070:	801a      	strh	r2, [r3, #0]
    1072:	e04f      	b.n	1114 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1074:	231f      	movs	r3, #31
    1076:	18fc      	adds	r4, r7, r3
    1078:	2314      	movs	r3, #20
    107a:	18fb      	adds	r3, r7, r3
    107c:	4a86      	ldr	r2, [pc, #536]	; (1298 <hif_send+0x35c>)
    107e:	0019      	movs	r1, r3
    1080:	0010      	movs	r0, r2
    1082:	4b86      	ldr	r3, [pc, #536]	; (129c <hif_send+0x360>)
    1084:	4798      	blx	r3
    1086:	0003      	movs	r3, r0
    1088:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    108a:	231f      	movs	r3, #31
    108c:	18fb      	adds	r3, r7, r3
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	b25b      	sxtb	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d146      	bne.n	1124 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    1096:	230e      	movs	r3, #14
    1098:	18fb      	adds	r3, r7, r3
    109a:	881b      	ldrh	r3, [r3, #0]
    109c:	b29a      	uxth	r2, r3
    109e:	23f4      	movs	r3, #244	; 0xf4
    10a0:	33ff      	adds	r3, #255	; 0xff
    10a2:	429a      	cmp	r2, r3
    10a4:	d915      	bls.n	10d2 <hif_send+0x196>
				if(cnt < 501) {
    10a6:	230e      	movs	r3, #14
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	881b      	ldrh	r3, [r3, #0]
    10ac:	b29a      	uxth	r2, r3
    10ae:	23fa      	movs	r3, #250	; 0xfa
    10b0:	005b      	lsls	r3, r3, #1
    10b2:	429a      	cmp	r2, r3
    10b4:	d80a      	bhi.n	10cc <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    10b6:	4b7a      	ldr	r3, [pc, #488]	; (12a0 <hif_send+0x364>)
    10b8:	0018      	movs	r0, r3
    10ba:	4b7a      	ldr	r3, [pc, #488]	; (12a4 <hif_send+0x368>)
    10bc:	4798      	blx	r3
    10be:	4b7a      	ldr	r3, [pc, #488]	; (12a8 <hif_send+0x36c>)
    10c0:	0018      	movs	r0, r3
    10c2:	4b7a      	ldr	r3, [pc, #488]	; (12ac <hif_send+0x370>)
    10c4:	4798      	blx	r3
    10c6:	200d      	movs	r0, #13
    10c8:	4b79      	ldr	r3, [pc, #484]	; (12b0 <hif_send+0x374>)
    10ca:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    10cc:	2001      	movs	r0, #1
    10ce:	4b79      	ldr	r3, [pc, #484]	; (12b4 <hif_send+0x378>)
    10d0:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    10d2:	697b      	ldr	r3, [r7, #20]
    10d4:	2202      	movs	r2, #2
    10d6:	4013      	ands	r3, r2
    10d8:	d113      	bne.n	1102 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    10da:	231f      	movs	r3, #31
    10dc:	18fc      	adds	r4, r7, r3
    10de:	2310      	movs	r3, #16
    10e0:	18fb      	adds	r3, r7, r3
    10e2:	4a75      	ldr	r2, [pc, #468]	; (12b8 <hif_send+0x37c>)
    10e4:	0019      	movs	r1, r3
    10e6:	0010      	movs	r0, r2
    10e8:	4b6c      	ldr	r3, [pc, #432]	; (129c <hif_send+0x360>)
    10ea:	4798      	blx	r3
    10ec:	0003      	movs	r3, r0
    10ee:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    10f0:	231f      	movs	r3, #31
    10f2:	18fb      	adds	r3, r7, r3
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	b25b      	sxtb	r3, r3
    10f8:	2b00      	cmp	r3, #0
    10fa:	d015      	beq.n	1128 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    10fc:	2300      	movs	r3, #0
    10fe:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1100:	e0b9      	b.n	1276 <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    1102:	230e      	movs	r3, #14
    1104:	18fb      	adds	r3, r7, r3
    1106:	881b      	ldrh	r3, [r3, #0]
    1108:	b29b      	uxth	r3, r3
    110a:	3301      	adds	r3, #1
    110c:	b29a      	uxth	r2, r3
    110e:	230e      	movs	r3, #14
    1110:	18fb      	adds	r3, r7, r3
    1112:	801a      	strh	r2, [r3, #0]
    1114:	230e      	movs	r3, #14
    1116:	18fb      	adds	r3, r7, r3
    1118:	881b      	ldrh	r3, [r3, #0]
    111a:	b29b      	uxth	r3, r3
    111c:	4a67      	ldr	r2, [pc, #412]	; (12bc <hif_send+0x380>)
    111e:	4293      	cmp	r3, r2
    1120:	d9a8      	bls.n	1074 <hif_send+0x138>
    1122:	e002      	b.n	112a <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    1124:	46c0      	nop			; (mov r8, r8)
    1126:	e000      	b.n	112a <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    1128:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    112a:	693b      	ldr	r3, [r7, #16]
    112c:	2b00      	cmp	r3, #0
    112e:	d100      	bne.n	1132 <hif_send+0x1f6>
    1130:	e073      	b.n	121a <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1132:	693b      	ldr	r3, [r7, #16]
    1134:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1136:	2318      	movs	r3, #24
    1138:	18fb      	adds	r3, r7, r3
    113a:	885b      	ldrh	r3, [r3, #2]
    113c:	b29a      	uxth	r2, r3
    113e:	2318      	movs	r3, #24
    1140:	18fb      	adds	r3, r7, r3
    1142:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1144:	68bb      	ldr	r3, [r7, #8]
    1146:	221f      	movs	r2, #31
    1148:	18bc      	adds	r4, r7, r2
    114a:	2218      	movs	r2, #24
    114c:	18b9      	adds	r1, r7, r2
    114e:	2208      	movs	r2, #8
    1150:	0018      	movs	r0, r3
    1152:	4b5b      	ldr	r3, [pc, #364]	; (12c0 <hif_send+0x384>)
    1154:	4798      	blx	r3
    1156:	0003      	movs	r3, r0
    1158:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    115a:	231f      	movs	r3, #31
    115c:	18fb      	adds	r3, r7, r3
    115e:	781b      	ldrb	r3, [r3, #0]
    1160:	b25b      	sxtb	r3, r3
    1162:	2b00      	cmp	r3, #0
    1164:	d000      	beq.n	1168 <hif_send+0x22c>
    1166:	e081      	b.n	126c <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	3308      	adds	r3, #8
    116c:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    116e:	683b      	ldr	r3, [r7, #0]
    1170:	2b00      	cmp	r3, #0
    1172:	d015      	beq.n	11a0 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1174:	68b8      	ldr	r0, [r7, #8]
    1176:	1d3b      	adds	r3, r7, #4
    1178:	881a      	ldrh	r2, [r3, #0]
    117a:	231f      	movs	r3, #31
    117c:	18fc      	adds	r4, r7, r3
    117e:	683b      	ldr	r3, [r7, #0]
    1180:	0019      	movs	r1, r3
    1182:	4b4f      	ldr	r3, [pc, #316]	; (12c0 <hif_send+0x384>)
    1184:	4798      	blx	r3
    1186:	0003      	movs	r3, r0
    1188:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    118a:	231f      	movs	r3, #31
    118c:	18fb      	adds	r3, r7, r3
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	b25b      	sxtb	r3, r3
    1192:	2b00      	cmp	r3, #0
    1194:	d16c      	bne.n	1270 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    1196:	1d3b      	adds	r3, r7, #4
    1198:	881a      	ldrh	r2, [r3, #0]
    119a:	68bb      	ldr	r3, [r7, #8]
    119c:	18d3      	adds	r3, r2, r3
    119e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    11a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11a2:	2b00      	cmp	r3, #0
    11a4:	d021      	beq.n	11ea <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    11a6:	2338      	movs	r3, #56	; 0x38
    11a8:	18fb      	adds	r3, r7, r3
    11aa:	881a      	ldrh	r2, [r3, #0]
    11ac:	1d3b      	adds	r3, r7, #4
    11ae:	881b      	ldrh	r3, [r3, #0]
    11b0:	1ad3      	subs	r3, r2, r3
    11b2:	001a      	movs	r2, r3
    11b4:	68bb      	ldr	r3, [r7, #8]
    11b6:	18d3      	adds	r3, r2, r3
    11b8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    11ba:	68b8      	ldr	r0, [r7, #8]
    11bc:	2334      	movs	r3, #52	; 0x34
    11be:	18fb      	adds	r3, r7, r3
    11c0:	881a      	ldrh	r2, [r3, #0]
    11c2:	231f      	movs	r3, #31
    11c4:	18fc      	adds	r4, r7, r3
    11c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11c8:	0019      	movs	r1, r3
    11ca:	4b3d      	ldr	r3, [pc, #244]	; (12c0 <hif_send+0x384>)
    11cc:	4798      	blx	r3
    11ce:	0003      	movs	r3, r0
    11d0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    11d2:	231f      	movs	r3, #31
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	b25b      	sxtb	r3, r3
    11da:	2b00      	cmp	r3, #0
    11dc:	d14a      	bne.n	1274 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    11de:	2334      	movs	r3, #52	; 0x34
    11e0:	18fb      	adds	r3, r7, r3
    11e2:	881a      	ldrh	r2, [r3, #0]
    11e4:	68bb      	ldr	r3, [r7, #8]
    11e6:	18d3      	adds	r3, r2, r3
    11e8:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    11ea:	693b      	ldr	r3, [r7, #16]
    11ec:	009b      	lsls	r3, r3, #2
    11ee:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    11f0:	697b      	ldr	r3, [r7, #20]
    11f2:	2202      	movs	r2, #2
    11f4:	4313      	orrs	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    11f8:	697b      	ldr	r3, [r7, #20]
    11fa:	221f      	movs	r2, #31
    11fc:	18bc      	adds	r4, r7, r2
    11fe:	4a31      	ldr	r2, [pc, #196]	; (12c4 <hif_send+0x388>)
    1200:	0019      	movs	r1, r3
    1202:	0010      	movs	r0, r2
    1204:	4b23      	ldr	r3, [pc, #140]	; (1294 <hif_send+0x358>)
    1206:	4798      	blx	r3
    1208:	0003      	movs	r3, r0
    120a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    120c:	231f      	movs	r3, #31
    120e:	18fb      	adds	r3, r7, r3
    1210:	781b      	ldrb	r3, [r3, #0]
    1212:	b25b      	sxtb	r3, r3
    1214:	2b00      	cmp	r3, #0
    1216:	d01a      	beq.n	124e <hif_send+0x312>
    1218:	e02d      	b.n	1276 <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    121a:	231f      	movs	r3, #31
    121c:	18fc      	adds	r4, r7, r3
    121e:	4b2a      	ldr	r3, [pc, #168]	; (12c8 <hif_send+0x38c>)
    1220:	4798      	blx	r3
    1222:	0003      	movs	r3, r0
    1224:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    1226:	231f      	movs	r3, #31
    1228:	18fb      	adds	r3, r7, r3
    122a:	22fd      	movs	r2, #253	; 0xfd
    122c:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    122e:	e024      	b.n	127a <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1230:	23cb      	movs	r3, #203	; 0xcb
    1232:	005a      	lsls	r2, r3, #1
    1234:	4925      	ldr	r1, [pc, #148]	; (12cc <hif_send+0x390>)
    1236:	4b26      	ldr	r3, [pc, #152]	; (12d0 <hif_send+0x394>)
    1238:	0018      	movs	r0, r3
    123a:	4b1a      	ldr	r3, [pc, #104]	; (12a4 <hif_send+0x368>)
    123c:	4798      	blx	r3
    123e:	4b25      	ldr	r3, [pc, #148]	; (12d4 <hif_send+0x398>)
    1240:	0018      	movs	r0, r3
    1242:	4b1a      	ldr	r3, [pc, #104]	; (12ac <hif_send+0x370>)
    1244:	4798      	blx	r3
    1246:	200d      	movs	r0, #13
    1248:	4b19      	ldr	r3, [pc, #100]	; (12b0 <hif_send+0x374>)
    124a:	4798      	blx	r3
		goto ERR2;
    124c:	e015      	b.n	127a <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    124e:	231f      	movs	r3, #31
    1250:	18fc      	adds	r4, r7, r3
    1252:	4b1d      	ldr	r3, [pc, #116]	; (12c8 <hif_send+0x38c>)
    1254:	4798      	blx	r3
    1256:	0003      	movs	r3, r0
    1258:	7023      	strb	r3, [r4, #0]
	return ret;
    125a:	231f      	movs	r3, #31
    125c:	18fb      	adds	r3, r7, r3
    125e:	781b      	ldrb	r3, [r3, #0]
    1260:	b25b      	sxtb	r3, r3
    1262:	e00e      	b.n	1282 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    1264:	46c0      	nop			; (mov r8, r8)
    1266:	e006      	b.n	1276 <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    1268:	46c0      	nop			; (mov r8, r8)
    126a:	e004      	b.n	1276 <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    126c:	46c0      	nop			; (mov r8, r8)
    126e:	e002      	b.n	1276 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    1270:	46c0      	nop			; (mov r8, r8)
    1272:	e000      	b.n	1276 <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    1274:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    1276:	4b18      	ldr	r3, [pc, #96]	; (12d8 <hif_send+0x39c>)
    1278:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    127a:	231f      	movs	r3, #31
    127c:	18fb      	adds	r3, r7, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	b25b      	sxtb	r3, r3
}
    1282:	0018      	movs	r0, r3
    1284:	46bd      	mov	sp, r7
    1286:	b009      	add	sp, #36	; 0x24
    1288:	bd90      	pop	{r4, r7, pc}
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	00000e05 	.word	0x00000e05
    1290:	0000108c 	.word	0x0000108c
    1294:	00002d3d 	.word	0x00002d3d
    1298:	00001078 	.word	0x00001078
    129c:	00002d19 	.word	0x00002d19
    12a0:	0000e4e4 	.word	0x0000e4e4
    12a4:	0000cf25 	.word	0x0000cf25
    12a8:	0000e4f0 	.word	0x0000e4f0
    12ac:	0000d041 	.word	0x0000d041
    12b0:	0000cf59 	.word	0x0000cf59
    12b4:	000003ed 	.word	0x000003ed
    12b8:	00150400 	.word	0x00150400
    12bc:	000003e7 	.word	0x000003e7
    12c0:	00002e85 	.word	0x00002e85
    12c4:	0000106c 	.word	0x0000106c
    12c8:	00000e9d 	.word	0x00000e9d
    12cc:	0000e7f8 	.word	0x0000e7f8
    12d0:	0000e500 	.word	0x0000e500
    12d4:	0000e514 	.word	0x0000e514
    12d8:	00000e75 	.word	0x00000e75

000012dc <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    12dc:	b590      	push	{r4, r7, lr}
    12de:	b087      	sub	sp, #28
    12e0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    12e2:	230f      	movs	r3, #15
    12e4:	18fb      	adds	r3, r7, r3
    12e6:	2200      	movs	r2, #0
    12e8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    12ea:	230f      	movs	r3, #15
    12ec:	18fc      	adds	r4, r7, r3
    12ee:	2308      	movs	r3, #8
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	4ad6      	ldr	r2, [pc, #856]	; (164c <hif_isr+0x370>)
    12f4:	0019      	movs	r1, r3
    12f6:	0010      	movs	r0, r2
    12f8:	4bd5      	ldr	r3, [pc, #852]	; (1650 <hif_isr+0x374>)
    12fa:	4798      	blx	r3
    12fc:	0003      	movs	r3, r0
    12fe:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1300:	230f      	movs	r3, #15
    1302:	18fb      	adds	r3, r7, r3
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	b25b      	sxtb	r3, r3
    1308:	2b00      	cmp	r3, #0
    130a:	d000      	beq.n	130e <hif_isr+0x32>
    130c:	e217      	b.n	173e <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    130e:	68bb      	ldr	r3, [r7, #8]
    1310:	2201      	movs	r2, #1
    1312:	4013      	ands	r3, r2
    1314:	d100      	bne.n	1318 <hif_isr+0x3c>
    1316:	e1fd      	b.n	1714 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    1318:	2000      	movs	r0, #0
    131a:	4bce      	ldr	r3, [pc, #824]	; (1654 <hif_isr+0x378>)
    131c:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    131e:	68bb      	ldr	r3, [r7, #8]
    1320:	2201      	movs	r2, #1
    1322:	4393      	bics	r3, r2
    1324:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1326:	68bb      	ldr	r3, [r7, #8]
    1328:	220f      	movs	r2, #15
    132a:	18bc      	adds	r4, r7, r2
    132c:	4ac7      	ldr	r2, [pc, #796]	; (164c <hif_isr+0x370>)
    132e:	0019      	movs	r1, r3
    1330:	0010      	movs	r0, r2
    1332:	4bc9      	ldr	r3, [pc, #804]	; (1658 <hif_isr+0x37c>)
    1334:	4798      	blx	r3
    1336:	0003      	movs	r3, r0
    1338:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    133a:	230f      	movs	r3, #15
    133c:	18fb      	adds	r3, r7, r3
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	b25b      	sxtb	r3, r3
    1342:	2b00      	cmp	r3, #0
    1344:	d000      	beq.n	1348 <hif_isr+0x6c>
    1346:	e208      	b.n	175a <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    1348:	4bc4      	ldr	r3, [pc, #784]	; (165c <hif_isr+0x380>)
    134a:	2201      	movs	r2, #1
    134c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    134e:	68bb      	ldr	r3, [r7, #8]
    1350:	089b      	lsrs	r3, r3, #2
    1352:	b29a      	uxth	r2, r3
    1354:	230c      	movs	r3, #12
    1356:	18fb      	adds	r3, r7, r3
    1358:	0512      	lsls	r2, r2, #20
    135a:	0d12      	lsrs	r2, r2, #20
    135c:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    135e:	230c      	movs	r3, #12
    1360:	18fb      	adds	r3, r7, r3
    1362:	881b      	ldrh	r3, [r3, #0]
    1364:	2b00      	cmp	r3, #0
    1366:	d100      	bne.n	136a <hif_isr+0x8e>
    1368:	e1c1      	b.n	16ee <hif_isr+0x412>
				uint32 address = 0;
    136a:	2300      	movs	r3, #0
    136c:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    136e:	230f      	movs	r3, #15
    1370:	18fc      	adds	r4, r7, r3
    1372:	003b      	movs	r3, r7
    1374:	4aba      	ldr	r2, [pc, #744]	; (1660 <hif_isr+0x384>)
    1376:	0019      	movs	r1, r3
    1378:	0010      	movs	r0, r2
    137a:	4bb5      	ldr	r3, [pc, #724]	; (1650 <hif_isr+0x374>)
    137c:	4798      	blx	r3
    137e:	0003      	movs	r3, r0
    1380:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1382:	230f      	movs	r3, #15
    1384:	18fb      	adds	r3, r7, r3
    1386:	781b      	ldrb	r3, [r3, #0]
    1388:	b25b      	sxtb	r3, r3
    138a:	2b00      	cmp	r3, #0
    138c:	d012      	beq.n	13b4 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    138e:	23c8      	movs	r3, #200	; 0xc8
    1390:	33ff      	adds	r3, #255	; 0xff
    1392:	001a      	movs	r2, r3
    1394:	49b3      	ldr	r1, [pc, #716]	; (1664 <hif_isr+0x388>)
    1396:	4bb4      	ldr	r3, [pc, #720]	; (1668 <hif_isr+0x38c>)
    1398:	0018      	movs	r0, r3
    139a:	4bb4      	ldr	r3, [pc, #720]	; (166c <hif_isr+0x390>)
    139c:	4798      	blx	r3
    139e:	4bb4      	ldr	r3, [pc, #720]	; (1670 <hif_isr+0x394>)
    13a0:	0018      	movs	r0, r3
    13a2:	4bb4      	ldr	r3, [pc, #720]	; (1674 <hif_isr+0x398>)
    13a4:	4798      	blx	r3
    13a6:	200d      	movs	r0, #13
    13a8:	4bb3      	ldr	r3, [pc, #716]	; (1678 <hif_isr+0x39c>)
    13aa:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    13ac:	2001      	movs	r0, #1
    13ae:	4ba9      	ldr	r3, [pc, #676]	; (1654 <hif_isr+0x378>)
    13b0:	4798      	blx	r3
					goto ERR1;
    13b2:	e1d3      	b.n	175c <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    13b4:	683a      	ldr	r2, [r7, #0]
    13b6:	4ba9      	ldr	r3, [pc, #676]	; (165c <hif_isr+0x380>)
    13b8:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    13ba:	230c      	movs	r3, #12
    13bc:	18fb      	adds	r3, r7, r3
    13be:	881a      	ldrh	r2, [r3, #0]
    13c0:	4ba6      	ldr	r3, [pc, #664]	; (165c <hif_isr+0x380>)
    13c2:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    13c4:	683b      	ldr	r3, [r7, #0]
    13c6:	220f      	movs	r2, #15
    13c8:	18bc      	adds	r4, r7, r2
    13ca:	1d39      	adds	r1, r7, #4
    13cc:	2204      	movs	r2, #4
    13ce:	0018      	movs	r0, r3
    13d0:	4baa      	ldr	r3, [pc, #680]	; (167c <hif_isr+0x3a0>)
    13d2:	4798      	blx	r3
    13d4:	0003      	movs	r3, r0
    13d6:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    13d8:	1d3b      	adds	r3, r7, #4
    13da:	885b      	ldrh	r3, [r3, #2]
    13dc:	b29a      	uxth	r2, r3
    13de:	1d3b      	adds	r3, r7, #4
    13e0:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    13e2:	230f      	movs	r3, #15
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	b25b      	sxtb	r3, r3
    13ea:	2b00      	cmp	r3, #0
    13ec:	d012      	beq.n	1414 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    13ee:	23d2      	movs	r3, #210	; 0xd2
    13f0:	33ff      	adds	r3, #255	; 0xff
    13f2:	001a      	movs	r2, r3
    13f4:	499b      	ldr	r1, [pc, #620]	; (1664 <hif_isr+0x388>)
    13f6:	4b9c      	ldr	r3, [pc, #624]	; (1668 <hif_isr+0x38c>)
    13f8:	0018      	movs	r0, r3
    13fa:	4b9c      	ldr	r3, [pc, #624]	; (166c <hif_isr+0x390>)
    13fc:	4798      	blx	r3
    13fe:	4ba0      	ldr	r3, [pc, #640]	; (1680 <hif_isr+0x3a4>)
    1400:	0018      	movs	r0, r3
    1402:	4b9c      	ldr	r3, [pc, #624]	; (1674 <hif_isr+0x398>)
    1404:	4798      	blx	r3
    1406:	200d      	movs	r0, #13
    1408:	4b9b      	ldr	r3, [pc, #620]	; (1678 <hif_isr+0x39c>)
    140a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    140c:	2001      	movs	r0, #1
    140e:	4b91      	ldr	r3, [pc, #580]	; (1654 <hif_isr+0x378>)
    1410:	4798      	blx	r3
					goto ERR1;
    1412:	e1a3      	b.n	175c <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1414:	1d3b      	adds	r3, r7, #4
    1416:	885b      	ldrh	r3, [r3, #2]
    1418:	b29b      	uxth	r3, r3
    141a:	220c      	movs	r2, #12
    141c:	18ba      	adds	r2, r7, r2
    141e:	8812      	ldrh	r2, [r2, #0]
    1420:	429a      	cmp	r2, r3
    1422:	d02d      	beq.n	1480 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1424:	230c      	movs	r3, #12
    1426:	18fb      	adds	r3, r7, r3
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	1d3a      	adds	r2, r7, #4
    142c:	8852      	ldrh	r2, [r2, #2]
    142e:	b292      	uxth	r2, r2
    1430:	1a9b      	subs	r3, r3, r2
    1432:	2b04      	cmp	r3, #4
    1434:	dd24      	ble.n	1480 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1436:	23ed      	movs	r3, #237	; 0xed
    1438:	005a      	lsls	r2, r3, #1
    143a:	498a      	ldr	r1, [pc, #552]	; (1664 <hif_isr+0x388>)
    143c:	4b8a      	ldr	r3, [pc, #552]	; (1668 <hif_isr+0x38c>)
    143e:	0018      	movs	r0, r3
    1440:	4b8a      	ldr	r3, [pc, #552]	; (166c <hif_isr+0x390>)
    1442:	4798      	blx	r3
    1444:	230c      	movs	r3, #12
    1446:	18fb      	adds	r3, r7, r3
    1448:	8819      	ldrh	r1, [r3, #0]
    144a:	1d3b      	adds	r3, r7, #4
    144c:	885b      	ldrh	r3, [r3, #2]
    144e:	b29b      	uxth	r3, r3
    1450:	001a      	movs	r2, r3
    1452:	1d3b      	adds	r3, r7, #4
    1454:	781b      	ldrb	r3, [r3, #0]
    1456:	b2db      	uxtb	r3, r3
    1458:	001c      	movs	r4, r3
    145a:	1d3b      	adds	r3, r7, #4
    145c:	785b      	ldrb	r3, [r3, #1]
    145e:	b2db      	uxtb	r3, r3
    1460:	4888      	ldr	r0, [pc, #544]	; (1684 <hif_isr+0x3a8>)
    1462:	9300      	str	r3, [sp, #0]
    1464:	0023      	movs	r3, r4
    1466:	4c81      	ldr	r4, [pc, #516]	; (166c <hif_isr+0x390>)
    1468:	47a0      	blx	r4
    146a:	200d      	movs	r0, #13
    146c:	4b82      	ldr	r3, [pc, #520]	; (1678 <hif_isr+0x39c>)
    146e:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    1470:	2001      	movs	r0, #1
    1472:	4b78      	ldr	r3, [pc, #480]	; (1654 <hif_isr+0x378>)
    1474:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1476:	230f      	movs	r3, #15
    1478:	18fb      	adds	r3, r7, r3
    147a:	22fa      	movs	r2, #250	; 0xfa
    147c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    147e:	e16d      	b.n	175c <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1480:	1d3b      	adds	r3, r7, #4
    1482:	781b      	ldrb	r3, [r3, #0]
    1484:	b2db      	uxtb	r3, r3
    1486:	2b01      	cmp	r3, #1
    1488:	d120      	bne.n	14cc <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    148a:	4b74      	ldr	r3, [pc, #464]	; (165c <hif_isr+0x380>)
    148c:	68db      	ldr	r3, [r3, #12]
    148e:	2b00      	cmp	r3, #0
    1490:	d00d      	beq.n	14ae <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1492:	4b72      	ldr	r3, [pc, #456]	; (165c <hif_isr+0x380>)
    1494:	68db      	ldr	r3, [r3, #12]
    1496:	1d3a      	adds	r2, r7, #4
    1498:	7852      	ldrb	r2, [r2, #1]
    149a:	b2d0      	uxtb	r0, r2
    149c:	1d3a      	adds	r2, r7, #4
    149e:	8852      	ldrh	r2, [r2, #2]
    14a0:	b292      	uxth	r2, r2
    14a2:	3a08      	subs	r2, #8
    14a4:	b291      	uxth	r1, r2
    14a6:	683a      	ldr	r2, [r7, #0]
    14a8:	3208      	adds	r2, #8
    14aa:	4798      	blx	r3
    14ac:	e0fe      	b.n	16ac <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    14ae:	23f3      	movs	r3, #243	; 0xf3
    14b0:	005a      	lsls	r2, r3, #1
    14b2:	496c      	ldr	r1, [pc, #432]	; (1664 <hif_isr+0x388>)
    14b4:	4b6c      	ldr	r3, [pc, #432]	; (1668 <hif_isr+0x38c>)
    14b6:	0018      	movs	r0, r3
    14b8:	4b6c      	ldr	r3, [pc, #432]	; (166c <hif_isr+0x390>)
    14ba:	4798      	blx	r3
    14bc:	4b72      	ldr	r3, [pc, #456]	; (1688 <hif_isr+0x3ac>)
    14be:	0018      	movs	r0, r3
    14c0:	4b6c      	ldr	r3, [pc, #432]	; (1674 <hif_isr+0x398>)
    14c2:	4798      	blx	r3
    14c4:	200d      	movs	r0, #13
    14c6:	4b6c      	ldr	r3, [pc, #432]	; (1678 <hif_isr+0x39c>)
    14c8:	4798      	blx	r3
    14ca:	e0ef      	b.n	16ac <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    14cc:	1d3b      	adds	r3, r7, #4
    14ce:	781b      	ldrb	r3, [r3, #0]
    14d0:	b2db      	uxtb	r3, r3
    14d2:	2b02      	cmp	r3, #2
    14d4:	d120      	bne.n	1518 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    14d6:	4b61      	ldr	r3, [pc, #388]	; (165c <hif_isr+0x380>)
    14d8:	691b      	ldr	r3, [r3, #16]
    14da:	2b00      	cmp	r3, #0
    14dc:	d00d      	beq.n	14fa <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14de:	4b5f      	ldr	r3, [pc, #380]	; (165c <hif_isr+0x380>)
    14e0:	691b      	ldr	r3, [r3, #16]
    14e2:	1d3a      	adds	r2, r7, #4
    14e4:	7852      	ldrb	r2, [r2, #1]
    14e6:	b2d0      	uxtb	r0, r2
    14e8:	1d3a      	adds	r2, r7, #4
    14ea:	8852      	ldrh	r2, [r2, #2]
    14ec:	b292      	uxth	r2, r2
    14ee:	3a08      	subs	r2, #8
    14f0:	b291      	uxth	r1, r2
    14f2:	683a      	ldr	r2, [r7, #0]
    14f4:	3208      	adds	r2, #8
    14f6:	4798      	blx	r3
    14f8:	e0d8      	b.n	16ac <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    14fa:	23f7      	movs	r3, #247	; 0xf7
    14fc:	005a      	lsls	r2, r3, #1
    14fe:	4959      	ldr	r1, [pc, #356]	; (1664 <hif_isr+0x388>)
    1500:	4b59      	ldr	r3, [pc, #356]	; (1668 <hif_isr+0x38c>)
    1502:	0018      	movs	r0, r3
    1504:	4b59      	ldr	r3, [pc, #356]	; (166c <hif_isr+0x390>)
    1506:	4798      	blx	r3
    1508:	4b60      	ldr	r3, [pc, #384]	; (168c <hif_isr+0x3b0>)
    150a:	0018      	movs	r0, r3
    150c:	4b59      	ldr	r3, [pc, #356]	; (1674 <hif_isr+0x398>)
    150e:	4798      	blx	r3
    1510:	200d      	movs	r0, #13
    1512:	4b59      	ldr	r3, [pc, #356]	; (1678 <hif_isr+0x39c>)
    1514:	4798      	blx	r3
    1516:	e0c9      	b.n	16ac <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1518:	1d3b      	adds	r3, r7, #4
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	b2db      	uxtb	r3, r3
    151e:	2b04      	cmp	r3, #4
    1520:	d120      	bne.n	1564 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1522:	4b4e      	ldr	r3, [pc, #312]	; (165c <hif_isr+0x380>)
    1524:	695b      	ldr	r3, [r3, #20]
    1526:	2b00      	cmp	r3, #0
    1528:	d00d      	beq.n	1546 <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    152a:	4b4c      	ldr	r3, [pc, #304]	; (165c <hif_isr+0x380>)
    152c:	695b      	ldr	r3, [r3, #20]
    152e:	1d3a      	adds	r2, r7, #4
    1530:	7852      	ldrb	r2, [r2, #1]
    1532:	b2d0      	uxtb	r0, r2
    1534:	1d3a      	adds	r2, r7, #4
    1536:	8852      	ldrh	r2, [r2, #2]
    1538:	b292      	uxth	r2, r2
    153a:	3a08      	subs	r2, #8
    153c:	b291      	uxth	r1, r2
    153e:	683a      	ldr	r2, [r7, #0]
    1540:	3208      	adds	r2, #8
    1542:	4798      	blx	r3
    1544:	e0b2      	b.n	16ac <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    1546:	23fb      	movs	r3, #251	; 0xfb
    1548:	005a      	lsls	r2, r3, #1
    154a:	4946      	ldr	r1, [pc, #280]	; (1664 <hif_isr+0x388>)
    154c:	4b46      	ldr	r3, [pc, #280]	; (1668 <hif_isr+0x38c>)
    154e:	0018      	movs	r0, r3
    1550:	4b46      	ldr	r3, [pc, #280]	; (166c <hif_isr+0x390>)
    1552:	4798      	blx	r3
    1554:	4b4e      	ldr	r3, [pc, #312]	; (1690 <hif_isr+0x3b4>)
    1556:	0018      	movs	r0, r3
    1558:	4b46      	ldr	r3, [pc, #280]	; (1674 <hif_isr+0x398>)
    155a:	4798      	blx	r3
    155c:	200d      	movs	r0, #13
    155e:	4b46      	ldr	r3, [pc, #280]	; (1678 <hif_isr+0x39c>)
    1560:	4798      	blx	r3
    1562:	e0a3      	b.n	16ac <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1564:	1d3b      	adds	r3, r7, #4
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	b2db      	uxtb	r3, r3
    156a:	2b06      	cmp	r3, #6
    156c:	d11f      	bne.n	15ae <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    156e:	4b3b      	ldr	r3, [pc, #236]	; (165c <hif_isr+0x380>)
    1570:	6a1b      	ldr	r3, [r3, #32]
    1572:	2b00      	cmp	r3, #0
    1574:	d00d      	beq.n	1592 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1576:	4b39      	ldr	r3, [pc, #228]	; (165c <hif_isr+0x380>)
    1578:	6a1b      	ldr	r3, [r3, #32]
    157a:	1d3a      	adds	r2, r7, #4
    157c:	7852      	ldrb	r2, [r2, #1]
    157e:	b2d0      	uxtb	r0, r2
    1580:	1d3a      	adds	r2, r7, #4
    1582:	8852      	ldrh	r2, [r2, #2]
    1584:	b292      	uxth	r2, r2
    1586:	3a08      	subs	r2, #8
    1588:	b291      	uxth	r1, r2
    158a:	683a      	ldr	r2, [r7, #0]
    158c:	3208      	adds	r2, #8
    158e:	4798      	blx	r3
    1590:	e08c      	b.n	16ac <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    1592:	4a40      	ldr	r2, [pc, #256]	; (1694 <hif_isr+0x3b8>)
    1594:	4933      	ldr	r1, [pc, #204]	; (1664 <hif_isr+0x388>)
    1596:	4b34      	ldr	r3, [pc, #208]	; (1668 <hif_isr+0x38c>)
    1598:	0018      	movs	r0, r3
    159a:	4b34      	ldr	r3, [pc, #208]	; (166c <hif_isr+0x390>)
    159c:	4798      	blx	r3
    159e:	4b3e      	ldr	r3, [pc, #248]	; (1698 <hif_isr+0x3bc>)
    15a0:	0018      	movs	r0, r3
    15a2:	4b34      	ldr	r3, [pc, #208]	; (1674 <hif_isr+0x398>)
    15a4:	4798      	blx	r3
    15a6:	200d      	movs	r0, #13
    15a8:	4b33      	ldr	r3, [pc, #204]	; (1678 <hif_isr+0x39c>)
    15aa:	4798      	blx	r3
    15ac:	e07e      	b.n	16ac <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    15ae:	1d3b      	adds	r3, r7, #4
    15b0:	781b      	ldrb	r3, [r3, #0]
    15b2:	b2db      	uxtb	r3, r3
    15b4:	2b07      	cmp	r3, #7
    15b6:	d11f      	bne.n	15f8 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    15b8:	4b28      	ldr	r3, [pc, #160]	; (165c <hif_isr+0x380>)
    15ba:	699b      	ldr	r3, [r3, #24]
    15bc:	2b00      	cmp	r3, #0
    15be:	d00d      	beq.n	15dc <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15c0:	4b26      	ldr	r3, [pc, #152]	; (165c <hif_isr+0x380>)
    15c2:	699b      	ldr	r3, [r3, #24]
    15c4:	1d3a      	adds	r2, r7, #4
    15c6:	7852      	ldrb	r2, [r2, #1]
    15c8:	b2d0      	uxtb	r0, r2
    15ca:	1d3a      	adds	r2, r7, #4
    15cc:	8852      	ldrh	r2, [r2, #2]
    15ce:	b292      	uxth	r2, r2
    15d0:	3a08      	subs	r2, #8
    15d2:	b291      	uxth	r1, r2
    15d4:	683a      	ldr	r2, [r7, #0]
    15d6:	3208      	adds	r2, #8
    15d8:	4798      	blx	r3
    15da:	e067      	b.n	16ac <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    15dc:	4a2f      	ldr	r2, [pc, #188]	; (169c <hif_isr+0x3c0>)
    15de:	4921      	ldr	r1, [pc, #132]	; (1664 <hif_isr+0x388>)
    15e0:	4b21      	ldr	r3, [pc, #132]	; (1668 <hif_isr+0x38c>)
    15e2:	0018      	movs	r0, r3
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <hif_isr+0x390>)
    15e6:	4798      	blx	r3
    15e8:	4b2d      	ldr	r3, [pc, #180]	; (16a0 <hif_isr+0x3c4>)
    15ea:	0018      	movs	r0, r3
    15ec:	4b21      	ldr	r3, [pc, #132]	; (1674 <hif_isr+0x398>)
    15ee:	4798      	blx	r3
    15f0:	200d      	movs	r0, #13
    15f2:	4b21      	ldr	r3, [pc, #132]	; (1678 <hif_isr+0x39c>)
    15f4:	4798      	blx	r3
    15f6:	e059      	b.n	16ac <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    15f8:	1d3b      	adds	r3, r7, #4
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	b2db      	uxtb	r3, r3
    15fe:	2b05      	cmp	r3, #5
    1600:	d111      	bne.n	1626 <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1602:	4b16      	ldr	r3, [pc, #88]	; (165c <hif_isr+0x380>)
    1604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1606:	2b00      	cmp	r3, #0
    1608:	d050      	beq.n	16ac <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    160a:	4b14      	ldr	r3, [pc, #80]	; (165c <hif_isr+0x380>)
    160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    160e:	1d3a      	adds	r2, r7, #4
    1610:	7852      	ldrb	r2, [r2, #1]
    1612:	b2d0      	uxtb	r0, r2
    1614:	1d3a      	adds	r2, r7, #4
    1616:	8852      	ldrh	r2, [r2, #2]
    1618:	b292      	uxth	r2, r2
    161a:	3a08      	subs	r2, #8
    161c:	b291      	uxth	r1, r2
    161e:	683a      	ldr	r2, [r7, #0]
    1620:	3208      	adds	r2, #8
    1622:	4798      	blx	r3
    1624:	e042      	b.n	16ac <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    1626:	4a1f      	ldr	r2, [pc, #124]	; (16a4 <hif_isr+0x3c8>)
    1628:	490e      	ldr	r1, [pc, #56]	; (1664 <hif_isr+0x388>)
    162a:	4b0f      	ldr	r3, [pc, #60]	; (1668 <hif_isr+0x38c>)
    162c:	0018      	movs	r0, r3
    162e:	4b0f      	ldr	r3, [pc, #60]	; (166c <hif_isr+0x390>)
    1630:	4798      	blx	r3
    1632:	4b1d      	ldr	r3, [pc, #116]	; (16a8 <hif_isr+0x3cc>)
    1634:	0018      	movs	r0, r3
    1636:	4b0f      	ldr	r3, [pc, #60]	; (1674 <hif_isr+0x398>)
    1638:	4798      	blx	r3
    163a:	200d      	movs	r0, #13
    163c:	4b0e      	ldr	r3, [pc, #56]	; (1678 <hif_isr+0x39c>)
    163e:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1640:	230f      	movs	r3, #15
    1642:	18fb      	adds	r3, r7, r3
    1644:	22fa      	movs	r2, #250	; 0xfa
    1646:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    1648:	e088      	b.n	175c <hif_isr+0x480>
    164a:	46c0      	nop			; (mov r8, r8)
    164c:	00001070 	.word	0x00001070
    1650:	00002d19 	.word	0x00002d19
    1654:	0000048d 	.word	0x0000048d
    1658:	00002d3d 	.word	0x00002d3d
    165c:	20000300 	.word	0x20000300
    1660:	00001084 	.word	0x00001084
    1664:	0000e804 	.word	0x0000e804
    1668:	0000e500 	.word	0x0000e500
    166c:	0000cf25 	.word	0x0000cf25
    1670:	0000e530 	.word	0x0000e530
    1674:	0000d041 	.word	0x0000d041
    1678:	0000cf59 	.word	0x0000cf59
    167c:	00002d8d 	.word	0x00002d8d
    1680:	0000e554 	.word	0x0000e554
    1684:	0000e56c 	.word	0x0000e56c
    1688:	0000e5ac 	.word	0x0000e5ac
    168c:	0000e5cc 	.word	0x0000e5cc
    1690:	0000e5f0 	.word	0x0000e5f0
    1694:	000001ff 	.word	0x000001ff
    1698:	0000e610 	.word	0x0000e610
    169c:	00000206 	.word	0x00000206
    16a0:	0000e634 	.word	0x0000e634
    16a4:	0000020f 	.word	0x0000020f
    16a8:	0000e658 	.word	0x0000e658
				}
				if(gstrHifCxt.u8HifRXDone)
    16ac:	4b2f      	ldr	r3, [pc, #188]	; (176c <hif_isr+0x490>)
    16ae:	789b      	ldrb	r3, [r3, #2]
    16b0:	b2db      	uxtb	r3, r3
    16b2:	2b00      	cmp	r3, #0
    16b4:	d052      	beq.n	175c <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    16b6:	4a2e      	ldr	r2, [pc, #184]	; (1770 <hif_isr+0x494>)
    16b8:	492e      	ldr	r1, [pc, #184]	; (1774 <hif_isr+0x498>)
    16ba:	4b2f      	ldr	r3, [pc, #188]	; (1778 <hif_isr+0x49c>)
    16bc:	0018      	movs	r0, r3
    16be:	4b2f      	ldr	r3, [pc, #188]	; (177c <hif_isr+0x4a0>)
    16c0:	4798      	blx	r3
    16c2:	1d3b      	adds	r3, r7, #4
    16c4:	781b      	ldrb	r3, [r3, #0]
    16c6:	b2db      	uxtb	r3, r3
    16c8:	0019      	movs	r1, r3
    16ca:	1d3b      	adds	r3, r7, #4
    16cc:	785b      	ldrb	r3, [r3, #1]
    16ce:	b2db      	uxtb	r3, r3
    16d0:	001a      	movs	r2, r3
    16d2:	4b2b      	ldr	r3, [pc, #172]	; (1780 <hif_isr+0x4a4>)
    16d4:	0018      	movs	r0, r3
    16d6:	4b29      	ldr	r3, [pc, #164]	; (177c <hif_isr+0x4a0>)
    16d8:	4798      	blx	r3
    16da:	200d      	movs	r0, #13
    16dc:	4b29      	ldr	r3, [pc, #164]	; (1784 <hif_isr+0x4a8>)
    16de:	4798      	blx	r3
					ret = hif_set_rx_done();
    16e0:	230f      	movs	r3, #15
    16e2:	18fc      	adds	r4, r7, r3
    16e4:	4b28      	ldr	r3, [pc, #160]	; (1788 <hif_isr+0x4ac>)
    16e6:	4798      	blx	r3
    16e8:	0003      	movs	r3, r0
    16ea:	7023      	strb	r3, [r4, #0]
    16ec:	e036      	b.n	175c <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    16ee:	2387      	movs	r3, #135	; 0x87
    16f0:	009a      	lsls	r2, r3, #2
    16f2:	4920      	ldr	r1, [pc, #128]	; (1774 <hif_isr+0x498>)
    16f4:	4b20      	ldr	r3, [pc, #128]	; (1778 <hif_isr+0x49c>)
    16f6:	0018      	movs	r0, r3
    16f8:	4b20      	ldr	r3, [pc, #128]	; (177c <hif_isr+0x4a0>)
    16fa:	4798      	blx	r3
    16fc:	4b23      	ldr	r3, [pc, #140]	; (178c <hif_isr+0x4b0>)
    16fe:	0018      	movs	r0, r3
    1700:	4b23      	ldr	r3, [pc, #140]	; (1790 <hif_isr+0x4b4>)
    1702:	4798      	blx	r3
    1704:	200d      	movs	r0, #13
    1706:	4b1f      	ldr	r3, [pc, #124]	; (1784 <hif_isr+0x4a8>)
    1708:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    170a:	230f      	movs	r3, #15
    170c:	18fb      	adds	r3, r7, r3
    170e:	22fe      	movs	r2, #254	; 0xfe
    1710:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1712:	e023      	b.n	175c <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1714:	2389      	movs	r3, #137	; 0x89
    1716:	009a      	lsls	r2, r3, #2
    1718:	4916      	ldr	r1, [pc, #88]	; (1774 <hif_isr+0x498>)
    171a:	4b17      	ldr	r3, [pc, #92]	; (1778 <hif_isr+0x49c>)
    171c:	0018      	movs	r0, r3
    171e:	4b17      	ldr	r3, [pc, #92]	; (177c <hif_isr+0x4a0>)
    1720:	4798      	blx	r3
    1722:	68ba      	ldr	r2, [r7, #8]
    1724:	4b1b      	ldr	r3, [pc, #108]	; (1794 <hif_isr+0x4b8>)
    1726:	0011      	movs	r1, r2
    1728:	0018      	movs	r0, r3
    172a:	4b14      	ldr	r3, [pc, #80]	; (177c <hif_isr+0x4a0>)
    172c:	4798      	blx	r3
    172e:	200d      	movs	r0, #13
    1730:	4b14      	ldr	r3, [pc, #80]	; (1784 <hif_isr+0x4a8>)
    1732:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1734:	230f      	movs	r3, #15
    1736:	18fb      	adds	r3, r7, r3
    1738:	22f4      	movs	r2, #244	; 0xf4
    173a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    173c:	e00e      	b.n	175c <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    173e:	4a16      	ldr	r2, [pc, #88]	; (1798 <hif_isr+0x4bc>)
    1740:	490c      	ldr	r1, [pc, #48]	; (1774 <hif_isr+0x498>)
    1742:	4b0d      	ldr	r3, [pc, #52]	; (1778 <hif_isr+0x49c>)
    1744:	0018      	movs	r0, r3
    1746:	4b0d      	ldr	r3, [pc, #52]	; (177c <hif_isr+0x4a0>)
    1748:	4798      	blx	r3
    174a:	4b14      	ldr	r3, [pc, #80]	; (179c <hif_isr+0x4c0>)
    174c:	0018      	movs	r0, r3
    174e:	4b10      	ldr	r3, [pc, #64]	; (1790 <hif_isr+0x4b4>)
    1750:	4798      	blx	r3
    1752:	200d      	movs	r0, #13
    1754:	4b0b      	ldr	r3, [pc, #44]	; (1784 <hif_isr+0x4a8>)
    1756:	4798      	blx	r3
		goto ERR1;
    1758:	e000      	b.n	175c <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    175a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    175c:	230f      	movs	r3, #15
    175e:	18fb      	adds	r3, r7, r3
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	b25b      	sxtb	r3, r3
}
    1764:	0018      	movs	r0, r3
    1766:	46bd      	mov	sp, r7
    1768:	b005      	add	sp, #20
    176a:	bd90      	pop	{r4, r7, pc}
    176c:	20000300 	.word	0x20000300
    1770:	00000215 	.word	0x00000215
    1774:	0000e804 	.word	0x0000e804
    1778:	0000e500 	.word	0x0000e500
    177c:	0000cf25 	.word	0x0000cf25
    1780:	0000e670 	.word	0x0000e670
    1784:	0000cf59 	.word	0x0000cf59
    1788:	00000d75 	.word	0x00000d75
    178c:	0000e69c 	.word	0x0000e69c
    1790:	0000d041 	.word	0x0000d041
    1794:	0000e6b0 	.word	0x0000e6b0
    1798:	0000022d 	.word	0x0000022d
    179c:	0000e6cc 	.word	0x0000e6cc

000017a0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    17a0:	b590      	push	{r4, r7, lr}
    17a2:	b083      	sub	sp, #12
    17a4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    17a6:	1dfb      	adds	r3, r7, #7
    17a8:	2200      	movs	r2, #0
    17aa:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    17ac:	e023      	b.n	17f6 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    17ae:	4b18      	ldr	r3, [pc, #96]	; (1810 <hif_handle_isr+0x70>)
    17b0:	78db      	ldrb	r3, [r3, #3]
    17b2:	b2db      	uxtb	r3, r3
    17b4:	3b01      	subs	r3, #1
    17b6:	b2da      	uxtb	r2, r3
    17b8:	4b15      	ldr	r3, [pc, #84]	; (1810 <hif_handle_isr+0x70>)
    17ba:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    17bc:	1dfc      	adds	r4, r7, #7
    17be:	4b15      	ldr	r3, [pc, #84]	; (1814 <hif_handle_isr+0x74>)
    17c0:	4798      	blx	r3
    17c2:	0003      	movs	r3, r0
    17c4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    17c6:	1dfb      	adds	r3, r7, #7
    17c8:	781b      	ldrb	r3, [r3, #0]
    17ca:	b25b      	sxtb	r3, r3
    17cc:	2b00      	cmp	r3, #0
    17ce:	d100      	bne.n	17d2 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    17d0:	e011      	b.n	17f6 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    17d2:	4a11      	ldr	r2, [pc, #68]	; (1818 <hif_handle_isr+0x78>)
    17d4:	4911      	ldr	r1, [pc, #68]	; (181c <hif_handle_isr+0x7c>)
    17d6:	4b12      	ldr	r3, [pc, #72]	; (1820 <hif_handle_isr+0x80>)
    17d8:	0018      	movs	r0, r3
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <hif_handle_isr+0x84>)
    17dc:	4798      	blx	r3
    17de:	1dfb      	adds	r3, r7, #7
    17e0:	2200      	movs	r2, #0
    17e2:	569a      	ldrsb	r2, [r3, r2]
    17e4:	4b10      	ldr	r3, [pc, #64]	; (1828 <hif_handle_isr+0x88>)
    17e6:	0011      	movs	r1, r2
    17e8:	0018      	movs	r0, r3
    17ea:	4b0e      	ldr	r3, [pc, #56]	; (1824 <hif_handle_isr+0x84>)
    17ec:	4798      	blx	r3
    17ee:	200d      	movs	r0, #13
    17f0:	4b0e      	ldr	r3, [pc, #56]	; (182c <hif_handle_isr+0x8c>)
    17f2:	4798      	blx	r3
			ret = hif_isr();
    17f4:	e7e2      	b.n	17bc <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    17f6:	4b06      	ldr	r3, [pc, #24]	; (1810 <hif_handle_isr+0x70>)
    17f8:	78db      	ldrb	r3, [r3, #3]
    17fa:	b2db      	uxtb	r3, r3
    17fc:	2b00      	cmp	r3, #0
    17fe:	d1d6      	bne.n	17ae <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1800:	1dfb      	adds	r3, r7, #7
    1802:	781b      	ldrb	r3, [r3, #0]
    1804:	b25b      	sxtb	r3, r3
}
    1806:	0018      	movs	r0, r3
    1808:	46bd      	mov	sp, r7
    180a:	b003      	add	sp, #12
    180c:	bd90      	pop	{r4, r7, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	20000300 	.word	0x20000300
    1814:	000012dd 	.word	0x000012dd
    1818:	0000024a 	.word	0x0000024a
    181c:	0000e80c 	.word	0x0000e80c
    1820:	0000e500 	.word	0x0000e500
    1824:	0000cf25 	.word	0x0000cf25
    1828:	0000e6f0 	.word	0x0000e6f0
    182c:	0000cf59 	.word	0x0000cf59

00001830 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1830:	b590      	push	{r4, r7, lr}
    1832:	b087      	sub	sp, #28
    1834:	af00      	add	r7, sp, #0
    1836:	60f8      	str	r0, [r7, #12]
    1838:	60b9      	str	r1, [r7, #8]
    183a:	0019      	movs	r1, r3
    183c:	1dbb      	adds	r3, r7, #6
    183e:	801a      	strh	r2, [r3, #0]
    1840:	1d7b      	adds	r3, r7, #5
    1842:	1c0a      	adds	r2, r1, #0
    1844:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    1846:	2317      	movs	r3, #23
    1848:	18fb      	adds	r3, r7, r3
    184a:	2200      	movs	r2, #0
    184c:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    184e:	68fb      	ldr	r3, [r7, #12]
    1850:	2b00      	cmp	r3, #0
    1852:	d006      	beq.n	1862 <hif_receive+0x32>
    1854:	68bb      	ldr	r3, [r7, #8]
    1856:	2b00      	cmp	r3, #0
    1858:	d003      	beq.n	1862 <hif_receive+0x32>
    185a:	1dbb      	adds	r3, r7, #6
    185c:	881b      	ldrh	r3, [r3, #0]
    185e:	2b00      	cmp	r3, #0
    1860:	d11c      	bne.n	189c <hif_receive+0x6c>
	{
		if(isDone)
    1862:	1d7b      	adds	r3, r7, #5
    1864:	781b      	ldrb	r3, [r3, #0]
    1866:	2b00      	cmp	r3, #0
    1868:	d006      	beq.n	1878 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    186a:	2317      	movs	r3, #23
    186c:	18fc      	adds	r4, r7, r3
    186e:	4b42      	ldr	r3, [pc, #264]	; (1978 <hif_receive+0x148>)
    1870:	4798      	blx	r3
    1872:	0003      	movs	r3, r0
    1874:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    1876:	e077      	b.n	1968 <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    1878:	2317      	movs	r3, #23
    187a:	18fb      	adds	r3, r7, r3
    187c:	22f4      	movs	r2, #244	; 0xf4
    187e:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1880:	4a3e      	ldr	r2, [pc, #248]	; (197c <hif_receive+0x14c>)
    1882:	493f      	ldr	r1, [pc, #252]	; (1980 <hif_receive+0x150>)
    1884:	4b3f      	ldr	r3, [pc, #252]	; (1984 <hif_receive+0x154>)
    1886:	0018      	movs	r0, r3
    1888:	4b3f      	ldr	r3, [pc, #252]	; (1988 <hif_receive+0x158>)
    188a:	4798      	blx	r3
    188c:	4b3f      	ldr	r3, [pc, #252]	; (198c <hif_receive+0x15c>)
    188e:	0018      	movs	r0, r3
    1890:	4b3f      	ldr	r3, [pc, #252]	; (1990 <hif_receive+0x160>)
    1892:	4798      	blx	r3
    1894:	200d      	movs	r0, #13
    1896:	4b3f      	ldr	r3, [pc, #252]	; (1994 <hif_receive+0x164>)
    1898:	4798      	blx	r3
		goto ERR1;
    189a:	e065      	b.n	1968 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    189c:	1dbb      	adds	r3, r7, #6
    189e:	881a      	ldrh	r2, [r3, #0]
    18a0:	4b3d      	ldr	r3, [pc, #244]	; (1998 <hif_receive+0x168>)
    18a2:	689b      	ldr	r3, [r3, #8]
    18a4:	429a      	cmp	r2, r3
    18a6:	d915      	bls.n	18d4 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    18a8:	2317      	movs	r3, #23
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	22f4      	movs	r2, #244	; 0xf4
    18ae:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    18b0:	4a3a      	ldr	r2, [pc, #232]	; (199c <hif_receive+0x16c>)
    18b2:	4933      	ldr	r1, [pc, #204]	; (1980 <hif_receive+0x150>)
    18b4:	4b33      	ldr	r3, [pc, #204]	; (1984 <hif_receive+0x154>)
    18b6:	0018      	movs	r0, r3
    18b8:	4b33      	ldr	r3, [pc, #204]	; (1988 <hif_receive+0x158>)
    18ba:	4798      	blx	r3
    18bc:	1dbb      	adds	r3, r7, #6
    18be:	8819      	ldrh	r1, [r3, #0]
    18c0:	4b35      	ldr	r3, [pc, #212]	; (1998 <hif_receive+0x168>)
    18c2:	689a      	ldr	r2, [r3, #8]
    18c4:	4b36      	ldr	r3, [pc, #216]	; (19a0 <hif_receive+0x170>)
    18c6:	0018      	movs	r0, r3
    18c8:	4b2f      	ldr	r3, [pc, #188]	; (1988 <hif_receive+0x158>)
    18ca:	4798      	blx	r3
    18cc:	200d      	movs	r0, #13
    18ce:	4b31      	ldr	r3, [pc, #196]	; (1994 <hif_receive+0x164>)
    18d0:	4798      	blx	r3
		goto ERR1;
    18d2:	e049      	b.n	1968 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    18d4:	4b30      	ldr	r3, [pc, #192]	; (1998 <hif_receive+0x168>)
    18d6:	685a      	ldr	r2, [r3, #4]
    18d8:	68fb      	ldr	r3, [r7, #12]
    18da:	429a      	cmp	r2, r3
    18dc:	d80a      	bhi.n	18f4 <hif_receive+0xc4>
    18de:	1dbb      	adds	r3, r7, #6
    18e0:	881a      	ldrh	r2, [r3, #0]
    18e2:	68fb      	ldr	r3, [r7, #12]
    18e4:	18d2      	adds	r2, r2, r3
    18e6:	4b2c      	ldr	r3, [pc, #176]	; (1998 <hif_receive+0x168>)
    18e8:	6859      	ldr	r1, [r3, #4]
    18ea:	4b2b      	ldr	r3, [pc, #172]	; (1998 <hif_receive+0x168>)
    18ec:	689b      	ldr	r3, [r3, #8]
    18ee:	18cb      	adds	r3, r1, r3
    18f0:	429a      	cmp	r2, r3
    18f2:	d911      	bls.n	1918 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    18f4:	2317      	movs	r3, #23
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	22f4      	movs	r2, #244	; 0xf4
    18fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    18fc:	4a29      	ldr	r2, [pc, #164]	; (19a4 <hif_receive+0x174>)
    18fe:	4920      	ldr	r1, [pc, #128]	; (1980 <hif_receive+0x150>)
    1900:	4b20      	ldr	r3, [pc, #128]	; (1984 <hif_receive+0x154>)
    1902:	0018      	movs	r0, r3
    1904:	4b20      	ldr	r3, [pc, #128]	; (1988 <hif_receive+0x158>)
    1906:	4798      	blx	r3
    1908:	4b27      	ldr	r3, [pc, #156]	; (19a8 <hif_receive+0x178>)
    190a:	0018      	movs	r0, r3
    190c:	4b20      	ldr	r3, [pc, #128]	; (1990 <hif_receive+0x160>)
    190e:	4798      	blx	r3
    1910:	200d      	movs	r0, #13
    1912:	4b20      	ldr	r3, [pc, #128]	; (1994 <hif_receive+0x164>)
    1914:	4798      	blx	r3
		goto ERR1;
    1916:	e027      	b.n	1968 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1918:	1dbb      	adds	r3, r7, #6
    191a:	881a      	ldrh	r2, [r3, #0]
    191c:	2317      	movs	r3, #23
    191e:	18fc      	adds	r4, r7, r3
    1920:	68b9      	ldr	r1, [r7, #8]
    1922:	68fb      	ldr	r3, [r7, #12]
    1924:	0018      	movs	r0, r3
    1926:	4b21      	ldr	r3, [pc, #132]	; (19ac <hif_receive+0x17c>)
    1928:	4798      	blx	r3
    192a:	0003      	movs	r3, r0
    192c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    192e:	2317      	movs	r3, #23
    1930:	18fb      	adds	r3, r7, r3
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	d115      	bne.n	1966 <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    193a:	4b17      	ldr	r3, [pc, #92]	; (1998 <hif_receive+0x168>)
    193c:	685a      	ldr	r2, [r3, #4]
    193e:	4b16      	ldr	r3, [pc, #88]	; (1998 <hif_receive+0x168>)
    1940:	689b      	ldr	r3, [r3, #8]
    1942:	18d2      	adds	r2, r2, r3
    1944:	1dbb      	adds	r3, r7, #6
    1946:	8819      	ldrh	r1, [r3, #0]
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	18cb      	adds	r3, r1, r3
    194c:	429a      	cmp	r2, r3
    194e:	d003      	beq.n	1958 <hif_receive+0x128>
    1950:	1d7b      	adds	r3, r7, #5
    1952:	781b      	ldrb	r3, [r3, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	d007      	beq.n	1968 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    1958:	2317      	movs	r3, #23
    195a:	18fc      	adds	r4, r7, r3
    195c:	4b06      	ldr	r3, [pc, #24]	; (1978 <hif_receive+0x148>)
    195e:	4798      	blx	r3
    1960:	0003      	movs	r3, r0
    1962:	7023      	strb	r3, [r4, #0]
    1964:	e000      	b.n	1968 <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    1966:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    1968:	2317      	movs	r3, #23
    196a:	18fb      	adds	r3, r7, r3
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	b25b      	sxtb	r3, r3
}
    1970:	0018      	movs	r0, r3
    1972:	46bd      	mov	sp, r7
    1974:	b007      	add	sp, #28
    1976:	bd90      	pop	{r4, r7, pc}
    1978:	00000d75 	.word	0x00000d75
    197c:	0000026b 	.word	0x0000026b
    1980:	0000e81c 	.word	0x0000e81c
    1984:	0000e500 	.word	0x0000e500
    1988:	0000cf25 	.word	0x0000cf25
    198c:	0000e720 	.word	0x0000e720
    1990:	0000d041 	.word	0x0000d041
    1994:	0000cf59 	.word	0x0000cf59
    1998:	20000300 	.word	0x20000300
    199c:	00000273 	.word	0x00000273
    19a0:	0000e740 	.word	0x0000e740
    19a4:	00000279 	.word	0x00000279
    19a8:	0000e788 	.word	0x0000e788
    19ac:	00002d8d 	.word	0x00002d8d

000019b0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b084      	sub	sp, #16
    19b4:	af00      	add	r7, sp, #0
    19b6:	0002      	movs	r2, r0
    19b8:	6039      	str	r1, [r7, #0]
    19ba:	1dfb      	adds	r3, r7, #7
    19bc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    19be:	230f      	movs	r3, #15
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	2200      	movs	r2, #0
    19c4:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    19c6:	1dfb      	adds	r3, r7, #7
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	2b07      	cmp	r3, #7
    19cc:	d820      	bhi.n	1a10 <hif_register_cb+0x60>
    19ce:	009a      	lsls	r2, r3, #2
    19d0:	4b1e      	ldr	r3, [pc, #120]	; (1a4c <hif_register_cb+0x9c>)
    19d2:	18d3      	adds	r3, r2, r3
    19d4:	681b      	ldr	r3, [r3, #0]
    19d6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    19d8:	4b1d      	ldr	r3, [pc, #116]	; (1a50 <hif_register_cb+0xa0>)
    19da:	683a      	ldr	r2, [r7, #0]
    19dc:	611a      	str	r2, [r3, #16]
			break;
    19de:	e02c      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    19e0:	4b1b      	ldr	r3, [pc, #108]	; (1a50 <hif_register_cb+0xa0>)
    19e2:	683a      	ldr	r2, [r7, #0]
    19e4:	60da      	str	r2, [r3, #12]
			break;
    19e6:	e028      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    19e8:	4b19      	ldr	r3, [pc, #100]	; (1a50 <hif_register_cb+0xa0>)
    19ea:	683a      	ldr	r2, [r7, #0]
    19ec:	615a      	str	r2, [r3, #20]
			break;
    19ee:	e024      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    19f0:	4b17      	ldr	r3, [pc, #92]	; (1a50 <hif_register_cb+0xa0>)
    19f2:	683a      	ldr	r2, [r7, #0]
    19f4:	61da      	str	r2, [r3, #28]
			break;
    19f6:	e020      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    19f8:	4b15      	ldr	r3, [pc, #84]	; (1a50 <hif_register_cb+0xa0>)
    19fa:	683a      	ldr	r2, [r7, #0]
    19fc:	621a      	str	r2, [r3, #32]
			break;
    19fe:	e01c      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1a00:	4b13      	ldr	r3, [pc, #76]	; (1a50 <hif_register_cb+0xa0>)
    1a02:	683a      	ldr	r2, [r7, #0]
    1a04:	619a      	str	r2, [r3, #24]
			break;
    1a06:	e018      	b.n	1a3a <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    1a08:	4b11      	ldr	r3, [pc, #68]	; (1a50 <hif_register_cb+0xa0>)
    1a0a:	683a      	ldr	r2, [r7, #0]
    1a0c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1a0e:	e014      	b.n	1a3a <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1a10:	4a10      	ldr	r2, [pc, #64]	; (1a54 <hif_register_cb+0xa4>)
    1a12:	4911      	ldr	r1, [pc, #68]	; (1a58 <hif_register_cb+0xa8>)
    1a14:	4b11      	ldr	r3, [pc, #68]	; (1a5c <hif_register_cb+0xac>)
    1a16:	0018      	movs	r0, r3
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <hif_register_cb+0xb0>)
    1a1a:	4798      	blx	r3
    1a1c:	1dfb      	adds	r3, r7, #7
    1a1e:	781a      	ldrb	r2, [r3, #0]
    1a20:	4b10      	ldr	r3, [pc, #64]	; (1a64 <hif_register_cb+0xb4>)
    1a22:	0011      	movs	r1, r2
    1a24:	0018      	movs	r0, r3
    1a26:	4b0e      	ldr	r3, [pc, #56]	; (1a60 <hif_register_cb+0xb0>)
    1a28:	4798      	blx	r3
    1a2a:	200d      	movs	r0, #13
    1a2c:	4b0e      	ldr	r3, [pc, #56]	; (1a68 <hif_register_cb+0xb8>)
    1a2e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1a30:	230f      	movs	r3, #15
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	22f4      	movs	r2, #244	; 0xf4
    1a36:	701a      	strb	r2, [r3, #0]
			break;
    1a38:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    1a3a:	230f      	movs	r3, #15
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	781b      	ldrb	r3, [r3, #0]
    1a40:	b25b      	sxtb	r3, r3
}
    1a42:	0018      	movs	r0, r3
    1a44:	46bd      	mov	sp, r7
    1a46:	b004      	add	sp, #16
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	0000e7d8 	.word	0x0000e7d8
    1a50:	20000300 	.word	0x20000300
    1a54:	000002b1 	.word	0x000002b1
    1a58:	0000e828 	.word	0x0000e828
    1a5c:	0000e500 	.word	0x0000e500
    1a60:	0000cf25 	.word	0x0000cf25
    1a64:	0000e7cc 	.word	0x0000e7cc
    1a68:	0000cf59 	.word	0x0000cf59

00001a6c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1a6c:	b590      	push	{r4, r7, lr}
    1a6e:	b0ad      	sub	sp, #180	; 0xb4
    1a70:	af02      	add	r7, sp, #8
    1a72:	603a      	str	r2, [r7, #0]
    1a74:	1dfb      	adds	r3, r7, #7
    1a76:	1c02      	adds	r2, r0, #0
    1a78:	701a      	strb	r2, [r3, #0]
    1a7a:	1d3b      	adds	r3, r7, #4
    1a7c:	1c0a      	adds	r2, r1, #0
    1a7e:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1a80:	1dfb      	adds	r3, r7, #7
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	2b2c      	cmp	r3, #44	; 0x2c
    1a86:	d116      	bne.n	1ab6 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1a88:	239c      	movs	r3, #156	; 0x9c
    1a8a:	18f9      	adds	r1, r7, r3
    1a8c:	6838      	ldr	r0, [r7, #0]
    1a8e:	2300      	movs	r3, #0
    1a90:	2204      	movs	r2, #4
    1a92:	4cc6      	ldr	r4, [pc, #792]	; (1dac <m2m_wifi_cb+0x340>)
    1a94:	47a0      	blx	r4
    1a96:	1e03      	subs	r3, r0, #0
    1a98:	d000      	beq.n	1a9c <m2m_wifi_cb+0x30>
    1a9a:	e1aa      	b.n	1df2 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    1a9c:	4bc4      	ldr	r3, [pc, #784]	; (1db0 <m2m_wifi_cb+0x344>)
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d100      	bne.n	1aa6 <m2m_wifi_cb+0x3a>
    1aa4:	e1a5      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1aa6:	4bc2      	ldr	r3, [pc, #776]	; (1db0 <m2m_wifi_cb+0x344>)
    1aa8:	681b      	ldr	r3, [r3, #0]
    1aaa:	229c      	movs	r2, #156	; 0x9c
    1aac:	18ba      	adds	r2, r7, r2
    1aae:	0011      	movs	r1, r2
    1ab0:	202c      	movs	r0, #44	; 0x2c
    1ab2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1ab4:	e19d      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1ab6:	1dfb      	adds	r3, r7, #7
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	2b1b      	cmp	r3, #27
    1abc:	d116      	bne.n	1aec <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1abe:	2394      	movs	r3, #148	; 0x94
    1ac0:	18f9      	adds	r1, r7, r3
    1ac2:	6838      	ldr	r0, [r7, #0]
    1ac4:	2300      	movs	r3, #0
    1ac6:	2208      	movs	r2, #8
    1ac8:	4cb8      	ldr	r4, [pc, #736]	; (1dac <m2m_wifi_cb+0x340>)
    1aca:	47a0      	blx	r4
    1acc:	1e03      	subs	r3, r0, #0
    1ace:	d000      	beq.n	1ad2 <m2m_wifi_cb+0x66>
    1ad0:	e18f      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ad2:	4bb7      	ldr	r3, [pc, #732]	; (1db0 <m2m_wifi_cb+0x344>)
    1ad4:	681b      	ldr	r3, [r3, #0]
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d100      	bne.n	1adc <m2m_wifi_cb+0x70>
    1ada:	e18a      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1adc:	4bb4      	ldr	r3, [pc, #720]	; (1db0 <m2m_wifi_cb+0x344>)
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	2294      	movs	r2, #148	; 0x94
    1ae2:	18ba      	adds	r2, r7, r2
    1ae4:	0011      	movs	r1, r2
    1ae6:	201b      	movs	r0, #27
    1ae8:	4798      	blx	r3
}
    1aea:	e182      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1aec:	1dfb      	adds	r3, r7, #7
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	2b06      	cmp	r3, #6
    1af2:	d116      	bne.n	1b22 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1af4:	2308      	movs	r3, #8
    1af6:	18f9      	adds	r1, r7, r3
    1af8:	6838      	ldr	r0, [r7, #0]
    1afa:	2301      	movs	r3, #1
    1afc:	2230      	movs	r2, #48	; 0x30
    1afe:	4cab      	ldr	r4, [pc, #684]	; (1dac <m2m_wifi_cb+0x340>)
    1b00:	47a0      	blx	r4
    1b02:	1e03      	subs	r3, r0, #0
    1b04:	d000      	beq.n	1b08 <m2m_wifi_cb+0x9c>
    1b06:	e174      	b.n	1df2 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1b08:	4ba9      	ldr	r3, [pc, #676]	; (1db0 <m2m_wifi_cb+0x344>)
    1b0a:	681b      	ldr	r3, [r3, #0]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d100      	bne.n	1b12 <m2m_wifi_cb+0xa6>
    1b10:	e16f      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1b12:	4ba7      	ldr	r3, [pc, #668]	; (1db0 <m2m_wifi_cb+0x344>)
    1b14:	681b      	ldr	r3, [r3, #0]
    1b16:	2208      	movs	r2, #8
    1b18:	18ba      	adds	r2, r7, r2
    1b1a:	0011      	movs	r1, r2
    1b1c:	2006      	movs	r0, #6
    1b1e:	4798      	blx	r3
}
    1b20:	e167      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1b22:	1dfb      	adds	r3, r7, #7
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	2b0e      	cmp	r3, #14
    1b28:	d100      	bne.n	1b2c <m2m_wifi_cb+0xc0>
    1b2a:	e162      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	2b32      	cmp	r3, #50	; 0x32
    1b32:	d116      	bne.n	1b62 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1b34:	2380      	movs	r3, #128	; 0x80
    1b36:	18f9      	adds	r1, r7, r3
    1b38:	6838      	ldr	r0, [r7, #0]
    1b3a:	2300      	movs	r3, #0
    1b3c:	2214      	movs	r2, #20
    1b3e:	4c9b      	ldr	r4, [pc, #620]	; (1dac <m2m_wifi_cb+0x340>)
    1b40:	47a0      	blx	r4
    1b42:	1e03      	subs	r3, r0, #0
    1b44:	d000      	beq.n	1b48 <m2m_wifi_cb+0xdc>
    1b46:	e154      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1b48:	4b99      	ldr	r3, [pc, #612]	; (1db0 <m2m_wifi_cb+0x344>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d100      	bne.n	1b52 <m2m_wifi_cb+0xe6>
    1b50:	e14f      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1b52:	4b97      	ldr	r3, [pc, #604]	; (1db0 <m2m_wifi_cb+0x344>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	2280      	movs	r2, #128	; 0x80
    1b58:	18ba      	adds	r2, r7, r2
    1b5a:	0011      	movs	r1, r2
    1b5c:	2032      	movs	r0, #50	; 0x32
    1b5e:	4798      	blx	r3
}
    1b60:	e147      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1b62:	1dfb      	adds	r3, r7, #7
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	2b2f      	cmp	r3, #47	; 0x2f
    1b68:	d11d      	bne.n	1ba6 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1b6a:	2308      	movs	r3, #8
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	2264      	movs	r2, #100	; 0x64
    1b70:	2100      	movs	r1, #0
    1b72:	0018      	movs	r0, r3
    1b74:	4b8f      	ldr	r3, [pc, #572]	; (1db4 <m2m_wifi_cb+0x348>)
    1b76:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1b78:	2308      	movs	r3, #8
    1b7a:	18f9      	adds	r1, r7, r3
    1b7c:	6838      	ldr	r0, [r7, #0]
    1b7e:	2300      	movs	r3, #0
    1b80:	2264      	movs	r2, #100	; 0x64
    1b82:	4c8a      	ldr	r4, [pc, #552]	; (1dac <m2m_wifi_cb+0x340>)
    1b84:	47a0      	blx	r4
    1b86:	1e03      	subs	r3, r0, #0
    1b88:	d000      	beq.n	1b8c <m2m_wifi_cb+0x120>
    1b8a:	e132      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1b8c:	4b88      	ldr	r3, [pc, #544]	; (1db0 <m2m_wifi_cb+0x344>)
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d100      	bne.n	1b96 <m2m_wifi_cb+0x12a>
    1b94:	e12d      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1b96:	4b86      	ldr	r3, [pc, #536]	; (1db0 <m2m_wifi_cb+0x344>)
    1b98:	681b      	ldr	r3, [r3, #0]
    1b9a:	2208      	movs	r2, #8
    1b9c:	18ba      	adds	r2, r7, r2
    1b9e:	0011      	movs	r1, r2
    1ba0:	202f      	movs	r0, #47	; 0x2f
    1ba2:	4798      	blx	r3
}
    1ba4:	e125      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1ba6:	1dfb      	adds	r3, r7, #7
    1ba8:	781b      	ldrb	r3, [r3, #0]
    1baa:	2b34      	cmp	r3, #52	; 0x34
    1bac:	d12e      	bne.n	1c0c <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1bae:	237c      	movs	r3, #124	; 0x7c
    1bb0:	18f9      	adds	r1, r7, r3
    1bb2:	6838      	ldr	r0, [r7, #0]
    1bb4:	2300      	movs	r3, #0
    1bb6:	2204      	movs	r2, #4
    1bb8:	4c7c      	ldr	r4, [pc, #496]	; (1dac <m2m_wifi_cb+0x340>)
    1bba:	47a0      	blx	r4
    1bbc:	1e03      	subs	r3, r0, #0
    1bbe:	d000      	beq.n	1bc2 <m2m_wifi_cb+0x156>
    1bc0:	e117      	b.n	1df2 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1bc2:	4b7d      	ldr	r3, [pc, #500]	; (1db8 <m2m_wifi_cb+0x34c>)
    1bc4:	0018      	movs	r0, r3
    1bc6:	4b7d      	ldr	r3, [pc, #500]	; (1dbc <m2m_wifi_cb+0x350>)
    1bc8:	4798      	blx	r3
    1bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bcc:	0e1b      	lsrs	r3, r3, #24
    1bce:	b2db      	uxtb	r3, r3
    1bd0:	0019      	movs	r1, r3
    1bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bd4:	0c1b      	lsrs	r3, r3, #16
    1bd6:	b2db      	uxtb	r3, r3
    1bd8:	001a      	movs	r2, r3
    1bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bdc:	0a1b      	lsrs	r3, r3, #8
    1bde:	b2db      	uxtb	r3, r3
    1be0:	001c      	movs	r4, r3
    1be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1be4:	b2db      	uxtb	r3, r3
    1be6:	4876      	ldr	r0, [pc, #472]	; (1dc0 <m2m_wifi_cb+0x354>)
    1be8:	9300      	str	r3, [sp, #0]
    1bea:	0023      	movs	r3, r4
    1bec:	4c73      	ldr	r4, [pc, #460]	; (1dbc <m2m_wifi_cb+0x350>)
    1bee:	47a0      	blx	r4
    1bf0:	200d      	movs	r0, #13
    1bf2:	4b74      	ldr	r3, [pc, #464]	; (1dc4 <m2m_wifi_cb+0x358>)
    1bf4:	4798      	blx	r3
			if (gpfAppWifiCb)
    1bf6:	4b6e      	ldr	r3, [pc, #440]	; (1db0 <m2m_wifi_cb+0x344>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d100      	bne.n	1c00 <m2m_wifi_cb+0x194>
    1bfe:	e0f8      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1c00:	4b6b      	ldr	r3, [pc, #428]	; (1db0 <m2m_wifi_cb+0x344>)
    1c02:	681b      	ldr	r3, [r3, #0]
    1c04:	2100      	movs	r1, #0
    1c06:	2034      	movs	r0, #52	; 0x34
    1c08:	4798      	blx	r3
}
    1c0a:	e0f2      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1c0c:	1dfb      	adds	r3, r7, #7
    1c0e:	781b      	ldrb	r3, [r3, #0]
    1c10:	2b11      	cmp	r3, #17
    1c12:	d11e      	bne.n	1c52 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1c14:	4b6c      	ldr	r3, [pc, #432]	; (1dc8 <m2m_wifi_cb+0x35c>)
    1c16:	2200      	movs	r2, #0
    1c18:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1c1a:	2378      	movs	r3, #120	; 0x78
    1c1c:	18f9      	adds	r1, r7, r3
    1c1e:	6838      	ldr	r0, [r7, #0]
    1c20:	2300      	movs	r3, #0
    1c22:	2204      	movs	r2, #4
    1c24:	4c61      	ldr	r4, [pc, #388]	; (1dac <m2m_wifi_cb+0x340>)
    1c26:	47a0      	blx	r4
    1c28:	1e03      	subs	r3, r0, #0
    1c2a:	d000      	beq.n	1c2e <m2m_wifi_cb+0x1c2>
    1c2c:	e0e1      	b.n	1df2 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    1c2e:	2378      	movs	r3, #120	; 0x78
    1c30:	18fb      	adds	r3, r7, r3
    1c32:	781a      	ldrb	r2, [r3, #0]
    1c34:	4b65      	ldr	r3, [pc, #404]	; (1dcc <m2m_wifi_cb+0x360>)
    1c36:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1c38:	4b5d      	ldr	r3, [pc, #372]	; (1db0 <m2m_wifi_cb+0x344>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d100      	bne.n	1c42 <m2m_wifi_cb+0x1d6>
    1c40:	e0d7      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1c42:	4b5b      	ldr	r3, [pc, #364]	; (1db0 <m2m_wifi_cb+0x344>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	2278      	movs	r2, #120	; 0x78
    1c48:	18ba      	adds	r2, r7, r2
    1c4a:	0011      	movs	r1, r2
    1c4c:	2011      	movs	r0, #17
    1c4e:	4798      	blx	r3
}
    1c50:	e0cf      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1c52:	1dfb      	adds	r3, r7, #7
    1c54:	781b      	ldrb	r3, [r3, #0]
    1c56:	2b13      	cmp	r3, #19
    1c58:	d116      	bne.n	1c88 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1c5a:	2308      	movs	r3, #8
    1c5c:	18f9      	adds	r1, r7, r3
    1c5e:	6838      	ldr	r0, [r7, #0]
    1c60:	2300      	movs	r3, #0
    1c62:	222c      	movs	r2, #44	; 0x2c
    1c64:	4c51      	ldr	r4, [pc, #324]	; (1dac <m2m_wifi_cb+0x340>)
    1c66:	47a0      	blx	r4
    1c68:	1e03      	subs	r3, r0, #0
    1c6a:	d000      	beq.n	1c6e <m2m_wifi_cb+0x202>
    1c6c:	e0c1      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1c6e:	4b50      	ldr	r3, [pc, #320]	; (1db0 <m2m_wifi_cb+0x344>)
    1c70:	681b      	ldr	r3, [r3, #0]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d100      	bne.n	1c78 <m2m_wifi_cb+0x20c>
    1c76:	e0bc      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1c78:	4b4d      	ldr	r3, [pc, #308]	; (1db0 <m2m_wifi_cb+0x344>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	2208      	movs	r2, #8
    1c7e:	18ba      	adds	r2, r7, r2
    1c80:	0011      	movs	r1, r2
    1c82:	2013      	movs	r0, #19
    1c84:	4798      	blx	r3
}
    1c86:	e0b4      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1c88:	1dfb      	adds	r3, r7, #7
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	2b04      	cmp	r3, #4
    1c8e:	d116      	bne.n	1cbe <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c90:	23a0      	movs	r3, #160	; 0xa0
    1c92:	18f9      	adds	r1, r7, r3
    1c94:	6838      	ldr	r0, [r7, #0]
    1c96:	2300      	movs	r3, #0
    1c98:	2204      	movs	r2, #4
    1c9a:	4c44      	ldr	r4, [pc, #272]	; (1dac <m2m_wifi_cb+0x340>)
    1c9c:	47a0      	blx	r4
    1c9e:	1e03      	subs	r3, r0, #0
    1ca0:	d000      	beq.n	1ca4 <m2m_wifi_cb+0x238>
    1ca2:	e0a6      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ca4:	4b42      	ldr	r3, [pc, #264]	; (1db0 <m2m_wifi_cb+0x344>)
    1ca6:	681b      	ldr	r3, [r3, #0]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d100      	bne.n	1cae <m2m_wifi_cb+0x242>
    1cac:	e0a1      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1cae:	4b40      	ldr	r3, [pc, #256]	; (1db0 <m2m_wifi_cb+0x344>)
    1cb0:	681b      	ldr	r3, [r3, #0]
    1cb2:	22a0      	movs	r2, #160	; 0xa0
    1cb4:	18ba      	adds	r2, r7, r2
    1cb6:	0011      	movs	r1, r2
    1cb8:	2004      	movs	r0, #4
    1cba:	4798      	blx	r3
}
    1cbc:	e099      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1cbe:	1dfb      	adds	r3, r7, #7
    1cc0:	781b      	ldrb	r3, [r3, #0]
    1cc2:	2b65      	cmp	r3, #101	; 0x65
    1cc4:	d116      	bne.n	1cf4 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1cc6:	23a0      	movs	r3, #160	; 0xa0
    1cc8:	18f9      	adds	r1, r7, r3
    1cca:	6838      	ldr	r0, [r7, #0]
    1ccc:	2300      	movs	r3, #0
    1cce:	2204      	movs	r2, #4
    1cd0:	4c36      	ldr	r4, [pc, #216]	; (1dac <m2m_wifi_cb+0x340>)
    1cd2:	47a0      	blx	r4
    1cd4:	1e03      	subs	r3, r0, #0
    1cd6:	d000      	beq.n	1cda <m2m_wifi_cb+0x26e>
    1cd8:	e08b      	b.n	1df2 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1cda:	4b35      	ldr	r3, [pc, #212]	; (1db0 <m2m_wifi_cb+0x344>)
    1cdc:	681b      	ldr	r3, [r3, #0]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d100      	bne.n	1ce4 <m2m_wifi_cb+0x278>
    1ce2:	e086      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1ce4:	4b32      	ldr	r3, [pc, #200]	; (1db0 <m2m_wifi_cb+0x344>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	22a0      	movs	r2, #160	; 0xa0
    1cea:	18ba      	adds	r2, r7, r2
    1cec:	0011      	movs	r1, r2
    1cee:	2065      	movs	r0, #101	; 0x65
    1cf0:	4798      	blx	r3
}
    1cf2:	e07e      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1cf4:	1dfb      	adds	r3, r7, #7
    1cf6:	781b      	ldrb	r3, [r3, #0]
    1cf8:	2b09      	cmp	r3, #9
    1cfa:	d116      	bne.n	1d2a <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1cfc:	2308      	movs	r3, #8
    1cfe:	18f9      	adds	r1, r7, r3
    1d00:	6838      	ldr	r0, [r7, #0]
    1d02:	2301      	movs	r3, #1
    1d04:	2264      	movs	r2, #100	; 0x64
    1d06:	4c29      	ldr	r4, [pc, #164]	; (1dac <m2m_wifi_cb+0x340>)
    1d08:	47a0      	blx	r4
    1d0a:	1e03      	subs	r3, r0, #0
    1d0c:	d000      	beq.n	1d10 <m2m_wifi_cb+0x2a4>
    1d0e:	e070      	b.n	1df2 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1d10:	4b27      	ldr	r3, [pc, #156]	; (1db0 <m2m_wifi_cb+0x344>)
    1d12:	681b      	ldr	r3, [r3, #0]
    1d14:	2b00      	cmp	r3, #0
    1d16:	d100      	bne.n	1d1a <m2m_wifi_cb+0x2ae>
    1d18:	e06b      	b.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1d1a:	4b25      	ldr	r3, [pc, #148]	; (1db0 <m2m_wifi_cb+0x344>)
    1d1c:	681b      	ldr	r3, [r3, #0]
    1d1e:	2208      	movs	r2, #8
    1d20:	18ba      	adds	r2, r7, r2
    1d22:	0011      	movs	r1, r2
    1d24:	2009      	movs	r0, #9
    1d26:	4798      	blx	r3
}
    1d28:	e063      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1d2a:	1dfb      	adds	r3, r7, #7
    1d2c:	781b      	ldrb	r3, [r3, #0]
    1d2e:	2b2a      	cmp	r3, #42	; 0x2a
    1d30:	d114      	bne.n	1d5c <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1d32:	2374      	movs	r3, #116	; 0x74
    1d34:	18f9      	adds	r1, r7, r3
    1d36:	6838      	ldr	r0, [r7, #0]
    1d38:	2301      	movs	r3, #1
    1d3a:	2204      	movs	r2, #4
    1d3c:	4c1b      	ldr	r4, [pc, #108]	; (1dac <m2m_wifi_cb+0x340>)
    1d3e:	47a0      	blx	r4
    1d40:	1e03      	subs	r3, r0, #0
    1d42:	d156      	bne.n	1df2 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1d44:	4b1a      	ldr	r3, [pc, #104]	; (1db0 <m2m_wifi_cb+0x344>)
    1d46:	681b      	ldr	r3, [r3, #0]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d052      	beq.n	1df2 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1d4c:	4b18      	ldr	r3, [pc, #96]	; (1db0 <m2m_wifi_cb+0x344>)
    1d4e:	681b      	ldr	r3, [r3, #0]
    1d50:	2274      	movs	r2, #116	; 0x74
    1d52:	18ba      	adds	r2, r7, r2
    1d54:	0011      	movs	r1, r2
    1d56:	202a      	movs	r0, #42	; 0x2a
    1d58:	4798      	blx	r3
}
    1d5a:	e04a      	b.n	1df2 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1d5c:	1dfb      	adds	r3, r7, #7
    1d5e:	781b      	ldrb	r3, [r3, #0]
    1d60:	2b20      	cmp	r3, #32
    1d62:	d135      	bne.n	1dd0 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1d64:	236c      	movs	r3, #108	; 0x6c
    1d66:	18f9      	adds	r1, r7, r3
    1d68:	6838      	ldr	r0, [r7, #0]
    1d6a:	2300      	movs	r3, #0
    1d6c:	2208      	movs	r2, #8
    1d6e:	4c0f      	ldr	r4, [pc, #60]	; (1dac <m2m_wifi_cb+0x340>)
    1d70:	47a0      	blx	r4
    1d72:	1e03      	subs	r3, r0, #0
    1d74:	d13d      	bne.n	1df2 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1d76:	683b      	ldr	r3, [r7, #0]
    1d78:	3308      	adds	r3, #8
    1d7a:	0018      	movs	r0, r3
    1d7c:	236c      	movs	r3, #108	; 0x6c
    1d7e:	18fb      	adds	r3, r7, r3
    1d80:	6819      	ldr	r1, [r3, #0]
    1d82:	236c      	movs	r3, #108	; 0x6c
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	889a      	ldrh	r2, [r3, #4]
    1d88:	2301      	movs	r3, #1
    1d8a:	4c08      	ldr	r4, [pc, #32]	; (1dac <m2m_wifi_cb+0x340>)
    1d8c:	47a0      	blx	r4
    1d8e:	1e03      	subs	r3, r0, #0
    1d90:	d12f      	bne.n	1df2 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    1d92:	4b07      	ldr	r3, [pc, #28]	; (1db0 <m2m_wifi_cb+0x344>)
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	2b00      	cmp	r3, #0
    1d98:	d02b      	beq.n	1df2 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1d9a:	4b05      	ldr	r3, [pc, #20]	; (1db0 <m2m_wifi_cb+0x344>)
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	226c      	movs	r2, #108	; 0x6c
    1da0:	18ba      	adds	r2, r7, r2
    1da2:	0011      	movs	r1, r2
    1da4:	2020      	movs	r0, #32
    1da6:	4798      	blx	r3
}
    1da8:	e023      	b.n	1df2 <m2m_wifi_cb+0x386>
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	00001831 	.word	0x00001831
    1db0:	20000208 	.word	0x20000208
    1db4:	00000cdd 	.word	0x00000cdd
    1db8:	0000e838 	.word	0x0000e838
    1dbc:	0000cf25 	.word	0x0000cf25
    1dc0:	0000e844 	.word	0x0000e844
    1dc4:	0000cf59 	.word	0x0000cf59
    1dc8:	20000205 	.word	0x20000205
    1dcc:	20000204 	.word	0x20000204
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1dd0:	2395      	movs	r3, #149	; 0x95
    1dd2:	005a      	lsls	r2, r3, #1
    1dd4:	4909      	ldr	r1, [pc, #36]	; (1dfc <m2m_wifi_cb+0x390>)
    1dd6:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <m2m_wifi_cb+0x394>)
    1dd8:	0018      	movs	r0, r3
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <m2m_wifi_cb+0x398>)
    1ddc:	4798      	blx	r3
    1dde:	1dfb      	adds	r3, r7, #7
    1de0:	781a      	ldrb	r2, [r3, #0]
    1de2:	4b09      	ldr	r3, [pc, #36]	; (1e08 <m2m_wifi_cb+0x39c>)
    1de4:	0011      	movs	r1, r2
    1de6:	0018      	movs	r0, r3
    1de8:	4b06      	ldr	r3, [pc, #24]	; (1e04 <m2m_wifi_cb+0x398>)
    1dea:	4798      	blx	r3
    1dec:	200d      	movs	r0, #13
    1dee:	4b07      	ldr	r3, [pc, #28]	; (1e0c <m2m_wifi_cb+0x3a0>)
    1df0:	4798      	blx	r3
}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	46bd      	mov	sp, r7
    1df6:	b02b      	add	sp, #172	; 0xac
    1df8:	bd90      	pop	{r4, r7, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	0000ebec 	.word	0x0000ebec
    1e00:	0000e864 	.word	0x0000e864
    1e04:	0000cf25 	.word	0x0000cf25
    1e08:	0000e878 	.word	0x0000e878
    1e0c:	0000cf59 	.word	0x0000cf59

00001e10 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1e10:	b590      	push	{r4, r7, lr}
    1e12:	b091      	sub	sp, #68	; 0x44
    1e14:	af02      	add	r7, sp, #8
    1e16:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1e18:	2337      	movs	r3, #55	; 0x37
    1e1a:	18fb      	adds	r3, r7, r3
    1e1c:	2200      	movs	r2, #0
    1e1e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1e20:	230b      	movs	r3, #11
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	2201      	movs	r2, #1
    1e26:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1e28:	687b      	ldr	r3, [r7, #4]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d104      	bne.n	1e38 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1e2e:	2337      	movs	r3, #55	; 0x37
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	22f4      	movs	r2, #244	; 0xf4
    1e34:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1e36:	e0ad      	b.n	1f94 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	681a      	ldr	r2, [r3, #0]
    1e3c:	4b59      	ldr	r3, [pc, #356]	; (1fa4 <m2m_wifi_init+0x194>)
    1e3e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1e40:	4b59      	ldr	r3, [pc, #356]	; (1fa8 <m2m_wifi_init+0x198>)
    1e42:	2200      	movs	r2, #0
    1e44:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1e46:	2337      	movs	r3, #55	; 0x37
    1e48:	18fc      	adds	r4, r7, r3
    1e4a:	230b      	movs	r3, #11
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	0018      	movs	r0, r3
    1e50:	4b56      	ldr	r3, [pc, #344]	; (1fac <m2m_wifi_init+0x19c>)
    1e52:	4798      	blx	r3
    1e54:	0003      	movs	r3, r0
    1e56:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1e58:	2337      	movs	r3, #55	; 0x37
    1e5a:	18fb      	adds	r3, r7, r3
    1e5c:	781b      	ldrb	r3, [r3, #0]
    1e5e:	b25b      	sxtb	r3, r3
    1e60:	2b00      	cmp	r3, #0
    1e62:	d000      	beq.n	1e66 <m2m_wifi_init+0x56>
    1e64:	e093      	b.n	1f8e <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1e66:	2337      	movs	r3, #55	; 0x37
    1e68:	18fc      	adds	r4, r7, r3
    1e6a:	2000      	movs	r0, #0
    1e6c:	4b50      	ldr	r3, [pc, #320]	; (1fb0 <m2m_wifi_init+0x1a0>)
    1e6e:	4798      	blx	r3
    1e70:	0003      	movs	r3, r0
    1e72:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1e74:	2337      	movs	r3, #55	; 0x37
    1e76:	18fb      	adds	r3, r7, r3
    1e78:	781b      	ldrb	r3, [r3, #0]
    1e7a:	b25b      	sxtb	r3, r3
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d000      	beq.n	1e82 <m2m_wifi_init+0x72>
    1e80:	e080      	b.n	1f84 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1e82:	4b4c      	ldr	r3, [pc, #304]	; (1fb4 <m2m_wifi_init+0x1a4>)
    1e84:	0019      	movs	r1, r3
    1e86:	2001      	movs	r0, #1
    1e88:	4b4b      	ldr	r3, [pc, #300]	; (1fb8 <m2m_wifi_init+0x1a8>)
    1e8a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1e8c:	2337      	movs	r3, #55	; 0x37
    1e8e:	18fc      	adds	r4, r7, r3
    1e90:	230c      	movs	r3, #12
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	0018      	movs	r0, r3
    1e96:	4b49      	ldr	r3, [pc, #292]	; (1fbc <m2m_wifi_init+0x1ac>)
    1e98:	4798      	blx	r3
    1e9a:	0003      	movs	r3, r0
    1e9c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1e9e:	4b48      	ldr	r3, [pc, #288]	; (1fc0 <m2m_wifi_init+0x1b0>)
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b48      	ldr	r3, [pc, #288]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1ea4:	4798      	blx	r3
    1ea6:	230c      	movs	r3, #12
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	791b      	ldrb	r3, [r3, #4]
    1eac:	0019      	movs	r1, r3
    1eae:	230c      	movs	r3, #12
    1eb0:	18fb      	adds	r3, r7, r3
    1eb2:	795b      	ldrb	r3, [r3, #5]
    1eb4:	001a      	movs	r2, r3
    1eb6:	230c      	movs	r3, #12
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	799b      	ldrb	r3, [r3, #6]
    1ebc:	001c      	movs	r4, r3
    1ebe:	230c      	movs	r3, #12
    1ec0:	18fb      	adds	r3, r7, r3
    1ec2:	8c1b      	ldrh	r3, [r3, #32]
    1ec4:	4840      	ldr	r0, [pc, #256]	; (1fc8 <m2m_wifi_init+0x1b8>)
    1ec6:	9300      	str	r3, [sp, #0]
    1ec8:	0023      	movs	r3, r4
    1eca:	4c3e      	ldr	r4, [pc, #248]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1ecc:	47a0      	blx	r4
    1ece:	200d      	movs	r0, #13
    1ed0:	4b3e      	ldr	r3, [pc, #248]	; (1fcc <m2m_wifi_init+0x1bc>)
    1ed2:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1ed4:	4b3a      	ldr	r3, [pc, #232]	; (1fc0 <m2m_wifi_init+0x1b0>)
    1ed6:	0018      	movs	r0, r3
    1ed8:	4b3a      	ldr	r3, [pc, #232]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1eda:	4798      	blx	r3
    1edc:	230c      	movs	r3, #12
    1ede:	18fb      	adds	r3, r7, r3
    1ee0:	3316      	adds	r3, #22
    1ee2:	001a      	movs	r2, r3
    1ee4:	230c      	movs	r3, #12
    1ee6:	18fb      	adds	r3, r7, r3
    1ee8:	330a      	adds	r3, #10
    1eea:	0019      	movs	r1, r3
    1eec:	4b38      	ldr	r3, [pc, #224]	; (1fd0 <m2m_wifi_init+0x1c0>)
    1eee:	0018      	movs	r0, r3
    1ef0:	4b34      	ldr	r3, [pc, #208]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1ef2:	4798      	blx	r3
    1ef4:	200d      	movs	r0, #13
    1ef6:	4b35      	ldr	r3, [pc, #212]	; (1fcc <m2m_wifi_init+0x1bc>)
    1ef8:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1efa:	4b31      	ldr	r3, [pc, #196]	; (1fc0 <m2m_wifi_init+0x1b0>)
    1efc:	0018      	movs	r0, r3
    1efe:	4b31      	ldr	r3, [pc, #196]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f00:	4798      	blx	r3
    1f02:	230c      	movs	r3, #12
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	79db      	ldrb	r3, [r3, #7]
    1f08:	0019      	movs	r1, r3
    1f0a:	230c      	movs	r3, #12
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	7a1b      	ldrb	r3, [r3, #8]
    1f10:	001a      	movs	r2, r3
    1f12:	230c      	movs	r3, #12
    1f14:	18fb      	adds	r3, r7, r3
    1f16:	7a5b      	ldrb	r3, [r3, #9]
    1f18:	482e      	ldr	r0, [pc, #184]	; (1fd4 <m2m_wifi_init+0x1c4>)
    1f1a:	4c2a      	ldr	r4, [pc, #168]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f1c:	47a0      	blx	r4
    1f1e:	200d      	movs	r0, #13
    1f20:	4b2a      	ldr	r3, [pc, #168]	; (1fcc <m2m_wifi_init+0x1bc>)
    1f22:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1f24:	4b26      	ldr	r3, [pc, #152]	; (1fc0 <m2m_wifi_init+0x1b0>)
    1f26:	0018      	movs	r0, r3
    1f28:	4b26      	ldr	r3, [pc, #152]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f2a:	4798      	blx	r3
    1f2c:	482a      	ldr	r0, [pc, #168]	; (1fd8 <m2m_wifi_init+0x1c8>)
    1f2e:	2302      	movs	r3, #2
    1f30:	2205      	movs	r2, #5
    1f32:	2113      	movs	r1, #19
    1f34:	4c23      	ldr	r4, [pc, #140]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f36:	47a0      	blx	r4
    1f38:	200d      	movs	r0, #13
    1f3a:	4b24      	ldr	r3, [pc, #144]	; (1fcc <m2m_wifi_init+0x1bc>)
    1f3c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1f3e:	4b20      	ldr	r3, [pc, #128]	; (1fc0 <m2m_wifi_init+0x1b0>)
    1f40:	0018      	movs	r0, r3
    1f42:	4b20      	ldr	r3, [pc, #128]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f44:	4798      	blx	r3
    1f46:	4a25      	ldr	r2, [pc, #148]	; (1fdc <m2m_wifi_init+0x1cc>)
    1f48:	4925      	ldr	r1, [pc, #148]	; (1fe0 <m2m_wifi_init+0x1d0>)
    1f4a:	4b26      	ldr	r3, [pc, #152]	; (1fe4 <m2m_wifi_init+0x1d4>)
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b1d      	ldr	r3, [pc, #116]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f50:	4798      	blx	r3
    1f52:	200d      	movs	r0, #13
    1f54:	4b1d      	ldr	r3, [pc, #116]	; (1fcc <m2m_wifi_init+0x1bc>)
    1f56:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1f58:	2337      	movs	r3, #55	; 0x37
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	781b      	ldrb	r3, [r3, #0]
    1f5e:	b25b      	sxtb	r3, r3
    1f60:	330d      	adds	r3, #13
    1f62:	d116      	bne.n	1f92 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1f64:	23ee      	movs	r3, #238	; 0xee
    1f66:	33ff      	adds	r3, #255	; 0xff
    1f68:	001a      	movs	r2, r3
    1f6a:	491f      	ldr	r1, [pc, #124]	; (1fe8 <m2m_wifi_init+0x1d8>)
    1f6c:	4b1f      	ldr	r3, [pc, #124]	; (1fec <m2m_wifi_init+0x1dc>)
    1f6e:	0018      	movs	r0, r3
    1f70:	4b14      	ldr	r3, [pc, #80]	; (1fc4 <m2m_wifi_init+0x1b4>)
    1f72:	4798      	blx	r3
    1f74:	4b1e      	ldr	r3, [pc, #120]	; (1ff0 <m2m_wifi_init+0x1e0>)
    1f76:	0018      	movs	r0, r3
    1f78:	4b1e      	ldr	r3, [pc, #120]	; (1ff4 <m2m_wifi_init+0x1e4>)
    1f7a:	4798      	blx	r3
    1f7c:	200d      	movs	r0, #13
    1f7e:	4b13      	ldr	r3, [pc, #76]	; (1fcc <m2m_wifi_init+0x1bc>)
    1f80:	4798      	blx	r3
	}

	goto _EXIT0;
    1f82:	e006      	b.n	1f92 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1f84:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    1f86:	2000      	movs	r0, #0
    1f88:	4b1b      	ldr	r3, [pc, #108]	; (1ff8 <m2m_wifi_init+0x1e8>)
    1f8a:	4798      	blx	r3
    1f8c:	e002      	b.n	1f94 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	e000      	b.n	1f94 <m2m_wifi_init+0x184>
	goto _EXIT0;
    1f92:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    1f94:	2337      	movs	r3, #55	; 0x37
    1f96:	18fb      	adds	r3, r7, r3
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	b25b      	sxtb	r3, r3
}
    1f9c:	0018      	movs	r0, r3
    1f9e:	46bd      	mov	sp, r7
    1fa0:	b00f      	add	sp, #60	; 0x3c
    1fa2:	bd90      	pop	{r4, r7, pc}
    1fa4:	20000208 	.word	0x20000208
    1fa8:	20000205 	.word	0x20000205
    1fac:	0000311d 	.word	0x0000311d
    1fb0:	00000ef5 	.word	0x00000ef5
    1fb4:	00001a6d 	.word	0x00001a6d
    1fb8:	000019b1 	.word	0x000019b1
    1fbc:	00002f51 	.word	0x00002f51
    1fc0:	0000e838 	.word	0x0000e838
    1fc4:	0000cf25 	.word	0x0000cf25
    1fc8:	0000e9cc 	.word	0x0000e9cc
    1fcc:	0000cf59 	.word	0x0000cf59
    1fd0:	0000e9f4 	.word	0x0000e9f4
    1fd4:	0000ea10 	.word	0x0000ea10
    1fd8:	0000ea34 	.word	0x0000ea34
    1fdc:	0000ea4c 	.word	0x0000ea4c
    1fe0:	0000ea58 	.word	0x0000ea58
    1fe4:	0000ea64 	.word	0x0000ea64
    1fe8:	0000ebf8 	.word	0x0000ebf8
    1fec:	0000e864 	.word	0x0000e864
    1ff0:	0000ea7c 	.word	0x0000ea7c
    1ff4:	0000d041 	.word	0x0000d041
    1ff8:	000032b1 	.word	0x000032b1

00001ffc <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1ffc:	b580      	push	{r7, lr}
    1ffe:	b082      	sub	sp, #8
    2000:	af00      	add	r7, sp, #0
    2002:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2004:	4b03      	ldr	r3, [pc, #12]	; (2014 <STACK_SIZE+0x14>)
    2006:	4798      	blx	r3
    2008:	0003      	movs	r3, r0
}
    200a:	0018      	movs	r0, r3
    200c:	46bd      	mov	sp, r7
    200e:	b002      	add	sp, #8
    2010:	bd80      	pop	{r7, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	000017a1 	.word	0x000017a1

00002018 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2018:	b590      	push	{r4, r7, lr}
    201a:	b087      	sub	sp, #28
    201c:	af02      	add	r7, sp, #8
    201e:	60f8      	str	r0, [r7, #12]
    2020:	0008      	movs	r0, r1
    2022:	0011      	movs	r1, r2
    2024:	607b      	str	r3, [r7, #4]
    2026:	230b      	movs	r3, #11
    2028:	18fb      	adds	r3, r7, r3
    202a:	1c02      	adds	r2, r0, #0
    202c:	701a      	strb	r2, [r3, #0]
    202e:	230a      	movs	r3, #10
    2030:	18fb      	adds	r3, r7, r3
    2032:	1c0a      	adds	r2, r1, #0
    2034:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2036:	687c      	ldr	r4, [r7, #4]
    2038:	230a      	movs	r3, #10
    203a:	18fb      	adds	r3, r7, r3
    203c:	781a      	ldrb	r2, [r3, #0]
    203e:	230b      	movs	r3, #11
    2040:	18fb      	adds	r3, r7, r3
    2042:	7819      	ldrb	r1, [r3, #0]
    2044:	68f8      	ldr	r0, [r7, #12]
    2046:	2300      	movs	r3, #0
    2048:	9301      	str	r3, [sp, #4]
    204a:	2320      	movs	r3, #32
    204c:	18fb      	adds	r3, r7, r3
    204e:	881b      	ldrh	r3, [r3, #0]
    2050:	9300      	str	r3, [sp, #0]
    2052:	0023      	movs	r3, r4
    2054:	4c03      	ldr	r4, [pc, #12]	; (2064 <m2m_wifi_connect+0x4c>)
    2056:	47a0      	blx	r4
    2058:	0003      	movs	r3, r0
}
    205a:	0018      	movs	r0, r3
    205c:	46bd      	mov	sp, r7
    205e:	b005      	add	sp, #20
    2060:	bd90      	pop	{r4, r7, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	00002069 	.word	0x00002069

00002068 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2068:	b5b0      	push	{r4, r5, r7, lr}
    206a:	b0aa      	sub	sp, #168	; 0xa8
    206c:	af04      	add	r7, sp, #16
    206e:	60f8      	str	r0, [r7, #12]
    2070:	0008      	movs	r0, r1
    2072:	0011      	movs	r1, r2
    2074:	607b      	str	r3, [r7, #4]
    2076:	230b      	movs	r3, #11
    2078:	18fb      	adds	r3, r7, r3
    207a:	1c02      	adds	r2, r0, #0
    207c:	701a      	strb	r2, [r3, #0]
    207e:	230a      	movs	r3, #10
    2080:	18fb      	adds	r3, r7, r3
    2082:	1c0a      	adds	r2, r1, #0
    2084:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    2086:	2397      	movs	r3, #151	; 0x97
    2088:	18fb      	adds	r3, r7, r3
    208a:	2200      	movs	r2, #0
    208c:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    208e:	230a      	movs	r3, #10
    2090:	18fb      	adds	r3, r7, r3
    2092:	781b      	ldrb	r3, [r3, #0]
    2094:	2b01      	cmp	r3, #1
    2096:	d100      	bne.n	209a <m2m_wifi_connect_sc+0x32>
    2098:	e083      	b.n	21a2 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    209a:	687b      	ldr	r3, [r7, #4]
    209c:	2b00      	cmp	r3, #0
    209e:	d111      	bne.n	20c4 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    20a0:	4adb      	ldr	r2, [pc, #876]	; (2410 <m2m_wifi_connect_sc+0x3a8>)
    20a2:	49dc      	ldr	r1, [pc, #880]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    20a4:	4bdc      	ldr	r3, [pc, #880]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    20a6:	0018      	movs	r0, r3
    20a8:	4bdc      	ldr	r3, [pc, #880]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    20aa:	4798      	blx	r3
    20ac:	4bdc      	ldr	r3, [pc, #880]	; (2420 <m2m_wifi_connect_sc+0x3b8>)
    20ae:	0018      	movs	r0, r3
    20b0:	4bdc      	ldr	r3, [pc, #880]	; (2424 <m2m_wifi_connect_sc+0x3bc>)
    20b2:	4798      	blx	r3
    20b4:	200d      	movs	r0, #13
    20b6:	4bdc      	ldr	r3, [pc, #880]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    20b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    20ba:	2397      	movs	r3, #151	; 0x97
    20bc:	18fb      	adds	r3, r7, r3
    20be:	22f4      	movs	r2, #244	; 0xf4
    20c0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    20c2:	e1f5      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    20c4:	230a      	movs	r3, #10
    20c6:	18fb      	adds	r3, r7, r3
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	2b02      	cmp	r3, #2
    20cc:	d169      	bne.n	21a2 <m2m_wifi_connect_sc+0x13a>
    20ce:	687b      	ldr	r3, [r7, #4]
    20d0:	0018      	movs	r0, r3
    20d2:	4bd6      	ldr	r3, [pc, #856]	; (242c <m2m_wifi_connect_sc+0x3c4>)
    20d4:	4798      	blx	r3
    20d6:	0003      	movs	r3, r0
    20d8:	2b40      	cmp	r3, #64	; 0x40
    20da:	d162      	bne.n	21a2 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    20dc:	2396      	movs	r3, #150	; 0x96
    20de:	18fb      	adds	r3, r7, r3
    20e0:	2200      	movs	r2, #0
    20e2:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	2290      	movs	r2, #144	; 0x90
    20e8:	18ba      	adds	r2, r7, r2
    20ea:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20ec:	e054      	b.n	2198 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    20ee:	2396      	movs	r3, #150	; 0x96
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	2290      	movs	r2, #144	; 0x90
    20f6:	18ba      	adds	r2, r7, r2
    20f8:	6812      	ldr	r2, [r2, #0]
    20fa:	18d3      	adds	r3, r2, r3
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	2b2f      	cmp	r3, #47	; 0x2f
    2100:	d931      	bls.n	2166 <m2m_wifi_connect_sc+0xfe>
    2102:	2396      	movs	r3, #150	; 0x96
    2104:	18fb      	adds	r3, r7, r3
    2106:	781b      	ldrb	r3, [r3, #0]
    2108:	2290      	movs	r2, #144	; 0x90
    210a:	18ba      	adds	r2, r7, r2
    210c:	6812      	ldr	r2, [r2, #0]
    210e:	18d3      	adds	r3, r2, r3
    2110:	781b      	ldrb	r3, [r3, #0]
    2112:	2b39      	cmp	r3, #57	; 0x39
    2114:	d909      	bls.n	212a <m2m_wifi_connect_sc+0xc2>
    2116:	2396      	movs	r3, #150	; 0x96
    2118:	18fb      	adds	r3, r7, r3
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2290      	movs	r2, #144	; 0x90
    211e:	18ba      	adds	r2, r7, r2
    2120:	6812      	ldr	r2, [r2, #0]
    2122:	18d3      	adds	r3, r2, r3
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b40      	cmp	r3, #64	; 0x40
    2128:	d91d      	bls.n	2166 <m2m_wifi_connect_sc+0xfe>
    212a:	2396      	movs	r3, #150	; 0x96
    212c:	18fb      	adds	r3, r7, r3
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	2290      	movs	r2, #144	; 0x90
    2132:	18ba      	adds	r2, r7, r2
    2134:	6812      	ldr	r2, [r2, #0]
    2136:	18d3      	adds	r3, r2, r3
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	2b46      	cmp	r3, #70	; 0x46
    213c:	d909      	bls.n	2152 <m2m_wifi_connect_sc+0xea>
    213e:	2396      	movs	r3, #150	; 0x96
    2140:	18fb      	adds	r3, r7, r3
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	2290      	movs	r2, #144	; 0x90
    2146:	18ba      	adds	r2, r7, r2
    2148:	6812      	ldr	r2, [r2, #0]
    214a:	18d3      	adds	r3, r2, r3
    214c:	781b      	ldrb	r3, [r3, #0]
    214e:	2b60      	cmp	r3, #96	; 0x60
    2150:	d909      	bls.n	2166 <m2m_wifi_connect_sc+0xfe>
    2152:	2396      	movs	r3, #150	; 0x96
    2154:	18fb      	adds	r3, r7, r3
    2156:	781b      	ldrb	r3, [r3, #0]
    2158:	2290      	movs	r2, #144	; 0x90
    215a:	18ba      	adds	r2, r7, r2
    215c:	6812      	ldr	r2, [r2, #0]
    215e:	18d3      	adds	r3, r2, r3
    2160:	781b      	ldrb	r3, [r3, #0]
    2162:	2b66      	cmp	r3, #102	; 0x66
    2164:	d911      	bls.n	218a <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    2166:	4ab2      	ldr	r2, [pc, #712]	; (2430 <m2m_wifi_connect_sc+0x3c8>)
    2168:	49aa      	ldr	r1, [pc, #680]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    216a:	4bab      	ldr	r3, [pc, #684]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    216c:	0018      	movs	r0, r3
    216e:	4bab      	ldr	r3, [pc, #684]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    2170:	4798      	blx	r3
    2172:	4bb0      	ldr	r3, [pc, #704]	; (2434 <m2m_wifi_connect_sc+0x3cc>)
    2174:	0018      	movs	r0, r3
    2176:	4bab      	ldr	r3, [pc, #684]	; (2424 <m2m_wifi_connect_sc+0x3bc>)
    2178:	4798      	blx	r3
    217a:	200d      	movs	r0, #13
    217c:	4baa      	ldr	r3, [pc, #680]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    217e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    2180:	2397      	movs	r3, #151	; 0x97
    2182:	18fb      	adds	r3, r7, r3
    2184:	22f4      	movs	r2, #244	; 0xf4
    2186:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    2188:	e192      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    218a:	2396      	movs	r3, #150	; 0x96
    218c:	18fb      	adds	r3, r7, r3
    218e:	781a      	ldrb	r2, [r3, #0]
    2190:	2396      	movs	r3, #150	; 0x96
    2192:	18fb      	adds	r3, r7, r3
    2194:	3201      	adds	r2, #1
    2196:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2198:	2396      	movs	r3, #150	; 0x96
    219a:	18fb      	adds	r3, r7, r3
    219c:	781b      	ldrb	r3, [r3, #0]
    219e:	2b3f      	cmp	r3, #63	; 0x3f
    21a0:	d9a5      	bls.n	20ee <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    21a2:	230b      	movs	r3, #11
    21a4:	18fb      	adds	r3, r7, r3
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	2b00      	cmp	r3, #0
    21aa:	d004      	beq.n	21b6 <m2m_wifi_connect_sc+0x14e>
    21ac:	230b      	movs	r3, #11
    21ae:	18fb      	adds	r3, r7, r3
    21b0:	781b      	ldrb	r3, [r3, #0]
    21b2:	2b20      	cmp	r3, #32
    21b4:	d911      	bls.n	21da <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    21b6:	4aa0      	ldr	r2, [pc, #640]	; (2438 <m2m_wifi_connect_sc+0x3d0>)
    21b8:	4996      	ldr	r1, [pc, #600]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    21ba:	4b97      	ldr	r3, [pc, #604]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    21bc:	0018      	movs	r0, r3
    21be:	4b97      	ldr	r3, [pc, #604]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    21c0:	4798      	blx	r3
    21c2:	4b9e      	ldr	r3, [pc, #632]	; (243c <m2m_wifi_connect_sc+0x3d4>)
    21c4:	0018      	movs	r0, r3
    21c6:	4b97      	ldr	r3, [pc, #604]	; (2424 <m2m_wifi_connect_sc+0x3bc>)
    21c8:	4798      	blx	r3
    21ca:	200d      	movs	r0, #13
    21cc:	4b96      	ldr	r3, [pc, #600]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    21ce:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    21d0:	2397      	movs	r3, #151	; 0x97
    21d2:	18fb      	adds	r3, r7, r3
    21d4:	22f4      	movs	r2, #244	; 0xf4
    21d6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    21d8:	e16a      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    21da:	23a8      	movs	r3, #168	; 0xa8
    21dc:	18fb      	adds	r3, r7, r3
    21de:	881b      	ldrh	r3, [r3, #0]
    21e0:	2b00      	cmp	r3, #0
    21e2:	d004      	beq.n	21ee <m2m_wifi_connect_sc+0x186>
    21e4:	23a8      	movs	r3, #168	; 0xa8
    21e6:	18fb      	adds	r3, r7, r3
    21e8:	881b      	ldrh	r3, [r3, #0]
    21ea:	2b0e      	cmp	r3, #14
    21ec:	d916      	bls.n	221c <m2m_wifi_connect_sc+0x1b4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    21ee:	23a8      	movs	r3, #168	; 0xa8
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	881b      	ldrh	r3, [r3, #0]
    21f4:	2bff      	cmp	r3, #255	; 0xff
    21f6:	d011      	beq.n	221c <m2m_wifi_connect_sc+0x1b4>
		{
			M2M_ERR("CH INVALID\n");
    21f8:	4a91      	ldr	r2, [pc, #580]	; (2440 <m2m_wifi_connect_sc+0x3d8>)
    21fa:	4986      	ldr	r1, [pc, #536]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    21fc:	4b86      	ldr	r3, [pc, #536]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    21fe:	0018      	movs	r0, r3
    2200:	4b86      	ldr	r3, [pc, #536]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    2202:	4798      	blx	r3
    2204:	4b8f      	ldr	r3, [pc, #572]	; (2444 <m2m_wifi_connect_sc+0x3dc>)
    2206:	0018      	movs	r0, r3
    2208:	4b86      	ldr	r3, [pc, #536]	; (2424 <m2m_wifi_connect_sc+0x3bc>)
    220a:	4798      	blx	r3
    220c:	200d      	movs	r0, #13
    220e:	4b86      	ldr	r3, [pc, #536]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    2210:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2212:	2397      	movs	r3, #151	; 0x97
    2214:	18fb      	adds	r3, r7, r3
    2216:	22f4      	movs	r2, #244	; 0xf4
    2218:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    221a:	e149      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    221c:	230b      	movs	r3, #11
    221e:	18fb      	adds	r3, r7, r3
    2220:	781a      	ldrb	r2, [r3, #0]
    2222:	68f9      	ldr	r1, [r7, #12]
    2224:	2314      	movs	r3, #20
    2226:	18fb      	adds	r3, r7, r3
    2228:	3346      	adds	r3, #70	; 0x46
    222a:	0018      	movs	r0, r3
    222c:	4b86      	ldr	r3, [pc, #536]	; (2448 <m2m_wifi_connect_sc+0x3e0>)
    222e:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2230:	230b      	movs	r3, #11
    2232:	18fb      	adds	r3, r7, r3
    2234:	781b      	ldrb	r3, [r3, #0]
    2236:	2214      	movs	r2, #20
    2238:	18ba      	adds	r2, r7, r2
    223a:	2146      	movs	r1, #70	; 0x46
    223c:	18d3      	adds	r3, r2, r3
    223e:	185b      	adds	r3, r3, r1
    2240:	2200      	movs	r2, #0
    2242:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2244:	2314      	movs	r3, #20
    2246:	18fb      	adds	r3, r7, r3
    2248:	22a8      	movs	r2, #168	; 0xa8
    224a:	18ba      	adds	r2, r7, r2
    224c:	2144      	movs	r1, #68	; 0x44
    224e:	8812      	ldrh	r2, [r2, #0]
    2250:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2252:	23ac      	movs	r3, #172	; 0xac
    2254:	18fb      	adds	r3, r7, r3
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	1e5a      	subs	r2, r3, #1
    225a:	4193      	sbcs	r3, r2
    225c:	b2db      	uxtb	r3, r3
    225e:	0019      	movs	r1, r3
    2260:	2314      	movs	r3, #20
    2262:	18fb      	adds	r3, r7, r3
    2264:	2267      	movs	r2, #103	; 0x67
    2266:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    2268:	2314      	movs	r3, #20
    226a:	18fb      	adds	r3, r7, r3
    226c:	228c      	movs	r2, #140	; 0x8c
    226e:	18ba      	adds	r2, r7, r2
    2270:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    2272:	238c      	movs	r3, #140	; 0x8c
    2274:	18fb      	adds	r3, r7, r3
    2276:	681b      	ldr	r3, [r3, #0]
    2278:	220a      	movs	r2, #10
    227a:	18ba      	adds	r2, r7, r2
    227c:	2141      	movs	r1, #65	; 0x41
    227e:	7812      	ldrb	r2, [r2, #0]
    2280:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2282:	230a      	movs	r3, #10
    2284:	18fb      	adds	r3, r7, r3
    2286:	781b      	ldrb	r3, [r3, #0]
    2288:	2b03      	cmp	r3, #3
    228a:	d000      	beq.n	228e <m2m_wifi_connect_sc+0x226>
    228c:	e07b      	b.n	2386 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	2288      	movs	r2, #136	; 0x88
    2292:	18ba      	adds	r2, r7, r2
    2294:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    2296:	238c      	movs	r3, #140	; 0x8c
    2298:	18fb      	adds	r3, r7, r3
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	2284      	movs	r2, #132	; 0x84
    229e:	18ba      	adds	r2, r7, r2
    22a0:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    22a2:	2388      	movs	r3, #136	; 0x88
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	3b01      	subs	r3, #1
    22ac:	b2da      	uxtb	r2, r3
    22ae:	2384      	movs	r3, #132	; 0x84
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    22b6:	2384      	movs	r3, #132	; 0x84
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	2b03      	cmp	r3, #3
    22c0:	d917      	bls.n	22f2 <m2m_wifi_connect_sc+0x28a>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    22c2:	4a62      	ldr	r2, [pc, #392]	; (244c <m2m_wifi_connect_sc+0x3e4>)
    22c4:	4953      	ldr	r1, [pc, #332]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    22c6:	4b54      	ldr	r3, [pc, #336]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    22c8:	0018      	movs	r0, r3
    22ca:	4b54      	ldr	r3, [pc, #336]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    22cc:	4798      	blx	r3
    22ce:	2384      	movs	r3, #132	; 0x84
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	681b      	ldr	r3, [r3, #0]
    22d4:	781b      	ldrb	r3, [r3, #0]
    22d6:	001a      	movs	r2, r3
    22d8:	4b5d      	ldr	r3, [pc, #372]	; (2450 <m2m_wifi_connect_sc+0x3e8>)
    22da:	0011      	movs	r1, r2
    22dc:	0018      	movs	r0, r3
    22de:	4b4f      	ldr	r3, [pc, #316]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    22e0:	4798      	blx	r3
    22e2:	200d      	movs	r0, #13
    22e4:	4b50      	ldr	r3, [pc, #320]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    22e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    22e8:	2397      	movs	r3, #151	; 0x97
    22ea:	18fb      	adds	r3, r7, r3
    22ec:	22f4      	movs	r2, #244	; 0xf4
    22ee:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    22f0:	e0de      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    22f2:	2388      	movs	r3, #136	; 0x88
    22f4:	18fb      	adds	r3, r7, r3
    22f6:	681b      	ldr	r3, [r3, #0]
    22f8:	785b      	ldrb	r3, [r3, #1]
    22fa:	3b01      	subs	r3, #1
    22fc:	b2da      	uxtb	r2, r3
    22fe:	2384      	movs	r3, #132	; 0x84
    2300:	18fb      	adds	r3, r7, r3
    2302:	681b      	ldr	r3, [r3, #0]
    2304:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2306:	2384      	movs	r3, #132	; 0x84
    2308:	18fb      	adds	r3, r7, r3
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	785b      	ldrb	r3, [r3, #1]
    230e:	2b0a      	cmp	r3, #10
    2310:	d01e      	beq.n	2350 <m2m_wifi_connect_sc+0x2e8>
    2312:	2384      	movs	r3, #132	; 0x84
    2314:	18fb      	adds	r3, r7, r3
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	785b      	ldrb	r3, [r3, #1]
    231a:	2b1a      	cmp	r3, #26
    231c:	d018      	beq.n	2350 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    231e:	2396      	movs	r3, #150	; 0x96
    2320:	009a      	lsls	r2, r3, #2
    2322:	493c      	ldr	r1, [pc, #240]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    2324:	4b3c      	ldr	r3, [pc, #240]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    2326:	0018      	movs	r0, r3
    2328:	4b3c      	ldr	r3, [pc, #240]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    232a:	4798      	blx	r3
    232c:	2384      	movs	r3, #132	; 0x84
    232e:	18fb      	adds	r3, r7, r3
    2330:	681b      	ldr	r3, [r3, #0]
    2332:	785b      	ldrb	r3, [r3, #1]
    2334:	001a      	movs	r2, r3
    2336:	4b47      	ldr	r3, [pc, #284]	; (2454 <m2m_wifi_connect_sc+0x3ec>)
    2338:	0011      	movs	r1, r2
    233a:	0018      	movs	r0, r3
    233c:	4b37      	ldr	r3, [pc, #220]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    233e:	4798      	blx	r3
    2340:	200d      	movs	r0, #13
    2342:	4b39      	ldr	r3, [pc, #228]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    2344:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2346:	2397      	movs	r3, #151	; 0x97
    2348:	18fb      	adds	r3, r7, r3
    234a:	22f4      	movs	r2, #244	; 0xf4
    234c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    234e:	e0af      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2350:	2384      	movs	r3, #132	; 0x84
    2352:	18fb      	adds	r3, r7, r3
    2354:	681b      	ldr	r3, [r3, #0]
    2356:	1c98      	adds	r0, r3, #2
    2358:	2388      	movs	r3, #136	; 0x88
    235a:	18fb      	adds	r3, r7, r3
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	1c99      	adds	r1, r3, #2
    2360:	2388      	movs	r3, #136	; 0x88
    2362:	18fb      	adds	r3, r7, r3
    2364:	681b      	ldr	r3, [r3, #0]
    2366:	785b      	ldrb	r3, [r3, #1]
    2368:	001a      	movs	r2, r3
    236a:	4b37      	ldr	r3, [pc, #220]	; (2448 <m2m_wifi_connect_sc+0x3e0>)
    236c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    236e:	2388      	movs	r3, #136	; 0x88
    2370:	18fb      	adds	r3, r7, r3
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	785b      	ldrb	r3, [r3, #1]
    2376:	001a      	movs	r2, r3
    2378:	2384      	movs	r3, #132	; 0x84
    237a:	18fb      	adds	r3, r7, r3
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	189b      	adds	r3, r3, r2
    2380:	2200      	movs	r2, #0
    2382:	709a      	strb	r2, [r3, #2]
    2384:	e083      	b.n	248e <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2386:	230a      	movs	r3, #10
    2388:	18fb      	adds	r3, r7, r3
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	2b02      	cmp	r3, #2
    238e:	d130      	bne.n	23f2 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2390:	2382      	movs	r3, #130	; 0x82
    2392:	18fc      	adds	r4, r7, r3
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	0018      	movs	r0, r3
    2398:	4b24      	ldr	r3, [pc, #144]	; (242c <m2m_wifi_connect_sc+0x3c4>)
    239a:	4798      	blx	r3
    239c:	0003      	movs	r3, r0
    239e:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23a0:	2382      	movs	r3, #130	; 0x82
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	881b      	ldrh	r3, [r3, #0]
    23a6:	2b00      	cmp	r3, #0
    23a8:	d004      	beq.n	23b4 <m2m_wifi_connect_sc+0x34c>
    23aa:	2382      	movs	r3, #130	; 0x82
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	881b      	ldrh	r3, [r3, #0]
    23b0:	2b40      	cmp	r3, #64	; 0x40
    23b2:	d911      	bls.n	23d8 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    23b4:	4a28      	ldr	r2, [pc, #160]	; (2458 <m2m_wifi_connect_sc+0x3f0>)
    23b6:	4917      	ldr	r1, [pc, #92]	; (2414 <m2m_wifi_connect_sc+0x3ac>)
    23b8:	4b17      	ldr	r3, [pc, #92]	; (2418 <m2m_wifi_connect_sc+0x3b0>)
    23ba:	0018      	movs	r0, r3
    23bc:	4b17      	ldr	r3, [pc, #92]	; (241c <m2m_wifi_connect_sc+0x3b4>)
    23be:	4798      	blx	r3
    23c0:	4b26      	ldr	r3, [pc, #152]	; (245c <m2m_wifi_connect_sc+0x3f4>)
    23c2:	0018      	movs	r0, r3
    23c4:	4b17      	ldr	r3, [pc, #92]	; (2424 <m2m_wifi_connect_sc+0x3bc>)
    23c6:	4798      	blx	r3
    23c8:	200d      	movs	r0, #13
    23ca:	4b17      	ldr	r3, [pc, #92]	; (2428 <m2m_wifi_connect_sc+0x3c0>)
    23cc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23ce:	2397      	movs	r3, #151	; 0x97
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	22f4      	movs	r2, #244	; 0xf4
    23d4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    23d6:	e06b      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    23d8:	238c      	movs	r3, #140	; 0x8c
    23da:	18fb      	adds	r3, r7, r3
    23dc:	6818      	ldr	r0, [r3, #0]
    23de:	2382      	movs	r3, #130	; 0x82
    23e0:	18fb      	adds	r3, r7, r3
    23e2:	881b      	ldrh	r3, [r3, #0]
    23e4:	3301      	adds	r3, #1
    23e6:	001a      	movs	r2, r3
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	0019      	movs	r1, r3
    23ec:	4b16      	ldr	r3, [pc, #88]	; (2448 <m2m_wifi_connect_sc+0x3e0>)
    23ee:	4798      	blx	r3
    23f0:	e04d      	b.n	248e <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    23f2:	230a      	movs	r3, #10
    23f4:	18fb      	adds	r3, r7, r3
    23f6:	781b      	ldrb	r3, [r3, #0]
    23f8:	2b04      	cmp	r3, #4
    23fa:	d131      	bne.n	2460 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    23fc:	238c      	movs	r3, #140	; 0x8c
    23fe:	18fb      	adds	r3, r7, r3
    2400:	681b      	ldr	r3, [r3, #0]
    2402:	6879      	ldr	r1, [r7, #4]
    2404:	223e      	movs	r2, #62	; 0x3e
    2406:	0018      	movs	r0, r3
    2408:	4b0f      	ldr	r3, [pc, #60]	; (2448 <m2m_wifi_connect_sc+0x3e0>)
    240a:	4798      	blx	r3
    240c:	e03f      	b.n	248e <m2m_wifi_connect_sc+0x426>
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	0000021b 	.word	0x0000021b
    2414:	0000ec08 	.word	0x0000ec08
    2418:	0000e864 	.word	0x0000e864
    241c:	0000cf25 	.word	0x0000cf25
    2420:	0000ea98 	.word	0x0000ea98
    2424:	0000d041 	.word	0x0000d041
    2428:	0000cf59 	.word	0x0000cf59
    242c:	00000d1b 	.word	0x00000d1b
    2430:	00000227 	.word	0x00000227
    2434:	0000eaac 	.word	0x0000eaac
    2438:	00000231 	.word	0x00000231
    243c:	0000eab8 	.word	0x0000eab8
    2440:	0000023a 	.word	0x0000023a
    2444:	0000eacc 	.word	0x0000eacc
    2448:	00000ca1 	.word	0x00000ca1
    244c:	00000251 	.word	0x00000251
    2450:	0000ead8 	.word	0x0000ead8
    2454:	0000eaf4 	.word	0x0000eaf4
    2458:	00000267 	.word	0x00000267
    245c:	0000eb10 	.word	0x0000eb10
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2460:	230a      	movs	r3, #10
    2462:	18fb      	adds	r3, r7, r3
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	2b01      	cmp	r3, #1
    2468:	d011      	beq.n	248e <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    246a:	4a15      	ldr	r2, [pc, #84]	; (24c0 <m2m_wifi_connect_sc+0x458>)
    246c:	4915      	ldr	r1, [pc, #84]	; (24c4 <m2m_wifi_connect_sc+0x45c>)
    246e:	4b16      	ldr	r3, [pc, #88]	; (24c8 <m2m_wifi_connect_sc+0x460>)
    2470:	0018      	movs	r0, r3
    2472:	4b16      	ldr	r3, [pc, #88]	; (24cc <m2m_wifi_connect_sc+0x464>)
    2474:	4798      	blx	r3
    2476:	4b16      	ldr	r3, [pc, #88]	; (24d0 <m2m_wifi_connect_sc+0x468>)
    2478:	0018      	movs	r0, r3
    247a:	4b16      	ldr	r3, [pc, #88]	; (24d4 <m2m_wifi_connect_sc+0x46c>)
    247c:	4798      	blx	r3
    247e:	200d      	movs	r0, #13
    2480:	4b15      	ldr	r3, [pc, #84]	; (24d8 <m2m_wifi_connect_sc+0x470>)
    2482:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2484:	2397      	movs	r3, #151	; 0x97
    2486:	18fb      	adds	r3, r7, r3
    2488:	22f4      	movs	r2, #244	; 0xf4
    248a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    248c:	e010      	b.n	24b0 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    248e:	2397      	movs	r3, #151	; 0x97
    2490:	18fc      	adds	r4, r7, r3
    2492:	2314      	movs	r3, #20
    2494:	18fa      	adds	r2, r7, r3
    2496:	2300      	movs	r3, #0
    2498:	9302      	str	r3, [sp, #8]
    249a:	2300      	movs	r3, #0
    249c:	9301      	str	r3, [sp, #4]
    249e:	2300      	movs	r3, #0
    24a0:	9300      	str	r3, [sp, #0]
    24a2:	236c      	movs	r3, #108	; 0x6c
    24a4:	2128      	movs	r1, #40	; 0x28
    24a6:	2001      	movs	r0, #1
    24a8:	4d0c      	ldr	r5, [pc, #48]	; (24dc <m2m_wifi_connect_sc+0x474>)
    24aa:	47a8      	blx	r5
    24ac:	0003      	movs	r3, r0
    24ae:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    24b0:	2397      	movs	r3, #151	; 0x97
    24b2:	18fb      	adds	r3, r7, r3
    24b4:	781b      	ldrb	r3, [r3, #0]
    24b6:	b25b      	sxtb	r3, r3
}
    24b8:	0018      	movs	r0, r3
    24ba:	46bd      	mov	sp, r7
    24bc:	b026      	add	sp, #152	; 0x98
    24be:	bdb0      	pop	{r4, r5, r7, pc}
    24c0:	00000277 	.word	0x00000277
    24c4:	0000ec08 	.word	0x0000ec08
    24c8:	0000e864 	.word	0x0000e864
    24cc:	0000cf25 	.word	0x0000cf25
    24d0:	0000eb2c 	.word	0x0000eb2c
    24d4:	0000d041 	.word	0x0000d041
    24d8:	0000cf59 	.word	0x0000cf59
    24dc:	00000f3d 	.word	0x00000f3d

000024e0 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    24e0:	b580      	push	{r7, lr}
    24e2:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    24e4:	2300      	movs	r3, #0
}
    24e6:	0018      	movs	r0, r3
    24e8:	46bd      	mov	sp, r7
    24ea:	bd80      	pop	{r7, pc}

000024ec <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    24ec:	b590      	push	{r4, r7, lr}
    24ee:	b087      	sub	sp, #28
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    24f4:	2317      	movs	r3, #23
    24f6:	18fb      	adds	r3, r7, r3
    24f8:	2200      	movs	r2, #0
    24fa:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2500:	693b      	ldr	r3, [r7, #16]
    2502:	2280      	movs	r2, #128	; 0x80
    2504:	0052      	lsls	r2, r2, #1
    2506:	4313      	orrs	r3, r2
    2508:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    250a:	693a      	ldr	r2, [r7, #16]
    250c:	23a5      	movs	r3, #165	; 0xa5
    250e:	015b      	lsls	r3, r3, #5
    2510:	0011      	movs	r1, r2
    2512:	0018      	movs	r0, r3
    2514:	4b12      	ldr	r3, [pc, #72]	; (2560 <chip_apply_conf+0x74>)
    2516:	4798      	blx	r3
		if(val32 != 0) {		
    2518:	693b      	ldr	r3, [r7, #16]
    251a:	2b00      	cmp	r3, #0
    251c:	d018      	beq.n	2550 <chip_apply_conf+0x64>
			uint32 reg = 0;
    251e:	2300      	movs	r3, #0
    2520:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2522:	2317      	movs	r3, #23
    2524:	18fc      	adds	r4, r7, r3
    2526:	230c      	movs	r3, #12
    2528:	18fa      	adds	r2, r7, r3
    252a:	23a5      	movs	r3, #165	; 0xa5
    252c:	015b      	lsls	r3, r3, #5
    252e:	0011      	movs	r1, r2
    2530:	0018      	movs	r0, r3
    2532:	4b0c      	ldr	r3, [pc, #48]	; (2564 <chip_apply_conf+0x78>)
    2534:	4798      	blx	r3
    2536:	0003      	movs	r3, r0
    2538:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    253a:	2317      	movs	r3, #23
    253c:	18fb      	adds	r3, r7, r3
    253e:	781b      	ldrb	r3, [r3, #0]
    2540:	b25b      	sxtb	r3, r3
    2542:	2b00      	cmp	r3, #0
    2544:	d1e1      	bne.n	250a <chip_apply_conf+0x1e>
				if(reg == val32)
    2546:	68fa      	ldr	r2, [r7, #12]
    2548:	693b      	ldr	r3, [r7, #16]
    254a:	429a      	cmp	r2, r3
    254c:	d002      	beq.n	2554 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    254e:	e7dc      	b.n	250a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2550:	46c0      	nop			; (mov r8, r8)
    2552:	e000      	b.n	2556 <chip_apply_conf+0x6a>
					break;
    2554:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    2556:	2300      	movs	r3, #0
}
    2558:	0018      	movs	r0, r3
    255a:	46bd      	mov	sp, r7
    255c:	b007      	add	sp, #28
    255e:	bd90      	pop	{r4, r7, pc}
    2560:	00002d3d 	.word	0x00002d3d
    2564:	00002d19 	.word	0x00002d19

00002568 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2568:	b590      	push	{r4, r7, lr}
    256a:	b083      	sub	sp, #12
    256c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    256e:	2300      	movs	r3, #0
    2570:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    2572:	1dfb      	adds	r3, r7, #7
    2574:	2200      	movs	r2, #0
    2576:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2578:	1dfc      	adds	r4, r7, #7
    257a:	003b      	movs	r3, r7
    257c:	4a24      	ldr	r2, [pc, #144]	; (2610 <enable_interrupts+0xa8>)
    257e:	0019      	movs	r1, r3
    2580:	0010      	movs	r0, r2
    2582:	4b24      	ldr	r3, [pc, #144]	; (2614 <enable_interrupts+0xac>)
    2584:	4798      	blx	r3
    2586:	0003      	movs	r3, r0
    2588:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    258a:	1dfb      	adds	r3, r7, #7
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	b25b      	sxtb	r3, r3
    2590:	2b00      	cmp	r3, #0
    2592:	d131      	bne.n	25f8 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    2594:	683b      	ldr	r3, [r7, #0]
    2596:	2280      	movs	r2, #128	; 0x80
    2598:	0052      	lsls	r2, r2, #1
    259a:	4313      	orrs	r3, r2
    259c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    259e:	683b      	ldr	r3, [r7, #0]
    25a0:	1dfc      	adds	r4, r7, #7
    25a2:	4a1b      	ldr	r2, [pc, #108]	; (2610 <enable_interrupts+0xa8>)
    25a4:	0019      	movs	r1, r3
    25a6:	0010      	movs	r0, r2
    25a8:	4b1b      	ldr	r3, [pc, #108]	; (2618 <enable_interrupts+0xb0>)
    25aa:	4798      	blx	r3
    25ac:	0003      	movs	r3, r0
    25ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25b0:	1dfb      	adds	r3, r7, #7
    25b2:	781b      	ldrb	r3, [r3, #0]
    25b4:	b25b      	sxtb	r3, r3
    25b6:	2b00      	cmp	r3, #0
    25b8:	d120      	bne.n	25fc <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    25ba:	1dfc      	adds	r4, r7, #7
    25bc:	003a      	movs	r2, r7
    25be:	23d0      	movs	r3, #208	; 0xd0
    25c0:	015b      	lsls	r3, r3, #5
    25c2:	0011      	movs	r1, r2
    25c4:	0018      	movs	r0, r3
    25c6:	4b13      	ldr	r3, [pc, #76]	; (2614 <enable_interrupts+0xac>)
    25c8:	4798      	blx	r3
    25ca:	0003      	movs	r3, r0
    25cc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25ce:	1dfb      	adds	r3, r7, #7
    25d0:	781b      	ldrb	r3, [r3, #0]
    25d2:	b25b      	sxtb	r3, r3
    25d4:	2b00      	cmp	r3, #0
    25d6:	d113      	bne.n	2600 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    25d8:	683b      	ldr	r3, [r7, #0]
    25da:	2280      	movs	r2, #128	; 0x80
    25dc:	0252      	lsls	r2, r2, #9
    25de:	4313      	orrs	r3, r2
    25e0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    25e2:	683a      	ldr	r2, [r7, #0]
    25e4:	1dfc      	adds	r4, r7, #7
    25e6:	23d0      	movs	r3, #208	; 0xd0
    25e8:	015b      	lsls	r3, r3, #5
    25ea:	0011      	movs	r1, r2
    25ec:	0018      	movs	r0, r3
    25ee:	4b0a      	ldr	r3, [pc, #40]	; (2618 <enable_interrupts+0xb0>)
    25f0:	4798      	blx	r3
    25f2:	0003      	movs	r3, r0
    25f4:	7023      	strb	r3, [r4, #0]
    25f6:	e004      	b.n	2602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	e002      	b.n	2602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	e000      	b.n	2602 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2600:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    2602:	1dfb      	adds	r3, r7, #7
    2604:	781b      	ldrb	r3, [r3, #0]
    2606:	b25b      	sxtb	r3, r3
}
    2608:	0018      	movs	r0, r3
    260a:	46bd      	mov	sp, r7
    260c:	b003      	add	sp, #12
    260e:	bd90      	pop	{r4, r7, pc}
    2610:	00001408 	.word	0x00001408
    2614:	00002d19 	.word	0x00002d19
    2618:	00002d3d 	.word	0x00002d3d

0000261c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    261c:	b580      	push	{r7, lr}
    261e:	b082      	sub	sp, #8
    2620:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    2622:	4b32      	ldr	r3, [pc, #200]	; (26ec <nmi_get_chipid+0xd0>)
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d159      	bne.n	26de <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    262a:	4a30      	ldr	r2, [pc, #192]	; (26ec <nmi_get_chipid+0xd0>)
    262c:	2380      	movs	r3, #128	; 0x80
    262e:	015b      	lsls	r3, r3, #5
    2630:	0011      	movs	r1, r2
    2632:	0018      	movs	r0, r3
    2634:	4b2e      	ldr	r3, [pc, #184]	; (26f0 <nmi_get_chipid+0xd4>)
    2636:	4798      	blx	r3
    2638:	1e03      	subs	r3, r0, #0
    263a:	d004      	beq.n	2646 <nmi_get_chipid+0x2a>
			chipid = 0;
    263c:	4b2b      	ldr	r3, [pc, #172]	; (26ec <nmi_get_chipid+0xd0>)
    263e:	2200      	movs	r2, #0
    2640:	601a      	str	r2, [r3, #0]
			return 0;
    2642:	2300      	movs	r3, #0
    2644:	e04d      	b.n	26e2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2646:	1d3b      	adds	r3, r7, #4
    2648:	4a2a      	ldr	r2, [pc, #168]	; (26f4 <nmi_get_chipid+0xd8>)
    264a:	0019      	movs	r1, r3
    264c:	0010      	movs	r0, r2
    264e:	4b28      	ldr	r3, [pc, #160]	; (26f0 <nmi_get_chipid+0xd4>)
    2650:	4798      	blx	r3
    2652:	1e03      	subs	r3, r0, #0
    2654:	d004      	beq.n	2660 <nmi_get_chipid+0x44>
			chipid = 0;
    2656:	4b25      	ldr	r3, [pc, #148]	; (26ec <nmi_get_chipid+0xd0>)
    2658:	2200      	movs	r2, #0
    265a:	601a      	str	r2, [r3, #0]
			return 0;
    265c:	2300      	movs	r3, #0
    265e:	e040      	b.n	26e2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    2660:	4b22      	ldr	r3, [pc, #136]	; (26ec <nmi_get_chipid+0xd0>)
    2662:	681b      	ldr	r3, [r3, #0]
    2664:	4a24      	ldr	r2, [pc, #144]	; (26f8 <nmi_get_chipid+0xdc>)
    2666:	4293      	cmp	r3, r2
    2668:	d106      	bne.n	2678 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	2b01      	cmp	r3, #1
    266e:	d029      	beq.n	26c4 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    2670:	4b1e      	ldr	r3, [pc, #120]	; (26ec <nmi_get_chipid+0xd0>)
    2672:	4a22      	ldr	r2, [pc, #136]	; (26fc <nmi_get_chipid+0xe0>)
    2674:	601a      	str	r2, [r3, #0]
    2676:	e025      	b.n	26c4 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    2678:	4b1c      	ldr	r3, [pc, #112]	; (26ec <nmi_get_chipid+0xd0>)
    267a:	681b      	ldr	r3, [r3, #0]
    267c:	4a20      	ldr	r2, [pc, #128]	; (2700 <nmi_get_chipid+0xe4>)
    267e:	4293      	cmp	r3, r2
    2680:	d10d      	bne.n	269e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	2b03      	cmp	r3, #3
    2686:	d01d      	beq.n	26c4 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    2688:	687b      	ldr	r3, [r7, #4]
    268a:	2b04      	cmp	r3, #4
    268c:	d103      	bne.n	2696 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    268e:	4b17      	ldr	r3, [pc, #92]	; (26ec <nmi_get_chipid+0xd0>)
    2690:	4a1c      	ldr	r2, [pc, #112]	; (2704 <nmi_get_chipid+0xe8>)
    2692:	601a      	str	r2, [r3, #0]
    2694:	e016      	b.n	26c4 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    2696:	4b15      	ldr	r3, [pc, #84]	; (26ec <nmi_get_chipid+0xd0>)
    2698:	4a1b      	ldr	r2, [pc, #108]	; (2708 <nmi_get_chipid+0xec>)
    269a:	601a      	str	r2, [r3, #0]
    269c:	e012      	b.n	26c4 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    269e:	4b13      	ldr	r3, [pc, #76]	; (26ec <nmi_get_chipid+0xd0>)
    26a0:	681b      	ldr	r3, [r3, #0]
    26a2:	4a1a      	ldr	r2, [pc, #104]	; (270c <nmi_get_chipid+0xf0>)
    26a4:	4293      	cmp	r3, r2
    26a6:	d10d      	bne.n	26c4 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    26a8:	4a10      	ldr	r2, [pc, #64]	; (26ec <nmi_get_chipid+0xd0>)
    26aa:	23ec      	movs	r3, #236	; 0xec
    26ac:	039b      	lsls	r3, r3, #14
    26ae:	0011      	movs	r1, r2
    26b0:	0018      	movs	r0, r3
    26b2:	4b0f      	ldr	r3, [pc, #60]	; (26f0 <nmi_get_chipid+0xd4>)
    26b4:	4798      	blx	r3
    26b6:	1e03      	subs	r3, r0, #0
    26b8:	d004      	beq.n	26c4 <nmi_get_chipid+0xa8>
			chipid = 0;
    26ba:	4b0c      	ldr	r3, [pc, #48]	; (26ec <nmi_get_chipid+0xd0>)
    26bc:	2200      	movs	r2, #0
    26be:	601a      	str	r2, [r3, #0]
			return 0;
    26c0:	2300      	movs	r3, #0
    26c2:	e00e      	b.n	26e2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    26c4:	4b09      	ldr	r3, [pc, #36]	; (26ec <nmi_get_chipid+0xd0>)
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	4a11      	ldr	r2, [pc, #68]	; (2710 <nmi_get_chipid+0xf4>)
    26ca:	401a      	ands	r2, r3
    26cc:	4b07      	ldr	r3, [pc, #28]	; (26ec <nmi_get_chipid+0xd0>)
    26ce:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    26d0:	4b06      	ldr	r3, [pc, #24]	; (26ec <nmi_get_chipid+0xd0>)
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	22a0      	movs	r2, #160	; 0xa0
    26d6:	02d2      	lsls	r2, r2, #11
    26d8:	431a      	orrs	r2, r3
    26da:	4b04      	ldr	r3, [pc, #16]	; (26ec <nmi_get_chipid+0xd0>)
    26dc:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    26de:	4b03      	ldr	r3, [pc, #12]	; (26ec <nmi_get_chipid+0xd0>)
    26e0:	681b      	ldr	r3, [r3, #0]
}
    26e2:	0018      	movs	r0, r3
    26e4:	46bd      	mov	sp, r7
    26e6:	b002      	add	sp, #8
    26e8:	bd80      	pop	{r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	2000020c 	.word	0x2000020c
    26f0:	00002d19 	.word	0x00002d19
    26f4:	000013f4 	.word	0x000013f4
    26f8:	001002a0 	.word	0x001002a0
    26fc:	001002a1 	.word	0x001002a1
    2700:	001002b0 	.word	0x001002b0
    2704:	001002b1 	.word	0x001002b1
    2708:	001002b2 	.word	0x001002b2
    270c:	001000f0 	.word	0x001000f0
    2710:	fff0ffff 	.word	0xfff0ffff

00002714 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2714:	b590      	push	{r4, r7, lr}
    2716:	b083      	sub	sp, #12
    2718:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    271a:	1dfb      	adds	r3, r7, #7
    271c:	2200      	movs	r2, #0
    271e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2720:	1dfc      	adds	r4, r7, #7
    2722:	003b      	movs	r3, r7
    2724:	0019      	movs	r1, r3
    2726:	2010      	movs	r0, #16
    2728:	4b2e      	ldr	r3, [pc, #184]	; (27e4 <chip_sleep+0xd0>)
    272a:	4798      	blx	r3
    272c:	0003      	movs	r3, r0
    272e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2730:	1dfb      	adds	r3, r7, #7
    2732:	781b      	ldrb	r3, [r3, #0]
    2734:	b25b      	sxtb	r3, r3
    2736:	2b00      	cmp	r3, #0
    2738:	d145      	bne.n	27c6 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	2201      	movs	r2, #1
    273e:	4013      	ands	r3, r2
    2740:	d000      	beq.n	2744 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2742:	e7ed      	b.n	2720 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2744:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2746:	1dfc      	adds	r4, r7, #7
    2748:	003b      	movs	r3, r7
    274a:	0019      	movs	r1, r3
    274c:	2001      	movs	r0, #1
    274e:	4b25      	ldr	r3, [pc, #148]	; (27e4 <chip_sleep+0xd0>)
    2750:	4798      	blx	r3
    2752:	0003      	movs	r3, r0
    2754:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2756:	1dfb      	adds	r3, r7, #7
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	b25b      	sxtb	r3, r3
    275c:	2b00      	cmp	r3, #0
    275e:	d134      	bne.n	27ca <chip_sleep+0xb6>
	if(reg & NBIT1)
    2760:	683b      	ldr	r3, [r7, #0]
    2762:	2202      	movs	r2, #2
    2764:	4013      	ands	r3, r2
    2766:	d010      	beq.n	278a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	2202      	movs	r2, #2
    276c:	4393      	bics	r3, r2
    276e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2770:	683b      	ldr	r3, [r7, #0]
    2772:	1dfc      	adds	r4, r7, #7
    2774:	0019      	movs	r1, r3
    2776:	2001      	movs	r0, #1
    2778:	4b1b      	ldr	r3, [pc, #108]	; (27e8 <chip_sleep+0xd4>)
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    2780:	1dfb      	adds	r3, r7, #7
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	b25b      	sxtb	r3, r3
    2786:	2b00      	cmp	r3, #0
    2788:	d121      	bne.n	27ce <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    278a:	1dfc      	adds	r4, r7, #7
    278c:	003b      	movs	r3, r7
    278e:	0019      	movs	r1, r3
    2790:	200b      	movs	r0, #11
    2792:	4b14      	ldr	r3, [pc, #80]	; (27e4 <chip_sleep+0xd0>)
    2794:	4798      	blx	r3
    2796:	0003      	movs	r3, r0
    2798:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    279a:	1dfb      	adds	r3, r7, #7
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	b25b      	sxtb	r3, r3
    27a0:	2b00      	cmp	r3, #0
    27a2:	d116      	bne.n	27d2 <chip_sleep+0xbe>
	if(reg & NBIT0)
    27a4:	683b      	ldr	r3, [r7, #0]
    27a6:	2201      	movs	r2, #1
    27a8:	4013      	ands	r3, r2
    27aa:	d013      	beq.n	27d4 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    27ac:	683b      	ldr	r3, [r7, #0]
    27ae:	2201      	movs	r2, #1
    27b0:	4393      	bics	r3, r2
    27b2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    27b4:	683b      	ldr	r3, [r7, #0]
    27b6:	1dfc      	adds	r4, r7, #7
    27b8:	0019      	movs	r1, r3
    27ba:	200b      	movs	r0, #11
    27bc:	4b0a      	ldr	r3, [pc, #40]	; (27e8 <chip_sleep+0xd4>)
    27be:	4798      	blx	r3
    27c0:	0003      	movs	r3, r0
    27c2:	7023      	strb	r3, [r4, #0]
    27c4:	e006      	b.n	27d4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	e004      	b.n	27d4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	e002      	b.n	27d4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	e000      	b.n	27d4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    27d2:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    27d4:	1dfb      	adds	r3, r7, #7
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	b25b      	sxtb	r3, r3
}
    27da:	0018      	movs	r0, r3
    27dc:	46bd      	mov	sp, r7
    27de:	b003      	add	sp, #12
    27e0:	bd90      	pop	{r4, r7, pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	00002d19 	.word	0x00002d19
    27e8:	00002d3d 	.word	0x00002d3d

000027ec <chip_wake>:
sint8 chip_wake(void)
{
    27ec:	b590      	push	{r4, r7, lr}
    27ee:	b085      	sub	sp, #20
    27f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    27f2:	230f      	movs	r3, #15
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	2200      	movs	r2, #0
    27f8:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    27fa:	2300      	movs	r3, #0
    27fc:	607b      	str	r3, [r7, #4]
    27fe:	2300      	movs	r3, #0
    2800:	603b      	str	r3, [r7, #0]
    2802:	2300      	movs	r3, #0
    2804:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2806:	230f      	movs	r3, #15
    2808:	18fc      	adds	r4, r7, r3
    280a:	1d3b      	adds	r3, r7, #4
    280c:	0019      	movs	r1, r3
    280e:	200b      	movs	r0, #11
    2810:	4b4c      	ldr	r3, [pc, #304]	; (2944 <chip_wake+0x158>)
    2812:	4798      	blx	r3
    2814:	0003      	movs	r3, r0
    2816:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2818:	230f      	movs	r3, #15
    281a:	18fb      	adds	r3, r7, r3
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	b25b      	sxtb	r3, r3
    2820:	2b00      	cmp	r3, #0
    2822:	d000      	beq.n	2826 <chip_wake+0x3a>
    2824:	e07f      	b.n	2926 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	2201      	movs	r2, #1
    282a:	4013      	ands	r3, r2
    282c:	d110      	bne.n	2850 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	2201      	movs	r2, #1
    2832:	4313      	orrs	r3, r2
    2834:	220f      	movs	r2, #15
    2836:	18bc      	adds	r4, r7, r2
    2838:	0019      	movs	r1, r3
    283a:	200b      	movs	r0, #11
    283c:	4b42      	ldr	r3, [pc, #264]	; (2948 <chip_wake+0x15c>)
    283e:	4798      	blx	r3
    2840:	0003      	movs	r3, r0
    2842:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2844:	230f      	movs	r3, #15
    2846:	18fb      	adds	r3, r7, r3
    2848:	781b      	ldrb	r3, [r3, #0]
    284a:	b25b      	sxtb	r3, r3
    284c:	2b00      	cmp	r3, #0
    284e:	d16c      	bne.n	292a <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2850:	230f      	movs	r3, #15
    2852:	18fc      	adds	r4, r7, r3
    2854:	1d3b      	adds	r3, r7, #4
    2856:	0019      	movs	r1, r3
    2858:	2001      	movs	r0, #1
    285a:	4b3a      	ldr	r3, [pc, #232]	; (2944 <chip_wake+0x158>)
    285c:	4798      	blx	r3
    285e:	0003      	movs	r3, r0
    2860:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2862:	230f      	movs	r3, #15
    2864:	18fb      	adds	r3, r7, r3
    2866:	781b      	ldrb	r3, [r3, #0]
    2868:	b25b      	sxtb	r3, r3
    286a:	2b00      	cmp	r3, #0
    286c:	d15f      	bne.n	292e <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	2202      	movs	r2, #2
    2872:	4013      	ands	r3, r2
    2874:	d110      	bne.n	2898 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	2202      	movs	r2, #2
    287a:	4313      	orrs	r3, r2
    287c:	220f      	movs	r2, #15
    287e:	18bc      	adds	r4, r7, r2
    2880:	0019      	movs	r1, r3
    2882:	2001      	movs	r0, #1
    2884:	4b30      	ldr	r3, [pc, #192]	; (2948 <chip_wake+0x15c>)
    2886:	4798      	blx	r3
    2888:	0003      	movs	r3, r0
    288a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    288c:	230f      	movs	r3, #15
    288e:	18fb      	adds	r3, r7, r3
    2890:	781b      	ldrb	r3, [r3, #0]
    2892:	b25b      	sxtb	r3, r3
    2894:	2b00      	cmp	r3, #0
    2896:	d14c      	bne.n	2932 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    2898:	230f      	movs	r3, #15
    289a:	18fc      	adds	r4, r7, r3
    289c:	003b      	movs	r3, r7
    289e:	0019      	movs	r1, r3
    28a0:	200f      	movs	r0, #15
    28a2:	4b28      	ldr	r3, [pc, #160]	; (2944 <chip_wake+0x158>)
    28a4:	4798      	blx	r3
    28a6:	0003      	movs	r3, r0
    28a8:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    28aa:	230f      	movs	r3, #15
    28ac:	18fb      	adds	r3, r7, r3
    28ae:	781b      	ldrb	r3, [r3, #0]
    28b0:	b25b      	sxtb	r3, r3
    28b2:	2b00      	cmp	r3, #0
    28b4:	d013      	beq.n	28de <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    28b6:	23aa      	movs	r3, #170	; 0xaa
    28b8:	005a      	lsls	r2, r3, #1
    28ba:	4924      	ldr	r1, [pc, #144]	; (294c <chip_wake+0x160>)
    28bc:	4b24      	ldr	r3, [pc, #144]	; (2950 <chip_wake+0x164>)
    28be:	0018      	movs	r0, r3
    28c0:	4b24      	ldr	r3, [pc, #144]	; (2954 <chip_wake+0x168>)
    28c2:	4798      	blx	r3
    28c4:	230f      	movs	r3, #15
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	2100      	movs	r1, #0
    28ca:	5659      	ldrsb	r1, [r3, r1]
    28cc:	683a      	ldr	r2, [r7, #0]
    28ce:	4b22      	ldr	r3, [pc, #136]	; (2958 <chip_wake+0x16c>)
    28d0:	0018      	movs	r0, r3
    28d2:	4b20      	ldr	r3, [pc, #128]	; (2954 <chip_wake+0x168>)
    28d4:	4798      	blx	r3
    28d6:	200d      	movs	r0, #13
    28d8:	4b20      	ldr	r3, [pc, #128]	; (295c <chip_wake+0x170>)
    28da:	4798      	blx	r3
			goto _WAKE_EXIT;
    28dc:	e02a      	b.n	2934 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    28de:	683b      	ldr	r3, [r7, #0]
    28e0:	2204      	movs	r2, #4
    28e2:	4013      	ands	r3, r2
    28e4:	d11b      	bne.n	291e <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    28e6:	2002      	movs	r0, #2
    28e8:	4b1d      	ldr	r3, [pc, #116]	; (2960 <chip_wake+0x174>)
    28ea:	4798      	blx	r3
		trials++;
    28ec:	68bb      	ldr	r3, [r7, #8]
    28ee:	3301      	adds	r3, #1
    28f0:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    28f2:	68bb      	ldr	r3, [r7, #8]
    28f4:	2b04      	cmp	r3, #4
    28f6:	d9cf      	bls.n	2898 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    28f8:	23af      	movs	r3, #175	; 0xaf
    28fa:	005a      	lsls	r2, r3, #1
    28fc:	4913      	ldr	r1, [pc, #76]	; (294c <chip_wake+0x160>)
    28fe:	4b14      	ldr	r3, [pc, #80]	; (2950 <chip_wake+0x164>)
    2900:	0018      	movs	r0, r3
    2902:	4b14      	ldr	r3, [pc, #80]	; (2954 <chip_wake+0x168>)
    2904:	4798      	blx	r3
    2906:	4b17      	ldr	r3, [pc, #92]	; (2964 <chip_wake+0x178>)
    2908:	0018      	movs	r0, r3
    290a:	4b17      	ldr	r3, [pc, #92]	; (2968 <chip_wake+0x17c>)
    290c:	4798      	blx	r3
    290e:	200d      	movs	r0, #13
    2910:	4b12      	ldr	r3, [pc, #72]	; (295c <chip_wake+0x170>)
    2912:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2914:	230f      	movs	r3, #15
    2916:	18fb      	adds	r3, r7, r3
    2918:	22fc      	movs	r2, #252	; 0xfc
    291a:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    291c:	e00a      	b.n	2934 <chip_wake+0x148>
			break;
    291e:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2920:	4b12      	ldr	r3, [pc, #72]	; (296c <chip_wake+0x180>)
    2922:	4798      	blx	r3
    2924:	e006      	b.n	2934 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	e004      	b.n	2934 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	e002      	b.n	2934 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	e000      	b.n	2934 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2932:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2934:	230f      	movs	r3, #15
    2936:	18fb      	adds	r3, r7, r3
    2938:	781b      	ldrb	r3, [r3, #0]
    293a:	b25b      	sxtb	r3, r3
}
    293c:	0018      	movs	r0, r3
    293e:	46bd      	mov	sp, r7
    2940:	b005      	add	sp, #20
    2942:	bd90      	pop	{r4, r7, pc}
    2944:	00002d19 	.word	0x00002d19
    2948:	00002d3d 	.word	0x00002d3d
    294c:	0000eca0 	.word	0x0000eca0
    2950:	0000ec1c 	.word	0x0000ec1c
    2954:	0000cf25 	.word	0x0000cf25
    2958:	0000ec30 	.word	0x0000ec30
    295c:	0000cf59 	.word	0x0000cf59
    2960:	000003ed 	.word	0x000003ed
    2964:	0000ec48 	.word	0x0000ec48
    2968:	0000d041 	.word	0x0000d041
    296c:	00002cd9 	.word	0x00002cd9

00002970 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2970:	b580      	push	{r7, lr}
    2972:	b088      	sub	sp, #32
    2974:	af00      	add	r7, sp, #0
    2976:	0002      	movs	r2, r0
    2978:	1dfb      	adds	r3, r7, #7
    297a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    297c:	2313      	movs	r3, #19
    297e:	18fb      	adds	r3, r7, r3
    2980:	2200      	movs	r2, #0
    2982:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2984:	2300      	movs	r3, #0
    2986:	61fb      	str	r3, [r7, #28]
    2988:	2300      	movs	r3, #0
    298a:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    298c:	2300      	movs	r3, #0
    298e:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    2990:	4b4a      	ldr	r3, [pc, #296]	; (2abc <wait_for_bootrom+0x14c>)
    2992:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    2994:	2300      	movs	r3, #0
    2996:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2998:	4b49      	ldr	r3, [pc, #292]	; (2ac0 <wait_for_bootrom+0x150>)
    299a:	0018      	movs	r0, r3
    299c:	4b49      	ldr	r3, [pc, #292]	; (2ac4 <wait_for_bootrom+0x154>)
    299e:	4798      	blx	r3
    29a0:	0003      	movs	r3, r0
    29a2:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    29a4:	69fb      	ldr	r3, [r7, #28]
    29a6:	2b00      	cmp	r3, #0
    29a8:	db03      	blt.n	29b2 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    29aa:	2001      	movs	r0, #1
    29ac:	4b46      	ldr	r3, [pc, #280]	; (2ac8 <wait_for_bootrom+0x158>)
    29ae:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    29b0:	e7f2      	b.n	2998 <wait_for_bootrom+0x28>
			break;
    29b2:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    29b4:	4b45      	ldr	r3, [pc, #276]	; (2acc <wait_for_bootrom+0x15c>)
    29b6:	0018      	movs	r0, r3
    29b8:	4b42      	ldr	r3, [pc, #264]	; (2ac4 <wait_for_bootrom+0x154>)
    29ba:	4798      	blx	r3
    29bc:	0003      	movs	r3, r0
    29be:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    29c0:	69fb      	ldr	r3, [r7, #28]
    29c2:	2201      	movs	r2, #1
    29c4:	4013      	ands	r3, r2
    29c6:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    29c8:	69fb      	ldr	r3, [r7, #28]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d112      	bne.n	29f4 <wait_for_bootrom+0x84>
	{
		reg = 0;
    29ce:	2300      	movs	r3, #0
    29d0:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    29d2:	e00b      	b.n	29ec <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    29d4:	2001      	movs	r0, #1
    29d6:	4b3c      	ldr	r3, [pc, #240]	; (2ac8 <wait_for_bootrom+0x158>)
    29d8:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    29da:	4b3d      	ldr	r3, [pc, #244]	; (2ad0 <wait_for_bootrom+0x160>)
    29dc:	0018      	movs	r0, r3
    29de:	4b39      	ldr	r3, [pc, #228]	; (2ac4 <wait_for_bootrom+0x154>)
    29e0:	4798      	blx	r3
    29e2:	0003      	movs	r3, r0
    29e4:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    29e6:	69bb      	ldr	r3, [r7, #24]
    29e8:	3301      	adds	r3, #1
    29ea:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    29ec:	69fb      	ldr	r3, [r7, #28]
    29ee:	4a39      	ldr	r2, [pc, #228]	; (2ad4 <wait_for_bootrom+0x164>)
    29f0:	4293      	cmp	r3, r2
    29f2:	d1ef      	bne.n	29d4 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    29f4:	1dfb      	adds	r3, r7, #7
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	2b02      	cmp	r3, #2
    29fa:	d10d      	bne.n	2a18 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    29fc:	4a36      	ldr	r2, [pc, #216]	; (2ad8 <wait_for_bootrom+0x168>)
    29fe:	4b37      	ldr	r3, [pc, #220]	; (2adc <wait_for_bootrom+0x16c>)
    2a00:	0011      	movs	r1, r2
    2a02:	0018      	movs	r0, r3
    2a04:	4b36      	ldr	r3, [pc, #216]	; (2ae0 <wait_for_bootrom+0x170>)
    2a06:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2a08:	2380      	movs	r3, #128	; 0x80
    2a0a:	035b      	lsls	r3, r3, #13
    2a0c:	4a35      	ldr	r2, [pc, #212]	; (2ae4 <wait_for_bootrom+0x174>)
    2a0e:	0019      	movs	r1, r3
    2a10:	0010      	movs	r0, r2
    2a12:	4b33      	ldr	r3, [pc, #204]	; (2ae0 <wait_for_bootrom+0x170>)
    2a14:	4798      	blx	r3
    2a16:	e022      	b.n	2a5e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2a18:	1dfb      	adds	r3, r7, #7
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	2b03      	cmp	r3, #3
    2a1e:	d10b      	bne.n	2a38 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2a20:	4a2d      	ldr	r2, [pc, #180]	; (2ad8 <wait_for_bootrom+0x168>)
    2a22:	4b2e      	ldr	r3, [pc, #184]	; (2adc <wait_for_bootrom+0x16c>)
    2a24:	0011      	movs	r1, r2
    2a26:	0018      	movs	r0, r3
    2a28:	4b2d      	ldr	r3, [pc, #180]	; (2ae0 <wait_for_bootrom+0x170>)
    2a2a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2a2c:	4b2d      	ldr	r3, [pc, #180]	; (2ae4 <wait_for_bootrom+0x174>)
    2a2e:	2100      	movs	r1, #0
    2a30:	0018      	movs	r0, r3
    2a32:	4b2b      	ldr	r3, [pc, #172]	; (2ae0 <wait_for_bootrom+0x170>)
    2a34:	4798      	blx	r3
    2a36:	e012      	b.n	2a5e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2a38:	1dfb      	adds	r3, r7, #7
    2a3a:	781b      	ldrb	r3, [r3, #0]
    2a3c:	2b04      	cmp	r3, #4
    2a3e:	d108      	bne.n	2a52 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2a40:	2380      	movs	r3, #128	; 0x80
    2a42:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a44:	68fb      	ldr	r3, [r7, #12]
    2a46:	4a27      	ldr	r2, [pc, #156]	; (2ae4 <wait_for_bootrom+0x174>)
    2a48:	0019      	movs	r1, r3
    2a4a:	0010      	movs	r0, r2
    2a4c:	4b24      	ldr	r3, [pc, #144]	; (2ae0 <wait_for_bootrom+0x170>)
    2a4e:	4798      	blx	r3
    2a50:	e005      	b.n	2a5e <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a52:	68fb      	ldr	r3, [r7, #12]
    2a54:	4a23      	ldr	r2, [pc, #140]	; (2ae4 <wait_for_bootrom+0x174>)
    2a56:	0019      	movs	r1, r3
    2a58:	0010      	movs	r0, r2
    2a5a:	4b21      	ldr	r3, [pc, #132]	; (2ae0 <wait_for_bootrom+0x170>)
    2a5c:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2a5e:	4b22      	ldr	r3, [pc, #136]	; (2ae8 <wait_for_bootrom+0x178>)
    2a60:	4798      	blx	r3
    2a62:	0003      	movs	r3, r0
    2a64:	051b      	lsls	r3, r3, #20
    2a66:	0d1b      	lsrs	r3, r3, #20
    2a68:	4a20      	ldr	r2, [pc, #128]	; (2aec <wait_for_bootrom+0x17c>)
    2a6a:	4293      	cmp	r3, r2
    2a6c:	d906      	bls.n	2a7c <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2a6e:	697b      	ldr	r3, [r7, #20]
    2a70:	2202      	movs	r2, #2
    2a72:	4313      	orrs	r3, r2
    2a74:	0018      	movs	r0, r3
    2a76:	4b1e      	ldr	r3, [pc, #120]	; (2af0 <wait_for_bootrom+0x180>)
    2a78:	4798      	blx	r3
    2a7a:	e003      	b.n	2a84 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    2a7c:	697b      	ldr	r3, [r7, #20]
    2a7e:	0018      	movs	r0, r3
    2a80:	4b1b      	ldr	r3, [pc, #108]	; (2af0 <wait_for_bootrom+0x180>)
    2a82:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2a84:	4b1b      	ldr	r3, [pc, #108]	; (2af4 <wait_for_bootrom+0x184>)
    2a86:	0018      	movs	r0, r3
    2a88:	4b1b      	ldr	r3, [pc, #108]	; (2af8 <wait_for_bootrom+0x188>)
    2a8a:	4798      	blx	r3
    2a8c:	68fa      	ldr	r2, [r7, #12]
    2a8e:	4b1b      	ldr	r3, [pc, #108]	; (2afc <wait_for_bootrom+0x18c>)
    2a90:	0011      	movs	r1, r2
    2a92:	0018      	movs	r0, r3
    2a94:	4b18      	ldr	r3, [pc, #96]	; (2af8 <wait_for_bootrom+0x188>)
    2a96:	4798      	blx	r3
    2a98:	200d      	movs	r0, #13
    2a9a:	4b19      	ldr	r3, [pc, #100]	; (2b00 <wait_for_bootrom+0x190>)
    2a9c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2a9e:	4a19      	ldr	r2, [pc, #100]	; (2b04 <wait_for_bootrom+0x194>)
    2aa0:	4b0b      	ldr	r3, [pc, #44]	; (2ad0 <wait_for_bootrom+0x160>)
    2aa2:	0011      	movs	r1, r2
    2aa4:	0018      	movs	r0, r3
    2aa6:	4b0e      	ldr	r3, [pc, #56]	; (2ae0 <wait_for_bootrom+0x170>)
    2aa8:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2aaa:	2313      	movs	r3, #19
    2aac:	18fb      	adds	r3, r7, r3
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	b25b      	sxtb	r3, r3
}
    2ab2:	0018      	movs	r0, r3
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b008      	add	sp, #32
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	13521352 	.word	0x13521352
    2ac0:	00001014 	.word	0x00001014
    2ac4:	00002cf9 	.word	0x00002cf9
    2ac8:	000003ed 	.word	0x000003ed
    2acc:	000207bc 	.word	0x000207bc
    2ad0:	000c000c 	.word	0x000c000c
    2ad4:	10add09e 	.word	0x10add09e
    2ad8:	3c1cd57d 	.word	0x3c1cd57d
    2adc:	000207ac 	.word	0x000207ac
    2ae0:	00002d3d 	.word	0x00002d3d
    2ae4:	0000108c 	.word	0x0000108c
    2ae8:	0000261d 	.word	0x0000261d
    2aec:	0000039f 	.word	0x0000039f
    2af0:	000024ed 	.word	0x000024ed
    2af4:	0000ec64 	.word	0x0000ec64
    2af8:	0000cf25 	.word	0x0000cf25
    2afc:	0000ec70 	.word	0x0000ec70
    2b00:	0000cf59 	.word	0x0000cf59
    2b04:	ef522f61 	.word	0xef522f61

00002b08 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b088      	sub	sp, #32
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	0002      	movs	r2, r0
    2b10:	1dfb      	adds	r3, r7, #7
    2b12:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2b14:	231f      	movs	r3, #31
    2b16:	18fb      	adds	r3, r7, r3
    2b18:	2200      	movs	r2, #0
    2b1a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2b1c:	2300      	movs	r3, #0
    2b1e:	61bb      	str	r3, [r7, #24]
    2b20:	2300      	movs	r3, #0
    2b22:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2b24:	2301      	movs	r3, #1
    2b26:	425b      	negs	r3, r3
    2b28:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2b2a:	4b1d      	ldr	r3, [pc, #116]	; (2ba0 <wait_for_firmware_start+0x98>)
    2b2c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2b2e:	4b1d      	ldr	r3, [pc, #116]	; (2ba4 <wait_for_firmware_start+0x9c>)
    2b30:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2b32:	1dfb      	adds	r3, r7, #7
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	2b02      	cmp	r3, #2
    2b38:	d003      	beq.n	2b42 <wait_for_firmware_start+0x3a>
    2b3a:	1dfb      	adds	r3, r7, #7
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	2b03      	cmp	r3, #3
    2b40:	d119      	bne.n	2b76 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2b42:	4b19      	ldr	r3, [pc, #100]	; (2ba8 <wait_for_firmware_start+0xa0>)
    2b44:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2b46:	4b19      	ldr	r3, [pc, #100]	; (2bac <wait_for_firmware_start+0xa4>)
    2b48:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2b4a:	e014      	b.n	2b76 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2b4c:	2002      	movs	r0, #2
    2b4e:	4b18      	ldr	r3, [pc, #96]	; (2bb0 <wait_for_firmware_start+0xa8>)
    2b50:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2b52:	68fb      	ldr	r3, [r7, #12]
    2b54:	0018      	movs	r0, r3
    2b56:	4b17      	ldr	r3, [pc, #92]	; (2bb4 <wait_for_firmware_start+0xac>)
    2b58:	4798      	blx	r3
    2b5a:	0003      	movs	r3, r0
    2b5c:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2b5e:	697b      	ldr	r3, [r7, #20]
    2b60:	3301      	adds	r3, #1
    2b62:	617b      	str	r3, [r7, #20]
    2b64:	697a      	ldr	r2, [r7, #20]
    2b66:	693b      	ldr	r3, [r7, #16]
    2b68:	429a      	cmp	r2, r3
    2b6a:	d304      	bcc.n	2b76 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2b6c:	231f      	movs	r3, #31
    2b6e:	18fb      	adds	r3, r7, r3
    2b70:	22fb      	movs	r2, #251	; 0xfb
    2b72:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2b74:	e00c      	b.n	2b90 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2b76:	68ba      	ldr	r2, [r7, #8]
    2b78:	69bb      	ldr	r3, [r7, #24]
    2b7a:	429a      	cmp	r2, r3
    2b7c:	d1e6      	bne.n	2b4c <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2b7e:	68bb      	ldr	r3, [r7, #8]
    2b80:	4a08      	ldr	r2, [pc, #32]	; (2ba4 <wait_for_firmware_start+0x9c>)
    2b82:	4293      	cmp	r3, r2
    2b84:	d104      	bne.n	2b90 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2b86:	4b06      	ldr	r3, [pc, #24]	; (2ba0 <wait_for_firmware_start+0x98>)
    2b88:	2100      	movs	r1, #0
    2b8a:	0018      	movs	r0, r3
    2b8c:	4b0a      	ldr	r3, [pc, #40]	; (2bb8 <wait_for_firmware_start+0xb0>)
    2b8e:	4798      	blx	r3
	}
ERR:
	return ret;
    2b90:	231f      	movs	r3, #31
    2b92:	18fb      	adds	r3, r7, r3
    2b94:	781b      	ldrb	r3, [r3, #0]
    2b96:	b25b      	sxtb	r3, r3
}
    2b98:	0018      	movs	r0, r3
    2b9a:	46bd      	mov	sp, r7
    2b9c:	b008      	add	sp, #32
    2b9e:	bd80      	pop	{r7, pc}
    2ba0:	0000108c 	.word	0x0000108c
    2ba4:	02532636 	.word	0x02532636
    2ba8:	000207ac 	.word	0x000207ac
    2bac:	d75dc1c3 	.word	0xd75dc1c3
    2bb0:	000003ed 	.word	0x000003ed
    2bb4:	00002cf9 	.word	0x00002cf9
    2bb8:	00002d3d 	.word	0x00002d3d

00002bbc <chip_deinit>:

sint8 chip_deinit(void)
{
    2bbc:	b590      	push	{r4, r7, lr}
    2bbe:	b083      	sub	sp, #12
    2bc0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2bc2:	2300      	movs	r3, #0
    2bc4:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bc6:	1dfc      	adds	r4, r7, #7
    2bc8:	003a      	movs	r2, r7
    2bca:	23a0      	movs	r3, #160	; 0xa0
    2bcc:	015b      	lsls	r3, r3, #5
    2bce:	0011      	movs	r1, r2
    2bd0:	0018      	movs	r0, r3
    2bd2:	4b1f      	ldr	r3, [pc, #124]	; (2c50 <chip_deinit+0x94>)
    2bd4:	4798      	blx	r3
    2bd6:	0003      	movs	r3, r0
    2bd8:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2bda:	1dfb      	adds	r3, r7, #7
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	b25b      	sxtb	r3, r3
    2be0:	2b00      	cmp	r3, #0
    2be2:	d00d      	beq.n	2c00 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2be4:	4a1b      	ldr	r2, [pc, #108]	; (2c54 <chip_deinit+0x98>)
    2be6:	491c      	ldr	r1, [pc, #112]	; (2c58 <chip_deinit+0x9c>)
    2be8:	4b1c      	ldr	r3, [pc, #112]	; (2c5c <chip_deinit+0xa0>)
    2bea:	0018      	movs	r0, r3
    2bec:	4b1c      	ldr	r3, [pc, #112]	; (2c60 <chip_deinit+0xa4>)
    2bee:	4798      	blx	r3
    2bf0:	4b1c      	ldr	r3, [pc, #112]	; (2c64 <chip_deinit+0xa8>)
    2bf2:	0018      	movs	r0, r3
    2bf4:	4b1c      	ldr	r3, [pc, #112]	; (2c68 <chip_deinit+0xac>)
    2bf6:	4798      	blx	r3
    2bf8:	200d      	movs	r0, #13
    2bfa:	4b1c      	ldr	r3, [pc, #112]	; (2c6c <chip_deinit+0xb0>)
    2bfc:	4798      	blx	r3
		goto ERR1;
    2bfe:	e020      	b.n	2c42 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2c00:	683b      	ldr	r3, [r7, #0]
    2c02:	4a1b      	ldr	r2, [pc, #108]	; (2c70 <chip_deinit+0xb4>)
    2c04:	4013      	ands	r3, r2
    2c06:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2c08:	683a      	ldr	r2, [r7, #0]
    2c0a:	1dfc      	adds	r4, r7, #7
    2c0c:	23a0      	movs	r3, #160	; 0xa0
    2c0e:	015b      	lsls	r3, r3, #5
    2c10:	0011      	movs	r1, r2
    2c12:	0018      	movs	r0, r3
    2c14:	4b17      	ldr	r3, [pc, #92]	; (2c74 <chip_deinit+0xb8>)
    2c16:	4798      	blx	r3
    2c18:	0003      	movs	r3, r0
    2c1a:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2c1c:	1dfb      	adds	r3, r7, #7
    2c1e:	781b      	ldrb	r3, [r3, #0]
    2c20:	b25b      	sxtb	r3, r3
    2c22:	2b00      	cmp	r3, #0
    2c24:	d00d      	beq.n	2c42 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2c26:	4a14      	ldr	r2, [pc, #80]	; (2c78 <chip_deinit+0xbc>)
    2c28:	490b      	ldr	r1, [pc, #44]	; (2c58 <chip_deinit+0x9c>)
    2c2a:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <chip_deinit+0xa0>)
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <chip_deinit+0xa4>)
    2c30:	4798      	blx	r3
    2c32:	4b0c      	ldr	r3, [pc, #48]	; (2c64 <chip_deinit+0xa8>)
    2c34:	0018      	movs	r0, r3
    2c36:	4b0c      	ldr	r3, [pc, #48]	; (2c68 <chip_deinit+0xac>)
    2c38:	4798      	blx	r3
    2c3a:	200d      	movs	r0, #13
    2c3c:	4b0b      	ldr	r3, [pc, #44]	; (2c6c <chip_deinit+0xb0>)
    2c3e:	4798      	blx	r3
		goto ERR1;
    2c40:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2c42:	1dfb      	adds	r3, r7, #7
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	b25b      	sxtb	r3, r3
}
    2c48:	0018      	movs	r0, r3
    2c4a:	46bd      	mov	sp, r7
    2c4c:	b003      	add	sp, #12
    2c4e:	bd90      	pop	{r4, r7, pc}
    2c50:	00002d19 	.word	0x00002d19
    2c54:	00000205 	.word	0x00000205
    2c58:	0000ecac 	.word	0x0000ecac
    2c5c:	0000ec1c 	.word	0x0000ec1c
    2c60:	0000cf25 	.word	0x0000cf25
    2c64:	0000ec88 	.word	0x0000ec88
    2c68:	0000d041 	.word	0x0000d041
    2c6c:	0000cf59 	.word	0x0000cf59
    2c70:	fffffbff 	.word	0xfffffbff
    2c74:	00002d3d 	.word	0x00002d3d
    2c78:	0000020b 	.word	0x0000020b

00002c7c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2c7c:	b590      	push	{r4, r7, lr}
    2c7e:	b085      	sub	sp, #20
    2c80:	af00      	add	r7, sp, #0
    2c82:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2c84:	230f      	movs	r3, #15
    2c86:	18fb      	adds	r3, r7, r3
    2c88:	2200      	movs	r2, #0
    2c8a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2c8c:	230f      	movs	r3, #15
    2c8e:	18fc      	adds	r4, r7, r3
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	0018      	movs	r0, r3
    2c94:	4b05      	ldr	r3, [pc, #20]	; (2cac <nm_bus_iface_init+0x30>)
    2c96:	4798      	blx	r3
    2c98:	0003      	movs	r3, r0
    2c9a:	7023      	strb	r3, [r4, #0]
	return ret;
    2c9c:	230f      	movs	r3, #15
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	b25b      	sxtb	r3, r3
}
    2ca4:	0018      	movs	r0, r3
    2ca6:	46bd      	mov	sp, r7
    2ca8:	b005      	add	sp, #20
    2caa:	bd90      	pop	{r4, r7, pc}
    2cac:	00000ab5 	.word	0x00000ab5

00002cb0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2cb0:	b590      	push	{r4, r7, lr}
    2cb2:	b083      	sub	sp, #12
    2cb4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2cb6:	1dfb      	adds	r3, r7, #7
    2cb8:	2200      	movs	r2, #0
    2cba:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2cbc:	1dfc      	adds	r4, r7, #7
    2cbe:	4b05      	ldr	r3, [pc, #20]	; (2cd4 <nm_bus_iface_deinit+0x24>)
    2cc0:	4798      	blx	r3
    2cc2:	0003      	movs	r3, r0
    2cc4:	7023      	strb	r3, [r4, #0]

	return ret;
    2cc6:	1dfb      	adds	r3, r7, #7
    2cc8:	781b      	ldrb	r3, [r3, #0]
    2cca:	b25b      	sxtb	r3, r3
}
    2ccc:	0018      	movs	r0, r3
    2cce:	46bd      	mov	sp, r7
    2cd0:	b003      	add	sp, #12
    2cd2:	bd90      	pop	{r4, r7, pc}
    2cd4:	00000c31 	.word	0x00000c31

00002cd8 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2cd8:	b580      	push	{r7, lr}
    2cda:	b082      	sub	sp, #8
    2cdc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2cde:	1dfb      	adds	r3, r7, #7
    2ce0:	2200      	movs	r2, #0
    2ce2:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <nm_bus_reset+0x1c>)
    2ce6:	4798      	blx	r3
    2ce8:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2cea:	0018      	movs	r0, r3
    2cec:	46bd      	mov	sp, r7
    2cee:	b002      	add	sp, #8
    2cf0:	bd80      	pop	{r7, pc}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	000045c1 	.word	0x000045c1

00002cf8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2cf8:	b580      	push	{r7, lr}
    2cfa:	b082      	sub	sp, #8
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2d00:	687b      	ldr	r3, [r7, #4]
    2d02:	0018      	movs	r0, r3
    2d04:	4b03      	ldr	r3, [pc, #12]	; (2d14 <nm_read_reg+0x1c>)
    2d06:	4798      	blx	r3
    2d08:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2d0a:	0018      	movs	r0, r3
    2d0c:	46bd      	mov	sp, r7
    2d0e:	b002      	add	sp, #8
    2d10:	bd80      	pop	{r7, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00004755 	.word	0x00004755

00002d18 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2d22:	683a      	ldr	r2, [r7, #0]
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	0011      	movs	r1, r2
    2d28:	0018      	movs	r0, r3
    2d2a:	4b03      	ldr	r3, [pc, #12]	; (2d38 <nm_read_reg_with_ret+0x20>)
    2d2c:	4798      	blx	r3
    2d2e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2d30:	0018      	movs	r0, r3
    2d32:	46bd      	mov	sp, r7
    2d34:	b002      	add	sp, #8
    2d36:	bd80      	pop	{r7, pc}
    2d38:	00004779 	.word	0x00004779

00002d3c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2d46:	683a      	ldr	r2, [r7, #0]
    2d48:	687b      	ldr	r3, [r7, #4]
    2d4a:	0011      	movs	r1, r2
    2d4c:	0018      	movs	r0, r3
    2d4e:	4b03      	ldr	r3, [pc, #12]	; (2d5c <nm_write_reg+0x20>)
    2d50:	4798      	blx	r3
    2d52:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2d54:	0018      	movs	r0, r3
    2d56:	46bd      	mov	sp, r7
    2d58:	b002      	add	sp, #8
    2d5a:	bd80      	pop	{r7, pc}
    2d5c:	000047c9 	.word	0x000047c9

00002d60 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d60:	b580      	push	{r7, lr}
    2d62:	b084      	sub	sp, #16
    2d64:	af00      	add	r7, sp, #0
    2d66:	60f8      	str	r0, [r7, #12]
    2d68:	60b9      	str	r1, [r7, #8]
    2d6a:	1dbb      	adds	r3, r7, #6
    2d6c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	881a      	ldrh	r2, [r3, #0]
    2d72:	68b9      	ldr	r1, [r7, #8]
    2d74:	68fb      	ldr	r3, [r7, #12]
    2d76:	0018      	movs	r0, r3
    2d78:	4b03      	ldr	r3, [pc, #12]	; (2d88 <p_nm_read_block+0x28>)
    2d7a:	4798      	blx	r3
    2d7c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2d7e:	0018      	movs	r0, r3
    2d80:	46bd      	mov	sp, r7
    2d82:	b004      	add	sp, #16
    2d84:	bd80      	pop	{r7, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	00004819 	.word	0x00004819

00002d8c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b086      	sub	sp, #24
    2d90:	af00      	add	r7, sp, #0
    2d92:	60f8      	str	r0, [r7, #12]
    2d94:	60b9      	str	r1, [r7, #8]
    2d96:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2d98:	4b2d      	ldr	r3, [pc, #180]	; (2e50 <nm_read_block+0xc4>)
    2d9a:	881a      	ldrh	r2, [r3, #0]
    2d9c:	2310      	movs	r3, #16
    2d9e:	18fb      	adds	r3, r7, r3
    2da0:	3a08      	subs	r2, #8
    2da2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2da4:	2300      	movs	r3, #0
    2da6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2da8:	2313      	movs	r3, #19
    2daa:	18fb      	adds	r3, r7, r3
    2dac:	2200      	movs	r2, #0
    2dae:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2db0:	2310      	movs	r3, #16
    2db2:	18fb      	adds	r3, r7, r3
    2db4:	881a      	ldrh	r2, [r3, #0]
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	429a      	cmp	r2, r3
    2dba:	d313      	bcc.n	2de4 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2dbc:	68ba      	ldr	r2, [r7, #8]
    2dbe:	697b      	ldr	r3, [r7, #20]
    2dc0:	18d1      	adds	r1, r2, r3
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	b29a      	uxth	r2, r3
    2dc6:	68fb      	ldr	r3, [r7, #12]
    2dc8:	0018      	movs	r0, r3
    2dca:	4b22      	ldr	r3, [pc, #136]	; (2e54 <nm_read_block+0xc8>)
    2dcc:	4798      	blx	r3
    2dce:	0003      	movs	r3, r0
    2dd0:	b2da      	uxtb	r2, r3
    2dd2:	2313      	movs	r3, #19
    2dd4:	18fb      	adds	r3, r7, r3
    2dd6:	781b      	ldrb	r3, [r3, #0]
    2dd8:	18d3      	adds	r3, r2, r3
    2dda:	b2da      	uxtb	r2, r3
    2ddc:	2313      	movs	r3, #19
    2dde:	18fb      	adds	r3, r7, r3
    2de0:	701a      	strb	r2, [r3, #0]
			break;
    2de2:	e02d      	b.n	2e40 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2de4:	68ba      	ldr	r2, [r7, #8]
    2de6:	697b      	ldr	r3, [r7, #20]
    2de8:	18d1      	adds	r1, r2, r3
    2dea:	2310      	movs	r3, #16
    2dec:	18fb      	adds	r3, r7, r3
    2dee:	881a      	ldrh	r2, [r3, #0]
    2df0:	68fb      	ldr	r3, [r7, #12]
    2df2:	0018      	movs	r0, r3
    2df4:	4b17      	ldr	r3, [pc, #92]	; (2e54 <nm_read_block+0xc8>)
    2df6:	4798      	blx	r3
    2df8:	0003      	movs	r3, r0
    2dfa:	b2da      	uxtb	r2, r3
    2dfc:	2313      	movs	r3, #19
    2dfe:	18fb      	adds	r3, r7, r3
    2e00:	781b      	ldrb	r3, [r3, #0]
    2e02:	18d3      	adds	r3, r2, r3
    2e04:	b2da      	uxtb	r2, r3
    2e06:	2313      	movs	r3, #19
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e0c:	2313      	movs	r3, #19
    2e0e:	18fb      	adds	r3, r7, r3
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	b25b      	sxtb	r3, r3
    2e14:	2b00      	cmp	r3, #0
    2e16:	d112      	bne.n	2e3e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e18:	2310      	movs	r3, #16
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	881b      	ldrh	r3, [r3, #0]
    2e1e:	687a      	ldr	r2, [r7, #4]
    2e20:	1ad3      	subs	r3, r2, r3
    2e22:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e24:	2310      	movs	r3, #16
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	697a      	ldr	r2, [r7, #20]
    2e2c:	18d3      	adds	r3, r2, r3
    2e2e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e30:	2310      	movs	r3, #16
    2e32:	18fb      	adds	r3, r7, r3
    2e34:	881b      	ldrh	r3, [r3, #0]
    2e36:	68fa      	ldr	r2, [r7, #12]
    2e38:	18d3      	adds	r3, r2, r3
    2e3a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2e3c:	e7b8      	b.n	2db0 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2e3e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2e40:	2313      	movs	r3, #19
    2e42:	18fb      	adds	r3, r7, r3
    2e44:	781b      	ldrb	r3, [r3, #0]
    2e46:	b25b      	sxtb	r3, r3
}
    2e48:	0018      	movs	r0, r3
    2e4a:	46bd      	mov	sp, r7
    2e4c:	b006      	add	sp, #24
    2e4e:	bd80      	pop	{r7, pc}
    2e50:	20000008 	.word	0x20000008
    2e54:	00002d61 	.word	0x00002d61

00002e58 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	b084      	sub	sp, #16
    2e5c:	af00      	add	r7, sp, #0
    2e5e:	60f8      	str	r0, [r7, #12]
    2e60:	60b9      	str	r1, [r7, #8]
    2e62:	1dbb      	adds	r3, r7, #6
    2e64:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2e66:	1dbb      	adds	r3, r7, #6
    2e68:	881a      	ldrh	r2, [r3, #0]
    2e6a:	68b9      	ldr	r1, [r7, #8]
    2e6c:	68fb      	ldr	r3, [r7, #12]
    2e6e:	0018      	movs	r0, r3
    2e70:	4b03      	ldr	r3, [pc, #12]	; (2e80 <p_nm_write_block+0x28>)
    2e72:	4798      	blx	r3
    2e74:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2e76:	0018      	movs	r0, r3
    2e78:	46bd      	mov	sp, r7
    2e7a:	b004      	add	sp, #16
    2e7c:	bd80      	pop	{r7, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	00004871 	.word	0x00004871

00002e84 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2e84:	b580      	push	{r7, lr}
    2e86:	b086      	sub	sp, #24
    2e88:	af00      	add	r7, sp, #0
    2e8a:	60f8      	str	r0, [r7, #12]
    2e8c:	60b9      	str	r1, [r7, #8]
    2e8e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2e90:	4b2d      	ldr	r3, [pc, #180]	; (2f48 <nm_write_block+0xc4>)
    2e92:	881a      	ldrh	r2, [r3, #0]
    2e94:	2310      	movs	r3, #16
    2e96:	18fb      	adds	r3, r7, r3
    2e98:	3a08      	subs	r2, #8
    2e9a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2e9c:	2300      	movs	r3, #0
    2e9e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2ea0:	2313      	movs	r3, #19
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	2200      	movs	r2, #0
    2ea6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2ea8:	2310      	movs	r3, #16
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	881a      	ldrh	r2, [r3, #0]
    2eae:	687b      	ldr	r3, [r7, #4]
    2eb0:	429a      	cmp	r2, r3
    2eb2:	d313      	bcc.n	2edc <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2eb4:	68ba      	ldr	r2, [r7, #8]
    2eb6:	697b      	ldr	r3, [r7, #20]
    2eb8:	18d1      	adds	r1, r2, r3
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	b29a      	uxth	r2, r3
    2ebe:	68fb      	ldr	r3, [r7, #12]
    2ec0:	0018      	movs	r0, r3
    2ec2:	4b22      	ldr	r3, [pc, #136]	; (2f4c <nm_write_block+0xc8>)
    2ec4:	4798      	blx	r3
    2ec6:	0003      	movs	r3, r0
    2ec8:	b2da      	uxtb	r2, r3
    2eca:	2313      	movs	r3, #19
    2ecc:	18fb      	adds	r3, r7, r3
    2ece:	781b      	ldrb	r3, [r3, #0]
    2ed0:	18d3      	adds	r3, r2, r3
    2ed2:	b2da      	uxtb	r2, r3
    2ed4:	2313      	movs	r3, #19
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	701a      	strb	r2, [r3, #0]
			break;
    2eda:	e02d      	b.n	2f38 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2edc:	68ba      	ldr	r2, [r7, #8]
    2ede:	697b      	ldr	r3, [r7, #20]
    2ee0:	18d1      	adds	r1, r2, r3
    2ee2:	2310      	movs	r3, #16
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	881a      	ldrh	r2, [r3, #0]
    2ee8:	68fb      	ldr	r3, [r7, #12]
    2eea:	0018      	movs	r0, r3
    2eec:	4b17      	ldr	r3, [pc, #92]	; (2f4c <nm_write_block+0xc8>)
    2eee:	4798      	blx	r3
    2ef0:	0003      	movs	r3, r0
    2ef2:	b2da      	uxtb	r2, r3
    2ef4:	2313      	movs	r3, #19
    2ef6:	18fb      	adds	r3, r7, r3
    2ef8:	781b      	ldrb	r3, [r3, #0]
    2efa:	18d3      	adds	r3, r2, r3
    2efc:	b2da      	uxtb	r2, r3
    2efe:	2313      	movs	r3, #19
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2f04:	2313      	movs	r3, #19
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	781b      	ldrb	r3, [r3, #0]
    2f0a:	b25b      	sxtb	r3, r3
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d112      	bne.n	2f36 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2f10:	2310      	movs	r3, #16
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	881b      	ldrh	r3, [r3, #0]
    2f16:	687a      	ldr	r2, [r7, #4]
    2f18:	1ad3      	subs	r3, r2, r3
    2f1a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2f1c:	2310      	movs	r3, #16
    2f1e:	18fb      	adds	r3, r7, r3
    2f20:	881b      	ldrh	r3, [r3, #0]
    2f22:	697a      	ldr	r2, [r7, #20]
    2f24:	18d3      	adds	r3, r2, r3
    2f26:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2f28:	2310      	movs	r3, #16
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	68fa      	ldr	r2, [r7, #12]
    2f30:	18d3      	adds	r3, r2, r3
    2f32:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2f34:	e7b8      	b.n	2ea8 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2f36:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2f38:	2313      	movs	r3, #19
    2f3a:	18fb      	adds	r3, r7, r3
    2f3c:	781b      	ldrb	r3, [r3, #0]
    2f3e:	b25b      	sxtb	r3, r3
}
    2f40:	0018      	movs	r0, r3
    2f42:	46bd      	mov	sp, r7
    2f44:	b006      	add	sp, #24
    2f46:	bd80      	pop	{r7, pc}
    2f48:	20000008 	.word	0x20000008
    2f4c:	00002e59 	.word	0x00002e59

00002f50 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2f50:	b590      	push	{r4, r7, lr}
    2f52:	b089      	sub	sp, #36	; 0x24
    2f54:	af00      	add	r7, sp, #0
    2f56:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2f58:	2300      	movs	r3, #0
    2f5a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2f5c:	231f      	movs	r3, #31
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	2200      	movs	r2, #0
    2f62:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2f64:	230c      	movs	r3, #12
    2f66:	18fb      	adds	r3, r7, r3
    2f68:	0018      	movs	r0, r3
    2f6a:	2308      	movs	r3, #8
    2f6c:	001a      	movs	r2, r3
    2f6e:	2100      	movs	r1, #0
    2f70:	4b64      	ldr	r3, [pc, #400]	; (3104 <nm_get_firmware_full_info+0x1b4>)
    2f72:	4798      	blx	r3
	if (pstrRev != NULL)
    2f74:	687b      	ldr	r3, [r7, #4]
    2f76:	2b00      	cmp	r3, #0
    2f78:	d100      	bne.n	2f7c <nm_get_firmware_full_info+0x2c>
    2f7a:	e0ba      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	2228      	movs	r2, #40	; 0x28
    2f80:	2100      	movs	r1, #0
    2f82:	0018      	movs	r0, r3
    2f84:	4b60      	ldr	r3, [pc, #384]	; (3108 <nm_get_firmware_full_info+0x1b8>)
    2f86:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2f88:	231f      	movs	r3, #31
    2f8a:	18fc      	adds	r4, r7, r3
    2f8c:	2314      	movs	r3, #20
    2f8e:	18fb      	adds	r3, r7, r3
    2f90:	4a5e      	ldr	r2, [pc, #376]	; (310c <nm_get_firmware_full_info+0x1bc>)
    2f92:	0019      	movs	r1, r3
    2f94:	0010      	movs	r0, r2
    2f96:	4b5e      	ldr	r3, [pc, #376]	; (3110 <nm_get_firmware_full_info+0x1c0>)
    2f98:	4798      	blx	r3
    2f9a:	0003      	movs	r3, r0
    2f9c:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2f9e:	231f      	movs	r3, #31
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	781b      	ldrb	r3, [r3, #0]
    2fa4:	b25b      	sxtb	r3, r3
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d000      	beq.n	2fac <nm_get_firmware_full_info+0x5c>
    2faa:	e0a2      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d100      	bne.n	2fb4 <nm_get_firmware_full_info+0x64>
    2fb2:	e09a      	b.n	30ea <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2fb4:	697b      	ldr	r3, [r7, #20]
    2fb6:	22c0      	movs	r2, #192	; 0xc0
    2fb8:	0292      	lsls	r2, r2, #10
    2fba:	4313      	orrs	r3, r2
    2fbc:	221f      	movs	r2, #31
    2fbe:	18bc      	adds	r4, r7, r2
    2fc0:	220c      	movs	r2, #12
    2fc2:	18b9      	adds	r1, r7, r2
    2fc4:	2208      	movs	r2, #8
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b52      	ldr	r3, [pc, #328]	; (3114 <nm_get_firmware_full_info+0x1c4>)
    2fca:	4798      	blx	r3
    2fcc:	0003      	movs	r3, r0
    2fce:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2fd0:	231f      	movs	r3, #31
    2fd2:	18fb      	adds	r3, r7, r3
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	b25b      	sxtb	r3, r3
    2fd8:	2b00      	cmp	r3, #0
    2fda:	d000      	beq.n	2fde <nm_get_firmware_full_info+0x8e>
    2fdc:	e089      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2fde:	230c      	movs	r3, #12
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	685b      	ldr	r3, [r3, #4]
    2fe4:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2fe6:	697b      	ldr	r3, [r7, #20]
    2fe8:	041b      	lsls	r3, r3, #16
    2fea:	0c1b      	lsrs	r3, r3, #16
    2fec:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2fee:	697b      	ldr	r3, [r7, #20]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d100      	bne.n	2ff6 <nm_get_firmware_full_info+0xa6>
    2ff4:	e074      	b.n	30e0 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2ff6:	697b      	ldr	r3, [r7, #20]
    2ff8:	22c0      	movs	r2, #192	; 0xc0
    2ffa:	0292      	lsls	r2, r2, #10
    2ffc:	4313      	orrs	r3, r2
    2ffe:	221f      	movs	r2, #31
    3000:	18bc      	adds	r4, r7, r2
    3002:	6879      	ldr	r1, [r7, #4]
    3004:	2228      	movs	r2, #40	; 0x28
    3006:	0018      	movs	r0, r3
    3008:	4b42      	ldr	r3, [pc, #264]	; (3114 <nm_get_firmware_full_info+0x1c4>)
    300a:	4798      	blx	r3
    300c:	0003      	movs	r3, r0
    300e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    3010:	231f      	movs	r3, #31
    3012:	18fb      	adds	r3, r7, r3
    3014:	781b      	ldrb	r3, [r3, #0]
    3016:	b25b      	sxtb	r3, r3
    3018:	2b00      	cmp	r3, #0
    301a:	d16a      	bne.n	30f2 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	791b      	ldrb	r3, [r3, #4]
    3020:	021b      	lsls	r3, r3, #8
    3022:	b21a      	sxth	r2, r3
    3024:	687b      	ldr	r3, [r7, #4]
    3026:	795b      	ldrb	r3, [r3, #5]
    3028:	011b      	lsls	r3, r3, #4
    302a:	b21b      	sxth	r3, r3
    302c:	21ff      	movs	r1, #255	; 0xff
    302e:	400b      	ands	r3, r1
    3030:	b21b      	sxth	r3, r3
    3032:	4313      	orrs	r3, r2
    3034:	b21a      	sxth	r2, r3
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	799b      	ldrb	r3, [r3, #6]
    303a:	b21b      	sxth	r3, r3
    303c:	210f      	movs	r1, #15
    303e:	400b      	ands	r3, r1
    3040:	b21b      	sxth	r3, r3
    3042:	4313      	orrs	r3, r2
    3044:	b21a      	sxth	r2, r3
    3046:	231c      	movs	r3, #28
    3048:	18fb      	adds	r3, r7, r3
    304a:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    304c:	231a      	movs	r3, #26
    304e:	18fb      	adds	r3, r7, r3
    3050:	4a31      	ldr	r2, [pc, #196]	; (3118 <nm_get_firmware_full_info+0x1c8>)
    3052:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	79db      	ldrb	r3, [r3, #7]
    3058:	021b      	lsls	r3, r3, #8
    305a:	b21a      	sxth	r2, r3
    305c:	687b      	ldr	r3, [r7, #4]
    305e:	7a1b      	ldrb	r3, [r3, #8]
    3060:	011b      	lsls	r3, r3, #4
    3062:	b21b      	sxth	r3, r3
    3064:	21ff      	movs	r1, #255	; 0xff
    3066:	400b      	ands	r3, r1
    3068:	b21b      	sxth	r3, r3
    306a:	4313      	orrs	r3, r2
    306c:	b21a      	sxth	r2, r3
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	7a5b      	ldrb	r3, [r3, #9]
    3072:	b21b      	sxth	r3, r3
    3074:	210f      	movs	r1, #15
    3076:	400b      	ands	r3, r1
    3078:	b21b      	sxth	r3, r3
    307a:	4313      	orrs	r3, r2
    307c:	b21a      	sxth	r2, r3
    307e:	2318      	movs	r3, #24
    3080:	18fb      	adds	r3, r7, r3
    3082:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3084:	231c      	movs	r3, #28
    3086:	18fb      	adds	r3, r7, r3
    3088:	881b      	ldrh	r3, [r3, #0]
    308a:	2b00      	cmp	r3, #0
    308c:	d009      	beq.n	30a2 <nm_get_firmware_full_info+0x152>
    308e:	2318      	movs	r3, #24
    3090:	18fb      	adds	r3, r7, r3
    3092:	881b      	ldrh	r3, [r3, #0]
    3094:	2b00      	cmp	r3, #0
    3096:	d004      	beq.n	30a2 <nm_get_firmware_full_info+0x152>
    3098:	2318      	movs	r3, #24
    309a:	18fb      	adds	r3, r7, r3
    309c:	881b      	ldrh	r3, [r3, #0]
    309e:	2b00      	cmp	r3, #0
    30a0:	d104      	bne.n	30ac <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    30a2:	231f      	movs	r3, #31
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	22f4      	movs	r2, #244	; 0xf4
    30a8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30aa:	e022      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    30ac:	231a      	movs	r3, #26
    30ae:	18fa      	adds	r2, r7, r3
    30b0:	2318      	movs	r3, #24
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	8812      	ldrh	r2, [r2, #0]
    30b6:	881b      	ldrh	r3, [r3, #0]
    30b8:	429a      	cmp	r2, r3
    30ba:	d204      	bcs.n	30c6 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    30bc:	231f      	movs	r3, #31
    30be:	18fb      	adds	r3, r7, r3
    30c0:	22f3      	movs	r2, #243	; 0xf3
    30c2:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30c4:	e015      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    30c6:	231a      	movs	r3, #26
    30c8:	18fa      	adds	r2, r7, r3
    30ca:	231c      	movs	r3, #28
    30cc:	18fb      	adds	r3, r7, r3
    30ce:	8812      	ldrh	r2, [r2, #0]
    30d0:	881b      	ldrh	r3, [r3, #0]
    30d2:	429a      	cmp	r2, r3
    30d4:	d90d      	bls.n	30f2 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    30d6:	231f      	movs	r3, #31
    30d8:	18fb      	adds	r3, r7, r3
    30da:	22f3      	movs	r2, #243	; 0xf3
    30dc:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30de:	e008      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    30e0:	231f      	movs	r3, #31
    30e2:	18fb      	adds	r3, r7, r3
    30e4:	22f4      	movs	r2, #244	; 0xf4
    30e6:	701a      	strb	r2, [r3, #0]
    30e8:	e003      	b.n	30f2 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    30ea:	231f      	movs	r3, #31
    30ec:	18fb      	adds	r3, r7, r3
    30ee:	22f4      	movs	r2, #244	; 0xf4
    30f0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    30f2:	231f      	movs	r3, #31
    30f4:	18fb      	adds	r3, r7, r3
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	b25b      	sxtb	r3, r3
}
    30fa:	0018      	movs	r0, r3
    30fc:	46bd      	mov	sp, r7
    30fe:	b009      	add	sp, #36	; 0x24
    3100:	bd90      	pop	{r4, r7, pc}
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	0000cdc3 	.word	0x0000cdc3
    3108:	00000cdd 	.word	0x00000cdd
    310c:	000c0008 	.word	0x000c0008
    3110:	00002d19 	.word	0x00002d19
    3114:	00002d8d 	.word	0x00002d8d
    3118:	00001352 	.word	0x00001352

0000311c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    311c:	b590      	push	{r4, r7, lr}
    311e:	b085      	sub	sp, #20
    3120:	af00      	add	r7, sp, #0
    3122:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3124:	230f      	movs	r3, #15
    3126:	18fb      	adds	r3, r7, r3
    3128:	2200      	movs	r2, #0
    312a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    312c:	687b      	ldr	r3, [r7, #4]
    312e:	2b00      	cmp	r3, #0
    3130:	d013      	beq.n	315a <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    3132:	230e      	movs	r3, #14
    3134:	18fb      	adds	r3, r7, r3
    3136:	687a      	ldr	r2, [r7, #4]
    3138:	7812      	ldrb	r2, [r2, #0]
    313a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    313c:	230e      	movs	r3, #14
    313e:	18fb      	adds	r3, r7, r3
    3140:	781b      	ldrb	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d004      	beq.n	3150 <nm_drv_init+0x34>
    3146:	230e      	movs	r3, #14
    3148:	18fb      	adds	r3, r7, r3
    314a:	781b      	ldrb	r3, [r3, #0]
    314c:	2b04      	cmp	r3, #4
    314e:	d908      	bls.n	3162 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3150:	230e      	movs	r3, #14
    3152:	18fb      	adds	r3, r7, r3
    3154:	2201      	movs	r2, #1
    3156:	701a      	strb	r2, [r3, #0]
    3158:	e003      	b.n	3162 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    315a:	230e      	movs	r3, #14
    315c:	18fb      	adds	r3, r7, r3
    315e:	2201      	movs	r2, #1
    3160:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    3162:	230f      	movs	r3, #15
    3164:	18fc      	adds	r4, r7, r3
    3166:	2000      	movs	r0, #0
    3168:	4b41      	ldr	r3, [pc, #260]	; (3270 <nm_drv_init+0x154>)
    316a:	4798      	blx	r3
    316c:	0003      	movs	r3, r0
    316e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3170:	230f      	movs	r3, #15
    3172:	18fb      	adds	r3, r7, r3
    3174:	781b      	ldrb	r3, [r3, #0]
    3176:	b25b      	sxtb	r3, r3
    3178:	2b00      	cmp	r3, #0
    317a:	d00f      	beq.n	319c <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    317c:	2328      	movs	r3, #40	; 0x28
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	001a      	movs	r2, r3
    3182:	493c      	ldr	r1, [pc, #240]	; (3274 <nm_drv_init+0x158>)
    3184:	4b3c      	ldr	r3, [pc, #240]	; (3278 <nm_drv_init+0x15c>)
    3186:	0018      	movs	r0, r3
    3188:	4b3c      	ldr	r3, [pc, #240]	; (327c <nm_drv_init+0x160>)
    318a:	4798      	blx	r3
    318c:	4b3c      	ldr	r3, [pc, #240]	; (3280 <nm_drv_init+0x164>)
    318e:	0018      	movs	r0, r3
    3190:	4b3c      	ldr	r3, [pc, #240]	; (3284 <nm_drv_init+0x168>)
    3192:	4798      	blx	r3
    3194:	200d      	movs	r0, #13
    3196:	4b3c      	ldr	r3, [pc, #240]	; (3288 <nm_drv_init+0x16c>)
    3198:	4798      	blx	r3
		goto ERR1;
    319a:	e060      	b.n	325e <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    319c:	4b3b      	ldr	r3, [pc, #236]	; (328c <nm_drv_init+0x170>)
    319e:	0018      	movs	r0, r3
    31a0:	4b36      	ldr	r3, [pc, #216]	; (327c <nm_drv_init+0x160>)
    31a2:	4798      	blx	r3
    31a4:	4b3a      	ldr	r3, [pc, #232]	; (3290 <nm_drv_init+0x174>)
    31a6:	4798      	blx	r3
    31a8:	0002      	movs	r2, r0
    31aa:	4b3a      	ldr	r3, [pc, #232]	; (3294 <nm_drv_init+0x178>)
    31ac:	0011      	movs	r1, r2
    31ae:	0018      	movs	r0, r3
    31b0:	4b32      	ldr	r3, [pc, #200]	; (327c <nm_drv_init+0x160>)
    31b2:	4798      	blx	r3
    31b4:	200d      	movs	r0, #13
    31b6:	4b34      	ldr	r3, [pc, #208]	; (3288 <nm_drv_init+0x16c>)
    31b8:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    31ba:	4b37      	ldr	r3, [pc, #220]	; (3298 <nm_drv_init+0x17c>)
    31bc:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    31be:	230f      	movs	r3, #15
    31c0:	18fc      	adds	r4, r7, r3
    31c2:	230e      	movs	r3, #14
    31c4:	18fb      	adds	r3, r7, r3
    31c6:	781b      	ldrb	r3, [r3, #0]
    31c8:	0018      	movs	r0, r3
    31ca:	4b34      	ldr	r3, [pc, #208]	; (329c <nm_drv_init+0x180>)
    31cc:	4798      	blx	r3
    31ce:	0003      	movs	r3, r0
    31d0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31d2:	230f      	movs	r3, #15
    31d4:	18fb      	adds	r3, r7, r3
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	b25b      	sxtb	r3, r3
    31da:	2b00      	cmp	r3, #0
    31dc:	d13a      	bne.n	3254 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    31de:	230f      	movs	r3, #15
    31e0:	18fc      	adds	r4, r7, r3
    31e2:	230e      	movs	r3, #14
    31e4:	18fb      	adds	r3, r7, r3
    31e6:	781b      	ldrb	r3, [r3, #0]
    31e8:	0018      	movs	r0, r3
    31ea:	4b2d      	ldr	r3, [pc, #180]	; (32a0 <nm_drv_init+0x184>)
    31ec:	4798      	blx	r3
    31ee:	0003      	movs	r3, r0
    31f0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31f2:	230f      	movs	r3, #15
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	781b      	ldrb	r3, [r3, #0]
    31f8:	b25b      	sxtb	r3, r3
    31fa:	2b00      	cmp	r3, #0
    31fc:	d12c      	bne.n	3258 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    31fe:	230e      	movs	r3, #14
    3200:	18fb      	adds	r3, r7, r3
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	2b02      	cmp	r3, #2
    3206:	d02a      	beq.n	325e <nm_drv_init+0x142>
    3208:	230e      	movs	r3, #14
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	2b03      	cmp	r3, #3
    3210:	d025      	beq.n	325e <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3212:	230f      	movs	r3, #15
    3214:	18fc      	adds	r4, r7, r3
    3216:	4b23      	ldr	r3, [pc, #140]	; (32a4 <nm_drv_init+0x188>)
    3218:	4798      	blx	r3
    321a:	0003      	movs	r3, r0
    321c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    321e:	230f      	movs	r3, #15
    3220:	18fb      	adds	r3, r7, r3
    3222:	781b      	ldrb	r3, [r3, #0]
    3224:	b25b      	sxtb	r3, r3
    3226:	2b00      	cmp	r3, #0
    3228:	d00f      	beq.n	324a <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    322a:	2356      	movs	r3, #86	; 0x56
    322c:	33ff      	adds	r3, #255	; 0xff
    322e:	001a      	movs	r2, r3
    3230:	4910      	ldr	r1, [pc, #64]	; (3274 <nm_drv_init+0x158>)
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <nm_drv_init+0x15c>)
    3234:	0018      	movs	r0, r3
    3236:	4b11      	ldr	r3, [pc, #68]	; (327c <nm_drv_init+0x160>)
    3238:	4798      	blx	r3
    323a:	4b1b      	ldr	r3, [pc, #108]	; (32a8 <nm_drv_init+0x18c>)
    323c:	0018      	movs	r0, r3
    323e:	4b11      	ldr	r3, [pc, #68]	; (3284 <nm_drv_init+0x168>)
    3240:	4798      	blx	r3
    3242:	200d      	movs	r0, #13
    3244:	4b10      	ldr	r3, [pc, #64]	; (3288 <nm_drv_init+0x16c>)
    3246:	4798      	blx	r3
		goto ERR2;
    3248:	e007      	b.n	325a <nm_drv_init+0x13e>
	}
	return ret;
    324a:	230f      	movs	r3, #15
    324c:	18fb      	adds	r3, r7, r3
    324e:	781b      	ldrb	r3, [r3, #0]
    3250:	b25b      	sxtb	r3, r3
    3252:	e008      	b.n	3266 <nm_drv_init+0x14a>
		goto ERR2;
    3254:	46c0      	nop			; (mov r8, r8)
    3256:	e000      	b.n	325a <nm_drv_init+0x13e>
		goto ERR2;
    3258:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    325a:	4b14      	ldr	r3, [pc, #80]	; (32ac <nm_drv_init+0x190>)
    325c:	4798      	blx	r3
ERR1:
	return ret;
    325e:	230f      	movs	r3, #15
    3260:	18fb      	adds	r3, r7, r3
    3262:	781b      	ldrb	r3, [r3, #0]
    3264:	b25b      	sxtb	r3, r3
}
    3266:	0018      	movs	r0, r3
    3268:	46bd      	mov	sp, r7
    326a:	b005      	add	sp, #20
    326c:	bd90      	pop	{r4, r7, pc}
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	00002c7d 	.word	0x00002c7d
    3274:	0000ed84 	.word	0x0000ed84
    3278:	0000ecb8 	.word	0x0000ecb8
    327c:	0000cf25 	.word	0x0000cf25
    3280:	0000eccc 	.word	0x0000eccc
    3284:	0000d041 	.word	0x0000d041
    3288:	0000cf59 	.word	0x0000cf59
    328c:	0000ece8 	.word	0x0000ece8
    3290:	0000261d 	.word	0x0000261d
    3294:	0000ecf4 	.word	0x0000ecf4
    3298:	000045f1 	.word	0x000045f1
    329c:	00002971 	.word	0x00002971
    32a0:	00002b09 	.word	0x00002b09
    32a4:	00002569 	.word	0x00002569
    32a8:	0000ed04 	.word	0x0000ed04
    32ac:	00002cb1 	.word	0x00002cb1

000032b0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    32b0:	b590      	push	{r4, r7, lr}
    32b2:	b085      	sub	sp, #20
    32b4:	af00      	add	r7, sp, #0
    32b6:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    32b8:	230f      	movs	r3, #15
    32ba:	18fc      	adds	r4, r7, r3
    32bc:	4b2d      	ldr	r3, [pc, #180]	; (3374 <nm_drv_deinit+0xc4>)
    32be:	4798      	blx	r3
    32c0:	0003      	movs	r3, r0
    32c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    32c4:	230f      	movs	r3, #15
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	781b      	ldrb	r3, [r3, #0]
    32ca:	b25b      	sxtb	r3, r3
    32cc:	2b00      	cmp	r3, #0
    32ce:	d00e      	beq.n	32ee <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    32d0:	23b6      	movs	r3, #182	; 0xb6
    32d2:	005a      	lsls	r2, r3, #1
    32d4:	4928      	ldr	r1, [pc, #160]	; (3378 <nm_drv_deinit+0xc8>)
    32d6:	4b29      	ldr	r3, [pc, #164]	; (337c <nm_drv_deinit+0xcc>)
    32d8:	0018      	movs	r0, r3
    32da:	4b29      	ldr	r3, [pc, #164]	; (3380 <nm_drv_deinit+0xd0>)
    32dc:	4798      	blx	r3
    32de:	4b29      	ldr	r3, [pc, #164]	; (3384 <nm_drv_deinit+0xd4>)
    32e0:	0018      	movs	r0, r3
    32e2:	4b29      	ldr	r3, [pc, #164]	; (3388 <nm_drv_deinit+0xd8>)
    32e4:	4798      	blx	r3
    32e6:	200d      	movs	r0, #13
    32e8:	4b28      	ldr	r3, [pc, #160]	; (338c <nm_drv_deinit+0xdc>)
    32ea:	4798      	blx	r3
		goto ERR1;
    32ec:	e03a      	b.n	3364 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    32ee:	230f      	movs	r3, #15
    32f0:	18fc      	adds	r4, r7, r3
    32f2:	2000      	movs	r0, #0
    32f4:	4b26      	ldr	r3, [pc, #152]	; (3390 <nm_drv_deinit+0xe0>)
    32f6:	4798      	blx	r3
    32f8:	0003      	movs	r3, r0
    32fa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    32fc:	230f      	movs	r3, #15
    32fe:	18fb      	adds	r3, r7, r3
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	b25b      	sxtb	r3, r3
    3304:	2b00      	cmp	r3, #0
    3306:	d00f      	beq.n	3328 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3308:	2374      	movs	r3, #116	; 0x74
    330a:	33ff      	adds	r3, #255	; 0xff
    330c:	001a      	movs	r2, r3
    330e:	491a      	ldr	r1, [pc, #104]	; (3378 <nm_drv_deinit+0xc8>)
    3310:	4b1a      	ldr	r3, [pc, #104]	; (337c <nm_drv_deinit+0xcc>)
    3312:	0018      	movs	r0, r3
    3314:	4b1a      	ldr	r3, [pc, #104]	; (3380 <nm_drv_deinit+0xd0>)
    3316:	4798      	blx	r3
    3318:	4b1e      	ldr	r3, [pc, #120]	; (3394 <nm_drv_deinit+0xe4>)
    331a:	0018      	movs	r0, r3
    331c:	4b1a      	ldr	r3, [pc, #104]	; (3388 <nm_drv_deinit+0xd8>)
    331e:	4798      	blx	r3
    3320:	200d      	movs	r0, #13
    3322:	4b1a      	ldr	r3, [pc, #104]	; (338c <nm_drv_deinit+0xdc>)
    3324:	4798      	blx	r3
		goto ERR1;
    3326:	e01d      	b.n	3364 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3328:	230f      	movs	r3, #15
    332a:	18fc      	adds	r4, r7, r3
    332c:	4b1a      	ldr	r3, [pc, #104]	; (3398 <nm_drv_deinit+0xe8>)
    332e:	4798      	blx	r3
    3330:	0003      	movs	r3, r0
    3332:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3334:	230f      	movs	r3, #15
    3336:	18fb      	adds	r3, r7, r3
    3338:	781b      	ldrb	r3, [r3, #0]
    333a:	b25b      	sxtb	r3, r3
    333c:	2b00      	cmp	r3, #0
    333e:	d00f      	beq.n	3360 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3340:	237a      	movs	r3, #122	; 0x7a
    3342:	33ff      	adds	r3, #255	; 0xff
    3344:	001a      	movs	r2, r3
    3346:	490c      	ldr	r1, [pc, #48]	; (3378 <nm_drv_deinit+0xc8>)
    3348:	4b0c      	ldr	r3, [pc, #48]	; (337c <nm_drv_deinit+0xcc>)
    334a:	0018      	movs	r0, r3
    334c:	4b0c      	ldr	r3, [pc, #48]	; (3380 <nm_drv_deinit+0xd0>)
    334e:	4798      	blx	r3
    3350:	4b12      	ldr	r3, [pc, #72]	; (339c <nm_drv_deinit+0xec>)
    3352:	0018      	movs	r0, r3
    3354:	4b0c      	ldr	r3, [pc, #48]	; (3388 <nm_drv_deinit+0xd8>)
    3356:	4798      	blx	r3
    3358:	200d      	movs	r0, #13
    335a:	4b0c      	ldr	r3, [pc, #48]	; (338c <nm_drv_deinit+0xdc>)
    335c:	4798      	blx	r3
		goto ERR1;
    335e:	e001      	b.n	3364 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    3360:	4b0f      	ldr	r3, [pc, #60]	; (33a0 <nm_drv_deinit+0xf0>)
    3362:	4798      	blx	r3
#endif

ERR1:
	return ret;
    3364:	230f      	movs	r3, #15
    3366:	18fb      	adds	r3, r7, r3
    3368:	781b      	ldrb	r3, [r3, #0]
    336a:	b25b      	sxtb	r3, r3
}
    336c:	0018      	movs	r0, r3
    336e:	46bd      	mov	sp, r7
    3370:	b005      	add	sp, #20
    3372:	bd90      	pop	{r4, r7, pc}
    3374:	00002bbd 	.word	0x00002bbd
    3378:	0000ed90 	.word	0x0000ed90
    337c:	0000ecb8 	.word	0x0000ecb8
    3380:	0000cf25 	.word	0x0000cf25
    3384:	0000ed24 	.word	0x0000ed24
    3388:	0000d041 	.word	0x0000d041
    338c:	0000cf59 	.word	0x0000cf59
    3390:	00005a49 	.word	0x00005a49
    3394:	0000ed44 	.word	0x0000ed44
    3398:	00002cb1 	.word	0x00002cb1
    339c:	0000ed68 	.word	0x0000ed68
    33a0:	0000473d 	.word	0x0000473d

000033a4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    33a4:	b580      	push	{r7, lr}
    33a6:	b086      	sub	sp, #24
    33a8:	af00      	add	r7, sp, #0
    33aa:	6078      	str	r0, [r7, #4]
    33ac:	000a      	movs	r2, r1
    33ae:	1cbb      	adds	r3, r7, #2
    33b0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    33b2:	230c      	movs	r3, #12
    33b4:	18fb      	adds	r3, r7, r3
    33b6:	2200      	movs	r2, #0
    33b8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    33ba:	230c      	movs	r3, #12
    33bc:	18fb      	adds	r3, r7, r3
    33be:	687a      	ldr	r2, [r7, #4]
    33c0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    33c2:	230c      	movs	r3, #12
    33c4:	18fb      	adds	r3, r7, r3
    33c6:	1cba      	adds	r2, r7, #2
    33c8:	8812      	ldrh	r2, [r2, #0]
    33ca:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    33cc:	230c      	movs	r3, #12
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	0019      	movs	r1, r3
    33d2:	2003      	movs	r0, #3
    33d4:	4b03      	ldr	r3, [pc, #12]	; (33e4 <nmi_spi_read+0x40>)
    33d6:	4798      	blx	r3
    33d8:	0003      	movs	r3, r0
}
    33da:	0018      	movs	r0, r3
    33dc:	46bd      	mov	sp, r7
    33de:	b006      	add	sp, #24
    33e0:	bd80      	pop	{r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	00000b9d 	.word	0x00000b9d

000033e8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b086      	sub	sp, #24
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
    33f0:	000a      	movs	r2, r1
    33f2:	1cbb      	adds	r3, r7, #2
    33f4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    33f6:	230c      	movs	r3, #12
    33f8:	18fb      	adds	r3, r7, r3
    33fa:	687a      	ldr	r2, [r7, #4]
    33fc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    33fe:	230c      	movs	r3, #12
    3400:	18fb      	adds	r3, r7, r3
    3402:	2200      	movs	r2, #0
    3404:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3406:	230c      	movs	r3, #12
    3408:	18fb      	adds	r3, r7, r3
    340a:	1cba      	adds	r2, r7, #2
    340c:	8812      	ldrh	r2, [r2, #0]
    340e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3410:	230c      	movs	r3, #12
    3412:	18fb      	adds	r3, r7, r3
    3414:	0019      	movs	r1, r3
    3416:	2003      	movs	r0, #3
    3418:	4b03      	ldr	r3, [pc, #12]	; (3428 <nmi_spi_write+0x40>)
    341a:	4798      	blx	r3
    341c:	0003      	movs	r3, r0
}
    341e:	0018      	movs	r0, r3
    3420:	46bd      	mov	sp, r7
    3422:	b006      	add	sp, #24
    3424:	bd80      	pop	{r7, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	00000b9d 	.word	0x00000b9d

0000342c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    342c:	b580      	push	{r7, lr}
    342e:	b082      	sub	sp, #8
    3430:	af00      	add	r7, sp, #0
    3432:	0002      	movs	r2, r0
    3434:	1dfb      	adds	r3, r7, #7
    3436:	701a      	strb	r2, [r3, #0]
    3438:	1dbb      	adds	r3, r7, #6
    343a:	1c0a      	adds	r2, r1, #0
    343c:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    343e:	1dfb      	adds	r3, r7, #7
    3440:	781b      	ldrb	r3, [r3, #0]
    3442:	005a      	lsls	r2, r3, #1
    3444:	1dbb      	adds	r3, r7, #6
    3446:	781b      	ldrb	r3, [r3, #0]
    3448:	4053      	eors	r3, r2
    344a:	4a03      	ldr	r2, [pc, #12]	; (3458 <crc7_byte+0x2c>)
    344c:	5cd3      	ldrb	r3, [r2, r3]
}
    344e:	0018      	movs	r0, r3
    3450:	46bd      	mov	sp, r7
    3452:	b002      	add	sp, #8
    3454:	bd80      	pop	{r7, pc}
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	0000eda0 	.word	0x0000eda0

0000345c <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    345c:	b590      	push	{r4, r7, lr}
    345e:	b085      	sub	sp, #20
    3460:	af00      	add	r7, sp, #0
    3462:	60b9      	str	r1, [r7, #8]
    3464:	607a      	str	r2, [r7, #4]
    3466:	230f      	movs	r3, #15
    3468:	18fb      	adds	r3, r7, r3
    346a:	1c02      	adds	r2, r0, #0
    346c:	701a      	strb	r2, [r3, #0]
	while (len--)
    346e:	e00e      	b.n	348e <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    3470:	68bb      	ldr	r3, [r7, #8]
    3472:	1c5a      	adds	r2, r3, #1
    3474:	60ba      	str	r2, [r7, #8]
    3476:	781a      	ldrb	r2, [r3, #0]
    3478:	230f      	movs	r3, #15
    347a:	18fc      	adds	r4, r7, r3
    347c:	230f      	movs	r3, #15
    347e:	18fb      	adds	r3, r7, r3
    3480:	781b      	ldrb	r3, [r3, #0]
    3482:	0011      	movs	r1, r2
    3484:	0018      	movs	r0, r3
    3486:	4b08      	ldr	r3, [pc, #32]	; (34a8 <crc7+0x4c>)
    3488:	4798      	blx	r3
    348a:	0003      	movs	r3, r0
    348c:	7023      	strb	r3, [r4, #0]
	while (len--)
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	1e5a      	subs	r2, r3, #1
    3492:	607a      	str	r2, [r7, #4]
    3494:	2b00      	cmp	r3, #0
    3496:	d1eb      	bne.n	3470 <crc7+0x14>
	return crc;
    3498:	230f      	movs	r3, #15
    349a:	18fb      	adds	r3, r7, r3
    349c:	781b      	ldrb	r3, [r3, #0]
}
    349e:	0018      	movs	r0, r3
    34a0:	46bd      	mov	sp, r7
    34a2:	b005      	add	sp, #20
    34a4:	bd90      	pop	{r4, r7, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	0000342d 	.word	0x0000342d

000034ac <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    34ac:	b590      	push	{r4, r7, lr}
    34ae:	b089      	sub	sp, #36	; 0x24
    34b0:	af00      	add	r7, sp, #0
    34b2:	60b9      	str	r1, [r7, #8]
    34b4:	607a      	str	r2, [r7, #4]
    34b6:	603b      	str	r3, [r7, #0]
    34b8:	230f      	movs	r3, #15
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	1c02      	adds	r2, r0, #0
    34be:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    34c0:	231f      	movs	r3, #31
    34c2:	18fb      	adds	r3, r7, r3
    34c4:	2205      	movs	r2, #5
    34c6:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    34c8:	231e      	movs	r3, #30
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	2201      	movs	r2, #1
    34ce:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    34d0:	2314      	movs	r3, #20
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	220f      	movs	r2, #15
    34d6:	18ba      	adds	r2, r7, r2
    34d8:	7812      	ldrb	r2, [r2, #0]
    34da:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    34dc:	230f      	movs	r3, #15
    34de:	18fb      	adds	r3, r7, r3
    34e0:	781b      	ldrb	r3, [r3, #0]
    34e2:	3bc1      	subs	r3, #193	; 0xc1
    34e4:	2b0e      	cmp	r3, #14
    34e6:	d900      	bls.n	34ea <spi_cmd+0x3e>
    34e8:	e11b      	b.n	3722 <spi_cmd+0x276>
    34ea:	009a      	lsls	r2, r3, #2
    34ec:	4bb6      	ldr	r3, [pc, #728]	; (37c8 <spi_cmd+0x31c>)
    34ee:	18d3      	adds	r3, r2, r3
    34f0:	681b      	ldr	r3, [r3, #0]
    34f2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    34f4:	68bb      	ldr	r3, [r7, #8]
    34f6:	0c1b      	lsrs	r3, r3, #16
    34f8:	b2da      	uxtb	r2, r3
    34fa:	2314      	movs	r3, #20
    34fc:	18fb      	adds	r3, r7, r3
    34fe:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3500:	68bb      	ldr	r3, [r7, #8]
    3502:	0a1b      	lsrs	r3, r3, #8
    3504:	b2da      	uxtb	r2, r3
    3506:	2314      	movs	r3, #20
    3508:	18fb      	adds	r3, r7, r3
    350a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    350c:	68bb      	ldr	r3, [r7, #8]
    350e:	b2da      	uxtb	r2, r3
    3510:	2314      	movs	r3, #20
    3512:	18fb      	adds	r3, r7, r3
    3514:	70da      	strb	r2, [r3, #3]
		len = 5;
    3516:	231f      	movs	r3, #31
    3518:	18fb      	adds	r3, r7, r3
    351a:	2205      	movs	r2, #5
    351c:	701a      	strb	r2, [r3, #0]
		break;
    351e:	e105      	b.n	372c <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3520:	68bb      	ldr	r3, [r7, #8]
    3522:	0a1b      	lsrs	r3, r3, #8
    3524:	b2da      	uxtb	r2, r3
    3526:	2314      	movs	r3, #20
    3528:	18fb      	adds	r3, r7, r3
    352a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    352c:	2330      	movs	r3, #48	; 0x30
    352e:	18fb      	adds	r3, r7, r3
    3530:	781b      	ldrb	r3, [r3, #0]
    3532:	2b00      	cmp	r3, #0
    3534:	d009      	beq.n	354a <spi_cmd+0x9e>
    3536:	2314      	movs	r3, #20
    3538:	18fb      	adds	r3, r7, r3
    353a:	785b      	ldrb	r3, [r3, #1]
    353c:	2280      	movs	r2, #128	; 0x80
    353e:	4252      	negs	r2, r2
    3540:	4313      	orrs	r3, r2
    3542:	b2da      	uxtb	r2, r3
    3544:	2314      	movs	r3, #20
    3546:	18fb      	adds	r3, r7, r3
    3548:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    354a:	68bb      	ldr	r3, [r7, #8]
    354c:	b2da      	uxtb	r2, r3
    354e:	2314      	movs	r3, #20
    3550:	18fb      	adds	r3, r7, r3
    3552:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3554:	2314      	movs	r3, #20
    3556:	18fb      	adds	r3, r7, r3
    3558:	2200      	movs	r2, #0
    355a:	70da      	strb	r2, [r3, #3]
		len = 5;
    355c:	231f      	movs	r3, #31
    355e:	18fb      	adds	r3, r7, r3
    3560:	2205      	movs	r2, #5
    3562:	701a      	strb	r2, [r3, #0]
		break;
    3564:	e0e2      	b.n	372c <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    3566:	2314      	movs	r3, #20
    3568:	18fb      	adds	r3, r7, r3
    356a:	2200      	movs	r2, #0
    356c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    356e:	2314      	movs	r3, #20
    3570:	18fb      	adds	r3, r7, r3
    3572:	2200      	movs	r2, #0
    3574:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3576:	2314      	movs	r3, #20
    3578:	18fb      	adds	r3, r7, r3
    357a:	2200      	movs	r2, #0
    357c:	70da      	strb	r2, [r3, #3]
		len = 5;
    357e:	231f      	movs	r3, #31
    3580:	18fb      	adds	r3, r7, r3
    3582:	2205      	movs	r2, #5
    3584:	701a      	strb	r2, [r3, #0]
		break;
    3586:	e0d1      	b.n	372c <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3588:	2314      	movs	r3, #20
    358a:	18fb      	adds	r3, r7, r3
    358c:	2200      	movs	r2, #0
    358e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3590:	2314      	movs	r3, #20
    3592:	18fb      	adds	r3, r7, r3
    3594:	2200      	movs	r2, #0
    3596:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3598:	2314      	movs	r3, #20
    359a:	18fb      	adds	r3, r7, r3
    359c:	2200      	movs	r2, #0
    359e:	70da      	strb	r2, [r3, #3]
		len = 5;
    35a0:	231f      	movs	r3, #31
    35a2:	18fb      	adds	r3, r7, r3
    35a4:	2205      	movs	r2, #5
    35a6:	701a      	strb	r2, [r3, #0]
		break;
    35a8:	e0c0      	b.n	372c <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    35aa:	2314      	movs	r3, #20
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	22ff      	movs	r2, #255	; 0xff
    35b0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    35b2:	2314      	movs	r3, #20
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	22ff      	movs	r2, #255	; 0xff
    35b8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    35ba:	2314      	movs	r3, #20
    35bc:	18fb      	adds	r3, r7, r3
    35be:	22ff      	movs	r2, #255	; 0xff
    35c0:	70da      	strb	r2, [r3, #3]
		len = 5;
    35c2:	231f      	movs	r3, #31
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	2205      	movs	r2, #5
    35c8:	701a      	strb	r2, [r3, #0]
		break;
    35ca:	e0af      	b.n	372c <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    35cc:	68bb      	ldr	r3, [r7, #8]
    35ce:	0c1b      	lsrs	r3, r3, #16
    35d0:	b2da      	uxtb	r2, r3
    35d2:	2314      	movs	r3, #20
    35d4:	18fb      	adds	r3, r7, r3
    35d6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    35d8:	68bb      	ldr	r3, [r7, #8]
    35da:	0a1b      	lsrs	r3, r3, #8
    35dc:	b2da      	uxtb	r2, r3
    35de:	2314      	movs	r3, #20
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    35e4:	68bb      	ldr	r3, [r7, #8]
    35e6:	b2da      	uxtb	r2, r3
    35e8:	2314      	movs	r3, #20
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    35ee:	683b      	ldr	r3, [r7, #0]
    35f0:	0a1b      	lsrs	r3, r3, #8
    35f2:	b2da      	uxtb	r2, r3
    35f4:	2314      	movs	r3, #20
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    35fa:	683b      	ldr	r3, [r7, #0]
    35fc:	b2da      	uxtb	r2, r3
    35fe:	2314      	movs	r3, #20
    3600:	18fb      	adds	r3, r7, r3
    3602:	715a      	strb	r2, [r3, #5]
		len = 7;
    3604:	231f      	movs	r3, #31
    3606:	18fb      	adds	r3, r7, r3
    3608:	2207      	movs	r2, #7
    360a:	701a      	strb	r2, [r3, #0]
		break;
    360c:	e08e      	b.n	372c <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    360e:	68bb      	ldr	r3, [r7, #8]
    3610:	0c1b      	lsrs	r3, r3, #16
    3612:	b2da      	uxtb	r2, r3
    3614:	2314      	movs	r3, #20
    3616:	18fb      	adds	r3, r7, r3
    3618:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    361a:	68bb      	ldr	r3, [r7, #8]
    361c:	0a1b      	lsrs	r3, r3, #8
    361e:	b2da      	uxtb	r2, r3
    3620:	2314      	movs	r3, #20
    3622:	18fb      	adds	r3, r7, r3
    3624:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3626:	68bb      	ldr	r3, [r7, #8]
    3628:	b2da      	uxtb	r2, r3
    362a:	2314      	movs	r3, #20
    362c:	18fb      	adds	r3, r7, r3
    362e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	0c1b      	lsrs	r3, r3, #16
    3634:	b2da      	uxtb	r2, r3
    3636:	2314      	movs	r3, #20
    3638:	18fb      	adds	r3, r7, r3
    363a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    363c:	683b      	ldr	r3, [r7, #0]
    363e:	0a1b      	lsrs	r3, r3, #8
    3640:	b2da      	uxtb	r2, r3
    3642:	2314      	movs	r3, #20
    3644:	18fb      	adds	r3, r7, r3
    3646:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    3648:	683b      	ldr	r3, [r7, #0]
    364a:	b2da      	uxtb	r2, r3
    364c:	2314      	movs	r3, #20
    364e:	18fb      	adds	r3, r7, r3
    3650:	719a      	strb	r2, [r3, #6]
		len = 8;
    3652:	231f      	movs	r3, #31
    3654:	18fb      	adds	r3, r7, r3
    3656:	2208      	movs	r2, #8
    3658:	701a      	strb	r2, [r3, #0]
		break;
    365a:	e067      	b.n	372c <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    365c:	68bb      	ldr	r3, [r7, #8]
    365e:	0a1b      	lsrs	r3, r3, #8
    3660:	b2da      	uxtb	r2, r3
    3662:	2314      	movs	r3, #20
    3664:	18fb      	adds	r3, r7, r3
    3666:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3668:	2330      	movs	r3, #48	; 0x30
    366a:	18fb      	adds	r3, r7, r3
    366c:	781b      	ldrb	r3, [r3, #0]
    366e:	2b00      	cmp	r3, #0
    3670:	d009      	beq.n	3686 <spi_cmd+0x1da>
    3672:	2314      	movs	r3, #20
    3674:	18fb      	adds	r3, r7, r3
    3676:	785b      	ldrb	r3, [r3, #1]
    3678:	2280      	movs	r2, #128	; 0x80
    367a:	4252      	negs	r2, r2
    367c:	4313      	orrs	r3, r2
    367e:	b2da      	uxtb	r2, r3
    3680:	2314      	movs	r3, #20
    3682:	18fb      	adds	r3, r7, r3
    3684:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3686:	68bb      	ldr	r3, [r7, #8]
    3688:	b2da      	uxtb	r2, r3
    368a:	2314      	movs	r3, #20
    368c:	18fb      	adds	r3, r7, r3
    368e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	0e1b      	lsrs	r3, r3, #24
    3694:	b2da      	uxtb	r2, r3
    3696:	2314      	movs	r3, #20
    3698:	18fb      	adds	r3, r7, r3
    369a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	0c1b      	lsrs	r3, r3, #16
    36a0:	b2da      	uxtb	r2, r3
    36a2:	2314      	movs	r3, #20
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	0a1b      	lsrs	r3, r3, #8
    36ac:	b2da      	uxtb	r2, r3
    36ae:	2314      	movs	r3, #20
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	b2da      	uxtb	r2, r3
    36b8:	2314      	movs	r3, #20
    36ba:	18fb      	adds	r3, r7, r3
    36bc:	719a      	strb	r2, [r3, #6]
		len = 8;
    36be:	231f      	movs	r3, #31
    36c0:	18fb      	adds	r3, r7, r3
    36c2:	2208      	movs	r2, #8
    36c4:	701a      	strb	r2, [r3, #0]
		break;
    36c6:	e031      	b.n	372c <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    36c8:	68bb      	ldr	r3, [r7, #8]
    36ca:	0c1b      	lsrs	r3, r3, #16
    36cc:	b2da      	uxtb	r2, r3
    36ce:	2314      	movs	r3, #20
    36d0:	18fb      	adds	r3, r7, r3
    36d2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    36d4:	68bb      	ldr	r3, [r7, #8]
    36d6:	0a1b      	lsrs	r3, r3, #8
    36d8:	b2da      	uxtb	r2, r3
    36da:	2314      	movs	r3, #20
    36dc:	18fb      	adds	r3, r7, r3
    36de:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    36e0:	68bb      	ldr	r3, [r7, #8]
    36e2:	b2da      	uxtb	r2, r3
    36e4:	2314      	movs	r3, #20
    36e6:	18fb      	adds	r3, r7, r3
    36e8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	0e1b      	lsrs	r3, r3, #24
    36ee:	b2da      	uxtb	r2, r3
    36f0:	2314      	movs	r3, #20
    36f2:	18fb      	adds	r3, r7, r3
    36f4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	0c1b      	lsrs	r3, r3, #16
    36fa:	b2da      	uxtb	r2, r3
    36fc:	2314      	movs	r3, #20
    36fe:	18fb      	adds	r3, r7, r3
    3700:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	0a1b      	lsrs	r3, r3, #8
    3706:	b2da      	uxtb	r2, r3
    3708:	2314      	movs	r3, #20
    370a:	18fb      	adds	r3, r7, r3
    370c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	b2da      	uxtb	r2, r3
    3712:	2314      	movs	r3, #20
    3714:	18fb      	adds	r3, r7, r3
    3716:	71da      	strb	r2, [r3, #7]
		len = 9;
    3718:	231f      	movs	r3, #31
    371a:	18fb      	adds	r3, r7, r3
    371c:	2209      	movs	r2, #9
    371e:	701a      	strb	r2, [r3, #0]
		break;
    3720:	e004      	b.n	372c <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3722:	231e      	movs	r3, #30
    3724:	18fb      	adds	r3, r7, r3
    3726:	2200      	movs	r2, #0
    3728:	701a      	strb	r2, [r3, #0]
		break;
    372a:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    372c:	231e      	movs	r3, #30
    372e:	18fb      	adds	r3, r7, r3
    3730:	781b      	ldrb	r3, [r3, #0]
    3732:	b25b      	sxtb	r3, r3
    3734:	2b00      	cmp	r3, #0
    3736:	d03f      	beq.n	37b8 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3738:	4b24      	ldr	r3, [pc, #144]	; (37cc <spi_cmd+0x320>)
    373a:	781b      	ldrb	r3, [r3, #0]
    373c:	2b00      	cmp	r3, #0
    373e:	d115      	bne.n	376c <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3740:	231f      	movs	r3, #31
    3742:	18fb      	adds	r3, r7, r3
    3744:	781b      	ldrb	r3, [r3, #0]
    3746:	1e5c      	subs	r4, r3, #1
    3748:	231f      	movs	r3, #31
    374a:	18fb      	adds	r3, r7, r3
    374c:	781b      	ldrb	r3, [r3, #0]
    374e:	3b01      	subs	r3, #1
    3750:	001a      	movs	r2, r3
    3752:	2314      	movs	r3, #20
    3754:	18fb      	adds	r3, r7, r3
    3756:	0019      	movs	r1, r3
    3758:	207f      	movs	r0, #127	; 0x7f
    375a:	4b1d      	ldr	r3, [pc, #116]	; (37d0 <spi_cmd+0x324>)
    375c:	4798      	blx	r3
    375e:	0003      	movs	r3, r0
    3760:	18db      	adds	r3, r3, r3
    3762:	b2da      	uxtb	r2, r3
    3764:	2314      	movs	r3, #20
    3766:	18fb      	adds	r3, r7, r3
    3768:	551a      	strb	r2, [r3, r4]
    376a:	e006      	b.n	377a <spi_cmd+0x2ce>
		else
			len-=1;
    376c:	231f      	movs	r3, #31
    376e:	18fb      	adds	r3, r7, r3
    3770:	221f      	movs	r2, #31
    3772:	18ba      	adds	r2, r7, r2
    3774:	7812      	ldrb	r2, [r2, #0]
    3776:	3a01      	subs	r2, #1
    3778:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    377a:	231f      	movs	r3, #31
    377c:	18fb      	adds	r3, r7, r3
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	b29a      	uxth	r2, r3
    3782:	2314      	movs	r3, #20
    3784:	18fb      	adds	r3, r7, r3
    3786:	0011      	movs	r1, r2
    3788:	0018      	movs	r0, r3
    378a:	4b12      	ldr	r3, [pc, #72]	; (37d4 <spi_cmd+0x328>)
    378c:	4798      	blx	r3
    378e:	1e03      	subs	r3, r0, #0
    3790:	d012      	beq.n	37b8 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3792:	2328      	movs	r3, #40	; 0x28
    3794:	33ff      	adds	r3, #255	; 0xff
    3796:	001a      	movs	r2, r3
    3798:	490f      	ldr	r1, [pc, #60]	; (37d8 <spi_cmd+0x32c>)
    379a:	4b10      	ldr	r3, [pc, #64]	; (37dc <spi_cmd+0x330>)
    379c:	0018      	movs	r0, r3
    379e:	4b10      	ldr	r3, [pc, #64]	; (37e0 <spi_cmd+0x334>)
    37a0:	4798      	blx	r3
    37a2:	4b10      	ldr	r3, [pc, #64]	; (37e4 <spi_cmd+0x338>)
    37a4:	0018      	movs	r0, r3
    37a6:	4b10      	ldr	r3, [pc, #64]	; (37e8 <spi_cmd+0x33c>)
    37a8:	4798      	blx	r3
    37aa:	200d      	movs	r0, #13
    37ac:	4b0f      	ldr	r3, [pc, #60]	; (37ec <spi_cmd+0x340>)
    37ae:	4798      	blx	r3
			result = N_FAIL;
    37b0:	231e      	movs	r3, #30
    37b2:	18fb      	adds	r3, r7, r3
    37b4:	2200      	movs	r2, #0
    37b6:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    37b8:	231e      	movs	r3, #30
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	b25b      	sxtb	r3, r3
}
    37c0:	0018      	movs	r0, r3
    37c2:	46bd      	mov	sp, r7
    37c4:	b009      	add	sp, #36	; 0x24
    37c6:	bd90      	pop	{r4, r7, pc}
    37c8:	0000f3f8 	.word	0x0000f3f8
    37cc:	20000210 	.word	0x20000210
    37d0:	0000345d 	.word	0x0000345d
    37d4:	000033e9 	.word	0x000033e9
    37d8:	0000f434 	.word	0x0000f434
    37dc:	0000eea0 	.word	0x0000eea0
    37e0:	0000cf25 	.word	0x0000cf25
    37e4:	0000eeb4 	.word	0x0000eeb4
    37e8:	0000d041 	.word	0x0000d041
    37ec:	0000cf59 	.word	0x0000cf59

000037f0 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    37f0:	b590      	push	{r4, r7, lr}
    37f2:	b085      	sub	sp, #20
    37f4:	af00      	add	r7, sp, #0
    37f6:	0002      	movs	r2, r0
    37f8:	1dfb      	adds	r3, r7, #7
    37fa:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    37fc:	230e      	movs	r3, #14
    37fe:	18fb      	adds	r3, r7, r3
    3800:	2201      	movs	r2, #1
    3802:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3804:	4b31      	ldr	r3, [pc, #196]	; (38cc <spi_data_rsp+0xdc>)
    3806:	781b      	ldrb	r3, [r3, #0]
    3808:	2b00      	cmp	r3, #0
    380a:	d104      	bne.n	3816 <spi_data_rsp+0x26>
		len = 2;
    380c:	230f      	movs	r3, #15
    380e:	18fb      	adds	r3, r7, r3
    3810:	2202      	movs	r2, #2
    3812:	701a      	strb	r2, [r3, #0]
    3814:	e003      	b.n	381e <spi_data_rsp+0x2e>
	else
		len = 3;
    3816:	230f      	movs	r3, #15
    3818:	18fb      	adds	r3, r7, r3
    381a:	2203      	movs	r2, #3
    381c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    381e:	230f      	movs	r3, #15
    3820:	18fb      	adds	r3, r7, r3
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	b29a      	uxth	r2, r3
    3826:	2308      	movs	r3, #8
    3828:	18fb      	adds	r3, r7, r3
    382a:	0011      	movs	r1, r2
    382c:	0018      	movs	r0, r3
    382e:	4b28      	ldr	r3, [pc, #160]	; (38d0 <spi_data_rsp+0xe0>)
    3830:	4798      	blx	r3
    3832:	1e03      	subs	r3, r0, #0
    3834:	d013      	beq.n	385e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3836:	233c      	movs	r3, #60	; 0x3c
    3838:	33ff      	adds	r3, #255	; 0xff
    383a:	001a      	movs	r2, r3
    383c:	4925      	ldr	r1, [pc, #148]	; (38d4 <spi_data_rsp+0xe4>)
    383e:	4b26      	ldr	r3, [pc, #152]	; (38d8 <spi_data_rsp+0xe8>)
    3840:	0018      	movs	r0, r3
    3842:	4b26      	ldr	r3, [pc, #152]	; (38dc <spi_data_rsp+0xec>)
    3844:	4798      	blx	r3
    3846:	4b26      	ldr	r3, [pc, #152]	; (38e0 <spi_data_rsp+0xf0>)
    3848:	0018      	movs	r0, r3
    384a:	4b26      	ldr	r3, [pc, #152]	; (38e4 <spi_data_rsp+0xf4>)
    384c:	4798      	blx	r3
    384e:	200d      	movs	r0, #13
    3850:	4b25      	ldr	r3, [pc, #148]	; (38e8 <spi_data_rsp+0xf8>)
    3852:	4798      	blx	r3
		result = N_FAIL;
    3854:	230e      	movs	r3, #14
    3856:	18fb      	adds	r3, r7, r3
    3858:	2200      	movs	r2, #0
    385a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    385c:	e02e      	b.n	38bc <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    385e:	230f      	movs	r3, #15
    3860:	18fb      	adds	r3, r7, r3
    3862:	781b      	ldrb	r3, [r3, #0]
    3864:	3b01      	subs	r3, #1
    3866:	2208      	movs	r2, #8
    3868:	18ba      	adds	r2, r7, r2
    386a:	5cd3      	ldrb	r3, [r2, r3]
    386c:	2b00      	cmp	r3, #0
    386e:	d108      	bne.n	3882 <spi_data_rsp+0x92>
    3870:	230f      	movs	r3, #15
    3872:	18fb      	adds	r3, r7, r3
    3874:	781b      	ldrb	r3, [r3, #0]
    3876:	3b02      	subs	r3, #2
    3878:	2208      	movs	r2, #8
    387a:	18ba      	adds	r2, r7, r2
    387c:	5cd3      	ldrb	r3, [r2, r3]
    387e:	2bc3      	cmp	r3, #195	; 0xc3
    3880:	d01c      	beq.n	38bc <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3882:	23a1      	movs	r3, #161	; 0xa1
    3884:	005a      	lsls	r2, r3, #1
    3886:	4913      	ldr	r1, [pc, #76]	; (38d4 <spi_data_rsp+0xe4>)
    3888:	4b13      	ldr	r3, [pc, #76]	; (38d8 <spi_data_rsp+0xe8>)
    388a:	0018      	movs	r0, r3
    388c:	4b13      	ldr	r3, [pc, #76]	; (38dc <spi_data_rsp+0xec>)
    388e:	4798      	blx	r3
    3890:	2308      	movs	r3, #8
    3892:	18fb      	adds	r3, r7, r3
    3894:	781b      	ldrb	r3, [r3, #0]
    3896:	0019      	movs	r1, r3
    3898:	2308      	movs	r3, #8
    389a:	18fb      	adds	r3, r7, r3
    389c:	785b      	ldrb	r3, [r3, #1]
    389e:	001a      	movs	r2, r3
    38a0:	2308      	movs	r3, #8
    38a2:	18fb      	adds	r3, r7, r3
    38a4:	789b      	ldrb	r3, [r3, #2]
    38a6:	4811      	ldr	r0, [pc, #68]	; (38ec <spi_data_rsp+0xfc>)
    38a8:	4c0c      	ldr	r4, [pc, #48]	; (38dc <spi_data_rsp+0xec>)
    38aa:	47a0      	blx	r4
    38ac:	200d      	movs	r0, #13
    38ae:	4b0e      	ldr	r3, [pc, #56]	; (38e8 <spi_data_rsp+0xf8>)
    38b0:	4798      	blx	r3
		result = N_FAIL;
    38b2:	230e      	movs	r3, #14
    38b4:	18fb      	adds	r3, r7, r3
    38b6:	2200      	movs	r2, #0
    38b8:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    38ba:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    38bc:	230e      	movs	r3, #14
    38be:	18fb      	adds	r3, r7, r3
    38c0:	781b      	ldrb	r3, [r3, #0]
    38c2:	b25b      	sxtb	r3, r3
}
    38c4:	0018      	movs	r0, r3
    38c6:	46bd      	mov	sp, r7
    38c8:	b005      	add	sp, #20
    38ca:	bd90      	pop	{r4, r7, pc}
    38cc:	20000210 	.word	0x20000210
    38d0:	000033a5 	.word	0x000033a5
    38d4:	0000f43c 	.word	0x0000f43c
    38d8:	0000eea0 	.word	0x0000eea0
    38dc:	0000cf25 	.word	0x0000cf25
    38e0:	0000eee0 	.word	0x0000eee0
    38e4:	0000d041 	.word	0x0000d041
    38e8:	0000cf59 	.word	0x0000cf59
    38ec:	0000ef00 	.word	0x0000ef00

000038f0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    38f0:	b580      	push	{r7, lr}
    38f2:	b084      	sub	sp, #16
    38f4:	af00      	add	r7, sp, #0
    38f6:	0002      	movs	r2, r0
    38f8:	1dfb      	adds	r3, r7, #7
    38fa:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    38fc:	230f      	movs	r3, #15
    38fe:	18fb      	adds	r3, r7, r3
    3900:	2201      	movs	r2, #1
    3902:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3904:	1dfb      	adds	r3, r7, #7
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	2bcf      	cmp	r3, #207	; 0xcf
    390a:	d007      	beq.n	391c <spi_cmd_rsp+0x2c>
    390c:	1dfb      	adds	r3, r7, #7
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	2bc5      	cmp	r3, #197	; 0xc5
    3912:	d003      	beq.n	391c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3914:	1dfb      	adds	r3, r7, #7
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	2bc6      	cmp	r3, #198	; 0xc6
    391a:	d10c      	bne.n	3936 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    391c:	230d      	movs	r3, #13
    391e:	18fb      	adds	r3, r7, r3
    3920:	2101      	movs	r1, #1
    3922:	0018      	movs	r0, r3
    3924:	4b39      	ldr	r3, [pc, #228]	; (3a0c <spi_cmd_rsp+0x11c>)
    3926:	4798      	blx	r3
    3928:	1e03      	subs	r3, r0, #0
    392a:	d004      	beq.n	3936 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    392c:	230f      	movs	r3, #15
    392e:	18fb      	adds	r3, r7, r3
    3930:	2200      	movs	r2, #0
    3932:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3934:	e061      	b.n	39fa <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3936:	230e      	movs	r3, #14
    3938:	18fb      	adds	r3, r7, r3
    393a:	220a      	movs	r2, #10
    393c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    393e:	230d      	movs	r3, #13
    3940:	18fb      	adds	r3, r7, r3
    3942:	2101      	movs	r1, #1
    3944:	0018      	movs	r0, r3
    3946:	4b31      	ldr	r3, [pc, #196]	; (3a0c <spi_cmd_rsp+0x11c>)
    3948:	4798      	blx	r3
    394a:	1e03      	subs	r3, r0, #0
    394c:	d012      	beq.n	3974 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    394e:	23b1      	movs	r3, #177	; 0xb1
    3950:	005a      	lsls	r2, r3, #1
    3952:	492f      	ldr	r1, [pc, #188]	; (3a10 <spi_cmd_rsp+0x120>)
    3954:	4b2f      	ldr	r3, [pc, #188]	; (3a14 <spi_cmd_rsp+0x124>)
    3956:	0018      	movs	r0, r3
    3958:	4b2f      	ldr	r3, [pc, #188]	; (3a18 <spi_cmd_rsp+0x128>)
    395a:	4798      	blx	r3
    395c:	4b2f      	ldr	r3, [pc, #188]	; (3a1c <spi_cmd_rsp+0x12c>)
    395e:	0018      	movs	r0, r3
    3960:	4b2f      	ldr	r3, [pc, #188]	; (3a20 <spi_cmd_rsp+0x130>)
    3962:	4798      	blx	r3
    3964:	200d      	movs	r0, #13
    3966:	4b2f      	ldr	r3, [pc, #188]	; (3a24 <spi_cmd_rsp+0x134>)
    3968:	4798      	blx	r3
			result = N_FAIL;
    396a:	230f      	movs	r3, #15
    396c:	18fb      	adds	r3, r7, r3
    396e:	2200      	movs	r2, #0
    3970:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3972:	e042      	b.n	39fa <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3974:	230d      	movs	r3, #13
    3976:	18fb      	adds	r3, r7, r3
    3978:	781b      	ldrb	r3, [r3, #0]
    397a:	1dfa      	adds	r2, r7, #7
    397c:	7812      	ldrb	r2, [r2, #0]
    397e:	429a      	cmp	r2, r3
    3980:	d00b      	beq.n	399a <spi_cmd_rsp+0xaa>
    3982:	230e      	movs	r3, #14
    3984:	18fb      	adds	r3, r7, r3
    3986:	781b      	ldrb	r3, [r3, #0]
    3988:	b25b      	sxtb	r3, r3
    398a:	b2da      	uxtb	r2, r3
    398c:	3a01      	subs	r2, #1
    398e:	b2d1      	uxtb	r1, r2
    3990:	220e      	movs	r2, #14
    3992:	18ba      	adds	r2, r7, r2
    3994:	7011      	strb	r1, [r2, #0]
    3996:	2b00      	cmp	r3, #0
    3998:	dcd1      	bgt.n	393e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    399a:	230e      	movs	r3, #14
    399c:	18fb      	adds	r3, r7, r3
    399e:	220a      	movs	r2, #10
    39a0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39a2:	230d      	movs	r3, #13
    39a4:	18fb      	adds	r3, r7, r3
    39a6:	2101      	movs	r1, #1
    39a8:	0018      	movs	r0, r3
    39aa:	4b18      	ldr	r3, [pc, #96]	; (3a0c <spi_cmd_rsp+0x11c>)
    39ac:	4798      	blx	r3
    39ae:	1e03      	subs	r3, r0, #0
    39b0:	d012      	beq.n	39d8 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    39b2:	23b8      	movs	r3, #184	; 0xb8
    39b4:	005a      	lsls	r2, r3, #1
    39b6:	4916      	ldr	r1, [pc, #88]	; (3a10 <spi_cmd_rsp+0x120>)
    39b8:	4b16      	ldr	r3, [pc, #88]	; (3a14 <spi_cmd_rsp+0x124>)
    39ba:	0018      	movs	r0, r3
    39bc:	4b16      	ldr	r3, [pc, #88]	; (3a18 <spi_cmd_rsp+0x128>)
    39be:	4798      	blx	r3
    39c0:	4b16      	ldr	r3, [pc, #88]	; (3a1c <spi_cmd_rsp+0x12c>)
    39c2:	0018      	movs	r0, r3
    39c4:	4b16      	ldr	r3, [pc, #88]	; (3a20 <spi_cmd_rsp+0x130>)
    39c6:	4798      	blx	r3
    39c8:	200d      	movs	r0, #13
    39ca:	4b16      	ldr	r3, [pc, #88]	; (3a24 <spi_cmd_rsp+0x134>)
    39cc:	4798      	blx	r3
			result = N_FAIL;
    39ce:	230f      	movs	r3, #15
    39d0:	18fb      	adds	r3, r7, r3
    39d2:	2200      	movs	r2, #0
    39d4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    39d6:	e010      	b.n	39fa <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    39d8:	230d      	movs	r3, #13
    39da:	18fb      	adds	r3, r7, r3
    39dc:	781b      	ldrb	r3, [r3, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d00b      	beq.n	39fa <spi_cmd_rsp+0x10a>
    39e2:	230e      	movs	r3, #14
    39e4:	18fb      	adds	r3, r7, r3
    39e6:	781b      	ldrb	r3, [r3, #0]
    39e8:	b25b      	sxtb	r3, r3
    39ea:	b2da      	uxtb	r2, r3
    39ec:	3a01      	subs	r2, #1
    39ee:	b2d1      	uxtb	r1, r2
    39f0:	220e      	movs	r2, #14
    39f2:	18ba      	adds	r2, r7, r2
    39f4:	7011      	strb	r1, [r2, #0]
    39f6:	2b00      	cmp	r3, #0
    39f8:	dcd3      	bgt.n	39a2 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    39fa:	230f      	movs	r3, #15
    39fc:	18fb      	adds	r3, r7, r3
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	b25b      	sxtb	r3, r3
}
    3a02:	0018      	movs	r0, r3
    3a04:	46bd      	mov	sp, r7
    3a06:	b004      	add	sp, #16
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	000033a5 	.word	0x000033a5
    3a10:	0000f44c 	.word	0x0000f44c
    3a14:	0000eea0 	.word	0x0000eea0
    3a18:	0000cf25 	.word	0x0000cf25
    3a1c:	0000ef30 	.word	0x0000ef30
    3a20:	0000d041 	.word	0x0000d041
    3a24:	0000cf59 	.word	0x0000cf59

00003a28 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3a28:	b580      	push	{r7, lr}
    3a2a:	b086      	sub	sp, #24
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	6078      	str	r0, [r7, #4]
    3a30:	0008      	movs	r0, r1
    3a32:	0011      	movs	r1, r2
    3a34:	1cbb      	adds	r3, r7, #2
    3a36:	1c02      	adds	r2, r0, #0
    3a38:	801a      	strh	r2, [r3, #0]
    3a3a:	1c7b      	adds	r3, r7, #1
    3a3c:	1c0a      	adds	r2, r1, #0
    3a3e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3a40:	2311      	movs	r3, #17
    3a42:	18fb      	adds	r3, r7, r3
    3a44:	2201      	movs	r2, #1
    3a46:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3a48:	2314      	movs	r3, #20
    3a4a:	18fb      	adds	r3, r7, r3
    3a4c:	2200      	movs	r2, #0
    3a4e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3a50:	1cbb      	adds	r3, r7, #2
    3a52:	881a      	ldrh	r2, [r3, #0]
    3a54:	2380      	movs	r3, #128	; 0x80
    3a56:	019b      	lsls	r3, r3, #6
    3a58:	429a      	cmp	r2, r3
    3a5a:	d805      	bhi.n	3a68 <spi_data_read+0x40>
			nbytes = sz;
    3a5c:	2312      	movs	r3, #18
    3a5e:	18fb      	adds	r3, r7, r3
    3a60:	1cba      	adds	r2, r7, #2
    3a62:	8812      	ldrh	r2, [r2, #0]
    3a64:	801a      	strh	r2, [r3, #0]
    3a66:	e004      	b.n	3a72 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3a68:	2312      	movs	r3, #18
    3a6a:	18fb      	adds	r3, r7, r3
    3a6c:	2280      	movs	r2, #128	; 0x80
    3a6e:	0192      	lsls	r2, r2, #6
    3a70:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    3a72:	2316      	movs	r3, #22
    3a74:	18fb      	adds	r3, r7, r3
    3a76:	220a      	movs	r2, #10
    3a78:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3a7a:	230b      	movs	r3, #11
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	2101      	movs	r1, #1
    3a80:	0018      	movs	r0, r3
    3a82:	4b5c      	ldr	r3, [pc, #368]	; (3bf4 <spi_data_read+0x1cc>)
    3a84:	4798      	blx	r3
    3a86:	1e03      	subs	r3, r0, #0
    3a88:	d011      	beq.n	3aae <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3a8a:	4a5b      	ldr	r2, [pc, #364]	; (3bf8 <spi_data_read+0x1d0>)
    3a8c:	495b      	ldr	r1, [pc, #364]	; (3bfc <spi_data_read+0x1d4>)
    3a8e:	4b5c      	ldr	r3, [pc, #368]	; (3c00 <spi_data_read+0x1d8>)
    3a90:	0018      	movs	r0, r3
    3a92:	4b5c      	ldr	r3, [pc, #368]	; (3c04 <spi_data_read+0x1dc>)
    3a94:	4798      	blx	r3
    3a96:	4b5c      	ldr	r3, [pc, #368]	; (3c08 <spi_data_read+0x1e0>)
    3a98:	0018      	movs	r0, r3
    3a9a:	4b5c      	ldr	r3, [pc, #368]	; (3c0c <spi_data_read+0x1e4>)
    3a9c:	4798      	blx	r3
    3a9e:	200d      	movs	r0, #13
    3aa0:	4b5b      	ldr	r3, [pc, #364]	; (3c10 <spi_data_read+0x1e8>)
    3aa2:	4798      	blx	r3
				result = N_FAIL;
    3aa4:	2311      	movs	r3, #17
    3aa6:	18fb      	adds	r3, r7, r3
    3aa8:	2200      	movs	r2, #0
    3aaa:	701a      	strb	r2, [r3, #0]
				break;
    3aac:	e017      	b.n	3ade <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    3aae:	230b      	movs	r3, #11
    3ab0:	18fb      	adds	r3, r7, r3
    3ab2:	781b      	ldrb	r3, [r3, #0]
    3ab4:	091b      	lsrs	r3, r3, #4
    3ab6:	b2db      	uxtb	r3, r3
    3ab8:	001a      	movs	r2, r3
    3aba:	230f      	movs	r3, #15
    3abc:	4013      	ands	r3, r2
    3abe:	2b0f      	cmp	r3, #15
    3ac0:	d00c      	beq.n	3adc <spi_data_read+0xb4>
				break;
		} while (retry--);
    3ac2:	2316      	movs	r3, #22
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	2200      	movs	r2, #0
    3ac8:	5e9b      	ldrsh	r3, [r3, r2]
    3aca:	b29a      	uxth	r2, r3
    3acc:	3a01      	subs	r2, #1
    3ace:	b291      	uxth	r1, r2
    3ad0:	2216      	movs	r2, #22
    3ad2:	18ba      	adds	r2, r7, r2
    3ad4:	8011      	strh	r1, [r2, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d1cf      	bne.n	3a7a <spi_data_read+0x52>
    3ada:	e000      	b.n	3ade <spi_data_read+0xb6>
				break;
    3adc:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3ade:	2311      	movs	r3, #17
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	781b      	ldrb	r3, [r3, #0]
    3ae4:	b25b      	sxtb	r3, r3
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d100      	bne.n	3aec <spi_data_read+0xc4>
    3aea:	e079      	b.n	3be0 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3aec:	2316      	movs	r3, #22
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	2200      	movs	r2, #0
    3af2:	5e9b      	ldrsh	r3, [r3, r2]
    3af4:	2b00      	cmp	r3, #0
    3af6:	dc16      	bgt.n	3b26 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3af8:	4a46      	ldr	r2, [pc, #280]	; (3c14 <spi_data_read+0x1ec>)
    3afa:	4940      	ldr	r1, [pc, #256]	; (3bfc <spi_data_read+0x1d4>)
    3afc:	4b40      	ldr	r3, [pc, #256]	; (3c00 <spi_data_read+0x1d8>)
    3afe:	0018      	movs	r0, r3
    3b00:	4b40      	ldr	r3, [pc, #256]	; (3c04 <spi_data_read+0x1dc>)
    3b02:	4798      	blx	r3
    3b04:	230b      	movs	r3, #11
    3b06:	18fb      	adds	r3, r7, r3
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	001a      	movs	r2, r3
    3b0c:	4b42      	ldr	r3, [pc, #264]	; (3c18 <spi_data_read+0x1f0>)
    3b0e:	0011      	movs	r1, r2
    3b10:	0018      	movs	r0, r3
    3b12:	4b3c      	ldr	r3, [pc, #240]	; (3c04 <spi_data_read+0x1dc>)
    3b14:	4798      	blx	r3
    3b16:	200d      	movs	r0, #13
    3b18:	4b3d      	ldr	r3, [pc, #244]	; (3c10 <spi_data_read+0x1e8>)
    3b1a:	4798      	blx	r3
			result = N_FAIL;
    3b1c:	2311      	movs	r3, #17
    3b1e:	18fb      	adds	r3, r7, r3
    3b20:	2200      	movs	r2, #0
    3b22:	701a      	strb	r2, [r3, #0]
			break;
    3b24:	e05d      	b.n	3be2 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3b26:	2314      	movs	r3, #20
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	2200      	movs	r2, #0
    3b2c:	5e9b      	ldrsh	r3, [r3, r2]
    3b2e:	687a      	ldr	r2, [r7, #4]
    3b30:	18d2      	adds	r2, r2, r3
    3b32:	2312      	movs	r3, #18
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	881b      	ldrh	r3, [r3, #0]
    3b38:	0019      	movs	r1, r3
    3b3a:	0010      	movs	r0, r2
    3b3c:	4b2d      	ldr	r3, [pc, #180]	; (3bf4 <spi_data_read+0x1cc>)
    3b3e:	4798      	blx	r3
    3b40:	1e03      	subs	r3, r0, #0
    3b42:	d012      	beq.n	3b6a <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3b44:	23c5      	movs	r3, #197	; 0xc5
    3b46:	009a      	lsls	r2, r3, #2
    3b48:	492c      	ldr	r1, [pc, #176]	; (3bfc <spi_data_read+0x1d4>)
    3b4a:	4b2d      	ldr	r3, [pc, #180]	; (3c00 <spi_data_read+0x1d8>)
    3b4c:	0018      	movs	r0, r3
    3b4e:	4b2d      	ldr	r3, [pc, #180]	; (3c04 <spi_data_read+0x1dc>)
    3b50:	4798      	blx	r3
    3b52:	4b32      	ldr	r3, [pc, #200]	; (3c1c <spi_data_read+0x1f4>)
    3b54:	0018      	movs	r0, r3
    3b56:	4b2d      	ldr	r3, [pc, #180]	; (3c0c <spi_data_read+0x1e4>)
    3b58:	4798      	blx	r3
    3b5a:	200d      	movs	r0, #13
    3b5c:	4b2c      	ldr	r3, [pc, #176]	; (3c10 <spi_data_read+0x1e8>)
    3b5e:	4798      	blx	r3
			result = N_FAIL;
    3b60:	2311      	movs	r3, #17
    3b62:	18fb      	adds	r3, r7, r3
    3b64:	2200      	movs	r2, #0
    3b66:	701a      	strb	r2, [r3, #0]
			break;
    3b68:	e03b      	b.n	3be2 <spi_data_read+0x1ba>
		}
		if(!clockless)
    3b6a:	1c7b      	adds	r3, r7, #1
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d11d      	bne.n	3bae <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3b72:	4b2b      	ldr	r3, [pc, #172]	; (3c20 <spi_data_read+0x1f8>)
    3b74:	781b      	ldrb	r3, [r3, #0]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d119      	bne.n	3bae <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3b7a:	230c      	movs	r3, #12
    3b7c:	18fb      	adds	r3, r7, r3
    3b7e:	2102      	movs	r1, #2
    3b80:	0018      	movs	r0, r3
    3b82:	4b1c      	ldr	r3, [pc, #112]	; (3bf4 <spi_data_read+0x1cc>)
    3b84:	4798      	blx	r3
    3b86:	1e03      	subs	r3, r0, #0
    3b88:	d011      	beq.n	3bae <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3b8a:	4a26      	ldr	r2, [pc, #152]	; (3c24 <spi_data_read+0x1fc>)
    3b8c:	491b      	ldr	r1, [pc, #108]	; (3bfc <spi_data_read+0x1d4>)
    3b8e:	4b1c      	ldr	r3, [pc, #112]	; (3c00 <spi_data_read+0x1d8>)
    3b90:	0018      	movs	r0, r3
    3b92:	4b1c      	ldr	r3, [pc, #112]	; (3c04 <spi_data_read+0x1dc>)
    3b94:	4798      	blx	r3
    3b96:	4b24      	ldr	r3, [pc, #144]	; (3c28 <spi_data_read+0x200>)
    3b98:	0018      	movs	r0, r3
    3b9a:	4b1c      	ldr	r3, [pc, #112]	; (3c0c <spi_data_read+0x1e4>)
    3b9c:	4798      	blx	r3
    3b9e:	200d      	movs	r0, #13
    3ba0:	4b1b      	ldr	r3, [pc, #108]	; (3c10 <spi_data_read+0x1e8>)
    3ba2:	4798      	blx	r3
					result = N_FAIL;
    3ba4:	2311      	movs	r3, #17
    3ba6:	18fb      	adds	r3, r7, r3
    3ba8:	2200      	movs	r2, #0
    3baa:	701a      	strb	r2, [r3, #0]
					break;
    3bac:	e019      	b.n	3be2 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3bae:	2314      	movs	r3, #20
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	881a      	ldrh	r2, [r3, #0]
    3bb4:	2312      	movs	r3, #18
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	881b      	ldrh	r3, [r3, #0]
    3bba:	18d3      	adds	r3, r2, r3
    3bbc:	b29a      	uxth	r2, r3
    3bbe:	2314      	movs	r3, #20
    3bc0:	18fb      	adds	r3, r7, r3
    3bc2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3bc4:	2312      	movs	r3, #18
    3bc6:	18fb      	adds	r3, r7, r3
    3bc8:	881a      	ldrh	r2, [r3, #0]
    3bca:	1cbb      	adds	r3, r7, #2
    3bcc:	1cb9      	adds	r1, r7, #2
    3bce:	8809      	ldrh	r1, [r1, #0]
    3bd0:	1a8a      	subs	r2, r1, r2
    3bd2:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3bd4:	1cbb      	adds	r3, r7, #2
    3bd6:	881b      	ldrh	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d000      	beq.n	3bde <spi_data_read+0x1b6>
    3bdc:	e738      	b.n	3a50 <spi_data_read+0x28>
    3bde:	e000      	b.n	3be2 <spi_data_read+0x1ba>
			break;
    3be0:	46c0      	nop			; (mov r8, r8)

	return result;
    3be2:	2311      	movs	r3, #17
    3be4:	18fb      	adds	r3, r7, r3
    3be6:	781b      	ldrb	r3, [r3, #0]
    3be8:	b25b      	sxtb	r3, r3
}
    3bea:	0018      	movs	r0, r3
    3bec:	46bd      	mov	sp, r7
    3bee:	b006      	add	sp, #24
    3bf0:	bd80      	pop	{r7, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	000033a5 	.word	0x000033a5
    3bf8:	000002ff 	.word	0x000002ff
    3bfc:	0000f458 	.word	0x0000f458
    3c00:	0000eea0 	.word	0x0000eea0
    3c04:	0000cf25 	.word	0x0000cf25
    3c08:	0000ef64 	.word	0x0000ef64
    3c0c:	0000d041 	.word	0x0000d041
    3c10:	0000cf59 	.word	0x0000cf59
    3c14:	0000030b 	.word	0x0000030b
    3c18:	0000ef98 	.word	0x0000ef98
    3c1c:	0000efc8 	.word	0x0000efc8
    3c20:	20000210 	.word	0x20000210
    3c24:	0000031f 	.word	0x0000031f
    3c28:	0000eff8 	.word	0x0000eff8

00003c2c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b086      	sub	sp, #24
    3c30:	af00      	add	r7, sp, #0
    3c32:	6078      	str	r0, [r7, #4]
    3c34:	000a      	movs	r2, r1
    3c36:	1cbb      	adds	r3, r7, #2
    3c38:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3c3a:	2313      	movs	r3, #19
    3c3c:	18fb      	adds	r3, r7, r3
    3c3e:	2201      	movs	r2, #1
    3c40:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3c42:	230c      	movs	r3, #12
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	2200      	movs	r2, #0
    3c48:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3c4a:	2316      	movs	r3, #22
    3c4c:	18fb      	adds	r3, r7, r3
    3c4e:	2200      	movs	r2, #0
    3c50:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3c52:	1cbb      	adds	r3, r7, #2
    3c54:	881a      	ldrh	r2, [r3, #0]
    3c56:	2380      	movs	r3, #128	; 0x80
    3c58:	019b      	lsls	r3, r3, #6
    3c5a:	429a      	cmp	r2, r3
    3c5c:	d805      	bhi.n	3c6a <spi_data_write+0x3e>
			nbytes = sz;
    3c5e:	2314      	movs	r3, #20
    3c60:	18fb      	adds	r3, r7, r3
    3c62:	1cba      	adds	r2, r7, #2
    3c64:	8812      	ldrh	r2, [r2, #0]
    3c66:	801a      	strh	r2, [r3, #0]
    3c68:	e004      	b.n	3c74 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3c6a:	2314      	movs	r3, #20
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	2280      	movs	r2, #128	; 0x80
    3c70:	0192      	lsls	r2, r2, #6
    3c72:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3c74:	2311      	movs	r3, #17
    3c76:	18fb      	adds	r3, r7, r3
    3c78:	22f0      	movs	r2, #240	; 0xf0
    3c7a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3c7c:	2316      	movs	r3, #22
    3c7e:	18fb      	adds	r3, r7, r3
    3c80:	2200      	movs	r2, #0
    3c82:	5e9b      	ldrsh	r3, [r3, r2]
    3c84:	2b00      	cmp	r3, #0
    3c86:	d10f      	bne.n	3ca8 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3c88:	1cbb      	adds	r3, r7, #2
    3c8a:	881a      	ldrh	r2, [r3, #0]
    3c8c:	2380      	movs	r3, #128	; 0x80
    3c8e:	019b      	lsls	r3, r3, #6
    3c90:	429a      	cmp	r2, r3
    3c92:	d804      	bhi.n	3c9e <spi_data_write+0x72>
				order = 0x3;
    3c94:	2312      	movs	r3, #18
    3c96:	18fb      	adds	r3, r7, r3
    3c98:	2203      	movs	r2, #3
    3c9a:	701a      	strb	r2, [r3, #0]
    3c9c:	e013      	b.n	3cc6 <spi_data_write+0x9a>
			else
				order = 0x1;
    3c9e:	2312      	movs	r3, #18
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	2201      	movs	r2, #1
    3ca4:	701a      	strb	r2, [r3, #0]
    3ca6:	e00e      	b.n	3cc6 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3ca8:	1cbb      	adds	r3, r7, #2
    3caa:	881a      	ldrh	r2, [r3, #0]
    3cac:	2380      	movs	r3, #128	; 0x80
    3cae:	019b      	lsls	r3, r3, #6
    3cb0:	429a      	cmp	r2, r3
    3cb2:	d804      	bhi.n	3cbe <spi_data_write+0x92>
				order = 0x3;
    3cb4:	2312      	movs	r3, #18
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	2203      	movs	r2, #3
    3cba:	701a      	strb	r2, [r3, #0]
    3cbc:	e003      	b.n	3cc6 <spi_data_write+0x9a>
			else
				order = 0x2;
    3cbe:	2312      	movs	r3, #18
    3cc0:	18fb      	adds	r3, r7, r3
    3cc2:	2202      	movs	r2, #2
    3cc4:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3cc6:	2311      	movs	r3, #17
    3cc8:	18fb      	adds	r3, r7, r3
    3cca:	781a      	ldrb	r2, [r3, #0]
    3ccc:	2312      	movs	r3, #18
    3cce:	18fb      	adds	r3, r7, r3
    3cd0:	781b      	ldrb	r3, [r3, #0]
    3cd2:	4313      	orrs	r3, r2
    3cd4:	b2da      	uxtb	r2, r3
    3cd6:	2311      	movs	r3, #17
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3cdc:	2311      	movs	r3, #17
    3cde:	18fb      	adds	r3, r7, r3
    3ce0:	2101      	movs	r1, #1
    3ce2:	0018      	movs	r0, r3
    3ce4:	4b3a      	ldr	r3, [pc, #232]	; (3dd0 <spi_data_write+0x1a4>)
    3ce6:	4798      	blx	r3
    3ce8:	1e03      	subs	r3, r0, #0
    3cea:	d012      	beq.n	3d12 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3cec:	23d4      	movs	r3, #212	; 0xd4
    3cee:	009a      	lsls	r2, r3, #2
    3cf0:	4938      	ldr	r1, [pc, #224]	; (3dd4 <spi_data_write+0x1a8>)
    3cf2:	4b39      	ldr	r3, [pc, #228]	; (3dd8 <spi_data_write+0x1ac>)
    3cf4:	0018      	movs	r0, r3
    3cf6:	4b39      	ldr	r3, [pc, #228]	; (3ddc <spi_data_write+0x1b0>)
    3cf8:	4798      	blx	r3
    3cfa:	4b39      	ldr	r3, [pc, #228]	; (3de0 <spi_data_write+0x1b4>)
    3cfc:	0018      	movs	r0, r3
    3cfe:	4b39      	ldr	r3, [pc, #228]	; (3de4 <spi_data_write+0x1b8>)
    3d00:	4798      	blx	r3
    3d02:	200d      	movs	r0, #13
    3d04:	4b38      	ldr	r3, [pc, #224]	; (3de8 <spi_data_write+0x1bc>)
    3d06:	4798      	blx	r3
			result = N_FAIL;
    3d08:	2313      	movs	r3, #19
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	2200      	movs	r2, #0
    3d0e:	701a      	strb	r2, [r3, #0]
			break;
    3d10:	e056      	b.n	3dc0 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3d12:	2316      	movs	r3, #22
    3d14:	18fb      	adds	r3, r7, r3
    3d16:	2200      	movs	r2, #0
    3d18:	5e9b      	ldrsh	r3, [r3, r2]
    3d1a:	687a      	ldr	r2, [r7, #4]
    3d1c:	18d2      	adds	r2, r2, r3
    3d1e:	2314      	movs	r3, #20
    3d20:	18fb      	adds	r3, r7, r3
    3d22:	881b      	ldrh	r3, [r3, #0]
    3d24:	0019      	movs	r1, r3
    3d26:	0010      	movs	r0, r2
    3d28:	4b29      	ldr	r3, [pc, #164]	; (3dd0 <spi_data_write+0x1a4>)
    3d2a:	4798      	blx	r3
    3d2c:	1e03      	subs	r3, r0, #0
    3d2e:	d011      	beq.n	3d54 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3d30:	4a2e      	ldr	r2, [pc, #184]	; (3dec <spi_data_write+0x1c0>)
    3d32:	4928      	ldr	r1, [pc, #160]	; (3dd4 <spi_data_write+0x1a8>)
    3d34:	4b28      	ldr	r3, [pc, #160]	; (3dd8 <spi_data_write+0x1ac>)
    3d36:	0018      	movs	r0, r3
    3d38:	4b28      	ldr	r3, [pc, #160]	; (3ddc <spi_data_write+0x1b0>)
    3d3a:	4798      	blx	r3
    3d3c:	4b2c      	ldr	r3, [pc, #176]	; (3df0 <spi_data_write+0x1c4>)
    3d3e:	0018      	movs	r0, r3
    3d40:	4b28      	ldr	r3, [pc, #160]	; (3de4 <spi_data_write+0x1b8>)
    3d42:	4798      	blx	r3
    3d44:	200d      	movs	r0, #13
    3d46:	4b28      	ldr	r3, [pc, #160]	; (3de8 <spi_data_write+0x1bc>)
    3d48:	4798      	blx	r3
			result = N_FAIL;
    3d4a:	2313      	movs	r3, #19
    3d4c:	18fb      	adds	r3, r7, r3
    3d4e:	2200      	movs	r2, #0
    3d50:	701a      	strb	r2, [r3, #0]
			break;
    3d52:	e035      	b.n	3dc0 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3d54:	4b27      	ldr	r3, [pc, #156]	; (3df4 <spi_data_write+0x1c8>)
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d119      	bne.n	3d90 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3d5c:	230c      	movs	r3, #12
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	2102      	movs	r1, #2
    3d62:	0018      	movs	r0, r3
    3d64:	4b1a      	ldr	r3, [pc, #104]	; (3dd0 <spi_data_write+0x1a4>)
    3d66:	4798      	blx	r3
    3d68:	1e03      	subs	r3, r0, #0
    3d6a:	d011      	beq.n	3d90 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3d6c:	4a22      	ldr	r2, [pc, #136]	; (3df8 <spi_data_write+0x1cc>)
    3d6e:	4919      	ldr	r1, [pc, #100]	; (3dd4 <spi_data_write+0x1a8>)
    3d70:	4b19      	ldr	r3, [pc, #100]	; (3dd8 <spi_data_write+0x1ac>)
    3d72:	0018      	movs	r0, r3
    3d74:	4b19      	ldr	r3, [pc, #100]	; (3ddc <spi_data_write+0x1b0>)
    3d76:	4798      	blx	r3
    3d78:	4b20      	ldr	r3, [pc, #128]	; (3dfc <spi_data_write+0x1d0>)
    3d7a:	0018      	movs	r0, r3
    3d7c:	4b19      	ldr	r3, [pc, #100]	; (3de4 <spi_data_write+0x1b8>)
    3d7e:	4798      	blx	r3
    3d80:	200d      	movs	r0, #13
    3d82:	4b19      	ldr	r3, [pc, #100]	; (3de8 <spi_data_write+0x1bc>)
    3d84:	4798      	blx	r3
				result = N_FAIL;
    3d86:	2313      	movs	r3, #19
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	2200      	movs	r2, #0
    3d8c:	701a      	strb	r2, [r3, #0]
				break;
    3d8e:	e017      	b.n	3dc0 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3d90:	2316      	movs	r3, #22
    3d92:	18fb      	adds	r3, r7, r3
    3d94:	881a      	ldrh	r2, [r3, #0]
    3d96:	2314      	movs	r3, #20
    3d98:	18fb      	adds	r3, r7, r3
    3d9a:	881b      	ldrh	r3, [r3, #0]
    3d9c:	18d3      	adds	r3, r2, r3
    3d9e:	b29a      	uxth	r2, r3
    3da0:	2316      	movs	r3, #22
    3da2:	18fb      	adds	r3, r7, r3
    3da4:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3da6:	1cbb      	adds	r3, r7, #2
    3da8:	1cb9      	adds	r1, r7, #2
    3daa:	2214      	movs	r2, #20
    3dac:	18ba      	adds	r2, r7, r2
    3dae:	8809      	ldrh	r1, [r1, #0]
    3db0:	8812      	ldrh	r2, [r2, #0]
    3db2:	1a8a      	subs	r2, r1, r2
    3db4:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3db6:	1cbb      	adds	r3, r7, #2
    3db8:	881b      	ldrh	r3, [r3, #0]
    3dba:	2b00      	cmp	r3, #0
    3dbc:	d000      	beq.n	3dc0 <spi_data_write+0x194>
    3dbe:	e748      	b.n	3c52 <spi_data_write+0x26>


	return result;
    3dc0:	2313      	movs	r3, #19
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	b25b      	sxtb	r3, r3
}
    3dc8:	0018      	movs	r0, r3
    3dca:	46bd      	mov	sp, r7
    3dcc:	b006      	add	sp, #24
    3dce:	bd80      	pop	{r7, pc}
    3dd0:	000033e9 	.word	0x000033e9
    3dd4:	0000f468 	.word	0x0000f468
    3dd8:	0000eea0 	.word	0x0000eea0
    3ddc:	0000cf25 	.word	0x0000cf25
    3de0:	0000f02c 	.word	0x0000f02c
    3de4:	0000d041 	.word	0x0000d041
    3de8:	0000cf59 	.word	0x0000cf59
    3dec:	00000359 	.word	0x00000359
    3df0:	0000f064 	.word	0x0000f064
    3df4:	20000210 	.word	0x20000210
    3df8:	00000363 	.word	0x00000363
    3dfc:	0000f098 	.word	0x0000f098

00003e00 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3e00:	b5b0      	push	{r4, r5, r7, lr}
    3e02:	b086      	sub	sp, #24
    3e04:	af02      	add	r7, sp, #8
    3e06:	6078      	str	r0, [r7, #4]
    3e08:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3e0a:	230f      	movs	r3, #15
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	220a      	movs	r2, #10
    3e10:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3e12:	230e      	movs	r3, #14
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	2201      	movs	r2, #1
    3e18:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3e1a:	230d      	movs	r3, #13
    3e1c:	18fb      	adds	r3, r7, r3
    3e1e:	22c9      	movs	r2, #201	; 0xc9
    3e20:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3e22:	230c      	movs	r3, #12
    3e24:	18fb      	adds	r3, r7, r3
    3e26:	2200      	movs	r2, #0
    3e28:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3e2a:	687b      	ldr	r3, [r7, #4]
    3e2c:	2b30      	cmp	r3, #48	; 0x30
    3e2e:	d808      	bhi.n	3e42 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3e30:	230d      	movs	r3, #13
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	22c3      	movs	r2, #195	; 0xc3
    3e36:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3e38:	230c      	movs	r3, #12
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	2201      	movs	r2, #1
    3e3e:	701a      	strb	r2, [r3, #0]
    3e40:	e007      	b.n	3e52 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3e42:	230d      	movs	r3, #13
    3e44:	18fb      	adds	r3, r7, r3
    3e46:	22c9      	movs	r2, #201	; 0xc9
    3e48:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3e4a:	230c      	movs	r3, #12
    3e4c:	18fb      	adds	r3, r7, r3
    3e4e:	2200      	movs	r2, #0
    3e50:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3e52:	230e      	movs	r3, #14
    3e54:	18fc      	adds	r4, r7, r3
    3e56:	683a      	ldr	r2, [r7, #0]
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	230d      	movs	r3, #13
    3e5c:	18fb      	adds	r3, r7, r3
    3e5e:	7818      	ldrb	r0, [r3, #0]
    3e60:	230c      	movs	r3, #12
    3e62:	18fb      	adds	r3, r7, r3
    3e64:	781b      	ldrb	r3, [r3, #0]
    3e66:	9300      	str	r3, [sp, #0]
    3e68:	2304      	movs	r3, #4
    3e6a:	4d3c      	ldr	r5, [pc, #240]	; (3f5c <spi_write_reg+0x15c>)
    3e6c:	47a8      	blx	r5
    3e6e:	0003      	movs	r3, r0
    3e70:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3e72:	230e      	movs	r3, #14
    3e74:	18fb      	adds	r3, r7, r3
    3e76:	781b      	ldrb	r3, [r3, #0]
    3e78:	b25b      	sxtb	r3, r3
    3e7a:	2b01      	cmp	r3, #1
    3e7c:	d00f      	beq.n	3e9e <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3e7e:	4a38      	ldr	r2, [pc, #224]	; (3f60 <spi_write_reg+0x160>)
    3e80:	4938      	ldr	r1, [pc, #224]	; (3f64 <spi_write_reg+0x164>)
    3e82:	4b39      	ldr	r3, [pc, #228]	; (3f68 <spi_write_reg+0x168>)
    3e84:	0018      	movs	r0, r3
    3e86:	4b39      	ldr	r3, [pc, #228]	; (3f6c <spi_write_reg+0x16c>)
    3e88:	4798      	blx	r3
    3e8a:	687a      	ldr	r2, [r7, #4]
    3e8c:	4b38      	ldr	r3, [pc, #224]	; (3f70 <spi_write_reg+0x170>)
    3e8e:	0011      	movs	r1, r2
    3e90:	0018      	movs	r0, r3
    3e92:	4b36      	ldr	r3, [pc, #216]	; (3f6c <spi_write_reg+0x16c>)
    3e94:	4798      	blx	r3
    3e96:	200d      	movs	r0, #13
    3e98:	4b36      	ldr	r3, [pc, #216]	; (3f74 <spi_write_reg+0x174>)
    3e9a:	4798      	blx	r3
		goto _FAIL_;
    3e9c:	e020      	b.n	3ee0 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3e9e:	230e      	movs	r3, #14
    3ea0:	18fc      	adds	r4, r7, r3
    3ea2:	230d      	movs	r3, #13
    3ea4:	18fb      	adds	r3, r7, r3
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	0018      	movs	r0, r3
    3eaa:	4b33      	ldr	r3, [pc, #204]	; (3f78 <spi_write_reg+0x178>)
    3eac:	4798      	blx	r3
    3eae:	0003      	movs	r3, r0
    3eb0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3eb2:	230e      	movs	r3, #14
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	781b      	ldrb	r3, [r3, #0]
    3eb8:	b25b      	sxtb	r3, r3
    3eba:	2b01      	cmp	r3, #1
    3ebc:	d010      	beq.n	3ee0 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3ebe:	23e7      	movs	r3, #231	; 0xe7
    3ec0:	009a      	lsls	r2, r3, #2
    3ec2:	4928      	ldr	r1, [pc, #160]	; (3f64 <spi_write_reg+0x164>)
    3ec4:	4b28      	ldr	r3, [pc, #160]	; (3f68 <spi_write_reg+0x168>)
    3ec6:	0018      	movs	r0, r3
    3ec8:	4b28      	ldr	r3, [pc, #160]	; (3f6c <spi_write_reg+0x16c>)
    3eca:	4798      	blx	r3
    3ecc:	687a      	ldr	r2, [r7, #4]
    3ece:	4b2b      	ldr	r3, [pc, #172]	; (3f7c <spi_write_reg+0x17c>)
    3ed0:	0011      	movs	r1, r2
    3ed2:	0018      	movs	r0, r3
    3ed4:	4b25      	ldr	r3, [pc, #148]	; (3f6c <spi_write_reg+0x16c>)
    3ed6:	4798      	blx	r3
    3ed8:	200d      	movs	r0, #13
    3eda:	4b26      	ldr	r3, [pc, #152]	; (3f74 <spi_write_reg+0x174>)
    3edc:	4798      	blx	r3
		goto _FAIL_;
    3ede:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3ee0:	230e      	movs	r3, #14
    3ee2:	18fb      	adds	r3, r7, r3
    3ee4:	781b      	ldrb	r3, [r3, #0]
    3ee6:	b25b      	sxtb	r3, r3
    3ee8:	2b01      	cmp	r3, #1
    3eea:	d02e      	beq.n	3f4a <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3eec:	2001      	movs	r0, #1
    3eee:	4b24      	ldr	r3, [pc, #144]	; (3f80 <spi_write_reg+0x180>)
    3ef0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3ef2:	2300      	movs	r3, #0
    3ef4:	9300      	str	r3, [sp, #0]
    3ef6:	2300      	movs	r3, #0
    3ef8:	2200      	movs	r2, #0
    3efa:	2100      	movs	r1, #0
    3efc:	20cf      	movs	r0, #207	; 0xcf
    3efe:	4c17      	ldr	r4, [pc, #92]	; (3f5c <spi_write_reg+0x15c>)
    3f00:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3f02:	20cf      	movs	r0, #207	; 0xcf
    3f04:	4b1c      	ldr	r3, [pc, #112]	; (3f78 <spi_write_reg+0x178>)
    3f06:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3f08:	4a1e      	ldr	r2, [pc, #120]	; (3f84 <spi_write_reg+0x184>)
    3f0a:	4916      	ldr	r1, [pc, #88]	; (3f64 <spi_write_reg+0x164>)
    3f0c:	4b16      	ldr	r3, [pc, #88]	; (3f68 <spi_write_reg+0x168>)
    3f0e:	0018      	movs	r0, r3
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <spi_write_reg+0x16c>)
    3f12:	4798      	blx	r3
    3f14:	230f      	movs	r3, #15
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	7819      	ldrb	r1, [r3, #0]
    3f1a:	683b      	ldr	r3, [r7, #0]
    3f1c:	687a      	ldr	r2, [r7, #4]
    3f1e:	481a      	ldr	r0, [pc, #104]	; (3f88 <spi_write_reg+0x188>)
    3f20:	4c12      	ldr	r4, [pc, #72]	; (3f6c <spi_write_reg+0x16c>)
    3f22:	47a0      	blx	r4
    3f24:	200d      	movs	r0, #13
    3f26:	4b13      	ldr	r3, [pc, #76]	; (3f74 <spi_write_reg+0x174>)
    3f28:	4798      	blx	r3
		nm_bsp_sleep(1);
    3f2a:	2001      	movs	r0, #1
    3f2c:	4b14      	ldr	r3, [pc, #80]	; (3f80 <spi_write_reg+0x180>)
    3f2e:	4798      	blx	r3
		retry--;
    3f30:	230f      	movs	r3, #15
    3f32:	18fb      	adds	r3, r7, r3
    3f34:	781a      	ldrb	r2, [r3, #0]
    3f36:	230f      	movs	r3, #15
    3f38:	18fb      	adds	r3, r7, r3
    3f3a:	3a01      	subs	r2, #1
    3f3c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3f3e:	230f      	movs	r3, #15
    3f40:	18fb      	adds	r3, r7, r3
    3f42:	781b      	ldrb	r3, [r3, #0]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d000      	beq.n	3f4a <spi_write_reg+0x14a>
    3f48:	e76f      	b.n	3e2a <spi_write_reg+0x2a>
	}

	return result;
    3f4a:	230e      	movs	r3, #14
    3f4c:	18fb      	adds	r3, r7, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	b25b      	sxtb	r3, r3
}
    3f52:	0018      	movs	r0, r3
    3f54:	46bd      	mov	sp, r7
    3f56:	b004      	add	sp, #16
    3f58:	bdb0      	pop	{r4, r5, r7, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	000034ad 	.word	0x000034ad
    3f60:	00000396 	.word	0x00000396
    3f64:	0000f478 	.word	0x0000f478
    3f68:	0000eea0 	.word	0x0000eea0
    3f6c:	0000cf25 	.word	0x0000cf25
    3f70:	0000f0d0 	.word	0x0000f0d0
    3f74:	0000cf59 	.word	0x0000cf59
    3f78:	000038f1 	.word	0x000038f1
    3f7c:	0000f0fc 	.word	0x0000f0fc
    3f80:	000003ed 	.word	0x000003ed
    3f84:	000003af 	.word	0x000003af
    3f88:	0000f134 	.word	0x0000f134

00003f8c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3f8c:	b5b0      	push	{r4, r5, r7, lr}
    3f8e:	b088      	sub	sp, #32
    3f90:	af02      	add	r7, sp, #8
    3f92:	60f8      	str	r0, [r7, #12]
    3f94:	60b9      	str	r1, [r7, #8]
    3f96:	1dbb      	adds	r3, r7, #6
    3f98:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3f9a:	2316      	movs	r3, #22
    3f9c:	18fb      	adds	r3, r7, r3
    3f9e:	220a      	movs	r2, #10
    3fa0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3fa2:	2315      	movs	r3, #21
    3fa4:	18fb      	adds	r3, r7, r3
    3fa6:	22c7      	movs	r2, #199	; 0xc7
    3fa8:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3faa:	1dbb      	adds	r3, r7, #6
    3fac:	881b      	ldrh	r3, [r3, #0]
    3fae:	2b01      	cmp	r3, #1
    3fb0:	d102      	bne.n	3fb8 <nm_spi_write+0x2c>
		size = 2;
    3fb2:	1dbb      	adds	r3, r7, #6
    3fb4:	2202      	movs	r2, #2
    3fb6:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3fb8:	1dbb      	adds	r3, r7, #6
    3fba:	881a      	ldrh	r2, [r3, #0]
    3fbc:	2317      	movs	r3, #23
    3fbe:	18fc      	adds	r4, r7, r3
    3fc0:	68f9      	ldr	r1, [r7, #12]
    3fc2:	2315      	movs	r3, #21
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	7818      	ldrb	r0, [r3, #0]
    3fc8:	2300      	movs	r3, #0
    3fca:	9300      	str	r3, [sp, #0]
    3fcc:	0013      	movs	r3, r2
    3fce:	2200      	movs	r2, #0
    3fd0:	4d5b      	ldr	r5, [pc, #364]	; (4140 <nm_spi_write+0x1b4>)
    3fd2:	47a8      	blx	r5
    3fd4:	0003      	movs	r3, r0
    3fd6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fd8:	2317      	movs	r3, #23
    3fda:	18fb      	adds	r3, r7, r3
    3fdc:	781b      	ldrb	r3, [r3, #0]
    3fde:	b25b      	sxtb	r3, r3
    3fe0:	2b01      	cmp	r3, #1
    3fe2:	d00f      	beq.n	4004 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3fe4:	4a57      	ldr	r2, [pc, #348]	; (4144 <nm_spi_write+0x1b8>)
    3fe6:	4958      	ldr	r1, [pc, #352]	; (4148 <nm_spi_write+0x1bc>)
    3fe8:	4b58      	ldr	r3, [pc, #352]	; (414c <nm_spi_write+0x1c0>)
    3fea:	0018      	movs	r0, r3
    3fec:	4b58      	ldr	r3, [pc, #352]	; (4150 <nm_spi_write+0x1c4>)
    3fee:	4798      	blx	r3
    3ff0:	68fa      	ldr	r2, [r7, #12]
    3ff2:	4b58      	ldr	r3, [pc, #352]	; (4154 <nm_spi_write+0x1c8>)
    3ff4:	0011      	movs	r1, r2
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b55      	ldr	r3, [pc, #340]	; (4150 <nm_spi_write+0x1c4>)
    3ffa:	4798      	blx	r3
    3ffc:	200d      	movs	r0, #13
    3ffe:	4b56      	ldr	r3, [pc, #344]	; (4158 <nm_spi_write+0x1cc>)
    4000:	4798      	blx	r3
		goto _FAIL_;
    4002:	e05f      	b.n	40c4 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    4004:	2317      	movs	r3, #23
    4006:	18fc      	adds	r4, r7, r3
    4008:	2315      	movs	r3, #21
    400a:	18fb      	adds	r3, r7, r3
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	0018      	movs	r0, r3
    4010:	4b52      	ldr	r3, [pc, #328]	; (415c <nm_spi_write+0x1d0>)
    4012:	4798      	blx	r3
    4014:	0003      	movs	r3, r0
    4016:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4018:	2317      	movs	r3, #23
    401a:	18fb      	adds	r3, r7, r3
    401c:	781b      	ldrb	r3, [r3, #0]
    401e:	b25b      	sxtb	r3, r3
    4020:	2b01      	cmp	r3, #1
    4022:	d010      	beq.n	4046 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4024:	23f4      	movs	r3, #244	; 0xf4
    4026:	009a      	lsls	r2, r3, #2
    4028:	4947      	ldr	r1, [pc, #284]	; (4148 <nm_spi_write+0x1bc>)
    402a:	4b48      	ldr	r3, [pc, #288]	; (414c <nm_spi_write+0x1c0>)
    402c:	0018      	movs	r0, r3
    402e:	4b48      	ldr	r3, [pc, #288]	; (4150 <nm_spi_write+0x1c4>)
    4030:	4798      	blx	r3
    4032:	68fa      	ldr	r2, [r7, #12]
    4034:	4b4a      	ldr	r3, [pc, #296]	; (4160 <nm_spi_write+0x1d4>)
    4036:	0011      	movs	r1, r2
    4038:	0018      	movs	r0, r3
    403a:	4b45      	ldr	r3, [pc, #276]	; (4150 <nm_spi_write+0x1c4>)
    403c:	4798      	blx	r3
    403e:	200d      	movs	r0, #13
    4040:	4b45      	ldr	r3, [pc, #276]	; (4158 <nm_spi_write+0x1cc>)
    4042:	4798      	blx	r3
		goto _FAIL_;
    4044:	e03e      	b.n	40c4 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    4046:	2317      	movs	r3, #23
    4048:	18fc      	adds	r4, r7, r3
    404a:	1dbb      	adds	r3, r7, #6
    404c:	881a      	ldrh	r2, [r3, #0]
    404e:	68bb      	ldr	r3, [r7, #8]
    4050:	0011      	movs	r1, r2
    4052:	0018      	movs	r0, r3
    4054:	4b43      	ldr	r3, [pc, #268]	; (4164 <nm_spi_write+0x1d8>)
    4056:	4798      	blx	r3
    4058:	0003      	movs	r3, r0
    405a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    405c:	2317      	movs	r3, #23
    405e:	18fb      	adds	r3, r7, r3
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	b25b      	sxtb	r3, r3
    4064:	2b01      	cmp	r3, #1
    4066:	d00e      	beq.n	4086 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4068:	23f8      	movs	r3, #248	; 0xf8
    406a:	009a      	lsls	r2, r3, #2
    406c:	4936      	ldr	r1, [pc, #216]	; (4148 <nm_spi_write+0x1bc>)
    406e:	4b37      	ldr	r3, [pc, #220]	; (414c <nm_spi_write+0x1c0>)
    4070:	0018      	movs	r0, r3
    4072:	4b37      	ldr	r3, [pc, #220]	; (4150 <nm_spi_write+0x1c4>)
    4074:	4798      	blx	r3
    4076:	4b3c      	ldr	r3, [pc, #240]	; (4168 <nm_spi_write+0x1dc>)
    4078:	0018      	movs	r0, r3
    407a:	4b3c      	ldr	r3, [pc, #240]	; (416c <nm_spi_write+0x1e0>)
    407c:	4798      	blx	r3
    407e:	200d      	movs	r0, #13
    4080:	4b35      	ldr	r3, [pc, #212]	; (4158 <nm_spi_write+0x1cc>)
    4082:	4798      	blx	r3
		goto _FAIL_;
    4084:	e01e      	b.n	40c4 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    4086:	2317      	movs	r3, #23
    4088:	18fc      	adds	r4, r7, r3
    408a:	2315      	movs	r3, #21
    408c:	18fb      	adds	r3, r7, r3
    408e:	781b      	ldrb	r3, [r3, #0]
    4090:	0018      	movs	r0, r3
    4092:	4b37      	ldr	r3, [pc, #220]	; (4170 <nm_spi_write+0x1e4>)
    4094:	4798      	blx	r3
    4096:	0003      	movs	r3, r0
    4098:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    409a:	2317      	movs	r3, #23
    409c:	18fb      	adds	r3, r7, r3
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	b25b      	sxtb	r3, r3
    40a2:	2b01      	cmp	r3, #1
    40a4:	d00e      	beq.n	40c4 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    40a6:	23fa      	movs	r3, #250	; 0xfa
    40a8:	009a      	lsls	r2, r3, #2
    40aa:	4927      	ldr	r1, [pc, #156]	; (4148 <nm_spi_write+0x1bc>)
    40ac:	4b27      	ldr	r3, [pc, #156]	; (414c <nm_spi_write+0x1c0>)
    40ae:	0018      	movs	r0, r3
    40b0:	4b27      	ldr	r3, [pc, #156]	; (4150 <nm_spi_write+0x1c4>)
    40b2:	4798      	blx	r3
    40b4:	4b2c      	ldr	r3, [pc, #176]	; (4168 <nm_spi_write+0x1dc>)
    40b6:	0018      	movs	r0, r3
    40b8:	4b2c      	ldr	r3, [pc, #176]	; (416c <nm_spi_write+0x1e0>)
    40ba:	4798      	blx	r3
    40bc:	200d      	movs	r0, #13
    40be:	4b26      	ldr	r3, [pc, #152]	; (4158 <nm_spi_write+0x1cc>)
    40c0:	4798      	blx	r3
		goto _FAIL_;
    40c2:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    40c4:	2317      	movs	r3, #23
    40c6:	18fb      	adds	r3, r7, r3
    40c8:	781b      	ldrb	r3, [r3, #0]
    40ca:	b25b      	sxtb	r3, r3
    40cc:	2b01      	cmp	r3, #1
    40ce:	d02f      	beq.n	4130 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    40d0:	2001      	movs	r0, #1
    40d2:	4b28      	ldr	r3, [pc, #160]	; (4174 <nm_spi_write+0x1e8>)
    40d4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    40d6:	2300      	movs	r3, #0
    40d8:	9300      	str	r3, [sp, #0]
    40da:	2300      	movs	r3, #0
    40dc:	2200      	movs	r2, #0
    40de:	2100      	movs	r1, #0
    40e0:	20cf      	movs	r0, #207	; 0xcf
    40e2:	4c17      	ldr	r4, [pc, #92]	; (4140 <nm_spi_write+0x1b4>)
    40e4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    40e6:	20cf      	movs	r0, #207	; 0xcf
    40e8:	4b1c      	ldr	r3, [pc, #112]	; (415c <nm_spi_write+0x1d0>)
    40ea:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    40ec:	4a22      	ldr	r2, [pc, #136]	; (4178 <nm_spi_write+0x1ec>)
    40ee:	4916      	ldr	r1, [pc, #88]	; (4148 <nm_spi_write+0x1bc>)
    40f0:	4b16      	ldr	r3, [pc, #88]	; (414c <nm_spi_write+0x1c0>)
    40f2:	0018      	movs	r0, r3
    40f4:	4b16      	ldr	r3, [pc, #88]	; (4150 <nm_spi_write+0x1c4>)
    40f6:	4798      	blx	r3
    40f8:	2316      	movs	r3, #22
    40fa:	18fb      	adds	r3, r7, r3
    40fc:	7819      	ldrb	r1, [r3, #0]
    40fe:	1dbb      	adds	r3, r7, #6
    4100:	881b      	ldrh	r3, [r3, #0]
    4102:	68fa      	ldr	r2, [r7, #12]
    4104:	481d      	ldr	r0, [pc, #116]	; (417c <nm_spi_write+0x1f0>)
    4106:	4c12      	ldr	r4, [pc, #72]	; (4150 <nm_spi_write+0x1c4>)
    4108:	47a0      	blx	r4
    410a:	200d      	movs	r0, #13
    410c:	4b12      	ldr	r3, [pc, #72]	; (4158 <nm_spi_write+0x1cc>)
    410e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4110:	2001      	movs	r0, #1
    4112:	4b18      	ldr	r3, [pc, #96]	; (4174 <nm_spi_write+0x1e8>)
    4114:	4798      	blx	r3
		retry--;
    4116:	2316      	movs	r3, #22
    4118:	18fb      	adds	r3, r7, r3
    411a:	781a      	ldrb	r2, [r3, #0]
    411c:	2316      	movs	r3, #22
    411e:	18fb      	adds	r3, r7, r3
    4120:	3a01      	subs	r2, #1
    4122:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4124:	2316      	movs	r3, #22
    4126:	18fb      	adds	r3, r7, r3
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	2b00      	cmp	r3, #0
    412c:	d000      	beq.n	4130 <nm_spi_write+0x1a4>
    412e:	e73c      	b.n	3faa <nm_spi_write+0x1e>
	}


	return result;
    4130:	2317      	movs	r3, #23
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	b25b      	sxtb	r3, r3
}
    4138:	0018      	movs	r0, r3
    413a:	46bd      	mov	sp, r7
    413c:	b006      	add	sp, #24
    413e:	bdb0      	pop	{r4, r5, r7, pc}
    4140:	000034ad 	.word	0x000034ad
    4144:	000003ca 	.word	0x000003ca
    4148:	0000f488 	.word	0x0000f488
    414c:	0000eea0 	.word	0x0000eea0
    4150:	0000cf25 	.word	0x0000cf25
    4154:	0000f150 	.word	0x0000f150
    4158:	0000cf59 	.word	0x0000cf59
    415c:	000038f1 	.word	0x000038f1
    4160:	0000f180 	.word	0x0000f180
    4164:	00003c2d 	.word	0x00003c2d
    4168:	0000f1b8 	.word	0x0000f1b8
    416c:	0000d041 	.word	0x0000d041
    4170:	000037f1 	.word	0x000037f1
    4174:	000003ed 	.word	0x000003ed
    4178:	000003f2 	.word	0x000003f2
    417c:	0000f1e0 	.word	0x0000f1e0

00004180 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4180:	b5b0      	push	{r4, r5, r7, lr}
    4182:	b086      	sub	sp, #24
    4184:	af02      	add	r7, sp, #8
    4186:	6078      	str	r0, [r7, #4]
    4188:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    418a:	230f      	movs	r3, #15
    418c:	18fb      	adds	r3, r7, r3
    418e:	220a      	movs	r2, #10
    4190:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4192:	230e      	movs	r3, #14
    4194:	18fb      	adds	r3, r7, r3
    4196:	2201      	movs	r2, #1
    4198:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    419a:	230d      	movs	r3, #13
    419c:	18fb      	adds	r3, r7, r3
    419e:	22ca      	movs	r2, #202	; 0xca
    41a0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    41a2:	230c      	movs	r3, #12
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	2200      	movs	r2, #0
    41a8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	2bff      	cmp	r3, #255	; 0xff
    41ae:	d808      	bhi.n	41c2 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    41b0:	230d      	movs	r3, #13
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	22c4      	movs	r2, #196	; 0xc4
    41b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    41b8:	230c      	movs	r3, #12
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	2201      	movs	r2, #1
    41be:	701a      	strb	r2, [r3, #0]
    41c0:	e007      	b.n	41d2 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    41c2:	230d      	movs	r3, #13
    41c4:	18fb      	adds	r3, r7, r3
    41c6:	22ca      	movs	r2, #202	; 0xca
    41c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    41ca:	230c      	movs	r3, #12
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	2200      	movs	r2, #0
    41d0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    41d2:	230e      	movs	r3, #14
    41d4:	18fc      	adds	r4, r7, r3
    41d6:	6879      	ldr	r1, [r7, #4]
    41d8:	230d      	movs	r3, #13
    41da:	18fb      	adds	r3, r7, r3
    41dc:	7818      	ldrb	r0, [r3, #0]
    41de:	230c      	movs	r3, #12
    41e0:	18fb      	adds	r3, r7, r3
    41e2:	781b      	ldrb	r3, [r3, #0]
    41e4:	9300      	str	r3, [sp, #0]
    41e6:	2304      	movs	r3, #4
    41e8:	2200      	movs	r2, #0
    41ea:	4d56      	ldr	r5, [pc, #344]	; (4344 <spi_read_reg+0x1c4>)
    41ec:	47a8      	blx	r5
    41ee:	0003      	movs	r3, r0
    41f0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41f2:	230e      	movs	r3, #14
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b25b      	sxtb	r3, r3
    41fa:	2b01      	cmp	r3, #1
    41fc:	d00f      	beq.n	421e <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    41fe:	4a52      	ldr	r2, [pc, #328]	; (4348 <spi_read_reg+0x1c8>)
    4200:	4952      	ldr	r1, [pc, #328]	; (434c <spi_read_reg+0x1cc>)
    4202:	4b53      	ldr	r3, [pc, #332]	; (4350 <spi_read_reg+0x1d0>)
    4204:	0018      	movs	r0, r3
    4206:	4b53      	ldr	r3, [pc, #332]	; (4354 <spi_read_reg+0x1d4>)
    4208:	4798      	blx	r3
    420a:	687a      	ldr	r2, [r7, #4]
    420c:	4b52      	ldr	r3, [pc, #328]	; (4358 <spi_read_reg+0x1d8>)
    420e:	0011      	movs	r1, r2
    4210:	0018      	movs	r0, r3
    4212:	4b50      	ldr	r3, [pc, #320]	; (4354 <spi_read_reg+0x1d4>)
    4214:	4798      	blx	r3
    4216:	200d      	movs	r0, #13
    4218:	4b50      	ldr	r3, [pc, #320]	; (435c <spi_read_reg+0x1dc>)
    421a:	4798      	blx	r3
		goto _FAIL_;
    421c:	e055      	b.n	42ca <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    421e:	230e      	movs	r3, #14
    4220:	18fc      	adds	r4, r7, r3
    4222:	230d      	movs	r3, #13
    4224:	18fb      	adds	r3, r7, r3
    4226:	781b      	ldrb	r3, [r3, #0]
    4228:	0018      	movs	r0, r3
    422a:	4b4d      	ldr	r3, [pc, #308]	; (4360 <spi_read_reg+0x1e0>)
    422c:	4798      	blx	r3
    422e:	0003      	movs	r3, r0
    4230:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4232:	230e      	movs	r3, #14
    4234:	18fb      	adds	r3, r7, r3
    4236:	781b      	ldrb	r3, [r3, #0]
    4238:	b25b      	sxtb	r3, r3
    423a:	2b01      	cmp	r3, #1
    423c:	d00f      	beq.n	425e <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    423e:	4a49      	ldr	r2, [pc, #292]	; (4364 <spi_read_reg+0x1e4>)
    4240:	4942      	ldr	r1, [pc, #264]	; (434c <spi_read_reg+0x1cc>)
    4242:	4b43      	ldr	r3, [pc, #268]	; (4350 <spi_read_reg+0x1d0>)
    4244:	0018      	movs	r0, r3
    4246:	4b43      	ldr	r3, [pc, #268]	; (4354 <spi_read_reg+0x1d4>)
    4248:	4798      	blx	r3
    424a:	687a      	ldr	r2, [r7, #4]
    424c:	4b46      	ldr	r3, [pc, #280]	; (4368 <spi_read_reg+0x1e8>)
    424e:	0011      	movs	r1, r2
    4250:	0018      	movs	r0, r3
    4252:	4b40      	ldr	r3, [pc, #256]	; (4354 <spi_read_reg+0x1d4>)
    4254:	4798      	blx	r3
    4256:	200d      	movs	r0, #13
    4258:	4b40      	ldr	r3, [pc, #256]	; (435c <spi_read_reg+0x1dc>)
    425a:	4798      	blx	r3
		goto _FAIL_;
    425c:	e035      	b.n	42ca <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    425e:	230e      	movs	r3, #14
    4260:	18fc      	adds	r4, r7, r3
    4262:	230c      	movs	r3, #12
    4264:	18fb      	adds	r3, r7, r3
    4266:	781a      	ldrb	r2, [r3, #0]
    4268:	2308      	movs	r3, #8
    426a:	18fb      	adds	r3, r7, r3
    426c:	2104      	movs	r1, #4
    426e:	0018      	movs	r0, r3
    4270:	4b3e      	ldr	r3, [pc, #248]	; (436c <spi_read_reg+0x1ec>)
    4272:	4798      	blx	r3
    4274:	0003      	movs	r3, r0
    4276:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4278:	230e      	movs	r3, #14
    427a:	18fb      	adds	r3, r7, r3
    427c:	781b      	ldrb	r3, [r3, #0]
    427e:	b25b      	sxtb	r3, r3
    4280:	2b01      	cmp	r3, #1
    4282:	d00d      	beq.n	42a0 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    4284:	4a3a      	ldr	r2, [pc, #232]	; (4370 <spi_read_reg+0x1f0>)
    4286:	4931      	ldr	r1, [pc, #196]	; (434c <spi_read_reg+0x1cc>)
    4288:	4b31      	ldr	r3, [pc, #196]	; (4350 <spi_read_reg+0x1d0>)
    428a:	0018      	movs	r0, r3
    428c:	4b31      	ldr	r3, [pc, #196]	; (4354 <spi_read_reg+0x1d4>)
    428e:	4798      	blx	r3
    4290:	4b38      	ldr	r3, [pc, #224]	; (4374 <spi_read_reg+0x1f4>)
    4292:	0018      	movs	r0, r3
    4294:	4b38      	ldr	r3, [pc, #224]	; (4378 <spi_read_reg+0x1f8>)
    4296:	4798      	blx	r3
    4298:	200d      	movs	r0, #13
    429a:	4b30      	ldr	r3, [pc, #192]	; (435c <spi_read_reg+0x1dc>)
    429c:	4798      	blx	r3
		goto _FAIL_;
    429e:	e014      	b.n	42ca <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    42a0:	2308      	movs	r3, #8
    42a2:	18fb      	adds	r3, r7, r3
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    42a8:	2308      	movs	r3, #8
    42aa:	18fb      	adds	r3, r7, r3
    42ac:	785b      	ldrb	r3, [r3, #1]
    42ae:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    42b0:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    42b2:	2308      	movs	r3, #8
    42b4:	18fb      	adds	r3, r7, r3
    42b6:	789b      	ldrb	r3, [r3, #2]
    42b8:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    42ba:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    42bc:	2308      	movs	r3, #8
    42be:	18fb      	adds	r3, r7, r3
    42c0:	78db      	ldrb	r3, [r3, #3]
    42c2:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    42c4:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    42c6:	683b      	ldr	r3, [r7, #0]
    42c8:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    42ca:	230e      	movs	r3, #14
    42cc:	18fb      	adds	r3, r7, r3
    42ce:	781b      	ldrb	r3, [r3, #0]
    42d0:	b25b      	sxtb	r3, r3
    42d2:	2b01      	cmp	r3, #1
    42d4:	d02e      	beq.n	4334 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    42d6:	2001      	movs	r0, #1
    42d8:	4b28      	ldr	r3, [pc, #160]	; (437c <spi_read_reg+0x1fc>)
    42da:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    42dc:	2300      	movs	r3, #0
    42de:	9300      	str	r3, [sp, #0]
    42e0:	2300      	movs	r3, #0
    42e2:	2200      	movs	r2, #0
    42e4:	2100      	movs	r1, #0
    42e6:	20cf      	movs	r0, #207	; 0xcf
    42e8:	4c16      	ldr	r4, [pc, #88]	; (4344 <spi_read_reg+0x1c4>)
    42ea:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    42ec:	20cf      	movs	r0, #207	; 0xcf
    42ee:	4b1c      	ldr	r3, [pc, #112]	; (4360 <spi_read_reg+0x1e0>)
    42f0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    42f2:	4a23      	ldr	r2, [pc, #140]	; (4380 <spi_read_reg+0x200>)
    42f4:	4915      	ldr	r1, [pc, #84]	; (434c <spi_read_reg+0x1cc>)
    42f6:	4b16      	ldr	r3, [pc, #88]	; (4350 <spi_read_reg+0x1d0>)
    42f8:	0018      	movs	r0, r3
    42fa:	4b16      	ldr	r3, [pc, #88]	; (4354 <spi_read_reg+0x1d4>)
    42fc:	4798      	blx	r3
    42fe:	230f      	movs	r3, #15
    4300:	18fb      	adds	r3, r7, r3
    4302:	7819      	ldrb	r1, [r3, #0]
    4304:	687a      	ldr	r2, [r7, #4]
    4306:	4b1f      	ldr	r3, [pc, #124]	; (4384 <spi_read_reg+0x204>)
    4308:	0018      	movs	r0, r3
    430a:	4b12      	ldr	r3, [pc, #72]	; (4354 <spi_read_reg+0x1d4>)
    430c:	4798      	blx	r3
    430e:	200d      	movs	r0, #13
    4310:	4b12      	ldr	r3, [pc, #72]	; (435c <spi_read_reg+0x1dc>)
    4312:	4798      	blx	r3
		nm_bsp_sleep(1);
    4314:	2001      	movs	r0, #1
    4316:	4b19      	ldr	r3, [pc, #100]	; (437c <spi_read_reg+0x1fc>)
    4318:	4798      	blx	r3
		retry--;
    431a:	230f      	movs	r3, #15
    431c:	18fb      	adds	r3, r7, r3
    431e:	781a      	ldrb	r2, [r3, #0]
    4320:	230f      	movs	r3, #15
    4322:	18fb      	adds	r3, r7, r3
    4324:	3a01      	subs	r2, #1
    4326:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4328:	230f      	movs	r3, #15
    432a:	18fb      	adds	r3, r7, r3
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	2b00      	cmp	r3, #0
    4330:	d000      	beq.n	4334 <spi_read_reg+0x1b4>
    4332:	e73a      	b.n	41aa <spi_read_reg+0x2a>
	}
		
	return result;
    4334:	230e      	movs	r3, #14
    4336:	18fb      	adds	r3, r7, r3
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	b25b      	sxtb	r3, r3
}
    433c:	0018      	movs	r0, r3
    433e:	46bd      	mov	sp, r7
    4340:	b004      	add	sp, #16
    4342:	bdb0      	pop	{r4, r5, r7, pc}
    4344:	000034ad 	.word	0x000034ad
    4348:	00000417 	.word	0x00000417
    434c:	0000f498 	.word	0x0000f498
    4350:	0000eea0 	.word	0x0000eea0
    4354:	0000cf25 	.word	0x0000cf25
    4358:	0000f1fc 	.word	0x0000f1fc
    435c:	0000cf59 	.word	0x0000cf59
    4360:	000038f1 	.word	0x000038f1
    4364:	0000041d 	.word	0x0000041d
    4368:	0000f228 	.word	0x0000f228
    436c:	00003a29 	.word	0x00003a29
    4370:	00000424 	.word	0x00000424
    4374:	0000f25c 	.word	0x0000f25c
    4378:	0000d041 	.word	0x0000d041
    437c:	000003ed 	.word	0x000003ed
    4380:	0000043c 	.word	0x0000043c
    4384:	0000f27c 	.word	0x0000f27c

00004388 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4388:	b5b0      	push	{r4, r5, r7, lr}
    438a:	b088      	sub	sp, #32
    438c:	af02      	add	r7, sp, #8
    438e:	60f8      	str	r0, [r7, #12]
    4390:	60b9      	str	r1, [r7, #8]
    4392:	1dbb      	adds	r3, r7, #6
    4394:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    4396:	2314      	movs	r3, #20
    4398:	18fb      	adds	r3, r7, r3
    439a:	22c8      	movs	r2, #200	; 0xc8
    439c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    439e:	2316      	movs	r3, #22
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	220a      	movs	r2, #10
    43a4:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    43a6:	2315      	movs	r3, #21
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	2200      	movs	r2, #0
    43ac:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    43ae:	1dbb      	adds	r3, r7, #6
    43b0:	881b      	ldrh	r3, [r3, #0]
    43b2:	2b01      	cmp	r3, #1
    43b4:	d106      	bne.n	43c4 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    43b6:	1dbb      	adds	r3, r7, #6
    43b8:	2202      	movs	r2, #2
    43ba:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    43bc:	2315      	movs	r3, #21
    43be:	18fb      	adds	r3, r7, r3
    43c0:	2201      	movs	r2, #1
    43c2:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    43c4:	1dbb      	adds	r3, r7, #6
    43c6:	881a      	ldrh	r2, [r3, #0]
    43c8:	2317      	movs	r3, #23
    43ca:	18fc      	adds	r4, r7, r3
    43cc:	68f9      	ldr	r1, [r7, #12]
    43ce:	2314      	movs	r3, #20
    43d0:	18fb      	adds	r3, r7, r3
    43d2:	7818      	ldrb	r0, [r3, #0]
    43d4:	2300      	movs	r3, #0
    43d6:	9300      	str	r3, [sp, #0]
    43d8:	0013      	movs	r3, r2
    43da:	2200      	movs	r2, #0
    43dc:	4d56      	ldr	r5, [pc, #344]	; (4538 <nm_spi_read+0x1b0>)
    43de:	47a8      	blx	r5
    43e0:	0003      	movs	r3, r0
    43e2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    43e4:	2317      	movs	r3, #23
    43e6:	18fb      	adds	r3, r7, r3
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	b25b      	sxtb	r3, r3
    43ec:	2b01      	cmp	r3, #1
    43ee:	d00f      	beq.n	4410 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    43f0:	4a52      	ldr	r2, [pc, #328]	; (453c <nm_spi_read+0x1b4>)
    43f2:	4953      	ldr	r1, [pc, #332]	; (4540 <nm_spi_read+0x1b8>)
    43f4:	4b53      	ldr	r3, [pc, #332]	; (4544 <nm_spi_read+0x1bc>)
    43f6:	0018      	movs	r0, r3
    43f8:	4b53      	ldr	r3, [pc, #332]	; (4548 <nm_spi_read+0x1c0>)
    43fa:	4798      	blx	r3
    43fc:	68fa      	ldr	r2, [r7, #12]
    43fe:	4b53      	ldr	r3, [pc, #332]	; (454c <nm_spi_read+0x1c4>)
    4400:	0011      	movs	r1, r2
    4402:	0018      	movs	r0, r3
    4404:	4b50      	ldr	r3, [pc, #320]	; (4548 <nm_spi_read+0x1c0>)
    4406:	4798      	blx	r3
    4408:	200d      	movs	r0, #13
    440a:	4b51      	ldr	r3, [pc, #324]	; (4550 <nm_spi_read+0x1c8>)
    440c:	4798      	blx	r3
		goto _FAIL_;
    440e:	e055      	b.n	44bc <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4410:	2317      	movs	r3, #23
    4412:	18fc      	adds	r4, r7, r3
    4414:	2314      	movs	r3, #20
    4416:	18fb      	adds	r3, r7, r3
    4418:	781b      	ldrb	r3, [r3, #0]
    441a:	0018      	movs	r0, r3
    441c:	4b4d      	ldr	r3, [pc, #308]	; (4554 <nm_spi_read+0x1cc>)
    441e:	4798      	blx	r3
    4420:	0003      	movs	r3, r0
    4422:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4424:	2317      	movs	r3, #23
    4426:	18fb      	adds	r3, r7, r3
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	b25b      	sxtb	r3, r3
    442c:	2b01      	cmp	r3, #1
    442e:	d00f      	beq.n	4450 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4430:	4a49      	ldr	r2, [pc, #292]	; (4558 <nm_spi_read+0x1d0>)
    4432:	4943      	ldr	r1, [pc, #268]	; (4540 <nm_spi_read+0x1b8>)
    4434:	4b43      	ldr	r3, [pc, #268]	; (4544 <nm_spi_read+0x1bc>)
    4436:	0018      	movs	r0, r3
    4438:	4b43      	ldr	r3, [pc, #268]	; (4548 <nm_spi_read+0x1c0>)
    443a:	4798      	blx	r3
    443c:	68fa      	ldr	r2, [r7, #12]
    443e:	4b47      	ldr	r3, [pc, #284]	; (455c <nm_spi_read+0x1d4>)
    4440:	0011      	movs	r1, r2
    4442:	0018      	movs	r0, r3
    4444:	4b40      	ldr	r3, [pc, #256]	; (4548 <nm_spi_read+0x1c0>)
    4446:	4798      	blx	r3
    4448:	200d      	movs	r0, #13
    444a:	4b41      	ldr	r3, [pc, #260]	; (4550 <nm_spi_read+0x1c8>)
    444c:	4798      	blx	r3
		goto _FAIL_;
    444e:	e035      	b.n	44bc <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4450:	2315      	movs	r3, #21
    4452:	18fb      	adds	r3, r7, r3
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	2b00      	cmp	r3, #0
    4458:	d011      	beq.n	447e <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    445a:	2317      	movs	r3, #23
    445c:	18fc      	adds	r4, r7, r3
    445e:	1dbb      	adds	r3, r7, #6
    4460:	8819      	ldrh	r1, [r3, #0]
    4462:	2310      	movs	r3, #16
    4464:	18fb      	adds	r3, r7, r3
    4466:	2200      	movs	r2, #0
    4468:	0018      	movs	r0, r3
    446a:	4b3d      	ldr	r3, [pc, #244]	; (4560 <nm_spi_read+0x1d8>)
    446c:	4798      	blx	r3
    446e:	0003      	movs	r3, r0
    4470:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    4472:	2310      	movs	r3, #16
    4474:	18fb      	adds	r3, r7, r3
    4476:	781a      	ldrb	r2, [r3, #0]
    4478:	68bb      	ldr	r3, [r7, #8]
    447a:	701a      	strb	r2, [r3, #0]
    447c:	e00a      	b.n	4494 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    447e:	2317      	movs	r3, #23
    4480:	18fc      	adds	r4, r7, r3
    4482:	1dbb      	adds	r3, r7, #6
    4484:	8819      	ldrh	r1, [r3, #0]
    4486:	68bb      	ldr	r3, [r7, #8]
    4488:	2200      	movs	r2, #0
    448a:	0018      	movs	r0, r3
    448c:	4b34      	ldr	r3, [pc, #208]	; (4560 <nm_spi_read+0x1d8>)
    448e:	4798      	blx	r3
    4490:	0003      	movs	r3, r0
    4492:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    4494:	2317      	movs	r3, #23
    4496:	18fb      	adds	r3, r7, r3
    4498:	781b      	ldrb	r3, [r3, #0]
    449a:	b25b      	sxtb	r3, r3
    449c:	2b01      	cmp	r3, #1
    449e:	d00d      	beq.n	44bc <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    44a0:	4a30      	ldr	r2, [pc, #192]	; (4564 <nm_spi_read+0x1dc>)
    44a2:	4927      	ldr	r1, [pc, #156]	; (4540 <nm_spi_read+0x1b8>)
    44a4:	4b27      	ldr	r3, [pc, #156]	; (4544 <nm_spi_read+0x1bc>)
    44a6:	0018      	movs	r0, r3
    44a8:	4b27      	ldr	r3, [pc, #156]	; (4548 <nm_spi_read+0x1c0>)
    44aa:	4798      	blx	r3
    44ac:	4b2e      	ldr	r3, [pc, #184]	; (4568 <nm_spi_read+0x1e0>)
    44ae:	0018      	movs	r0, r3
    44b0:	4b2e      	ldr	r3, [pc, #184]	; (456c <nm_spi_read+0x1e4>)
    44b2:	4798      	blx	r3
    44b4:	200d      	movs	r0, #13
    44b6:	4b26      	ldr	r3, [pc, #152]	; (4550 <nm_spi_read+0x1c8>)
    44b8:	4798      	blx	r3
		goto _FAIL_;
    44ba:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    44bc:	2317      	movs	r3, #23
    44be:	18fb      	adds	r3, r7, r3
    44c0:	781b      	ldrb	r3, [r3, #0]
    44c2:	b25b      	sxtb	r3, r3
    44c4:	2b01      	cmp	r3, #1
    44c6:	d02f      	beq.n	4528 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    44c8:	2001      	movs	r0, #1
    44ca:	4b29      	ldr	r3, [pc, #164]	; (4570 <nm_spi_read+0x1e8>)
    44cc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    44ce:	2300      	movs	r3, #0
    44d0:	9300      	str	r3, [sp, #0]
    44d2:	2300      	movs	r3, #0
    44d4:	2200      	movs	r2, #0
    44d6:	2100      	movs	r1, #0
    44d8:	20cf      	movs	r0, #207	; 0xcf
    44da:	4c17      	ldr	r4, [pc, #92]	; (4538 <nm_spi_read+0x1b0>)
    44dc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    44de:	20cf      	movs	r0, #207	; 0xcf
    44e0:	4b1c      	ldr	r3, [pc, #112]	; (4554 <nm_spi_read+0x1cc>)
    44e2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    44e4:	4a23      	ldr	r2, [pc, #140]	; (4574 <nm_spi_read+0x1ec>)
    44e6:	4916      	ldr	r1, [pc, #88]	; (4540 <nm_spi_read+0x1b8>)
    44e8:	4b16      	ldr	r3, [pc, #88]	; (4544 <nm_spi_read+0x1bc>)
    44ea:	0018      	movs	r0, r3
    44ec:	4b16      	ldr	r3, [pc, #88]	; (4548 <nm_spi_read+0x1c0>)
    44ee:	4798      	blx	r3
    44f0:	2316      	movs	r3, #22
    44f2:	18fb      	adds	r3, r7, r3
    44f4:	7819      	ldrb	r1, [r3, #0]
    44f6:	1dbb      	adds	r3, r7, #6
    44f8:	881b      	ldrh	r3, [r3, #0]
    44fa:	68fa      	ldr	r2, [r7, #12]
    44fc:	481e      	ldr	r0, [pc, #120]	; (4578 <nm_spi_read+0x1f0>)
    44fe:	4c12      	ldr	r4, [pc, #72]	; (4548 <nm_spi_read+0x1c0>)
    4500:	47a0      	blx	r4
    4502:	200d      	movs	r0, #13
    4504:	4b12      	ldr	r3, [pc, #72]	; (4550 <nm_spi_read+0x1c8>)
    4506:	4798      	blx	r3
		nm_bsp_sleep(1);
    4508:	2001      	movs	r0, #1
    450a:	4b19      	ldr	r3, [pc, #100]	; (4570 <nm_spi_read+0x1e8>)
    450c:	4798      	blx	r3
		retry--;
    450e:	2316      	movs	r3, #22
    4510:	18fb      	adds	r3, r7, r3
    4512:	781a      	ldrb	r2, [r3, #0]
    4514:	2316      	movs	r3, #22
    4516:	18fb      	adds	r3, r7, r3
    4518:	3a01      	subs	r2, #1
    451a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    451c:	2316      	movs	r3, #22
    451e:	18fb      	adds	r3, r7, r3
    4520:	781b      	ldrb	r3, [r3, #0]
    4522:	2b00      	cmp	r3, #0
    4524:	d000      	beq.n	4528 <nm_spi_read+0x1a0>
    4526:	e742      	b.n	43ae <nm_spi_read+0x26>
	}

	return result;
    4528:	2317      	movs	r3, #23
    452a:	18fb      	adds	r3, r7, r3
    452c:	781b      	ldrb	r3, [r3, #0]
    452e:	b25b      	sxtb	r3, r3
}
    4530:	0018      	movs	r0, r3
    4532:	46bd      	mov	sp, r7
    4534:	b006      	add	sp, #24
    4536:	bdb0      	pop	{r4, r5, r7, pc}
    4538:	000034ad 	.word	0x000034ad
    453c:	0000045d 	.word	0x0000045d
    4540:	0000f4a8 	.word	0x0000f4a8
    4544:	0000eea0 	.word	0x0000eea0
    4548:	0000cf25 	.word	0x0000cf25
    454c:	0000f294 	.word	0x0000f294
    4550:	0000cf59 	.word	0x0000cf59
    4554:	000038f1 	.word	0x000038f1
    4558:	00000463 	.word	0x00000463
    455c:	0000f2c4 	.word	0x0000f2c4
    4560:	00003a29 	.word	0x00003a29
    4564:	00000473 	.word	0x00000473
    4568:	0000f2fc 	.word	0x0000f2fc
    456c:	0000d041 	.word	0x0000d041
    4570:	000003ed 	.word	0x000003ed
    4574:	00000484 	.word	0x00000484
    4578:	0000f1e0 	.word	0x0000f1e0

0000457c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    457c:	b580      	push	{r7, lr}
    457e:	b082      	sub	sp, #8
    4580:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    4582:	4b0c      	ldr	r3, [pc, #48]	; (45b4 <spi_init_pkt_sz+0x38>)
    4584:	0018      	movs	r0, r3
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <spi_init_pkt_sz+0x3c>)
    4588:	4798      	blx	r3
    458a:	0003      	movs	r3, r0
    458c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	2270      	movs	r2, #112	; 0x70
    4592:	4393      	bics	r3, r2
    4594:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	2250      	movs	r2, #80	; 0x50
    459a:	4313      	orrs	r3, r2
    459c:	607b      	str	r3, [r7, #4]
    459e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	4a04      	ldr	r2, [pc, #16]	; (45b4 <spi_init_pkt_sz+0x38>)
    45a4:	0019      	movs	r1, r3
    45a6:	0010      	movs	r0, r2
    45a8:	4b04      	ldr	r3, [pc, #16]	; (45bc <spi_init_pkt_sz+0x40>)
    45aa:	4798      	blx	r3
}
    45ac:	46c0      	nop			; (mov r8, r8)
    45ae:	46bd      	mov	sp, r7
    45b0:	b002      	add	sp, #8
    45b2:	bd80      	pop	{r7, pc}
    45b4:	0000e824 	.word	0x0000e824
    45b8:	00004755 	.word	0x00004755
    45bc:	000047c9 	.word	0x000047c9

000045c0 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    45c0:	b590      	push	{r4, r7, lr}
    45c2:	b083      	sub	sp, #12
    45c4:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    45c6:	2300      	movs	r3, #0
    45c8:	9300      	str	r3, [sp, #0]
    45ca:	2300      	movs	r3, #0
    45cc:	2200      	movs	r2, #0
    45ce:	2100      	movs	r1, #0
    45d0:	20cf      	movs	r0, #207	; 0xcf
    45d2:	4c05      	ldr	r4, [pc, #20]	; (45e8 <nm_spi_reset+0x28>)
    45d4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    45d6:	20cf      	movs	r0, #207	; 0xcf
    45d8:	4b04      	ldr	r3, [pc, #16]	; (45ec <nm_spi_reset+0x2c>)
    45da:	4798      	blx	r3
	return M2M_SUCCESS;
    45dc:	2300      	movs	r3, #0
}
    45de:	0018      	movs	r0, r3
    45e0:	46bd      	mov	sp, r7
    45e2:	b001      	add	sp, #4
    45e4:	bd90      	pop	{r4, r7, pc}
    45e6:	46c0      	nop			; (mov r8, r8)
    45e8:	000034ad 	.word	0x000034ad
    45ec:	000038f1 	.word	0x000038f1

000045f0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    45f0:	b580      	push	{r7, lr}
    45f2:	b082      	sub	sp, #8
    45f4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    45f6:	2300      	movs	r3, #0
    45f8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    45fa:	4b3e      	ldr	r3, [pc, #248]	; (46f4 <nm_spi_init+0x104>)
    45fc:	2200      	movs	r2, #0
    45fe:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4600:	003b      	movs	r3, r7
    4602:	4a3d      	ldr	r2, [pc, #244]	; (46f8 <nm_spi_init+0x108>)
    4604:	0019      	movs	r1, r3
    4606:	0010      	movs	r0, r2
    4608:	4b3c      	ldr	r3, [pc, #240]	; (46fc <nm_spi_init+0x10c>)
    460a:	4798      	blx	r3
    460c:	1e03      	subs	r3, r0, #0
    460e:	d126      	bne.n	465e <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4610:	4b38      	ldr	r3, [pc, #224]	; (46f4 <nm_spi_init+0x104>)
    4612:	2201      	movs	r2, #1
    4614:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    4616:	4a3a      	ldr	r2, [pc, #232]	; (4700 <nm_spi_init+0x110>)
    4618:	493a      	ldr	r1, [pc, #232]	; (4704 <nm_spi_init+0x114>)
    461a:	4b3b      	ldr	r3, [pc, #236]	; (4708 <nm_spi_init+0x118>)
    461c:	0018      	movs	r0, r3
    461e:	4b3b      	ldr	r3, [pc, #236]	; (470c <nm_spi_init+0x11c>)
    4620:	4798      	blx	r3
    4622:	4b3b      	ldr	r3, [pc, #236]	; (4710 <nm_spi_init+0x120>)
    4624:	0018      	movs	r0, r3
    4626:	4b3b      	ldr	r3, [pc, #236]	; (4714 <nm_spi_init+0x124>)
    4628:	4798      	blx	r3
    462a:	200d      	movs	r0, #13
    462c:	4b3a      	ldr	r3, [pc, #232]	; (4718 <nm_spi_init+0x128>)
    462e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4630:	003b      	movs	r3, r7
    4632:	4a31      	ldr	r2, [pc, #196]	; (46f8 <nm_spi_init+0x108>)
    4634:	0019      	movs	r1, r3
    4636:	0010      	movs	r0, r2
    4638:	4b30      	ldr	r3, [pc, #192]	; (46fc <nm_spi_init+0x10c>)
    463a:	4798      	blx	r3
    463c:	1e03      	subs	r3, r0, #0
    463e:	d10e      	bne.n	465e <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4640:	4a36      	ldr	r2, [pc, #216]	; (471c <nm_spi_init+0x12c>)
    4642:	4930      	ldr	r1, [pc, #192]	; (4704 <nm_spi_init+0x114>)
    4644:	4b30      	ldr	r3, [pc, #192]	; (4708 <nm_spi_init+0x118>)
    4646:	0018      	movs	r0, r3
    4648:	4b30      	ldr	r3, [pc, #192]	; (470c <nm_spi_init+0x11c>)
    464a:	4798      	blx	r3
    464c:	4b34      	ldr	r3, [pc, #208]	; (4720 <nm_spi_init+0x130>)
    464e:	0018      	movs	r0, r3
    4650:	4b30      	ldr	r3, [pc, #192]	; (4714 <nm_spi_init+0x124>)
    4652:	4798      	blx	r3
    4654:	200d      	movs	r0, #13
    4656:	4b30      	ldr	r3, [pc, #192]	; (4718 <nm_spi_init+0x128>)
    4658:	4798      	blx	r3
			return 0;
    465a:	2300      	movs	r3, #0
    465c:	e045      	b.n	46ea <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    465e:	4b25      	ldr	r3, [pc, #148]	; (46f4 <nm_spi_init+0x104>)
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	2b00      	cmp	r3, #0
    4664:	d125      	bne.n	46b2 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    4666:	683b      	ldr	r3, [r7, #0]
    4668:	220c      	movs	r2, #12
    466a:	4393      	bics	r3, r2
    466c:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    466e:	683b      	ldr	r3, [r7, #0]
    4670:	2270      	movs	r2, #112	; 0x70
    4672:	4393      	bics	r3, r2
    4674:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4676:	683b      	ldr	r3, [r7, #0]
    4678:	2250      	movs	r2, #80	; 0x50
    467a:	4313      	orrs	r3, r2
    467c:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    467e:	683b      	ldr	r3, [r7, #0]
    4680:	4a1d      	ldr	r2, [pc, #116]	; (46f8 <nm_spi_init+0x108>)
    4682:	0019      	movs	r1, r3
    4684:	0010      	movs	r0, r2
    4686:	4b27      	ldr	r3, [pc, #156]	; (4724 <nm_spi_init+0x134>)
    4688:	4798      	blx	r3
    468a:	1e03      	subs	r3, r0, #0
    468c:	d10e      	bne.n	46ac <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    468e:	4a26      	ldr	r2, [pc, #152]	; (4728 <nm_spi_init+0x138>)
    4690:	491c      	ldr	r1, [pc, #112]	; (4704 <nm_spi_init+0x114>)
    4692:	4b1d      	ldr	r3, [pc, #116]	; (4708 <nm_spi_init+0x118>)
    4694:	0018      	movs	r0, r3
    4696:	4b1d      	ldr	r3, [pc, #116]	; (470c <nm_spi_init+0x11c>)
    4698:	4798      	blx	r3
    469a:	4b24      	ldr	r3, [pc, #144]	; (472c <nm_spi_init+0x13c>)
    469c:	0018      	movs	r0, r3
    469e:	4b1d      	ldr	r3, [pc, #116]	; (4714 <nm_spi_init+0x124>)
    46a0:	4798      	blx	r3
    46a2:	200d      	movs	r0, #13
    46a4:	4b1c      	ldr	r3, [pc, #112]	; (4718 <nm_spi_init+0x128>)
    46a6:	4798      	blx	r3
			return 0;
    46a8:	2300      	movs	r3, #0
    46aa:	e01e      	b.n	46ea <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    46ac:	4b11      	ldr	r3, [pc, #68]	; (46f4 <nm_spi_init+0x104>)
    46ae:	2201      	movs	r2, #1
    46b0:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    46b2:	1d3a      	adds	r2, r7, #4
    46b4:	2380      	movs	r3, #128	; 0x80
    46b6:	015b      	lsls	r3, r3, #5
    46b8:	0011      	movs	r1, r2
    46ba:	0018      	movs	r0, r3
    46bc:	4b0f      	ldr	r3, [pc, #60]	; (46fc <nm_spi_init+0x10c>)
    46be:	4798      	blx	r3
    46c0:	1e03      	subs	r3, r0, #0
    46c2:	d10f      	bne.n	46e4 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    46c4:	4a1a      	ldr	r2, [pc, #104]	; (4730 <nm_spi_init+0x140>)
    46c6:	490f      	ldr	r1, [pc, #60]	; (4704 <nm_spi_init+0x114>)
    46c8:	4b0f      	ldr	r3, [pc, #60]	; (4708 <nm_spi_init+0x118>)
    46ca:	0018      	movs	r0, r3
    46cc:	4b0f      	ldr	r3, [pc, #60]	; (470c <nm_spi_init+0x11c>)
    46ce:	4798      	blx	r3
    46d0:	4b18      	ldr	r3, [pc, #96]	; (4734 <nm_spi_init+0x144>)
    46d2:	0018      	movs	r0, r3
    46d4:	4b0f      	ldr	r3, [pc, #60]	; (4714 <nm_spi_init+0x124>)
    46d6:	4798      	blx	r3
    46d8:	200d      	movs	r0, #13
    46da:	4b0f      	ldr	r3, [pc, #60]	; (4718 <nm_spi_init+0x128>)
    46dc:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    46de:	2306      	movs	r3, #6
    46e0:	425b      	negs	r3, r3
    46e2:	e002      	b.n	46ea <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    46e4:	4b14      	ldr	r3, [pc, #80]	; (4738 <nm_spi_init+0x148>)
    46e6:	4798      	blx	r3


	return M2M_SUCCESS;
    46e8:	2300      	movs	r3, #0
}
    46ea:	0018      	movs	r0, r3
    46ec:	46bd      	mov	sp, r7
    46ee:	b002      	add	sp, #8
    46f0:	bd80      	pop	{r7, pc}
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	20000210 	.word	0x20000210
    46f8:	0000e824 	.word	0x0000e824
    46fc:	00004181 	.word	0x00004181
    4700:	000004c7 	.word	0x000004c7
    4704:	0000f4b4 	.word	0x0000f4b4
    4708:	0000eea0 	.word	0x0000eea0
    470c:	0000cf25 	.word	0x0000cf25
    4710:	0000f324 	.word	0x0000f324
    4714:	0000d041 	.word	0x0000d041
    4718:	0000cf59 	.word	0x0000cf59
    471c:	000004ca 	.word	0x000004ca
    4720:	0000f374 	.word	0x0000f374
    4724:	00003e01 	.word	0x00003e01
    4728:	000004d4 	.word	0x000004d4
    472c:	0000f3a0 	.word	0x0000f3a0
    4730:	000004de 	.word	0x000004de
    4734:	0000f3d4 	.word	0x0000f3d4
    4738:	0000457d 	.word	0x0000457d

0000473c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    473c:	b580      	push	{r7, lr}
    473e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4740:	4b03      	ldr	r3, [pc, #12]	; (4750 <nm_spi_deinit+0x14>)
    4742:	2200      	movs	r2, #0
    4744:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4746:	2300      	movs	r3, #0
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	bd80      	pop	{r7, pc}
    474e:	46c0      	nop			; (mov r8, r8)
    4750:	20000210 	.word	0x20000210

00004754 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4754:	b580      	push	{r7, lr}
    4756:	b084      	sub	sp, #16
    4758:	af00      	add	r7, sp, #0
    475a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    475c:	230c      	movs	r3, #12
    475e:	18fa      	adds	r2, r7, r3
    4760:	687b      	ldr	r3, [r7, #4]
    4762:	0011      	movs	r1, r2
    4764:	0018      	movs	r0, r3
    4766:	4b03      	ldr	r3, [pc, #12]	; (4774 <nm_spi_read_reg+0x20>)
    4768:	4798      	blx	r3

	return u32Val;
    476a:	68fb      	ldr	r3, [r7, #12]
}
    476c:	0018      	movs	r0, r3
    476e:	46bd      	mov	sp, r7
    4770:	b004      	add	sp, #16
    4772:	bd80      	pop	{r7, pc}
    4774:	00004181 	.word	0x00004181

00004778 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4778:	b590      	push	{r4, r7, lr}
    477a:	b085      	sub	sp, #20
    477c:	af00      	add	r7, sp, #0
    477e:	6078      	str	r0, [r7, #4]
    4780:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4782:	230f      	movs	r3, #15
    4784:	18fc      	adds	r4, r7, r3
    4786:	683a      	ldr	r2, [r7, #0]
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	0011      	movs	r1, r2
    478c:	0018      	movs	r0, r3
    478e:	4b0d      	ldr	r3, [pc, #52]	; (47c4 <nm_spi_read_reg_with_ret+0x4c>)
    4790:	4798      	blx	r3
    4792:	0003      	movs	r3, r0
    4794:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4796:	230f      	movs	r3, #15
    4798:	18fb      	adds	r3, r7, r3
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	b25b      	sxtb	r3, r3
    479e:	2b01      	cmp	r3, #1
    47a0:	d104      	bne.n	47ac <nm_spi_read_reg_with_ret+0x34>
    47a2:	230f      	movs	r3, #15
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	2200      	movs	r2, #0
    47a8:	701a      	strb	r2, [r3, #0]
    47aa:	e003      	b.n	47b4 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47ac:	230f      	movs	r3, #15
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	22fa      	movs	r2, #250	; 0xfa
    47b2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47b4:	230f      	movs	r3, #15
    47b6:	18fb      	adds	r3, r7, r3
    47b8:	781b      	ldrb	r3, [r3, #0]
    47ba:	b25b      	sxtb	r3, r3
}
    47bc:	0018      	movs	r0, r3
    47be:	46bd      	mov	sp, r7
    47c0:	b005      	add	sp, #20
    47c2:	bd90      	pop	{r4, r7, pc}
    47c4:	00004181 	.word	0x00004181

000047c8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    47c8:	b590      	push	{r4, r7, lr}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    47d2:	230f      	movs	r3, #15
    47d4:	18fc      	adds	r4, r7, r3
    47d6:	683a      	ldr	r2, [r7, #0]
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	0011      	movs	r1, r2
    47dc:	0018      	movs	r0, r3
    47de:	4b0d      	ldr	r3, [pc, #52]	; (4814 <nm_spi_write_reg+0x4c>)
    47e0:	4798      	blx	r3
    47e2:	0003      	movs	r3, r0
    47e4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47e6:	230f      	movs	r3, #15
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	b25b      	sxtb	r3, r3
    47ee:	2b01      	cmp	r3, #1
    47f0:	d104      	bne.n	47fc <nm_spi_write_reg+0x34>
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	2200      	movs	r2, #0
    47f8:	701a      	strb	r2, [r3, #0]
    47fa:	e003      	b.n	4804 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47fc:	230f      	movs	r3, #15
    47fe:	18fb      	adds	r3, r7, r3
    4800:	22fa      	movs	r2, #250	; 0xfa
    4802:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4804:	230f      	movs	r3, #15
    4806:	18fb      	adds	r3, r7, r3
    4808:	781b      	ldrb	r3, [r3, #0]
    480a:	b25b      	sxtb	r3, r3
}
    480c:	0018      	movs	r0, r3
    480e:	46bd      	mov	sp, r7
    4810:	b005      	add	sp, #20
    4812:	bd90      	pop	{r4, r7, pc}
    4814:	00003e01 	.word	0x00003e01

00004818 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4818:	b590      	push	{r4, r7, lr}
    481a:	b087      	sub	sp, #28
    481c:	af00      	add	r7, sp, #0
    481e:	60f8      	str	r0, [r7, #12]
    4820:	60b9      	str	r1, [r7, #8]
    4822:	1dbb      	adds	r3, r7, #6
    4824:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4826:	2317      	movs	r3, #23
    4828:	18fc      	adds	r4, r7, r3
    482a:	1dbb      	adds	r3, r7, #6
    482c:	881a      	ldrh	r2, [r3, #0]
    482e:	68b9      	ldr	r1, [r7, #8]
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	0018      	movs	r0, r3
    4834:	4b0d      	ldr	r3, [pc, #52]	; (486c <nm_spi_read_block+0x54>)
    4836:	4798      	blx	r3
    4838:	0003      	movs	r3, r0
    483a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    483c:	2317      	movs	r3, #23
    483e:	18fb      	adds	r3, r7, r3
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	b25b      	sxtb	r3, r3
    4844:	2b01      	cmp	r3, #1
    4846:	d104      	bne.n	4852 <nm_spi_read_block+0x3a>
    4848:	2317      	movs	r3, #23
    484a:	18fb      	adds	r3, r7, r3
    484c:	2200      	movs	r2, #0
    484e:	701a      	strb	r2, [r3, #0]
    4850:	e003      	b.n	485a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4852:	2317      	movs	r3, #23
    4854:	18fb      	adds	r3, r7, r3
    4856:	22fa      	movs	r2, #250	; 0xfa
    4858:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    485a:	2317      	movs	r3, #23
    485c:	18fb      	adds	r3, r7, r3
    485e:	781b      	ldrb	r3, [r3, #0]
    4860:	b25b      	sxtb	r3, r3
}
    4862:	0018      	movs	r0, r3
    4864:	46bd      	mov	sp, r7
    4866:	b007      	add	sp, #28
    4868:	bd90      	pop	{r4, r7, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	00004389 	.word	0x00004389

00004870 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4870:	b590      	push	{r4, r7, lr}
    4872:	b087      	sub	sp, #28
    4874:	af00      	add	r7, sp, #0
    4876:	60f8      	str	r0, [r7, #12]
    4878:	60b9      	str	r1, [r7, #8]
    487a:	1dbb      	adds	r3, r7, #6
    487c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    487e:	2317      	movs	r3, #23
    4880:	18fc      	adds	r4, r7, r3
    4882:	1dbb      	adds	r3, r7, #6
    4884:	881a      	ldrh	r2, [r3, #0]
    4886:	68b9      	ldr	r1, [r7, #8]
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	0018      	movs	r0, r3
    488c:	4b0d      	ldr	r3, [pc, #52]	; (48c4 <nm_spi_write_block+0x54>)
    488e:	4798      	blx	r3
    4890:	0003      	movs	r3, r0
    4892:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4894:	2317      	movs	r3, #23
    4896:	18fb      	adds	r3, r7, r3
    4898:	781b      	ldrb	r3, [r3, #0]
    489a:	b25b      	sxtb	r3, r3
    489c:	2b01      	cmp	r3, #1
    489e:	d104      	bne.n	48aa <nm_spi_write_block+0x3a>
    48a0:	2317      	movs	r3, #23
    48a2:	18fb      	adds	r3, r7, r3
    48a4:	2200      	movs	r2, #0
    48a6:	701a      	strb	r2, [r3, #0]
    48a8:	e003      	b.n	48b2 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    48aa:	2317      	movs	r3, #23
    48ac:	18fb      	adds	r3, r7, r3
    48ae:	22fa      	movs	r2, #250	; 0xfa
    48b0:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    48b2:	2317      	movs	r3, #23
    48b4:	18fb      	adds	r3, r7, r3
    48b6:	781b      	ldrb	r3, [r3, #0]
    48b8:	b25b      	sxtb	r3, r3
}
    48ba:	0018      	movs	r0, r3
    48bc:	46bd      	mov	sp, r7
    48be:	b007      	add	sp, #28
    48c0:	bd90      	pop	{r4, r7, pc}
    48c2:	46c0      	nop			; (mov r8, r8)
    48c4:	00003f8d 	.word	0x00003f8d

000048c8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    48c8:	b590      	push	{r4, r7, lr}
    48ca:	b089      	sub	sp, #36	; 0x24
    48cc:	af00      	add	r7, sp, #0
    48ce:	60b9      	str	r1, [r7, #8]
    48d0:	0011      	movs	r1, r2
    48d2:	607b      	str	r3, [r7, #4]
    48d4:	230f      	movs	r3, #15
    48d6:	18fb      	adds	r3, r7, r3
    48d8:	1c02      	adds	r2, r0, #0
    48da:	701a      	strb	r2, [r3, #0]
    48dc:	230e      	movs	r3, #14
    48de:	18fb      	adds	r3, r7, r3
    48e0:	1c0a      	adds	r2, r1, #0
    48e2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    48e4:	2330      	movs	r3, #48	; 0x30
    48e6:	18fb      	adds	r3, r7, r3
    48e8:	881b      	ldrh	r3, [r3, #0]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d100      	bne.n	48f0 <Socket_ReadSocketData+0x28>
    48ee:	e0d6      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
    48f0:	230f      	movs	r3, #15
    48f2:	18fb      	adds	r3, r7, r3
    48f4:	2200      	movs	r2, #0
    48f6:	569a      	ldrsb	r2, [r3, r2]
    48f8:	4b6b      	ldr	r3, [pc, #428]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    48fa:	0112      	lsls	r2, r2, #4
    48fc:	58d3      	ldr	r3, [r2, r3]
    48fe:	2b00      	cmp	r3, #0
    4900:	d100      	bne.n	4904 <Socket_ReadSocketData+0x3c>
    4902:	e0cc      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
    4904:	230f      	movs	r3, #15
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	b25b      	sxtb	r3, r3
    490c:	4a66      	ldr	r2, [pc, #408]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    490e:	011b      	lsls	r3, r3, #4
    4910:	18d3      	adds	r3, r2, r3
    4912:	3304      	adds	r3, #4
    4914:	881b      	ldrh	r3, [r3, #0]
    4916:	b29b      	uxth	r3, r3
    4918:	2b00      	cmp	r3, #0
    491a:	d100      	bne.n	491e <Socket_ReadSocketData+0x56>
    491c:	e0bf      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
    491e:	230f      	movs	r3, #15
    4920:	18fb      	adds	r3, r7, r3
    4922:	781b      	ldrb	r3, [r3, #0]
    4924:	b25b      	sxtb	r3, r3
    4926:	4a60      	ldr	r2, [pc, #384]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    4928:	011b      	lsls	r3, r3, #4
    492a:	18d3      	adds	r3, r2, r3
    492c:	330a      	adds	r3, #10
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	b2db      	uxtb	r3, r3
    4932:	2b01      	cmp	r3, #1
    4934:	d000      	beq.n	4938 <Socket_ReadSocketData+0x70>
    4936:	e0b2      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    493c:	68bb      	ldr	r3, [r7, #8]
    493e:	2230      	movs	r2, #48	; 0x30
    4940:	18ba      	adds	r2, r7, r2
    4942:	8812      	ldrh	r2, [r2, #0]
    4944:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    4946:	2319      	movs	r3, #25
    4948:	18fb      	adds	r3, r7, r3
    494a:	2201      	movs	r2, #1
    494c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    494e:	231a      	movs	r3, #26
    4950:	18fb      	adds	r3, r7, r3
    4952:	2230      	movs	r2, #48	; 0x30
    4954:	18ba      	adds	r2, r7, r2
    4956:	8812      	ldrh	r2, [r2, #0]
    4958:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    495a:	230f      	movs	r3, #15
    495c:	18fb      	adds	r3, r7, r3
    495e:	781b      	ldrb	r3, [r3, #0]
    4960:	b25b      	sxtb	r3, r3
    4962:	4a51      	ldr	r2, [pc, #324]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    4964:	011b      	lsls	r3, r3, #4
    4966:	18d3      	adds	r3, r2, r3
    4968:	3304      	adds	r3, #4
    496a:	881b      	ldrh	r3, [r3, #0]
    496c:	b29b      	uxth	r3, r3
    496e:	221a      	movs	r2, #26
    4970:	18ba      	adds	r2, r7, r2
    4972:	8812      	ldrh	r2, [r2, #0]
    4974:	1ad3      	subs	r3, r2, r3
    4976:	b29a      	uxth	r2, r3
    4978:	2316      	movs	r3, #22
    497a:	18fb      	adds	r3, r7, r3
    497c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    497e:	2316      	movs	r3, #22
    4980:	18fb      	adds	r3, r7, r3
    4982:	2200      	movs	r2, #0
    4984:	5e9b      	ldrsh	r3, [r3, r2]
    4986:	2b00      	cmp	r3, #0
    4988:	dd0f      	ble.n	49aa <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    498a:	2319      	movs	r3, #25
    498c:	18fb      	adds	r3, r7, r3
    498e:	2200      	movs	r2, #0
    4990:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    4992:	230f      	movs	r3, #15
    4994:	18fb      	adds	r3, r7, r3
    4996:	2200      	movs	r2, #0
    4998:	569a      	ldrsb	r2, [r3, r2]
    499a:	231a      	movs	r3, #26
    499c:	18fb      	adds	r3, r7, r3
    499e:	4942      	ldr	r1, [pc, #264]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    49a0:	0112      	lsls	r2, r2, #4
    49a2:	188a      	adds	r2, r1, r2
    49a4:	3204      	adds	r2, #4
    49a6:	8812      	ldrh	r2, [r2, #0]
    49a8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    49aa:	230f      	movs	r3, #15
    49ac:	18fb      	adds	r3, r7, r3
    49ae:	2200      	movs	r2, #0
    49b0:	569a      	ldrsb	r2, [r3, r2]
    49b2:	4b3d      	ldr	r3, [pc, #244]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    49b4:	0112      	lsls	r2, r2, #4
    49b6:	58d1      	ldr	r1, [r2, r3]
    49b8:	2319      	movs	r3, #25
    49ba:	18fb      	adds	r3, r7, r3
    49bc:	781c      	ldrb	r4, [r3, #0]
    49be:	231a      	movs	r3, #26
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	881a      	ldrh	r2, [r3, #0]
    49c4:	69f8      	ldr	r0, [r7, #28]
    49c6:	0023      	movs	r3, r4
    49c8:	4c38      	ldr	r4, [pc, #224]	; (4aac <Socket_ReadSocketData+0x1e4>)
    49ca:	47a0      	blx	r4
    49cc:	1e03      	subs	r3, r0, #0
    49ce:	d14f      	bne.n	4a70 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    49d0:	230f      	movs	r3, #15
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	2200      	movs	r2, #0
    49d6:	569a      	ldrsb	r2, [r3, r2]
    49d8:	4b33      	ldr	r3, [pc, #204]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    49da:	0112      	lsls	r2, r2, #4
    49dc:	58d2      	ldr	r2, [r2, r3]
    49de:	68bb      	ldr	r3, [r7, #8]
    49e0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    49e2:	231a      	movs	r3, #26
    49e4:	18fb      	adds	r3, r7, r3
    49e6:	2200      	movs	r2, #0
    49e8:	5e9a      	ldrsh	r2, [r3, r2]
    49ea:	68bb      	ldr	r3, [r7, #8]
    49ec:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    49ee:	68bb      	ldr	r3, [r7, #8]
    49f0:	88da      	ldrh	r2, [r3, #6]
    49f2:	231a      	movs	r3, #26
    49f4:	18fb      	adds	r3, r7, r3
    49f6:	881b      	ldrh	r3, [r3, #0]
    49f8:	1ad3      	subs	r3, r2, r3
    49fa:	b29a      	uxth	r2, r3
    49fc:	68bb      	ldr	r3, [r7, #8]
    49fe:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4a00:	4b2b      	ldr	r3, [pc, #172]	; (4ab0 <Socket_ReadSocketData+0x1e8>)
    4a02:	681b      	ldr	r3, [r3, #0]
    4a04:	2b00      	cmp	r3, #0
    4a06:	d00b      	beq.n	4a20 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4a08:	4b29      	ldr	r3, [pc, #164]	; (4ab0 <Socket_ReadSocketData+0x1e8>)
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	68bc      	ldr	r4, [r7, #8]
    4a0e:	220e      	movs	r2, #14
    4a10:	18ba      	adds	r2, r7, r2
    4a12:	7811      	ldrb	r1, [r2, #0]
    4a14:	220f      	movs	r2, #15
    4a16:	18ba      	adds	r2, r7, r2
    4a18:	2000      	movs	r0, #0
    4a1a:	5610      	ldrsb	r0, [r2, r0]
    4a1c:	0022      	movs	r2, r4
    4a1e:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4a20:	2330      	movs	r3, #48	; 0x30
    4a22:	18f9      	adds	r1, r7, r3
    4a24:	2330      	movs	r3, #48	; 0x30
    4a26:	18fa      	adds	r2, r7, r3
    4a28:	231a      	movs	r3, #26
    4a2a:	18fb      	adds	r3, r7, r3
    4a2c:	8812      	ldrh	r2, [r2, #0]
    4a2e:	881b      	ldrh	r3, [r3, #0]
    4a30:	1ad3      	subs	r3, r2, r3
    4a32:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4a34:	231a      	movs	r3, #26
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	881b      	ldrh	r3, [r3, #0]
    4a3a:	69fa      	ldr	r2, [r7, #28]
    4a3c:	18d3      	adds	r3, r2, r3
    4a3e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4a40:	230f      	movs	r3, #15
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	b25b      	sxtb	r3, r3
    4a48:	4a17      	ldr	r2, [pc, #92]	; (4aa8 <Socket_ReadSocketData+0x1e0>)
    4a4a:	011b      	lsls	r3, r3, #4
    4a4c:	18d3      	adds	r3, r2, r3
    4a4e:	330a      	adds	r3, #10
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	b2db      	uxtb	r3, r3
    4a54:	2b00      	cmp	r3, #0
    4a56:	d11b      	bne.n	4a90 <Socket_ReadSocketData+0x1c8>
    4a58:	2330      	movs	r3, #48	; 0x30
    4a5a:	18fb      	adds	r3, r7, r3
    4a5c:	881b      	ldrh	r3, [r3, #0]
    4a5e:	2b00      	cmp	r3, #0
    4a60:	d016      	beq.n	4a90 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4a62:	2301      	movs	r3, #1
    4a64:	2200      	movs	r2, #0
    4a66:	2100      	movs	r1, #0
    4a68:	2000      	movs	r0, #0
    4a6a:	4c10      	ldr	r4, [pc, #64]	; (4aac <Socket_ReadSocketData+0x1e4>)
    4a6c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    4a6e:	e016      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    4a70:	4b10      	ldr	r3, [pc, #64]	; (4ab4 <Socket_ReadSocketData+0x1ec>)
    4a72:	0018      	movs	r0, r3
    4a74:	4b10      	ldr	r3, [pc, #64]	; (4ab8 <Socket_ReadSocketData+0x1f0>)
    4a76:	4798      	blx	r3
    4a78:	2330      	movs	r3, #48	; 0x30
    4a7a:	18fb      	adds	r3, r7, r3
    4a7c:	881a      	ldrh	r2, [r3, #0]
    4a7e:	4b0f      	ldr	r3, [pc, #60]	; (4abc <Socket_ReadSocketData+0x1f4>)
    4a80:	0011      	movs	r1, r2
    4a82:	0018      	movs	r0, r3
    4a84:	4b0c      	ldr	r3, [pc, #48]	; (4ab8 <Socket_ReadSocketData+0x1f0>)
    4a86:	4798      	blx	r3
    4a88:	200d      	movs	r0, #13
    4a8a:	4b0d      	ldr	r3, [pc, #52]	; (4ac0 <Socket_ReadSocketData+0x1f8>)
    4a8c:	4798      	blx	r3
				break;
    4a8e:	e006      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    4a90:	2330      	movs	r3, #48	; 0x30
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d000      	beq.n	4a9c <Socket_ReadSocketData+0x1d4>
    4a9a:	e754      	b.n	4946 <Socket_ReadSocketData+0x7e>
	}
}
    4a9c:	e7ff      	b.n	4a9e <Socket_ReadSocketData+0x1d6>
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	46bd      	mov	sp, r7
    4aa2:	b009      	add	sp, #36	; 0x24
    4aa4:	bd90      	pop	{r4, r7, pc}
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	2000032c 	.word	0x2000032c
    4aac:	00001831 	.word	0x00001831
    4ab0:	200003dc 	.word	0x200003dc
    4ab4:	0000f4c0 	.word	0x0000f4c0
    4ab8:	0000cf25 	.word	0x0000cf25
    4abc:	0000f4cc 	.word	0x0000f4cc
    4ac0:	0000cf59 	.word	0x0000cf59

00004ac4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4ac4:	b590      	push	{r4, r7, lr}
    4ac6:	b0bb      	sub	sp, #236	; 0xec
    4ac8:	af02      	add	r7, sp, #8
    4aca:	603a      	str	r2, [r7, #0]
    4acc:	1dfb      	adds	r3, r7, #7
    4ace:	1c02      	adds	r2, r0, #0
    4ad0:	701a      	strb	r2, [r3, #0]
    4ad2:	1d3b      	adds	r3, r7, #4
    4ad4:	1c0a      	adds	r2, r1, #0
    4ad6:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4ad8:	1dfb      	adds	r3, r7, #7
    4ada:	781b      	ldrb	r3, [r3, #0]
    4adc:	2b41      	cmp	r3, #65	; 0x41
    4ade:	d003      	beq.n	4ae8 <m2m_ip_cb+0x24>
    4ae0:	1dfb      	adds	r3, r7, #7
    4ae2:	781b      	ldrb	r3, [r3, #0]
    4ae4:	2b54      	cmp	r3, #84	; 0x54
    4ae6:	d120      	bne.n	4b2a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4ae8:	23cc      	movs	r3, #204	; 0xcc
    4aea:	18f9      	adds	r1, r7, r3
    4aec:	6838      	ldr	r0, [r7, #0]
    4aee:	2300      	movs	r3, #0
    4af0:	2204      	movs	r2, #4
    4af2:	4c98      	ldr	r4, [pc, #608]	; (4d54 <m2m_ip_cb+0x290>)
    4af4:	47a0      	blx	r4
    4af6:	1e03      	subs	r3, r0, #0
    4af8:	d000      	beq.n	4afc <m2m_ip_cb+0x38>
    4afa:	e275      	b.n	4fe8 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4afc:	23cc      	movs	r3, #204	; 0xcc
    4afe:	18fb      	adds	r3, r7, r3
    4b00:	2201      	movs	r2, #1
    4b02:	569a      	ldrsb	r2, [r3, r2]
    4b04:	23c8      	movs	r3, #200	; 0xc8
    4b06:	18fb      	adds	r3, r7, r3
    4b08:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b0a:	4b93      	ldr	r3, [pc, #588]	; (4d58 <m2m_ip_cb+0x294>)
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d100      	bne.n	4b14 <m2m_ip_cb+0x50>
    4b12:	e269      	b.n	4fe8 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4b14:	4b90      	ldr	r3, [pc, #576]	; (4d58 <m2m_ip_cb+0x294>)
    4b16:	681b      	ldr	r3, [r3, #0]
    4b18:	22cc      	movs	r2, #204	; 0xcc
    4b1a:	18ba      	adds	r2, r7, r2
    4b1c:	2000      	movs	r0, #0
    4b1e:	5610      	ldrsb	r0, [r2, r0]
    4b20:	22c8      	movs	r2, #200	; 0xc8
    4b22:	18ba      	adds	r2, r7, r2
    4b24:	2101      	movs	r1, #1
    4b26:	4798      	blx	r3
	{
    4b28:	e25e      	b.n	4fe8 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4b2a:	1dfb      	adds	r3, r7, #7
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	2b42      	cmp	r3, #66	; 0x42
    4b30:	d120      	bne.n	4b74 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4b32:	23c4      	movs	r3, #196	; 0xc4
    4b34:	18f9      	adds	r1, r7, r3
    4b36:	6838      	ldr	r0, [r7, #0]
    4b38:	2300      	movs	r3, #0
    4b3a:	2204      	movs	r2, #4
    4b3c:	4c85      	ldr	r4, [pc, #532]	; (4d54 <m2m_ip_cb+0x290>)
    4b3e:	47a0      	blx	r4
    4b40:	1e03      	subs	r3, r0, #0
    4b42:	d000      	beq.n	4b46 <m2m_ip_cb+0x82>
    4b44:	e257      	b.n	4ff6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4b46:	23c4      	movs	r3, #196	; 0xc4
    4b48:	18fb      	adds	r3, r7, r3
    4b4a:	2201      	movs	r2, #1
    4b4c:	569a      	ldrsb	r2, [r3, r2]
    4b4e:	23c0      	movs	r3, #192	; 0xc0
    4b50:	18fb      	adds	r3, r7, r3
    4b52:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b54:	4b80      	ldr	r3, [pc, #512]	; (4d58 <m2m_ip_cb+0x294>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	2b00      	cmp	r3, #0
    4b5a:	d100      	bne.n	4b5e <m2m_ip_cb+0x9a>
    4b5c:	e24b      	b.n	4ff6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4b5e:	4b7e      	ldr	r3, [pc, #504]	; (4d58 <m2m_ip_cb+0x294>)
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	22c4      	movs	r2, #196	; 0xc4
    4b64:	18ba      	adds	r2, r7, r2
    4b66:	2000      	movs	r0, #0
    4b68:	5610      	ldrsb	r0, [r2, r0]
    4b6a:	22c0      	movs	r2, #192	; 0xc0
    4b6c:	18ba      	adds	r2, r7, r2
    4b6e:	2102      	movs	r1, #2
    4b70:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4b72:	e240      	b.n	4ff6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4b74:	1dfb      	adds	r3, r7, #7
    4b76:	781b      	ldrb	r3, [r3, #0]
    4b78:	2b43      	cmp	r3, #67	; 0x43
    4b7a:	d000      	beq.n	4b7e <m2m_ip_cb+0xba>
    4b7c:	e086      	b.n	4c8c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4b7e:	23b4      	movs	r3, #180	; 0xb4
    4b80:	18f9      	adds	r1, r7, r3
    4b82:	6838      	ldr	r0, [r7, #0]
    4b84:	2300      	movs	r3, #0
    4b86:	220c      	movs	r2, #12
    4b88:	4c72      	ldr	r4, [pc, #456]	; (4d54 <m2m_ip_cb+0x290>)
    4b8a:	47a0      	blx	r4
    4b8c:	1e03      	subs	r3, r0, #0
    4b8e:	d000      	beq.n	4b92 <m2m_ip_cb+0xce>
    4b90:	e231      	b.n	4ff6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4b92:	23b4      	movs	r3, #180	; 0xb4
    4b94:	18fb      	adds	r3, r7, r3
    4b96:	7a5b      	ldrb	r3, [r3, #9]
    4b98:	b25b      	sxtb	r3, r3
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	db4f      	blt.n	4c3e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4b9e:	23b4      	movs	r3, #180	; 0xb4
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	7a5b      	ldrb	r3, [r3, #9]
    4ba4:	b25b      	sxtb	r3, r3
    4ba6:	0018      	movs	r0, r3
    4ba8:	23b4      	movs	r3, #180	; 0xb4
    4baa:	18fb      	adds	r3, r7, r3
    4bac:	7a1b      	ldrb	r3, [r3, #8]
    4bae:	b25b      	sxtb	r3, r3
    4bb0:	4a6a      	ldr	r2, [pc, #424]	; (4d5c <m2m_ip_cb+0x298>)
    4bb2:	011b      	lsls	r3, r3, #4
    4bb4:	18d3      	adds	r3, r2, r3
    4bb6:	330b      	adds	r3, #11
    4bb8:	781b      	ldrb	r3, [r3, #0]
    4bba:	b2d9      	uxtb	r1, r3
    4bbc:	4a67      	ldr	r2, [pc, #412]	; (4d5c <m2m_ip_cb+0x298>)
    4bbe:	0103      	lsls	r3, r0, #4
    4bc0:	18d3      	adds	r3, r2, r3
    4bc2:	330b      	adds	r3, #11
    4bc4:	1c0a      	adds	r2, r1, #0
    4bc6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4bc8:	23b4      	movs	r3, #180	; 0xb4
    4bca:	18fb      	adds	r3, r7, r3
    4bcc:	7a5b      	ldrb	r3, [r3, #9]
    4bce:	b25b      	sxtb	r3, r3
    4bd0:	4a62      	ldr	r2, [pc, #392]	; (4d5c <m2m_ip_cb+0x298>)
    4bd2:	011b      	lsls	r3, r3, #4
    4bd4:	18d3      	adds	r3, r2, r3
    4bd6:	330a      	adds	r3, #10
    4bd8:	2201      	movs	r2, #1
    4bda:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4bdc:	23b4      	movs	r3, #180	; 0xb4
    4bde:	18fb      	adds	r3, r7, r3
    4be0:	7a5b      	ldrb	r3, [r3, #9]
    4be2:	b25b      	sxtb	r3, r3
    4be4:	0018      	movs	r0, r3
    4be6:	23b4      	movs	r3, #180	; 0xb4
    4be8:	18fb      	adds	r3, r7, r3
    4bea:	895b      	ldrh	r3, [r3, #10]
    4bec:	3b08      	subs	r3, #8
    4bee:	b299      	uxth	r1, r3
    4bf0:	4a5a      	ldr	r2, [pc, #360]	; (4d5c <m2m_ip_cb+0x298>)
    4bf2:	0103      	lsls	r3, r0, #4
    4bf4:	18d3      	adds	r3, r2, r3
    4bf6:	3308      	adds	r3, #8
    4bf8:	1c0a      	adds	r2, r1, #0
    4bfa:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4bfc:	4b58      	ldr	r3, [pc, #352]	; (4d60 <m2m_ip_cb+0x29c>)
    4bfe:	881b      	ldrh	r3, [r3, #0]
    4c00:	b29b      	uxth	r3, r3
    4c02:	3301      	adds	r3, #1
    4c04:	b29a      	uxth	r2, r3
    4c06:	4b56      	ldr	r3, [pc, #344]	; (4d60 <m2m_ip_cb+0x29c>)
    4c08:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4c0a:	4b55      	ldr	r3, [pc, #340]	; (4d60 <m2m_ip_cb+0x29c>)
    4c0c:	881b      	ldrh	r3, [r3, #0]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	2b00      	cmp	r3, #0
    4c12:	d106      	bne.n	4c22 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4c14:	4b52      	ldr	r3, [pc, #328]	; (4d60 <m2m_ip_cb+0x29c>)
    4c16:	881b      	ldrh	r3, [r3, #0]
    4c18:	b29b      	uxth	r3, r3
    4c1a:	3301      	adds	r3, #1
    4c1c:	b29a      	uxth	r2, r3
    4c1e:	4b50      	ldr	r3, [pc, #320]	; (4d60 <m2m_ip_cb+0x29c>)
    4c20:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4c22:	23b4      	movs	r3, #180	; 0xb4
    4c24:	18fb      	adds	r3, r7, r3
    4c26:	7a5b      	ldrb	r3, [r3, #9]
    4c28:	b25b      	sxtb	r3, r3
    4c2a:	0018      	movs	r0, r3
    4c2c:	4b4c      	ldr	r3, [pc, #304]	; (4d60 <m2m_ip_cb+0x29c>)
    4c2e:	881b      	ldrh	r3, [r3, #0]
    4c30:	b299      	uxth	r1, r3
    4c32:	4a4a      	ldr	r2, [pc, #296]	; (4d5c <m2m_ip_cb+0x298>)
    4c34:	0103      	lsls	r3, r0, #4
    4c36:	18d3      	adds	r3, r2, r3
    4c38:	3306      	adds	r3, #6
    4c3a:	1c0a      	adds	r2, r1, #0
    4c3c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4c3e:	23b4      	movs	r3, #180	; 0xb4
    4c40:	18fb      	adds	r3, r7, r3
    4c42:	2209      	movs	r2, #9
    4c44:	569a      	ldrsb	r2, [r3, r2]
    4c46:	23a0      	movs	r3, #160	; 0xa0
    4c48:	18fb      	adds	r3, r7, r3
    4c4a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4c4c:	23a0      	movs	r3, #160	; 0xa0
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	2202      	movs	r2, #2
    4c52:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4c54:	23b4      	movs	r3, #180	; 0xb4
    4c56:	18fb      	adds	r3, r7, r3
    4c58:	885a      	ldrh	r2, [r3, #2]
    4c5a:	23a0      	movs	r3, #160	; 0xa0
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4c60:	23b4      	movs	r3, #180	; 0xb4
    4c62:	18fb      	adds	r3, r7, r3
    4c64:	685a      	ldr	r2, [r3, #4]
    4c66:	23a0      	movs	r3, #160	; 0xa0
    4c68:	18fb      	adds	r3, r7, r3
    4c6a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4c6c:	4b3a      	ldr	r3, [pc, #232]	; (4d58 <m2m_ip_cb+0x294>)
    4c6e:	681b      	ldr	r3, [r3, #0]
    4c70:	2b00      	cmp	r3, #0
    4c72:	d100      	bne.n	4c76 <m2m_ip_cb+0x1b2>
    4c74:	e1bf      	b.n	4ff6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4c76:	4b38      	ldr	r3, [pc, #224]	; (4d58 <m2m_ip_cb+0x294>)
    4c78:	681b      	ldr	r3, [r3, #0]
    4c7a:	22b4      	movs	r2, #180	; 0xb4
    4c7c:	18ba      	adds	r2, r7, r2
    4c7e:	2008      	movs	r0, #8
    4c80:	5610      	ldrsb	r0, [r2, r0]
    4c82:	22a0      	movs	r2, #160	; 0xa0
    4c84:	18ba      	adds	r2, r7, r2
    4c86:	2104      	movs	r1, #4
    4c88:	4798      	blx	r3
}
    4c8a:	e1b4      	b.n	4ff6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4c8c:	1dfb      	adds	r3, r7, #7
    4c8e:	781b      	ldrb	r3, [r3, #0]
    4c90:	2b44      	cmp	r3, #68	; 0x44
    4c92:	d003      	beq.n	4c9c <m2m_ip_cb+0x1d8>
    4c94:	1dfb      	adds	r3, r7, #7
    4c96:	781b      	ldrb	r3, [r3, #0]
    4c98:	2b4b      	cmp	r3, #75	; 0x4b
    4c9a:	d13d      	bne.n	4d18 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4c9c:	239c      	movs	r3, #156	; 0x9c
    4c9e:	18f9      	adds	r1, r7, r3
    4ca0:	6838      	ldr	r0, [r7, #0]
    4ca2:	2300      	movs	r3, #0
    4ca4:	2204      	movs	r2, #4
    4ca6:	4c2b      	ldr	r4, [pc, #172]	; (4d54 <m2m_ip_cb+0x290>)
    4ca8:	47a0      	blx	r4
    4caa:	1e03      	subs	r3, r0, #0
    4cac:	d000      	beq.n	4cb0 <m2m_ip_cb+0x1ec>
    4cae:	e19d      	b.n	4fec <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    4cb0:	239c      	movs	r3, #156	; 0x9c
    4cb2:	18fb      	adds	r3, r7, r3
    4cb4:	2200      	movs	r2, #0
    4cb6:	569a      	ldrsb	r2, [r3, r2]
    4cb8:	2398      	movs	r3, #152	; 0x98
    4cba:	18fb      	adds	r3, r7, r3
    4cbc:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4cbe:	239c      	movs	r3, #156	; 0x9c
    4cc0:	18fb      	adds	r3, r7, r3
    4cc2:	2201      	movs	r2, #1
    4cc4:	569a      	ldrsb	r2, [r3, r2]
    4cc6:	2398      	movs	r3, #152	; 0x98
    4cc8:	18fb      	adds	r3, r7, r3
    4cca:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4ccc:	239c      	movs	r3, #156	; 0x9c
    4cce:	18fb      	adds	r3, r7, r3
    4cd0:	785b      	ldrb	r3, [r3, #1]
    4cd2:	b25b      	sxtb	r3, r3
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d10f      	bne.n	4cf8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4cd8:	239c      	movs	r3, #156	; 0x9c
    4cda:	18fb      	adds	r3, r7, r3
    4cdc:	781b      	ldrb	r3, [r3, #0]
    4cde:	b25b      	sxtb	r3, r3
    4ce0:	0018      	movs	r0, r3
    4ce2:	239c      	movs	r3, #156	; 0x9c
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	885b      	ldrh	r3, [r3, #2]
    4ce8:	3b08      	subs	r3, #8
    4cea:	b299      	uxth	r1, r3
    4cec:	4a1b      	ldr	r2, [pc, #108]	; (4d5c <m2m_ip_cb+0x298>)
    4cee:	0103      	lsls	r3, r0, #4
    4cf0:	18d3      	adds	r3, r2, r3
    4cf2:	3308      	adds	r3, #8
    4cf4:	1c0a      	adds	r2, r1, #0
    4cf6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    4cf8:	4b17      	ldr	r3, [pc, #92]	; (4d58 <m2m_ip_cb+0x294>)
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	2b00      	cmp	r3, #0
    4cfe:	d100      	bne.n	4d02 <m2m_ip_cb+0x23e>
    4d00:	e174      	b.n	4fec <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4d02:	4b15      	ldr	r3, [pc, #84]	; (4d58 <m2m_ip_cb+0x294>)
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	229c      	movs	r2, #156	; 0x9c
    4d08:	18ba      	adds	r2, r7, r2
    4d0a:	2000      	movs	r0, #0
    4d0c:	5610      	ldrsb	r0, [r2, r0]
    4d0e:	2298      	movs	r2, #152	; 0x98
    4d10:	18ba      	adds	r2, r7, r2
    4d12:	2105      	movs	r1, #5
    4d14:	4798      	blx	r3
	{
    4d16:	e169      	b.n	4fec <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4d18:	1dfb      	adds	r3, r7, #7
    4d1a:	781b      	ldrb	r3, [r3, #0]
    4d1c:	2b4a      	cmp	r3, #74	; 0x4a
    4d1e:	d123      	bne.n	4d68 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4d20:	230c      	movs	r3, #12
    4d22:	18f9      	adds	r1, r7, r3
    4d24:	6838      	ldr	r0, [r7, #0]
    4d26:	2300      	movs	r3, #0
    4d28:	2244      	movs	r2, #68	; 0x44
    4d2a:	4c0a      	ldr	r4, [pc, #40]	; (4d54 <m2m_ip_cb+0x290>)
    4d2c:	47a0      	blx	r4
    4d2e:	1e03      	subs	r3, r0, #0
    4d30:	d000      	beq.n	4d34 <m2m_ip_cb+0x270>
    4d32:	e160      	b.n	4ff6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    4d34:	4b0b      	ldr	r3, [pc, #44]	; (4d64 <m2m_ip_cb+0x2a0>)
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d100      	bne.n	4d3e <m2m_ip_cb+0x27a>
    4d3c:	e15b      	b.n	4ff6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4d3e:	4b09      	ldr	r3, [pc, #36]	; (4d64 <m2m_ip_cb+0x2a0>)
    4d40:	681a      	ldr	r2, [r3, #0]
    4d42:	230c      	movs	r3, #12
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4d48:	230c      	movs	r3, #12
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	0018      	movs	r0, r3
    4d4e:	4790      	blx	r2
}
    4d50:	e151      	b.n	4ff6 <m2m_ip_cb+0x532>
    4d52:	46c0      	nop			; (mov r8, r8)
    4d54:	00001831 	.word	0x00001831
    4d58:	200003dc 	.word	0x200003dc
    4d5c:	2000032c 	.word	0x2000032c
    4d60:	20000212 	.word	0x20000212
    4d64:	200003e4 	.word	0x200003e4
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4d68:	1dfb      	adds	r3, r7, #7
    4d6a:	781b      	ldrb	r3, [r3, #0]
    4d6c:	2b46      	cmp	r3, #70	; 0x46
    4d6e:	d008      	beq.n	4d82 <m2m_ip_cb+0x2be>
    4d70:	1dfb      	adds	r3, r7, #7
    4d72:	781b      	ldrb	r3, [r3, #0]
    4d74:	2b48      	cmp	r3, #72	; 0x48
    4d76:	d004      	beq.n	4d82 <m2m_ip_cb+0x2be>
    4d78:	1dfb      	adds	r3, r7, #7
    4d7a:	781b      	ldrb	r3, [r3, #0]
    4d7c:	2b4d      	cmp	r3, #77	; 0x4d
    4d7e:	d000      	beq.n	4d82 <m2m_ip_cb+0x2be>
    4d80:	e0b4      	b.n	4eec <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4d82:	23df      	movs	r3, #223	; 0xdf
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	2206      	movs	r2, #6
    4d88:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4d8a:	1dfb      	adds	r3, r7, #7
    4d8c:	781b      	ldrb	r3, [r3, #0]
    4d8e:	2b48      	cmp	r3, #72	; 0x48
    4d90:	d103      	bne.n	4d9a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4d92:	23df      	movs	r3, #223	; 0xdf
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	2209      	movs	r2, #9
    4d98:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    4d9a:	23d8      	movs	r3, #216	; 0xd8
    4d9c:	18fb      	adds	r3, r7, r3
    4d9e:	2210      	movs	r2, #16
    4da0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4da2:	23d8      	movs	r3, #216	; 0xd8
    4da4:	18fb      	adds	r3, r7, r3
    4da6:	881a      	ldrh	r2, [r3, #0]
    4da8:	2388      	movs	r3, #136	; 0x88
    4daa:	18f9      	adds	r1, r7, r3
    4dac:	6838      	ldr	r0, [r7, #0]
    4dae:	2300      	movs	r3, #0
    4db0:	4c93      	ldr	r4, [pc, #588]	; (5000 <m2m_ip_cb+0x53c>)
    4db2:	47a0      	blx	r4
    4db4:	1e03      	subs	r3, r0, #0
    4db6:	d000      	beq.n	4dba <m2m_ip_cb+0x2f6>
    4db8:	e11a      	b.n	4ff0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    4dba:	23d6      	movs	r3, #214	; 0xd6
    4dbc:	18fb      	adds	r3, r7, r3
    4dbe:	2200      	movs	r2, #0
    4dc0:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    4dc2:	23d5      	movs	r3, #213	; 0xd5
    4dc4:	18fb      	adds	r3, r7, r3
    4dc6:	2288      	movs	r2, #136	; 0x88
    4dc8:	18ba      	adds	r2, r7, r2
    4dca:	7b12      	ldrb	r2, [r2, #12]
    4dcc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4dce:	23d6      	movs	r3, #214	; 0xd6
    4dd0:	18fb      	adds	r3, r7, r3
    4dd2:	2288      	movs	r2, #136	; 0x88
    4dd4:	18ba      	adds	r2, r7, r2
    4dd6:	89d2      	ldrh	r2, [r2, #14]
    4dd8:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    4dda:	23d5      	movs	r3, #213	; 0xd5
    4ddc:	18fb      	adds	r3, r7, r3
    4dde:	781b      	ldrb	r3, [r3, #0]
    4de0:	b25b      	sxtb	r3, r3
    4de2:	4a88      	ldr	r2, [pc, #544]	; (5004 <m2m_ip_cb+0x540>)
    4de4:	011b      	lsls	r3, r3, #4
    4de6:	18d3      	adds	r3, r2, r3
    4de8:	330c      	adds	r3, #12
    4dea:	2200      	movs	r2, #0
    4dec:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4dee:	23d2      	movs	r3, #210	; 0xd2
    4df0:	18fb      	adds	r3, r7, r3
    4df2:	2288      	movs	r2, #136	; 0x88
    4df4:	18ba      	adds	r2, r7, r2
    4df6:	8912      	ldrh	r2, [r2, #8]
    4df8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4dfa:	23d0      	movs	r3, #208	; 0xd0
    4dfc:	18fb      	adds	r3, r7, r3
    4dfe:	2288      	movs	r2, #136	; 0x88
    4e00:	18ba      	adds	r2, r7, r2
    4e02:	8952      	ldrh	r2, [r2, #10]
    4e04:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4e06:	2388      	movs	r3, #136	; 0x88
    4e08:	18fb      	adds	r3, r7, r3
    4e0a:	885a      	ldrh	r2, [r3, #2]
    4e0c:	2370      	movs	r3, #112	; 0x70
    4e0e:	18fb      	adds	r3, r7, r3
    4e10:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4e12:	2388      	movs	r3, #136	; 0x88
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	685a      	ldr	r2, [r3, #4]
    4e18:	2370      	movs	r3, #112	; 0x70
    4e1a:	18fb      	adds	r3, r7, r3
    4e1c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4e1e:	23d5      	movs	r3, #213	; 0xd5
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	781b      	ldrb	r3, [r3, #0]
    4e24:	b25b      	sxtb	r3, r3
    4e26:	4a77      	ldr	r2, [pc, #476]	; (5004 <m2m_ip_cb+0x540>)
    4e28:	011b      	lsls	r3, r3, #4
    4e2a:	18d3      	adds	r3, r2, r3
    4e2c:	3306      	adds	r3, #6
    4e2e:	881b      	ldrh	r3, [r3, #0]
    4e30:	b29b      	uxth	r3, r3
    4e32:	22d6      	movs	r2, #214	; 0xd6
    4e34:	18ba      	adds	r2, r7, r2
    4e36:	8812      	ldrh	r2, [r2, #0]
    4e38:	429a      	cmp	r2, r3
    4e3a:	d148      	bne.n	4ece <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4e3c:	23d2      	movs	r3, #210	; 0xd2
    4e3e:	18fb      	adds	r3, r7, r3
    4e40:	2200      	movs	r2, #0
    4e42:	5e9b      	ldrsh	r3, [r3, r2]
    4e44:	2b00      	cmp	r3, #0
    4e46:	dd25      	ble.n	4e94 <m2m_ip_cb+0x3d0>
    4e48:	23d2      	movs	r3, #210	; 0xd2
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2200      	movs	r2, #0
    4e4e:	5e9a      	ldrsh	r2, [r3, r2]
    4e50:	1d3b      	adds	r3, r7, #4
    4e52:	881b      	ldrh	r3, [r3, #0]
    4e54:	429a      	cmp	r2, r3
    4e56:	da1d      	bge.n	4e94 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    4e58:	23d0      	movs	r3, #208	; 0xd0
    4e5a:	18fb      	adds	r3, r7, r3
    4e5c:	881b      	ldrh	r3, [r3, #0]
    4e5e:	683a      	ldr	r2, [r7, #0]
    4e60:	18d3      	adds	r3, r2, r3
    4e62:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    4e64:	23d8      	movs	r3, #216	; 0xd8
    4e66:	18fb      	adds	r3, r7, r3
    4e68:	22d2      	movs	r2, #210	; 0xd2
    4e6a:	18ba      	adds	r2, r7, r2
    4e6c:	8812      	ldrh	r2, [r2, #0]
    4e6e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4e70:	683c      	ldr	r4, [r7, #0]
    4e72:	23df      	movs	r3, #223	; 0xdf
    4e74:	18fb      	adds	r3, r7, r3
    4e76:	781a      	ldrb	r2, [r3, #0]
    4e78:	2370      	movs	r3, #112	; 0x70
    4e7a:	18f9      	adds	r1, r7, r3
    4e7c:	23d5      	movs	r3, #213	; 0xd5
    4e7e:	18fb      	adds	r3, r7, r3
    4e80:	2000      	movs	r0, #0
    4e82:	5618      	ldrsb	r0, [r3, r0]
    4e84:	23d8      	movs	r3, #216	; 0xd8
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	881b      	ldrh	r3, [r3, #0]
    4e8a:	9300      	str	r3, [sp, #0]
    4e8c:	0023      	movs	r3, r4
    4e8e:	4c5e      	ldr	r4, [pc, #376]	; (5008 <m2m_ip_cb+0x544>)
    4e90:	47a0      	blx	r4
	{
    4e92:	e0ad      	b.n	4ff0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4e94:	2370      	movs	r3, #112	; 0x70
    4e96:	18fb      	adds	r3, r7, r3
    4e98:	22d2      	movs	r2, #210	; 0xd2
    4e9a:	18ba      	adds	r2, r7, r2
    4e9c:	8812      	ldrh	r2, [r2, #0]
    4e9e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4ea0:	2370      	movs	r3, #112	; 0x70
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	2200      	movs	r2, #0
    4ea6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4ea8:	4b58      	ldr	r3, [pc, #352]	; (500c <m2m_ip_cb+0x548>)
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d100      	bne.n	4eb2 <m2m_ip_cb+0x3ee>
    4eb0:	e09e      	b.n	4ff0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4eb2:	4b56      	ldr	r3, [pc, #344]	; (500c <m2m_ip_cb+0x548>)
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	2270      	movs	r2, #112	; 0x70
    4eb8:	18bc      	adds	r4, r7, r2
    4eba:	22df      	movs	r2, #223	; 0xdf
    4ebc:	18ba      	adds	r2, r7, r2
    4ebe:	7811      	ldrb	r1, [r2, #0]
    4ec0:	22d5      	movs	r2, #213	; 0xd5
    4ec2:	18ba      	adds	r2, r7, r2
    4ec4:	2000      	movs	r0, #0
    4ec6:	5610      	ldrsb	r0, [r2, r0]
    4ec8:	0022      	movs	r2, r4
    4eca:	4798      	blx	r3
	{
    4ecc:	e090      	b.n	4ff0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    4ece:	23d8      	movs	r3, #216	; 0xd8
    4ed0:	18fa      	adds	r2, r7, r3
    4ed2:	1d3b      	adds	r3, r7, #4
    4ed4:	8812      	ldrh	r2, [r2, #0]
    4ed6:	881b      	ldrh	r3, [r3, #0]
    4ed8:	429a      	cmp	r2, r3
    4eda:	d300      	bcc.n	4ede <m2m_ip_cb+0x41a>
    4edc:	e088      	b.n	4ff0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4ede:	2301      	movs	r3, #1
    4ee0:	2200      	movs	r2, #0
    4ee2:	2100      	movs	r1, #0
    4ee4:	2000      	movs	r0, #0
    4ee6:	4c46      	ldr	r4, [pc, #280]	; (5000 <m2m_ip_cb+0x53c>)
    4ee8:	47a0      	blx	r4
	{
    4eea:	e081      	b.n	4ff0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4eec:	1dfb      	adds	r3, r7, #7
    4eee:	781b      	ldrb	r3, [r3, #0]
    4ef0:	2b45      	cmp	r3, #69	; 0x45
    4ef2:	d007      	beq.n	4f04 <m2m_ip_cb+0x440>
    4ef4:	1dfb      	adds	r3, r7, #7
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	2b47      	cmp	r3, #71	; 0x47
    4efa:	d003      	beq.n	4f04 <m2m_ip_cb+0x440>
    4efc:	1dfb      	adds	r3, r7, #7
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	2b4c      	cmp	r3, #76	; 0x4c
    4f02:	d14c      	bne.n	4f9e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4f04:	23de      	movs	r3, #222	; 0xde
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	2207      	movs	r2, #7
    4f0a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    4f0c:	1dfb      	adds	r3, r7, #7
    4f0e:	781b      	ldrb	r3, [r3, #0]
    4f10:	2b47      	cmp	r3, #71	; 0x47
    4f12:	d103      	bne.n	4f1c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4f14:	23de      	movs	r3, #222	; 0xde
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	2208      	movs	r2, #8
    4f1a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4f1c:	2364      	movs	r3, #100	; 0x64
    4f1e:	18f9      	adds	r1, r7, r3
    4f20:	6838      	ldr	r0, [r7, #0]
    4f22:	2300      	movs	r3, #0
    4f24:	2208      	movs	r2, #8
    4f26:	4c36      	ldr	r4, [pc, #216]	; (5000 <m2m_ip_cb+0x53c>)
    4f28:	47a0      	blx	r4
    4f2a:	1e03      	subs	r3, r0, #0
    4f2c:	d162      	bne.n	4ff4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    4f2e:	23dc      	movs	r3, #220	; 0xdc
    4f30:	18fb      	adds	r3, r7, r3
    4f32:	2200      	movs	r2, #0
    4f34:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    4f36:	23db      	movs	r3, #219	; 0xdb
    4f38:	18fb      	adds	r3, r7, r3
    4f3a:	2264      	movs	r2, #100	; 0x64
    4f3c:	18ba      	adds	r2, r7, r2
    4f3e:	7812      	ldrb	r2, [r2, #0]
    4f40:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4f42:	23dc      	movs	r3, #220	; 0xdc
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	2264      	movs	r2, #100	; 0x64
    4f48:	18ba      	adds	r2, r7, r2
    4f4a:	8892      	ldrh	r2, [r2, #4]
    4f4c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4f4e:	2364      	movs	r3, #100	; 0x64
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	2202      	movs	r2, #2
    4f54:	5e9a      	ldrsh	r2, [r3, r2]
    4f56:	236e      	movs	r3, #110	; 0x6e
    4f58:	18fb      	adds	r3, r7, r3
    4f5a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4f5c:	23db      	movs	r3, #219	; 0xdb
    4f5e:	18fb      	adds	r3, r7, r3
    4f60:	781b      	ldrb	r3, [r3, #0]
    4f62:	b25b      	sxtb	r3, r3
    4f64:	4a27      	ldr	r2, [pc, #156]	; (5004 <m2m_ip_cb+0x540>)
    4f66:	011b      	lsls	r3, r3, #4
    4f68:	18d3      	adds	r3, r2, r3
    4f6a:	3306      	adds	r3, #6
    4f6c:	881b      	ldrh	r3, [r3, #0]
    4f6e:	b29b      	uxth	r3, r3
    4f70:	22dc      	movs	r2, #220	; 0xdc
    4f72:	18ba      	adds	r2, r7, r2
    4f74:	8812      	ldrh	r2, [r2, #0]
    4f76:	429a      	cmp	r2, r3
    4f78:	d13c      	bne.n	4ff4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    4f7a:	4b24      	ldr	r3, [pc, #144]	; (500c <m2m_ip_cb+0x548>)
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d038      	beq.n	4ff4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4f82:	4b22      	ldr	r3, [pc, #136]	; (500c <m2m_ip_cb+0x548>)
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	226e      	movs	r2, #110	; 0x6e
    4f88:	18bc      	adds	r4, r7, r2
    4f8a:	22de      	movs	r2, #222	; 0xde
    4f8c:	18ba      	adds	r2, r7, r2
    4f8e:	7811      	ldrb	r1, [r2, #0]
    4f90:	22db      	movs	r2, #219	; 0xdb
    4f92:	18ba      	adds	r2, r7, r2
    4f94:	2000      	movs	r0, #0
    4f96:	5610      	ldrsb	r0, [r2, r0]
    4f98:	0022      	movs	r2, r4
    4f9a:	4798      	blx	r3
	{
    4f9c:	e02a      	b.n	4ff4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    4f9e:	1dfb      	adds	r3, r7, #7
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	2b52      	cmp	r3, #82	; 0x52
    4fa4:	d127      	bne.n	4ff6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4fa6:	2350      	movs	r3, #80	; 0x50
    4fa8:	18f9      	adds	r1, r7, r3
    4faa:	6838      	ldr	r0, [r7, #0]
    4fac:	2301      	movs	r3, #1
    4fae:	2214      	movs	r2, #20
    4fb0:	4c13      	ldr	r4, [pc, #76]	; (5000 <m2m_ip_cb+0x53c>)
    4fb2:	47a0      	blx	r4
    4fb4:	1e03      	subs	r3, r0, #0
    4fb6:	d11e      	bne.n	4ff6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4fb8:	2350      	movs	r3, #80	; 0x50
    4fba:	18fb      	adds	r3, r7, r3
    4fbc:	685b      	ldr	r3, [r3, #4]
    4fbe:	001a      	movs	r2, r3
    4fc0:	4b13      	ldr	r3, [pc, #76]	; (5010 <m2m_ip_cb+0x54c>)
    4fc2:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4fc4:	4b12      	ldr	r3, [pc, #72]	; (5010 <m2m_ip_cb+0x54c>)
    4fc6:	681b      	ldr	r3, [r3, #0]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d014      	beq.n	4ff6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4fcc:	4b10      	ldr	r3, [pc, #64]	; (5010 <m2m_ip_cb+0x54c>)
    4fce:	681c      	ldr	r4, [r3, #0]
    4fd0:	2350      	movs	r3, #80	; 0x50
    4fd2:	18fb      	adds	r3, r7, r3
    4fd4:	6818      	ldr	r0, [r3, #0]
    4fd6:	2350      	movs	r3, #80	; 0x50
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	6899      	ldr	r1, [r3, #8]
    4fdc:	2350      	movs	r3, #80	; 0x50
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	7c1b      	ldrb	r3, [r3, #16]
    4fe2:	001a      	movs	r2, r3
    4fe4:	47a0      	blx	r4
}
    4fe6:	e006      	b.n	4ff6 <m2m_ip_cb+0x532>
	{
    4fe8:	46c0      	nop			; (mov r8, r8)
    4fea:	e004      	b.n	4ff6 <m2m_ip_cb+0x532>
	{
    4fec:	46c0      	nop			; (mov r8, r8)
    4fee:	e002      	b.n	4ff6 <m2m_ip_cb+0x532>
	{
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	e000      	b.n	4ff6 <m2m_ip_cb+0x532>
	{
    4ff4:	46c0      	nop			; (mov r8, r8)
}
    4ff6:	46c0      	nop			; (mov r8, r8)
    4ff8:	46bd      	mov	sp, r7
    4ffa:	b039      	add	sp, #228	; 0xe4
    4ffc:	bd90      	pop	{r4, r7, pc}
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	00001831 	.word	0x00001831
    5004:	2000032c 	.word	0x2000032c
    5008:	000048c9 	.word	0x000048c9
    500c:	200003dc 	.word	0x200003dc
    5010:	200003e0 	.word	0x200003e0

00005014 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    5014:	b580      	push	{r7, lr}
    5016:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    5018:	4b0c      	ldr	r3, [pc, #48]	; (504c <socketInit+0x38>)
    501a:	781b      	ldrb	r3, [r3, #0]
    501c:	b2db      	uxtb	r3, r3
    501e:	2b00      	cmp	r3, #0
    5020:	d110      	bne.n	5044 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    5022:	4b0b      	ldr	r3, [pc, #44]	; (5050 <socketInit+0x3c>)
    5024:	22b0      	movs	r2, #176	; 0xb0
    5026:	2100      	movs	r1, #0
    5028:	0018      	movs	r0, r3
    502a:	4b0a      	ldr	r3, [pc, #40]	; (5054 <socketInit+0x40>)
    502c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    502e:	4b0a      	ldr	r3, [pc, #40]	; (5058 <socketInit+0x44>)
    5030:	0019      	movs	r1, r3
    5032:	2002      	movs	r0, #2
    5034:	4b09      	ldr	r3, [pc, #36]	; (505c <socketInit+0x48>)
    5036:	4798      	blx	r3
		gbSocketInit	= 1;
    5038:	4b04      	ldr	r3, [pc, #16]	; (504c <socketInit+0x38>)
    503a:	2201      	movs	r2, #1
    503c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    503e:	4b08      	ldr	r3, [pc, #32]	; (5060 <socketInit+0x4c>)
    5040:	2200      	movs	r2, #0
    5042:	801a      	strh	r2, [r3, #0]
	}
}
    5044:	46c0      	nop			; (mov r8, r8)
    5046:	46bd      	mov	sp, r7
    5048:	bd80      	pop	{r7, pc}
    504a:	46c0      	nop			; (mov r8, r8)
    504c:	20000214 	.word	0x20000214
    5050:	2000032c 	.word	0x2000032c
    5054:	00000cdd 	.word	0x00000cdd
    5058:	00004ac5 	.word	0x00004ac5
    505c:	000019b1 	.word	0x000019b1
    5060:	20000212 	.word	0x20000212

00005064 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    5064:	b580      	push	{r7, lr}
    5066:	b082      	sub	sp, #8
    5068:	af00      	add	r7, sp, #0
    506a:	6078      	str	r0, [r7, #4]
    506c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    506e:	4b05      	ldr	r3, [pc, #20]	; (5084 <registerSocketCallback+0x20>)
    5070:	687a      	ldr	r2, [r7, #4]
    5072:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    5074:	4b04      	ldr	r3, [pc, #16]	; (5088 <registerSocketCallback+0x24>)
    5076:	683a      	ldr	r2, [r7, #0]
    5078:	601a      	str	r2, [r3, #0]
}
    507a:	46c0      	nop			; (mov r8, r8)
    507c:	46bd      	mov	sp, r7
    507e:	b002      	add	sp, #8
    5080:	bd80      	pop	{r7, pc}
    5082:	46c0      	nop			; (mov r8, r8)
    5084:	200003dc 	.word	0x200003dc
    5088:	200003e4 	.word	0x200003e4

0000508c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    508c:	b590      	push	{r4, r7, lr}
    508e:	b08d      	sub	sp, #52	; 0x34
    5090:	af04      	add	r7, sp, #16
    5092:	0004      	movs	r4, r0
    5094:	0008      	movs	r0, r1
    5096:	0011      	movs	r1, r2
    5098:	1dbb      	adds	r3, r7, #6
    509a:	1c22      	adds	r2, r4, #0
    509c:	801a      	strh	r2, [r3, #0]
    509e:	1d7b      	adds	r3, r7, #5
    50a0:	1c02      	adds	r2, r0, #0
    50a2:	701a      	strb	r2, [r3, #0]
    50a4:	1d3b      	adds	r3, r7, #4
    50a6:	1c0a      	adds	r2, r1, #0
    50a8:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    50aa:	231f      	movs	r3, #31
    50ac:	18fb      	adds	r3, r7, r3
    50ae:	22ff      	movs	r2, #255	; 0xff
    50b0:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    50b2:	1dbb      	adds	r3, r7, #6
    50b4:	881b      	ldrh	r3, [r3, #0]
    50b6:	2b02      	cmp	r3, #2
    50b8:	d000      	beq.n	50bc <socket+0x30>
    50ba:	e0cd      	b.n	5258 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    50bc:	1d7b      	adds	r3, r7, #5
    50be:	781b      	ldrb	r3, [r3, #0]
    50c0:	2b01      	cmp	r3, #1
    50c2:	d135      	bne.n	5130 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    50c4:	231e      	movs	r3, #30
    50c6:	18fb      	adds	r3, r7, r3
    50c8:	2200      	movs	r2, #0
    50ca:	701a      	strb	r2, [r3, #0]
    50cc:	e02a      	b.n	5124 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    50ce:	2317      	movs	r3, #23
    50d0:	18fb      	adds	r3, r7, r3
    50d2:	4a65      	ldr	r2, [pc, #404]	; (5268 <socket+0x1dc>)
    50d4:	7812      	ldrb	r2, [r2, #0]
    50d6:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    50d8:	4b63      	ldr	r3, [pc, #396]	; (5268 <socket+0x1dc>)
    50da:	781b      	ldrb	r3, [r3, #0]
    50dc:	b2db      	uxtb	r3, r3
    50de:	011a      	lsls	r2, r3, #4
    50e0:	4b62      	ldr	r3, [pc, #392]	; (526c <socket+0x1e0>)
    50e2:	18d3      	adds	r3, r2, r3
    50e4:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    50e6:	4b60      	ldr	r3, [pc, #384]	; (5268 <socket+0x1dc>)
    50e8:	781b      	ldrb	r3, [r3, #0]
    50ea:	b2db      	uxtb	r3, r3
    50ec:	1c5a      	adds	r2, r3, #1
    50ee:	4b60      	ldr	r3, [pc, #384]	; (5270 <socket+0x1e4>)
    50f0:	2107      	movs	r1, #7
    50f2:	0010      	movs	r0, r2
    50f4:	4798      	blx	r3
    50f6:	000b      	movs	r3, r1
    50f8:	b2da      	uxtb	r2, r3
    50fa:	4b5b      	ldr	r3, [pc, #364]	; (5268 <socket+0x1dc>)
    50fc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    50fe:	69bb      	ldr	r3, [r7, #24]
    5100:	7a9b      	ldrb	r3, [r3, #10]
    5102:	b2db      	uxtb	r3, r3
    5104:	2b00      	cmp	r3, #0
    5106:	d106      	bne.n	5116 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    5108:	231f      	movs	r3, #31
    510a:	18fb      	adds	r3, r7, r3
    510c:	2217      	movs	r2, #23
    510e:	18ba      	adds	r2, r7, r2
    5110:	7812      	ldrb	r2, [r2, #0]
    5112:	701a      	strb	r2, [r3, #0]
					break;
    5114:	e04c      	b.n	51b0 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5116:	231e      	movs	r3, #30
    5118:	18fb      	adds	r3, r7, r3
    511a:	781a      	ldrb	r2, [r3, #0]
    511c:	231e      	movs	r3, #30
    511e:	18fb      	adds	r3, r7, r3
    5120:	3201      	adds	r2, #1
    5122:	701a      	strb	r2, [r3, #0]
    5124:	231e      	movs	r3, #30
    5126:	18fb      	adds	r3, r7, r3
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	2b06      	cmp	r3, #6
    512c:	d9cf      	bls.n	50ce <socket+0x42>
    512e:	e03f      	b.n	51b0 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    5130:	1d7b      	adds	r3, r7, #5
    5132:	781b      	ldrb	r3, [r3, #0]
    5134:	2b02      	cmp	r3, #2
    5136:	d13b      	bne.n	51b0 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    5138:	4b4e      	ldr	r3, [pc, #312]	; (5274 <socket+0x1e8>)
    513a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    513c:	231e      	movs	r3, #30
    513e:	18fb      	adds	r3, r7, r3
    5140:	2200      	movs	r2, #0
    5142:	701a      	strb	r2, [r3, #0]
    5144:	e02f      	b.n	51a6 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    5146:	2317      	movs	r3, #23
    5148:	18fb      	adds	r3, r7, r3
    514a:	4a4b      	ldr	r2, [pc, #300]	; (5278 <socket+0x1ec>)
    514c:	7812      	ldrb	r2, [r2, #0]
    514e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    5150:	4b49      	ldr	r3, [pc, #292]	; (5278 <socket+0x1ec>)
    5152:	781b      	ldrb	r3, [r3, #0]
    5154:	b2db      	uxtb	r3, r3
    5156:	011b      	lsls	r3, r3, #4
    5158:	693a      	ldr	r2, [r7, #16]
    515a:	18d3      	adds	r3, r2, r3
    515c:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    515e:	4b46      	ldr	r3, [pc, #280]	; (5278 <socket+0x1ec>)
    5160:	781b      	ldrb	r3, [r3, #0]
    5162:	b2db      	uxtb	r3, r3
    5164:	3301      	adds	r3, #1
    5166:	4a45      	ldr	r2, [pc, #276]	; (527c <socket+0x1f0>)
    5168:	4013      	ands	r3, r2
    516a:	d504      	bpl.n	5176 <socket+0xea>
    516c:	3b01      	subs	r3, #1
    516e:	2204      	movs	r2, #4
    5170:	4252      	negs	r2, r2
    5172:	4313      	orrs	r3, r2
    5174:	3301      	adds	r3, #1
    5176:	b2da      	uxtb	r2, r3
    5178:	4b3f      	ldr	r3, [pc, #252]	; (5278 <socket+0x1ec>)
    517a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    517c:	69bb      	ldr	r3, [r7, #24]
    517e:	7a9b      	ldrb	r3, [r3, #10]
    5180:	b2db      	uxtb	r3, r3
    5182:	2b00      	cmp	r3, #0
    5184:	d108      	bne.n	5198 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    5186:	2317      	movs	r3, #23
    5188:	18fb      	adds	r3, r7, r3
    518a:	781b      	ldrb	r3, [r3, #0]
    518c:	3307      	adds	r3, #7
    518e:	b2da      	uxtb	r2, r3
    5190:	231f      	movs	r3, #31
    5192:	18fb      	adds	r3, r7, r3
    5194:	701a      	strb	r2, [r3, #0]
					break;
    5196:	e00b      	b.n	51b0 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5198:	231e      	movs	r3, #30
    519a:	18fb      	adds	r3, r7, r3
    519c:	781a      	ldrb	r2, [r3, #0]
    519e:	231e      	movs	r3, #30
    51a0:	18fb      	adds	r3, r7, r3
    51a2:	3201      	adds	r2, #1
    51a4:	701a      	strb	r2, [r3, #0]
    51a6:	231e      	movs	r3, #30
    51a8:	18fb      	adds	r3, r7, r3
    51aa:	781b      	ldrb	r3, [r3, #0]
    51ac:	2b03      	cmp	r3, #3
    51ae:	d9ca      	bls.n	5146 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    51b0:	231f      	movs	r3, #31
    51b2:	18fb      	adds	r3, r7, r3
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	2b7f      	cmp	r3, #127	; 0x7f
    51b8:	d84e      	bhi.n	5258 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    51ba:	69bb      	ldr	r3, [r7, #24]
    51bc:	2210      	movs	r2, #16
    51be:	2100      	movs	r1, #0
    51c0:	0018      	movs	r0, r3
    51c2:	4b2f      	ldr	r3, [pc, #188]	; (5280 <socket+0x1f4>)
    51c4:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	2201      	movs	r2, #1
    51ca:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    51cc:	4b2d      	ldr	r3, [pc, #180]	; (5284 <socket+0x1f8>)
    51ce:	881b      	ldrh	r3, [r3, #0]
    51d0:	b29b      	uxth	r3, r3
    51d2:	3301      	adds	r3, #1
    51d4:	b29a      	uxth	r2, r3
    51d6:	4b2b      	ldr	r3, [pc, #172]	; (5284 <socket+0x1f8>)
    51d8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    51da:	4b2a      	ldr	r3, [pc, #168]	; (5284 <socket+0x1f8>)
    51dc:	881b      	ldrh	r3, [r3, #0]
    51de:	b29b      	uxth	r3, r3
    51e0:	2b00      	cmp	r3, #0
    51e2:	d106      	bne.n	51f2 <socket+0x166>
				++gu16SessionID;
    51e4:	4b27      	ldr	r3, [pc, #156]	; (5284 <socket+0x1f8>)
    51e6:	881b      	ldrh	r3, [r3, #0]
    51e8:	b29b      	uxth	r3, r3
    51ea:	3301      	adds	r3, #1
    51ec:	b29a      	uxth	r2, r3
    51ee:	4b25      	ldr	r3, [pc, #148]	; (5284 <socket+0x1f8>)
    51f0:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    51f2:	4b24      	ldr	r3, [pc, #144]	; (5284 <socket+0x1f8>)
    51f4:	881b      	ldrh	r3, [r3, #0]
    51f6:	b29a      	uxth	r2, r3
    51f8:	69bb      	ldr	r3, [r7, #24]
    51fa:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    51fc:	4b22      	ldr	r3, [pc, #136]	; (5288 <socket+0x1fc>)
    51fe:	0018      	movs	r0, r3
    5200:	4b22      	ldr	r3, [pc, #136]	; (528c <socket+0x200>)
    5202:	4798      	blx	r3
    5204:	231f      	movs	r3, #31
    5206:	18fb      	adds	r3, r7, r3
    5208:	2100      	movs	r1, #0
    520a:	5659      	ldrsb	r1, [r3, r1]
    520c:	4b1d      	ldr	r3, [pc, #116]	; (5284 <socket+0x1f8>)
    520e:	881b      	ldrh	r3, [r3, #0]
    5210:	b29b      	uxth	r3, r3
    5212:	001a      	movs	r2, r3
    5214:	4b1e      	ldr	r3, [pc, #120]	; (5290 <socket+0x204>)
    5216:	0018      	movs	r0, r3
    5218:	4b1c      	ldr	r3, [pc, #112]	; (528c <socket+0x200>)
    521a:	4798      	blx	r3
    521c:	200d      	movs	r0, #13
    521e:	4b1d      	ldr	r3, [pc, #116]	; (5294 <socket+0x208>)
    5220:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    5222:	1d3b      	adds	r3, r7, #4
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	2201      	movs	r2, #1
    5228:	4013      	ands	r3, r2
    522a:	d015      	beq.n	5258 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    522c:	230c      	movs	r3, #12
    522e:	18fb      	adds	r3, r7, r3
    5230:	221f      	movs	r2, #31
    5232:	18ba      	adds	r2, r7, r2
    5234:	7812      	ldrb	r2, [r2, #0]
    5236:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    5238:	69bb      	ldr	r3, [r7, #24]
    523a:	2221      	movs	r2, #33	; 0x21
    523c:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    523e:	230c      	movs	r3, #12
    5240:	18fa      	adds	r2, r7, r3
    5242:	2300      	movs	r3, #0
    5244:	9302      	str	r3, [sp, #8]
    5246:	2300      	movs	r3, #0
    5248:	9301      	str	r3, [sp, #4]
    524a:	2300      	movs	r3, #0
    524c:	9300      	str	r3, [sp, #0]
    524e:	2304      	movs	r3, #4
    5250:	2150      	movs	r1, #80	; 0x50
    5252:	2002      	movs	r0, #2
    5254:	4c10      	ldr	r4, [pc, #64]	; (5298 <socket+0x20c>)
    5256:	47a0      	blx	r4
			}
		}
	}
	return sock;
    5258:	231f      	movs	r3, #31
    525a:	18fb      	adds	r3, r7, r3
    525c:	781b      	ldrb	r3, [r3, #0]
    525e:	b25b      	sxtb	r3, r3
}
    5260:	0018      	movs	r0, r3
    5262:	46bd      	mov	sp, r7
    5264:	b009      	add	sp, #36	; 0x24
    5266:	bd90      	pop	{r4, r7, pc}
    5268:	20000215 	.word	0x20000215
    526c:	2000032c 	.word	0x2000032c
    5270:	0000ccb1 	.word	0x0000ccb1
    5274:	2000039c 	.word	0x2000039c
    5278:	20000216 	.word	0x20000216
    527c:	80000003 	.word	0x80000003
    5280:	00000cdd 	.word	0x00000cdd
    5284:	20000212 	.word	0x20000212
    5288:	0000f4c0 	.word	0x0000f4c0
    528c:	0000cf25 	.word	0x0000cf25
    5290:	0000f4e0 	.word	0x0000f4e0
    5294:	0000cf59 	.word	0x0000cf59
    5298:	00000f3d 	.word	0x00000f3d

0000529c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    529c:	b5b0      	push	{r4, r5, r7, lr}
    529e:	b08a      	sub	sp, #40	; 0x28
    52a0:	af04      	add	r7, sp, #16
    52a2:	6039      	str	r1, [r7, #0]
    52a4:	0011      	movs	r1, r2
    52a6:	1dfb      	adds	r3, r7, #7
    52a8:	1c02      	adds	r2, r0, #0
    52aa:	701a      	strb	r2, [r3, #0]
    52ac:	1dbb      	adds	r3, r7, #6
    52ae:	1c0a      	adds	r2, r1, #0
    52b0:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    52b2:	2317      	movs	r3, #23
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	22fa      	movs	r2, #250	; 0xfa
    52b8:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    52ba:	1dfb      	adds	r3, r7, #7
    52bc:	781b      	ldrb	r3, [r3, #0]
    52be:	2b7f      	cmp	r3, #127	; 0x7f
    52c0:	d867      	bhi.n	5392 <connect+0xf6>
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d064      	beq.n	5392 <connect+0xf6>
    52c8:	1dfb      	adds	r3, r7, #7
    52ca:	781b      	ldrb	r3, [r3, #0]
    52cc:	b25b      	sxtb	r3, r3
    52ce:	4a35      	ldr	r2, [pc, #212]	; (53a4 <connect+0x108>)
    52d0:	011b      	lsls	r3, r3, #4
    52d2:	18d3      	adds	r3, r2, r3
    52d4:	330a      	adds	r3, #10
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	b2db      	uxtb	r3, r3
    52da:	2b01      	cmp	r3, #1
    52dc:	d159      	bne.n	5392 <connect+0xf6>
    52de:	1dbb      	adds	r3, r7, #6
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	2b00      	cmp	r3, #0
    52e4:	d055      	beq.n	5392 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    52e6:	2316      	movs	r3, #22
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	2244      	movs	r2, #68	; 0x44
    52ec:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    52ee:	1dfb      	adds	r3, r7, #7
    52f0:	781b      	ldrb	r3, [r3, #0]
    52f2:	b25b      	sxtb	r3, r3
    52f4:	4a2b      	ldr	r2, [pc, #172]	; (53a4 <connect+0x108>)
    52f6:	011b      	lsls	r3, r3, #4
    52f8:	18d3      	adds	r3, r2, r3
    52fa:	330b      	adds	r3, #11
    52fc:	781b      	ldrb	r3, [r3, #0]
    52fe:	b2db      	uxtb	r3, r3
    5300:	001a      	movs	r2, r3
    5302:	2301      	movs	r3, #1
    5304:	4013      	ands	r3, r2
    5306:	d00f      	beq.n	5328 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    5308:	2316      	movs	r3, #22
    530a:	18fb      	adds	r3, r7, r3
    530c:	224b      	movs	r2, #75	; 0x4b
    530e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5310:	1dfb      	adds	r3, r7, #7
    5312:	781b      	ldrb	r3, [r3, #0]
    5314:	b25b      	sxtb	r3, r3
    5316:	4a23      	ldr	r2, [pc, #140]	; (53a4 <connect+0x108>)
    5318:	011b      	lsls	r3, r3, #4
    531a:	18d3      	adds	r3, r2, r3
    531c:	330b      	adds	r3, #11
    531e:	781b      	ldrb	r3, [r3, #0]
    5320:	b2da      	uxtb	r2, r3
    5322:	2308      	movs	r3, #8
    5324:	18fb      	adds	r3, r7, r3
    5326:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5328:	2308      	movs	r3, #8
    532a:	18fb      	adds	r3, r7, r3
    532c:	1dfa      	adds	r2, r7, #7
    532e:	7812      	ldrb	r2, [r2, #0]
    5330:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5332:	6839      	ldr	r1, [r7, #0]
    5334:	2308      	movs	r3, #8
    5336:	18fb      	adds	r3, r7, r3
    5338:	2208      	movs	r2, #8
    533a:	0018      	movs	r0, r3
    533c:	4b1a      	ldr	r3, [pc, #104]	; (53a8 <connect+0x10c>)
    533e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5340:	1dfb      	adds	r3, r7, #7
    5342:	781b      	ldrb	r3, [r3, #0]
    5344:	b25b      	sxtb	r3, r3
    5346:	4a17      	ldr	r2, [pc, #92]	; (53a4 <connect+0x108>)
    5348:	011b      	lsls	r3, r3, #4
    534a:	18d3      	adds	r3, r2, r3
    534c:	3306      	adds	r3, #6
    534e:	881b      	ldrh	r3, [r3, #0]
    5350:	b29a      	uxth	r2, r3
    5352:	2308      	movs	r3, #8
    5354:	18fb      	adds	r3, r7, r3
    5356:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    5358:	2317      	movs	r3, #23
    535a:	18fc      	adds	r4, r7, r3
    535c:	2308      	movs	r3, #8
    535e:	18fa      	adds	r2, r7, r3
    5360:	2316      	movs	r3, #22
    5362:	18fb      	adds	r3, r7, r3
    5364:	7819      	ldrb	r1, [r3, #0]
    5366:	2300      	movs	r3, #0
    5368:	9302      	str	r3, [sp, #8]
    536a:	2300      	movs	r3, #0
    536c:	9301      	str	r3, [sp, #4]
    536e:	2300      	movs	r3, #0
    5370:	9300      	str	r3, [sp, #0]
    5372:	230c      	movs	r3, #12
    5374:	2002      	movs	r0, #2
    5376:	4d0d      	ldr	r5, [pc, #52]	; (53ac <connect+0x110>)
    5378:	47a8      	blx	r5
    537a:	0003      	movs	r3, r0
    537c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    537e:	2317      	movs	r3, #23
    5380:	18fb      	adds	r3, r7, r3
    5382:	781b      	ldrb	r3, [r3, #0]
    5384:	b25b      	sxtb	r3, r3
    5386:	2b00      	cmp	r3, #0
    5388:	d003      	beq.n	5392 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    538a:	2317      	movs	r3, #23
    538c:	18fb      	adds	r3, r7, r3
    538e:	22f7      	movs	r2, #247	; 0xf7
    5390:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    5392:	2317      	movs	r3, #23
    5394:	18fb      	adds	r3, r7, r3
    5396:	781b      	ldrb	r3, [r3, #0]
    5398:	b25b      	sxtb	r3, r3
}
    539a:	0018      	movs	r0, r3
    539c:	46bd      	mov	sp, r7
    539e:	b006      	add	sp, #24
    53a0:	bdb0      	pop	{r4, r5, r7, pc}
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	2000032c 	.word	0x2000032c
    53a8:	00000ca1 	.word	0x00000ca1
    53ac:	00000f3d 	.word	0x00000f3d

000053b0 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    53b0:	b590      	push	{r4, r7, lr}
    53b2:	b08f      	sub	sp, #60	; 0x3c
    53b4:	af04      	add	r7, sp, #16
    53b6:	0004      	movs	r4, r0
    53b8:	60b9      	str	r1, [r7, #8]
    53ba:	0010      	movs	r0, r2
    53bc:	0019      	movs	r1, r3
    53be:	230f      	movs	r3, #15
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	1c22      	adds	r2, r4, #0
    53c4:	701a      	strb	r2, [r3, #0]
    53c6:	230c      	movs	r3, #12
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	1c02      	adds	r2, r0, #0
    53cc:	801a      	strh	r2, [r3, #0]
    53ce:	1dbb      	adds	r3, r7, #6
    53d0:	1c0a      	adds	r2, r1, #0
    53d2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    53d4:	2326      	movs	r3, #38	; 0x26
    53d6:	18fb      	adds	r3, r7, r3
    53d8:	2206      	movs	r2, #6
    53da:	4252      	negs	r2, r2
    53dc:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    53de:	230f      	movs	r3, #15
    53e0:	18fb      	adds	r3, r7, r3
    53e2:	781b      	ldrb	r3, [r3, #0]
    53e4:	2b7f      	cmp	r3, #127	; 0x7f
    53e6:	d900      	bls.n	53ea <send+0x3a>
    53e8:	e087      	b.n	54fa <send+0x14a>
    53ea:	68bb      	ldr	r3, [r7, #8]
    53ec:	2b00      	cmp	r3, #0
    53ee:	d100      	bne.n	53f2 <send+0x42>
    53f0:	e083      	b.n	54fa <send+0x14a>
    53f2:	230c      	movs	r3, #12
    53f4:	18fb      	adds	r3, r7, r3
    53f6:	881a      	ldrh	r2, [r3, #0]
    53f8:	23af      	movs	r3, #175	; 0xaf
    53fa:	00db      	lsls	r3, r3, #3
    53fc:	429a      	cmp	r2, r3
    53fe:	d900      	bls.n	5402 <send+0x52>
    5400:	e07b      	b.n	54fa <send+0x14a>
    5402:	230f      	movs	r3, #15
    5404:	18fb      	adds	r3, r7, r3
    5406:	781b      	ldrb	r3, [r3, #0]
    5408:	b25b      	sxtb	r3, r3
    540a:	4a40      	ldr	r2, [pc, #256]	; (550c <send+0x15c>)
    540c:	011b      	lsls	r3, r3, #4
    540e:	18d3      	adds	r3, r2, r3
    5410:	330a      	adds	r3, #10
    5412:	781b      	ldrb	r3, [r3, #0]
    5414:	b2db      	uxtb	r3, r3
    5416:	2b01      	cmp	r3, #1
    5418:	d16f      	bne.n	54fa <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    541a:	2323      	movs	r3, #35	; 0x23
    541c:	18fb      	adds	r3, r7, r3
    541e:	2245      	movs	r2, #69	; 0x45
    5420:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5422:	2324      	movs	r3, #36	; 0x24
    5424:	18fb      	adds	r3, r7, r3
    5426:	2250      	movs	r2, #80	; 0x50
    5428:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    542a:	2310      	movs	r3, #16
    542c:	18fb      	adds	r3, r7, r3
    542e:	220f      	movs	r2, #15
    5430:	18ba      	adds	r2, r7, r2
    5432:	7812      	ldrb	r2, [r2, #0]
    5434:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    5436:	2310      	movs	r3, #16
    5438:	18fb      	adds	r3, r7, r3
    543a:	220c      	movs	r2, #12
    543c:	18ba      	adds	r2, r7, r2
    543e:	8812      	ldrh	r2, [r2, #0]
    5440:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5442:	230f      	movs	r3, #15
    5444:	18fb      	adds	r3, r7, r3
    5446:	781b      	ldrb	r3, [r3, #0]
    5448:	b25b      	sxtb	r3, r3
    544a:	4a30      	ldr	r2, [pc, #192]	; (550c <send+0x15c>)
    544c:	011b      	lsls	r3, r3, #4
    544e:	18d3      	adds	r3, r2, r3
    5450:	3306      	adds	r3, #6
    5452:	881b      	ldrh	r3, [r3, #0]
    5454:	b29a      	uxth	r2, r3
    5456:	2310      	movs	r3, #16
    5458:	18fb      	adds	r3, r7, r3
    545a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    545c:	230f      	movs	r3, #15
    545e:	18fb      	adds	r3, r7, r3
    5460:	781b      	ldrb	r3, [r3, #0]
    5462:	b25b      	sxtb	r3, r3
    5464:	2b06      	cmp	r3, #6
    5466:	dd03      	ble.n	5470 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    5468:	2324      	movs	r3, #36	; 0x24
    546a:	18fb      	adds	r3, r7, r3
    546c:	2244      	movs	r2, #68	; 0x44
    546e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5470:	230f      	movs	r3, #15
    5472:	18fb      	adds	r3, r7, r3
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	b25b      	sxtb	r3, r3
    5478:	4a24      	ldr	r2, [pc, #144]	; (550c <send+0x15c>)
    547a:	011b      	lsls	r3, r3, #4
    547c:	18d3      	adds	r3, r2, r3
    547e:	330b      	adds	r3, #11
    5480:	781b      	ldrb	r3, [r3, #0]
    5482:	b2db      	uxtb	r3, r3
    5484:	001a      	movs	r2, r3
    5486:	2301      	movs	r3, #1
    5488:	4013      	ands	r3, r2
    548a:	d00f      	beq.n	54ac <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    548c:	2323      	movs	r3, #35	; 0x23
    548e:	18fb      	adds	r3, r7, r3
    5490:	224c      	movs	r2, #76	; 0x4c
    5492:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    5494:	230f      	movs	r3, #15
    5496:	18fb      	adds	r3, r7, r3
    5498:	2200      	movs	r2, #0
    549a:	569a      	ldrsb	r2, [r3, r2]
    549c:	2324      	movs	r3, #36	; 0x24
    549e:	18fb      	adds	r3, r7, r3
    54a0:	491a      	ldr	r1, [pc, #104]	; (550c <send+0x15c>)
    54a2:	0112      	lsls	r2, r2, #4
    54a4:	188a      	adds	r2, r1, r2
    54a6:	3208      	adds	r2, #8
    54a8:	8812      	ldrh	r2, [r2, #0]
    54aa:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    54ac:	2323      	movs	r3, #35	; 0x23
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	781b      	ldrb	r3, [r3, #0]
    54b2:	2280      	movs	r2, #128	; 0x80
    54b4:	4252      	negs	r2, r2
    54b6:	4313      	orrs	r3, r2
    54b8:	b2d9      	uxtb	r1, r3
    54ba:	2310      	movs	r3, #16
    54bc:	18fa      	adds	r2, r7, r3
    54be:	2324      	movs	r3, #36	; 0x24
    54c0:	18fb      	adds	r3, r7, r3
    54c2:	881b      	ldrh	r3, [r3, #0]
    54c4:	9302      	str	r3, [sp, #8]
    54c6:	230c      	movs	r3, #12
    54c8:	18fb      	adds	r3, r7, r3
    54ca:	881b      	ldrh	r3, [r3, #0]
    54cc:	9301      	str	r3, [sp, #4]
    54ce:	68bb      	ldr	r3, [r7, #8]
    54d0:	9300      	str	r3, [sp, #0]
    54d2:	2310      	movs	r3, #16
    54d4:	2002      	movs	r0, #2
    54d6:	4c0e      	ldr	r4, [pc, #56]	; (5510 <send+0x160>)
    54d8:	47a0      	blx	r4
    54da:	0003      	movs	r3, r0
    54dc:	001a      	movs	r2, r3
    54de:	2326      	movs	r3, #38	; 0x26
    54e0:	18fb      	adds	r3, r7, r3
    54e2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    54e4:	2326      	movs	r3, #38	; 0x26
    54e6:	18fb      	adds	r3, r7, r3
    54e8:	2200      	movs	r2, #0
    54ea:	5e9b      	ldrsh	r3, [r3, r2]
    54ec:	2b00      	cmp	r3, #0
    54ee:	d004      	beq.n	54fa <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    54f0:	2326      	movs	r3, #38	; 0x26
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	220e      	movs	r2, #14
    54f6:	4252      	negs	r2, r2
    54f8:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    54fa:	2326      	movs	r3, #38	; 0x26
    54fc:	18fb      	adds	r3, r7, r3
    54fe:	2200      	movs	r2, #0
    5500:	5e9b      	ldrsh	r3, [r3, r2]
}
    5502:	0018      	movs	r0, r3
    5504:	46bd      	mov	sp, r7
    5506:	b00b      	add	sp, #44	; 0x2c
    5508:	bd90      	pop	{r4, r7, pc}
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	2000032c 	.word	0x2000032c
    5510:	00000f3d 	.word	0x00000f3d

00005514 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5514:	b590      	push	{r4, r7, lr}
    5516:	b08d      	sub	sp, #52	; 0x34
    5518:	af04      	add	r7, sp, #16
    551a:	60b9      	str	r1, [r7, #8]
    551c:	0011      	movs	r1, r2
    551e:	607b      	str	r3, [r7, #4]
    5520:	230f      	movs	r3, #15
    5522:	18fb      	adds	r3, r7, r3
    5524:	1c02      	adds	r2, r0, #0
    5526:	701a      	strb	r2, [r3, #0]
    5528:	230c      	movs	r3, #12
    552a:	18fb      	adds	r3, r7, r3
    552c:	1c0a      	adds	r2, r1, #0
    552e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5530:	231e      	movs	r3, #30
    5532:	18fb      	adds	r3, r7, r3
    5534:	2206      	movs	r2, #6
    5536:	4252      	negs	r2, r2
    5538:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    553a:	230f      	movs	r3, #15
    553c:	18fb      	adds	r3, r7, r3
    553e:	781b      	ldrb	r3, [r3, #0]
    5540:	2b7f      	cmp	r3, #127	; 0x7f
    5542:	d900      	bls.n	5546 <recv+0x32>
    5544:	e099      	b.n	567a <recv+0x166>
    5546:	68bb      	ldr	r3, [r7, #8]
    5548:	2b00      	cmp	r3, #0
    554a:	d100      	bne.n	554e <recv+0x3a>
    554c:	e095      	b.n	567a <recv+0x166>
    554e:	230c      	movs	r3, #12
    5550:	18fb      	adds	r3, r7, r3
    5552:	881b      	ldrh	r3, [r3, #0]
    5554:	2b00      	cmp	r3, #0
    5556:	d100      	bne.n	555a <recv+0x46>
    5558:	e08f      	b.n	567a <recv+0x166>
    555a:	230f      	movs	r3, #15
    555c:	18fb      	adds	r3, r7, r3
    555e:	781b      	ldrb	r3, [r3, #0]
    5560:	b25b      	sxtb	r3, r3
    5562:	4a4a      	ldr	r2, [pc, #296]	; (568c <recv+0x178>)
    5564:	011b      	lsls	r3, r3, #4
    5566:	18d3      	adds	r3, r2, r3
    5568:	330a      	adds	r3, #10
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	b2db      	uxtb	r3, r3
    556e:	2b01      	cmp	r3, #1
    5570:	d000      	beq.n	5574 <recv+0x60>
    5572:	e082      	b.n	567a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5574:	231e      	movs	r3, #30
    5576:	18fb      	adds	r3, r7, r3
    5578:	2200      	movs	r2, #0
    557a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    557c:	230f      	movs	r3, #15
    557e:	18fb      	adds	r3, r7, r3
    5580:	2200      	movs	r2, #0
    5582:	569a      	ldrsb	r2, [r3, r2]
    5584:	4b41      	ldr	r3, [pc, #260]	; (568c <recv+0x178>)
    5586:	0112      	lsls	r2, r2, #4
    5588:	68b9      	ldr	r1, [r7, #8]
    558a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    558c:	230f      	movs	r3, #15
    558e:	18fb      	adds	r3, r7, r3
    5590:	781b      	ldrb	r3, [r3, #0]
    5592:	b25b      	sxtb	r3, r3
    5594:	4a3d      	ldr	r2, [pc, #244]	; (568c <recv+0x178>)
    5596:	011b      	lsls	r3, r3, #4
    5598:	18d3      	adds	r3, r2, r3
    559a:	3304      	adds	r3, #4
    559c:	220c      	movs	r2, #12
    559e:	18ba      	adds	r2, r7, r2
    55a0:	8812      	ldrh	r2, [r2, #0]
    55a2:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    55a4:	230f      	movs	r3, #15
    55a6:	18fb      	adds	r3, r7, r3
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	b25b      	sxtb	r3, r3
    55ac:	4a37      	ldr	r2, [pc, #220]	; (568c <recv+0x178>)
    55ae:	011b      	lsls	r3, r3, #4
    55b0:	18d3      	adds	r3, r2, r3
    55b2:	330c      	adds	r3, #12
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	b2db      	uxtb	r3, r3
    55b8:	2b00      	cmp	r3, #0
    55ba:	d15e      	bne.n	567a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    55bc:	231d      	movs	r3, #29
    55be:	18fb      	adds	r3, r7, r3
    55c0:	2246      	movs	r2, #70	; 0x46
    55c2:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    55c4:	230f      	movs	r3, #15
    55c6:	18fb      	adds	r3, r7, r3
    55c8:	781b      	ldrb	r3, [r3, #0]
    55ca:	b25b      	sxtb	r3, r3
    55cc:	4a2f      	ldr	r2, [pc, #188]	; (568c <recv+0x178>)
    55ce:	011b      	lsls	r3, r3, #4
    55d0:	18d3      	adds	r3, r2, r3
    55d2:	330c      	adds	r3, #12
    55d4:	2201      	movs	r2, #1
    55d6:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    55d8:	230f      	movs	r3, #15
    55da:	18fb      	adds	r3, r7, r3
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	b25b      	sxtb	r3, r3
    55e0:	4a2a      	ldr	r2, [pc, #168]	; (568c <recv+0x178>)
    55e2:	011b      	lsls	r3, r3, #4
    55e4:	18d3      	adds	r3, r2, r3
    55e6:	330b      	adds	r3, #11
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	b2db      	uxtb	r3, r3
    55ec:	001a      	movs	r2, r3
    55ee:	2301      	movs	r3, #1
    55f0:	4013      	ands	r3, r2
    55f2:	d003      	beq.n	55fc <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    55f4:	231d      	movs	r3, #29
    55f6:	18fb      	adds	r3, r7, r3
    55f8:	224d      	movs	r2, #77	; 0x4d
    55fa:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	2b00      	cmp	r3, #0
    5600:	d105      	bne.n	560e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5602:	2314      	movs	r3, #20
    5604:	18fb      	adds	r3, r7, r3
    5606:	2201      	movs	r2, #1
    5608:	4252      	negs	r2, r2
    560a:	601a      	str	r2, [r3, #0]
    560c:	e003      	b.n	5616 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    560e:	2314      	movs	r3, #20
    5610:	18fb      	adds	r3, r7, r3
    5612:	687a      	ldr	r2, [r7, #4]
    5614:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5616:	2314      	movs	r3, #20
    5618:	18fb      	adds	r3, r7, r3
    561a:	220f      	movs	r2, #15
    561c:	18ba      	adds	r2, r7, r2
    561e:	7812      	ldrb	r2, [r2, #0]
    5620:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5622:	230f      	movs	r3, #15
    5624:	18fb      	adds	r3, r7, r3
    5626:	781b      	ldrb	r3, [r3, #0]
    5628:	b25b      	sxtb	r3, r3
    562a:	4a18      	ldr	r2, [pc, #96]	; (568c <recv+0x178>)
    562c:	011b      	lsls	r3, r3, #4
    562e:	18d3      	adds	r3, r2, r3
    5630:	3306      	adds	r3, #6
    5632:	881b      	ldrh	r3, [r3, #0]
    5634:	b29a      	uxth	r2, r3
    5636:	2314      	movs	r3, #20
    5638:	18fb      	adds	r3, r7, r3
    563a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    563c:	2314      	movs	r3, #20
    563e:	18fa      	adds	r2, r7, r3
    5640:	231d      	movs	r3, #29
    5642:	18fb      	adds	r3, r7, r3
    5644:	7819      	ldrb	r1, [r3, #0]
    5646:	2300      	movs	r3, #0
    5648:	9302      	str	r3, [sp, #8]
    564a:	2300      	movs	r3, #0
    564c:	9301      	str	r3, [sp, #4]
    564e:	2300      	movs	r3, #0
    5650:	9300      	str	r3, [sp, #0]
    5652:	2308      	movs	r3, #8
    5654:	2002      	movs	r0, #2
    5656:	4c0e      	ldr	r4, [pc, #56]	; (5690 <recv+0x17c>)
    5658:	47a0      	blx	r4
    565a:	0003      	movs	r3, r0
    565c:	001a      	movs	r2, r3
    565e:	231e      	movs	r3, #30
    5660:	18fb      	adds	r3, r7, r3
    5662:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5664:	231e      	movs	r3, #30
    5666:	18fb      	adds	r3, r7, r3
    5668:	2200      	movs	r2, #0
    566a:	5e9b      	ldrsh	r3, [r3, r2]
    566c:	2b00      	cmp	r3, #0
    566e:	d004      	beq.n	567a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5670:	231e      	movs	r3, #30
    5672:	18fb      	adds	r3, r7, r3
    5674:	220e      	movs	r2, #14
    5676:	4252      	negs	r2, r2
    5678:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    567a:	231e      	movs	r3, #30
    567c:	18fb      	adds	r3, r7, r3
    567e:	2200      	movs	r2, #0
    5680:	5e9b      	ldrsh	r3, [r3, r2]
}
    5682:	0018      	movs	r0, r3
    5684:	46bd      	mov	sp, r7
    5686:	b009      	add	sp, #36	; 0x24
    5688:	bd90      	pop	{r4, r7, pc}
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	2000032c 	.word	0x2000032c
    5690:	00000f3d 	.word	0x00000f3d

00005694 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5694:	b5b0      	push	{r4, r5, r7, lr}
    5696:	b088      	sub	sp, #32
    5698:	af04      	add	r7, sp, #16
    569a:	0002      	movs	r2, r0
    569c:	1dfb      	adds	r3, r7, #7
    569e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    56a0:	230f      	movs	r3, #15
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	22fa      	movs	r2, #250	; 0xfa
    56a6:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    56a8:	4b42      	ldr	r3, [pc, #264]	; (57b4 <close+0x120>)
    56aa:	0018      	movs	r0, r3
    56ac:	4b42      	ldr	r3, [pc, #264]	; (57b8 <close+0x124>)
    56ae:	4798      	blx	r3
    56b0:	1dfb      	adds	r3, r7, #7
    56b2:	2200      	movs	r2, #0
    56b4:	569a      	ldrsb	r2, [r3, r2]
    56b6:	4b41      	ldr	r3, [pc, #260]	; (57bc <close+0x128>)
    56b8:	0011      	movs	r1, r2
    56ba:	0018      	movs	r0, r3
    56bc:	4b3e      	ldr	r3, [pc, #248]	; (57b8 <close+0x124>)
    56be:	4798      	blx	r3
    56c0:	200d      	movs	r0, #13
    56c2:	4b3f      	ldr	r3, [pc, #252]	; (57c0 <close+0x12c>)
    56c4:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    56c6:	1dfb      	adds	r3, r7, #7
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2b7f      	cmp	r3, #127	; 0x7f
    56cc:	d86a      	bhi.n	57a4 <close+0x110>
    56ce:	1dfb      	adds	r3, r7, #7
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	b25b      	sxtb	r3, r3
    56d4:	4a3b      	ldr	r2, [pc, #236]	; (57c4 <close+0x130>)
    56d6:	011b      	lsls	r3, r3, #4
    56d8:	18d3      	adds	r3, r2, r3
    56da:	330a      	adds	r3, #10
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	b2db      	uxtb	r3, r3
    56e0:	2b01      	cmp	r3, #1
    56e2:	d15f      	bne.n	57a4 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    56e4:	230e      	movs	r3, #14
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	2249      	movs	r2, #73	; 0x49
    56ea:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    56ec:	2308      	movs	r3, #8
    56ee:	18fb      	adds	r3, r7, r3
    56f0:	1dfa      	adds	r2, r7, #7
    56f2:	7812      	ldrb	r2, [r2, #0]
    56f4:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    56f6:	1dfb      	adds	r3, r7, #7
    56f8:	781b      	ldrb	r3, [r3, #0]
    56fa:	b25b      	sxtb	r3, r3
    56fc:	4a31      	ldr	r2, [pc, #196]	; (57c4 <close+0x130>)
    56fe:	011b      	lsls	r3, r3, #4
    5700:	18d3      	adds	r3, r2, r3
    5702:	3306      	adds	r3, #6
    5704:	881b      	ldrh	r3, [r3, #0]
    5706:	b29a      	uxth	r2, r3
    5708:	2308      	movs	r3, #8
    570a:	18fb      	adds	r3, r7, r3
    570c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    570e:	1dfb      	adds	r3, r7, #7
    5710:	781b      	ldrb	r3, [r3, #0]
    5712:	b25b      	sxtb	r3, r3
    5714:	4a2b      	ldr	r2, [pc, #172]	; (57c4 <close+0x130>)
    5716:	011b      	lsls	r3, r3, #4
    5718:	18d3      	adds	r3, r2, r3
    571a:	330a      	adds	r3, #10
    571c:	2200      	movs	r2, #0
    571e:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5720:	1dfb      	adds	r3, r7, #7
    5722:	781b      	ldrb	r3, [r3, #0]
    5724:	b25b      	sxtb	r3, r3
    5726:	4a27      	ldr	r2, [pc, #156]	; (57c4 <close+0x130>)
    5728:	011b      	lsls	r3, r3, #4
    572a:	18d3      	adds	r3, r2, r3
    572c:	3306      	adds	r3, #6
    572e:	2200      	movs	r2, #0
    5730:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5732:	1dfb      	adds	r3, r7, #7
    5734:	781b      	ldrb	r3, [r3, #0]
    5736:	b25b      	sxtb	r3, r3
    5738:	4a22      	ldr	r2, [pc, #136]	; (57c4 <close+0x130>)
    573a:	011b      	lsls	r3, r3, #4
    573c:	18d3      	adds	r3, r2, r3
    573e:	330b      	adds	r3, #11
    5740:	781b      	ldrb	r3, [r3, #0]
    5742:	b2db      	uxtb	r3, r3
    5744:	001a      	movs	r2, r3
    5746:	2301      	movs	r3, #1
    5748:	4013      	ands	r3, r2
    574a:	d003      	beq.n	5754 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    574c:	230e      	movs	r3, #14
    574e:	18fb      	adds	r3, r7, r3
    5750:	224e      	movs	r2, #78	; 0x4e
    5752:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5754:	230f      	movs	r3, #15
    5756:	18fc      	adds	r4, r7, r3
    5758:	2308      	movs	r3, #8
    575a:	18fa      	adds	r2, r7, r3
    575c:	230e      	movs	r3, #14
    575e:	18fb      	adds	r3, r7, r3
    5760:	7819      	ldrb	r1, [r3, #0]
    5762:	2300      	movs	r3, #0
    5764:	9302      	str	r3, [sp, #8]
    5766:	2300      	movs	r3, #0
    5768:	9301      	str	r3, [sp, #4]
    576a:	2300      	movs	r3, #0
    576c:	9300      	str	r3, [sp, #0]
    576e:	2304      	movs	r3, #4
    5770:	2002      	movs	r0, #2
    5772:	4d15      	ldr	r5, [pc, #84]	; (57c8 <close+0x134>)
    5774:	47a8      	blx	r5
    5776:	0003      	movs	r3, r0
    5778:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    577a:	230f      	movs	r3, #15
    577c:	18fb      	adds	r3, r7, r3
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	b25b      	sxtb	r3, r3
    5782:	2b00      	cmp	r3, #0
    5784:	d003      	beq.n	578e <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    5786:	230f      	movs	r3, #15
    5788:	18fb      	adds	r3, r7, r3
    578a:	22f7      	movs	r2, #247	; 0xf7
    578c:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    578e:	1dfb      	adds	r3, r7, #7
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	b25b      	sxtb	r3, r3
    5794:	011a      	lsls	r2, r3, #4
    5796:	4b0b      	ldr	r3, [pc, #44]	; (57c4 <close+0x130>)
    5798:	18d3      	adds	r3, r2, r3
    579a:	2210      	movs	r2, #16
    579c:	2100      	movs	r1, #0
    579e:	0018      	movs	r0, r3
    57a0:	4b0a      	ldr	r3, [pc, #40]	; (57cc <close+0x138>)
    57a2:	4798      	blx	r3
	}
	return s8Ret;
    57a4:	230f      	movs	r3, #15
    57a6:	18fb      	adds	r3, r7, r3
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	b25b      	sxtb	r3, r3
}
    57ac:	0018      	movs	r0, r3
    57ae:	46bd      	mov	sp, r7
    57b0:	b004      	add	sp, #16
    57b2:	bdb0      	pop	{r4, r5, r7, pc}
    57b4:	0000f4c0 	.word	0x0000f4c0
    57b8:	0000cf25 	.word	0x0000cf25
    57bc:	0000f4fc 	.word	0x0000f4fc
    57c0:	0000cf59 	.word	0x0000cf59
    57c4:	2000032c 	.word	0x2000032c
    57c8:	00000f3d 	.word	0x00000f3d
    57cc:	00000cdd 	.word	0x00000cdd

000057d0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    57d0:	b580      	push	{r7, lr}
    57d2:	b086      	sub	sp, #24
    57d4:	af00      	add	r7, sp, #0
    57d6:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    57d8:	2300      	movs	r3, #0
    57da:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    57dc:	2317      	movs	r3, #23
    57de:	18fb      	adds	r3, r7, r3
    57e0:	2200      	movs	r2, #0
    57e2:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    57e4:	2316      	movs	r3, #22
    57e6:	18fb      	adds	r3, r7, r3
    57e8:	2200      	movs	r2, #0
    57ea:	701a      	strb	r2, [r3, #0]
    57ec:	e060      	b.n	58b0 <nmi_inet_addr+0xe0>
	{
		j = 0;
    57ee:	2315      	movs	r3, #21
    57f0:	18fb      	adds	r3, r7, r3
    57f2:	2200      	movs	r2, #0
    57f4:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    57f6:	2314      	movs	r3, #20
    57f8:	18fb      	adds	r3, r7, r3
    57fa:	687a      	ldr	r2, [r7, #4]
    57fc:	7812      	ldrb	r2, [r2, #0]
    57fe:	701a      	strb	r2, [r3, #0]
			++j;
    5800:	2315      	movs	r3, #21
    5802:	18fb      	adds	r3, r7, r3
    5804:	2215      	movs	r2, #21
    5806:	18ba      	adds	r2, r7, r2
    5808:	7812      	ldrb	r2, [r2, #0]
    580a:	3201      	adds	r2, #1
    580c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    580e:	2315      	movs	r3, #21
    5810:	18fb      	adds	r3, r7, r3
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2b04      	cmp	r3, #4
    5816:	d901      	bls.n	581c <nmi_inet_addr+0x4c>
			{
				return 0;
    5818:	2300      	movs	r3, #0
    581a:	e057      	b.n	58cc <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    581c:	2314      	movs	r3, #20
    581e:	18fb      	adds	r3, r7, r3
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	2b2e      	cmp	r3, #46	; 0x2e
    5824:	d004      	beq.n	5830 <nmi_inet_addr+0x60>
    5826:	2314      	movs	r3, #20
    5828:	18fb      	adds	r3, r7, r3
    582a:	781b      	ldrb	r3, [r3, #0]
    582c:	2b00      	cmp	r3, #0
    582e:	d10d      	bne.n	584c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5830:	2316      	movs	r3, #22
    5832:	18fb      	adds	r3, r7, r3
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	220c      	movs	r2, #12
    5838:	18ba      	adds	r2, r7, r2
    583a:	2117      	movs	r1, #23
    583c:	1879      	adds	r1, r7, r1
    583e:	7809      	ldrb	r1, [r1, #0]
    5840:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    5842:	2317      	movs	r3, #23
    5844:	18fb      	adds	r3, r7, r3
    5846:	2200      	movs	r2, #0
    5848:	701a      	strb	r2, [r3, #0]
    584a:	e01d      	b.n	5888 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    584c:	2314      	movs	r3, #20
    584e:	18fb      	adds	r3, r7, r3
    5850:	781b      	ldrb	r3, [r3, #0]
    5852:	2b2f      	cmp	r3, #47	; 0x2f
    5854:	d916      	bls.n	5884 <nmi_inet_addr+0xb4>
    5856:	2314      	movs	r3, #20
    5858:	18fb      	adds	r3, r7, r3
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	2b39      	cmp	r3, #57	; 0x39
    585e:	d811      	bhi.n	5884 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    5860:	2317      	movs	r3, #23
    5862:	18fb      	adds	r3, r7, r3
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	1c1a      	adds	r2, r3, #0
    5868:	0092      	lsls	r2, r2, #2
    586a:	18d3      	adds	r3, r2, r3
    586c:	18db      	adds	r3, r3, r3
    586e:	b2da      	uxtb	r2, r3
    5870:	2314      	movs	r3, #20
    5872:	18fb      	adds	r3, r7, r3
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	18d3      	adds	r3, r2, r3
    5878:	b2da      	uxtb	r2, r3
    587a:	2317      	movs	r3, #23
    587c:	18fb      	adds	r3, r7, r3
    587e:	3a30      	subs	r2, #48	; 0x30
    5880:	701a      	strb	r2, [r3, #0]
    5882:	e001      	b.n	5888 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    5884:	2300      	movs	r3, #0
    5886:	e021      	b.n	58cc <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    5888:	687b      	ldr	r3, [r7, #4]
    588a:	3301      	adds	r3, #1
    588c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    588e:	2314      	movs	r3, #20
    5890:	18fb      	adds	r3, r7, r3
    5892:	781b      	ldrb	r3, [r3, #0]
    5894:	2b2e      	cmp	r3, #46	; 0x2e
    5896:	d004      	beq.n	58a2 <nmi_inet_addr+0xd2>
    5898:	2314      	movs	r3, #20
    589a:	18fb      	adds	r3, r7, r3
    589c:	781b      	ldrb	r3, [r3, #0]
    589e:	2b00      	cmp	r3, #0
    58a0:	d1a9      	bne.n	57f6 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    58a2:	2316      	movs	r3, #22
    58a4:	18fb      	adds	r3, r7, r3
    58a6:	2216      	movs	r2, #22
    58a8:	18ba      	adds	r2, r7, r2
    58aa:	7812      	ldrb	r2, [r2, #0]
    58ac:	3201      	adds	r2, #1
    58ae:	701a      	strb	r2, [r3, #0]
    58b0:	2316      	movs	r3, #22
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	781b      	ldrb	r3, [r3, #0]
    58b6:	2b03      	cmp	r3, #3
    58b8:	d999      	bls.n	57ee <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    58ba:	230c      	movs	r3, #12
    58bc:	18f9      	adds	r1, r7, r3
    58be:	2310      	movs	r3, #16
    58c0:	18fb      	adds	r3, r7, r3
    58c2:	2204      	movs	r2, #4
    58c4:	0018      	movs	r0, r3
    58c6:	4b03      	ldr	r3, [pc, #12]	; (58d4 <nmi_inet_addr+0x104>)
    58c8:	4798      	blx	r3
	return u32IP;
    58ca:	693b      	ldr	r3, [r7, #16]
}
    58cc:	0018      	movs	r0, r3
    58ce:	46bd      	mov	sp, r7
    58d0:	b006      	add	sp, #24
    58d2:	bd80      	pop	{r7, pc}
    58d4:	00000ca1 	.word	0x00000ca1

000058d8 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    58d8:	b5b0      	push	{r4, r5, r7, lr}
    58da:	b088      	sub	sp, #32
    58dc:	af04      	add	r7, sp, #16
    58de:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    58e0:	230f      	movs	r3, #15
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	22fa      	movs	r2, #250	; 0xfa
    58e6:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	0018      	movs	r0, r3
    58ec:	4b14      	ldr	r3, [pc, #80]	; (5940 <gethostbyname+0x68>)
    58ee:	4798      	blx	r3
    58f0:	0003      	movs	r3, r0
    58f2:	001a      	movs	r2, r3
    58f4:	230e      	movs	r3, #14
    58f6:	18fb      	adds	r3, r7, r3
    58f8:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    58fa:	230e      	movs	r3, #14
    58fc:	18fb      	adds	r3, r7, r3
    58fe:	781b      	ldrb	r3, [r3, #0]
    5900:	2b40      	cmp	r3, #64	; 0x40
    5902:	d815      	bhi.n	5930 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5904:	230e      	movs	r3, #14
    5906:	18fb      	adds	r3, r7, r3
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	b29b      	uxth	r3, r3
    590c:	3301      	adds	r3, #1
    590e:	b299      	uxth	r1, r3
    5910:	230f      	movs	r3, #15
    5912:	18fc      	adds	r4, r7, r3
    5914:	687a      	ldr	r2, [r7, #4]
    5916:	2300      	movs	r3, #0
    5918:	9302      	str	r3, [sp, #8]
    591a:	2300      	movs	r3, #0
    591c:	9301      	str	r3, [sp, #4]
    591e:	2300      	movs	r3, #0
    5920:	9300      	str	r3, [sp, #0]
    5922:	000b      	movs	r3, r1
    5924:	214a      	movs	r1, #74	; 0x4a
    5926:	2002      	movs	r0, #2
    5928:	4d06      	ldr	r5, [pc, #24]	; (5944 <gethostbyname+0x6c>)
    592a:	47a8      	blx	r5
    592c:	0003      	movs	r3, r0
    592e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5930:	230f      	movs	r3, #15
    5932:	18fb      	adds	r3, r7, r3
    5934:	781b      	ldrb	r3, [r3, #0]
    5936:	b25b      	sxtb	r3, r3
}
    5938:	0018      	movs	r0, r3
    593a:	46bd      	mov	sp, r7
    593c:	b004      	add	sp, #16
    593e:	bdb0      	pop	{r4, r5, r7, pc}
    5940:	00000d1b 	.word	0x00000d1b
    5944:	00000f3d 	.word	0x00000f3d

00005948 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5948:	b580      	push	{r7, lr}
    594a:	b082      	sub	sp, #8
    594c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    594e:	003b      	movs	r3, r7
    5950:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5952:	687b      	ldr	r3, [r7, #4]
    5954:	22b9      	movs	r2, #185	; 0xb9
    5956:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5958:	4b13      	ldr	r3, [pc, #76]	; (59a8 <spi_flash_enter_low_power_mode+0x60>)
    595a:	2100      	movs	r1, #0
    595c:	0018      	movs	r0, r3
    595e:	4b13      	ldr	r3, [pc, #76]	; (59ac <spi_flash_enter_low_power_mode+0x64>)
    5960:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	781b      	ldrb	r3, [r3, #0]
    5966:	001a      	movs	r2, r3
    5968:	4b11      	ldr	r3, [pc, #68]	; (59b0 <spi_flash_enter_low_power_mode+0x68>)
    596a:	0011      	movs	r1, r2
    596c:	0018      	movs	r0, r3
    596e:	4b0f      	ldr	r3, [pc, #60]	; (59ac <spi_flash_enter_low_power_mode+0x64>)
    5970:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5972:	4b10      	ldr	r3, [pc, #64]	; (59b4 <spi_flash_enter_low_power_mode+0x6c>)
    5974:	2101      	movs	r1, #1
    5976:	0018      	movs	r0, r3
    5978:	4b0c      	ldr	r3, [pc, #48]	; (59ac <spi_flash_enter_low_power_mode+0x64>)
    597a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    597c:	4b0e      	ldr	r3, [pc, #56]	; (59b8 <spi_flash_enter_low_power_mode+0x70>)
    597e:	2100      	movs	r1, #0
    5980:	0018      	movs	r0, r3
    5982:	4b0a      	ldr	r3, [pc, #40]	; (59ac <spi_flash_enter_low_power_mode+0x64>)
    5984:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5986:	4b0d      	ldr	r3, [pc, #52]	; (59bc <spi_flash_enter_low_power_mode+0x74>)
    5988:	2181      	movs	r1, #129	; 0x81
    598a:	0018      	movs	r0, r3
    598c:	4b07      	ldr	r3, [pc, #28]	; (59ac <spi_flash_enter_low_power_mode+0x64>)
    598e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5990:	46c0      	nop			; (mov r8, r8)
    5992:	4b0b      	ldr	r3, [pc, #44]	; (59c0 <spi_flash_enter_low_power_mode+0x78>)
    5994:	0018      	movs	r0, r3
    5996:	4b0b      	ldr	r3, [pc, #44]	; (59c4 <spi_flash_enter_low_power_mode+0x7c>)
    5998:	4798      	blx	r3
    599a:	0003      	movs	r3, r0
    599c:	2b01      	cmp	r3, #1
    599e:	d1f8      	bne.n	5992 <spi_flash_enter_low_power_mode+0x4a>
}
    59a0:	46c0      	nop			; (mov r8, r8)
    59a2:	46bd      	mov	sp, r7
    59a4:	b002      	add	sp, #8
    59a6:	bd80      	pop	{r7, pc}
    59a8:	00010208 	.word	0x00010208
    59ac:	00002d3d 	.word	0x00002d3d
    59b0:	0001020c 	.word	0x0001020c
    59b4:	00010214 	.word	0x00010214
    59b8:	0001021c 	.word	0x0001021c
    59bc:	00010204 	.word	0x00010204
    59c0:	00010218 	.word	0x00010218
    59c4:	00002cf9 	.word	0x00002cf9

000059c8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    59c8:	b580      	push	{r7, lr}
    59ca:	b082      	sub	sp, #8
    59cc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    59ce:	003b      	movs	r3, r7
    59d0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    59d2:	687b      	ldr	r3, [r7, #4]
    59d4:	22ab      	movs	r2, #171	; 0xab
    59d6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    59d8:	4b13      	ldr	r3, [pc, #76]	; (5a28 <spi_flash_leave_low_power_mode+0x60>)
    59da:	2100      	movs	r1, #0
    59dc:	0018      	movs	r0, r3
    59de:	4b13      	ldr	r3, [pc, #76]	; (5a2c <spi_flash_leave_low_power_mode+0x64>)
    59e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	781b      	ldrb	r3, [r3, #0]
    59e6:	001a      	movs	r2, r3
    59e8:	4b11      	ldr	r3, [pc, #68]	; (5a30 <spi_flash_leave_low_power_mode+0x68>)
    59ea:	0011      	movs	r1, r2
    59ec:	0018      	movs	r0, r3
    59ee:	4b0f      	ldr	r3, [pc, #60]	; (5a2c <spi_flash_leave_low_power_mode+0x64>)
    59f0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    59f2:	4b10      	ldr	r3, [pc, #64]	; (5a34 <spi_flash_leave_low_power_mode+0x6c>)
    59f4:	2101      	movs	r1, #1
    59f6:	0018      	movs	r0, r3
    59f8:	4b0c      	ldr	r3, [pc, #48]	; (5a2c <spi_flash_leave_low_power_mode+0x64>)
    59fa:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    59fc:	4b0e      	ldr	r3, [pc, #56]	; (5a38 <spi_flash_leave_low_power_mode+0x70>)
    59fe:	2100      	movs	r1, #0
    5a00:	0018      	movs	r0, r3
    5a02:	4b0a      	ldr	r3, [pc, #40]	; (5a2c <spi_flash_leave_low_power_mode+0x64>)
    5a04:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    5a06:	4b0d      	ldr	r3, [pc, #52]	; (5a3c <spi_flash_leave_low_power_mode+0x74>)
    5a08:	2181      	movs	r1, #129	; 0x81
    5a0a:	0018      	movs	r0, r3
    5a0c:	4b07      	ldr	r3, [pc, #28]	; (5a2c <spi_flash_leave_low_power_mode+0x64>)
    5a0e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5a10:	46c0      	nop			; (mov r8, r8)
    5a12:	4b0b      	ldr	r3, [pc, #44]	; (5a40 <spi_flash_leave_low_power_mode+0x78>)
    5a14:	0018      	movs	r0, r3
    5a16:	4b0b      	ldr	r3, [pc, #44]	; (5a44 <spi_flash_leave_low_power_mode+0x7c>)
    5a18:	4798      	blx	r3
    5a1a:	0003      	movs	r3, r0
    5a1c:	2b01      	cmp	r3, #1
    5a1e:	d1f8      	bne.n	5a12 <spi_flash_leave_low_power_mode+0x4a>
}
    5a20:	46c0      	nop			; (mov r8, r8)
    5a22:	46bd      	mov	sp, r7
    5a24:	b002      	add	sp, #8
    5a26:	bd80      	pop	{r7, pc}
    5a28:	00010208 	.word	0x00010208
    5a2c:	00002d3d 	.word	0x00002d3d
    5a30:	0001020c 	.word	0x0001020c
    5a34:	00010214 	.word	0x00010214
    5a38:	0001021c 	.word	0x0001021c
    5a3c:	00010204 	.word	0x00010204
    5a40:	00010218 	.word	0x00010218
    5a44:	00002cf9 	.word	0x00002cf9

00005a48 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5a48:	b590      	push	{r4, r7, lr}
    5a4a:	b085      	sub	sp, #20
    5a4c:	af00      	add	r7, sp, #0
    5a4e:	0002      	movs	r2, r0
    5a50:	1dfb      	adds	r3, r7, #7
    5a52:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5a54:	230f      	movs	r3, #15
    5a56:	18fb      	adds	r3, r7, r3
    5a58:	2200      	movs	r2, #0
    5a5a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5a5c:	4b24      	ldr	r3, [pc, #144]	; (5af0 <spi_flash_enable+0xa8>)
    5a5e:	4798      	blx	r3
    5a60:	0003      	movs	r3, r0
    5a62:	051b      	lsls	r3, r3, #20
    5a64:	0d1b      	lsrs	r3, r3, #20
    5a66:	4a23      	ldr	r2, [pc, #140]	; (5af4 <spi_flash_enable+0xac>)
    5a68:	4293      	cmp	r3, r2
    5a6a:	d938      	bls.n	5ade <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5a6c:	230f      	movs	r3, #15
    5a6e:	18fc      	adds	r4, r7, r3
    5a70:	2308      	movs	r3, #8
    5a72:	18fb      	adds	r3, r7, r3
    5a74:	4a20      	ldr	r2, [pc, #128]	; (5af8 <spi_flash_enable+0xb0>)
    5a76:	0019      	movs	r1, r3
    5a78:	0010      	movs	r0, r2
    5a7a:	4b20      	ldr	r3, [pc, #128]	; (5afc <spi_flash_enable+0xb4>)
    5a7c:	4798      	blx	r3
    5a7e:	0003      	movs	r3, r0
    5a80:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    5a82:	230f      	movs	r3, #15
    5a84:	18fb      	adds	r3, r7, r3
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	b25b      	sxtb	r3, r3
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d126      	bne.n	5adc <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5a8e:	68bb      	ldr	r3, [r7, #8]
    5a90:	4a1b      	ldr	r2, [pc, #108]	; (5b00 <spi_flash_enable+0xb8>)
    5a92:	4013      	ands	r3, r2
    5a94:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5a96:	68bb      	ldr	r3, [r7, #8]
    5a98:	4a1a      	ldr	r2, [pc, #104]	; (5b04 <spi_flash_enable+0xbc>)
    5a9a:	4313      	orrs	r3, r2
    5a9c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5a9e:	68bb      	ldr	r3, [r7, #8]
    5aa0:	4a15      	ldr	r2, [pc, #84]	; (5af8 <spi_flash_enable+0xb0>)
    5aa2:	0019      	movs	r1, r3
    5aa4:	0010      	movs	r0, r2
    5aa6:	4b18      	ldr	r3, [pc, #96]	; (5b08 <spi_flash_enable+0xc0>)
    5aa8:	4798      	blx	r3
		if(enable) {
    5aaa:	1dfb      	adds	r3, r7, #7
    5aac:	781b      	ldrb	r3, [r3, #0]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d002      	beq.n	5ab8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    5ab2:	4b16      	ldr	r3, [pc, #88]	; (5b0c <spi_flash_enable+0xc4>)
    5ab4:	4798      	blx	r3
    5ab6:	e001      	b.n	5abc <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5ab8:	4b15      	ldr	r3, [pc, #84]	; (5b10 <spi_flash_enable+0xc8>)
    5aba:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5abc:	68bb      	ldr	r3, [r7, #8]
    5abe:	4a10      	ldr	r2, [pc, #64]	; (5b00 <spi_flash_enable+0xb8>)
    5ac0:	4013      	ands	r3, r2
    5ac2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5ac4:	68bb      	ldr	r3, [r7, #8]
    5ac6:	2280      	movs	r2, #128	; 0x80
    5ac8:	0252      	lsls	r2, r2, #9
    5aca:	4313      	orrs	r3, r2
    5acc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5ace:	68bb      	ldr	r3, [r7, #8]
    5ad0:	4a09      	ldr	r2, [pc, #36]	; (5af8 <spi_flash_enable+0xb0>)
    5ad2:	0019      	movs	r1, r3
    5ad4:	0010      	movs	r0, r2
    5ad6:	4b0c      	ldr	r3, [pc, #48]	; (5b08 <spi_flash_enable+0xc0>)
    5ad8:	4798      	blx	r3
    5ada:	e000      	b.n	5ade <spi_flash_enable+0x96>
			goto ERR1;
    5adc:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5ade:	230f      	movs	r3, #15
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	b25b      	sxtb	r3, r3
}
    5ae6:	0018      	movs	r0, r3
    5ae8:	46bd      	mov	sp, r7
    5aea:	b005      	add	sp, #20
    5aec:	bd90      	pop	{r4, r7, pc}
    5aee:	46c0      	nop			; (mov r8, r8)
    5af0:	0000261d 	.word	0x0000261d
    5af4:	0000039f 	.word	0x0000039f
    5af8:	00001410 	.word	0x00001410
    5afc:	00002d19 	.word	0x00002d19
    5b00:	f8888fff 	.word	0xf8888fff
    5b04:	01111000 	.word	0x01111000
    5b08:	00002d3d 	.word	0x00002d3d
    5b0c:	000059c9 	.word	0x000059c9
    5b10:	00005949 	.word	0x00005949

00005b14 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5b14:	b580      	push	{r7, lr}
    5b16:	b084      	sub	sp, #16
    5b18:	af00      	add	r7, sp, #0
    5b1a:	0002      	movs	r2, r0
    5b1c:	1dfb      	adds	r3, r7, #7
    5b1e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5b20:	230f      	movs	r3, #15
    5b22:	18fb      	adds	r3, r7, r3
    5b24:	1dfa      	adds	r2, r7, #7
    5b26:	7812      	ldrb	r2, [r2, #0]
    5b28:	0952      	lsrs	r2, r2, #5
    5b2a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5b2c:	230f      	movs	r3, #15
    5b2e:	18fb      	adds	r3, r7, r3
    5b30:	781b      	ldrb	r3, [r3, #0]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d10c      	bne.n	5b50 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5b36:	4b09      	ldr	r3, [pc, #36]	; (5b5c <_extint_get_eic_from_channel+0x48>)
    5b38:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5b3a:	230f      	movs	r3, #15
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	781b      	ldrb	r3, [r3, #0]
    5b40:	009b      	lsls	r3, r3, #2
    5b42:	2210      	movs	r2, #16
    5b44:	4694      	mov	ip, r2
    5b46:	44bc      	add	ip, r7
    5b48:	4463      	add	r3, ip
    5b4a:	3b08      	subs	r3, #8
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	e000      	b.n	5b52 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5b50:	2300      	movs	r3, #0
	}
}
    5b52:	0018      	movs	r0, r3
    5b54:	46bd      	mov	sp, r7
    5b56:	b004      	add	sp, #16
    5b58:	bd80      	pop	{r7, pc}
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	40001800 	.word	0x40001800

00005b60 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5b60:	b580      	push	{r7, lr}
    5b62:	b084      	sub	sp, #16
    5b64:	af00      	add	r7, sp, #0
    5b66:	0002      	movs	r2, r0
    5b68:	1dfb      	adds	r3, r7, #7
    5b6a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5b6c:	1dfb      	adds	r3, r7, #7
    5b6e:	781b      	ldrb	r3, [r3, #0]
    5b70:	0018      	movs	r0, r3
    5b72:	4b0b      	ldr	r3, [pc, #44]	; (5ba0 <extint_chan_is_detected+0x40>)
    5b74:	4798      	blx	r3
    5b76:	0003      	movs	r3, r0
    5b78:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5b7a:	1dfb      	adds	r3, r7, #7
    5b7c:	781b      	ldrb	r3, [r3, #0]
    5b7e:	221f      	movs	r2, #31
    5b80:	4013      	ands	r3, r2
    5b82:	2201      	movs	r2, #1
    5b84:	409a      	lsls	r2, r3
    5b86:	0013      	movs	r3, r2
    5b88:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5b8a:	68fb      	ldr	r3, [r7, #12]
    5b8c:	691b      	ldr	r3, [r3, #16]
    5b8e:	68ba      	ldr	r2, [r7, #8]
    5b90:	4013      	ands	r3, r2
    5b92:	1e5a      	subs	r2, r3, #1
    5b94:	4193      	sbcs	r3, r2
    5b96:	b2db      	uxtb	r3, r3
}
    5b98:	0018      	movs	r0, r3
    5b9a:	46bd      	mov	sp, r7
    5b9c:	b004      	add	sp, #16
    5b9e:	bd80      	pop	{r7, pc}
    5ba0:	00005b15 	.word	0x00005b15

00005ba4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5ba4:	b580      	push	{r7, lr}
    5ba6:	b084      	sub	sp, #16
    5ba8:	af00      	add	r7, sp, #0
    5baa:	0002      	movs	r2, r0
    5bac:	1dfb      	adds	r3, r7, #7
    5bae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5bb0:	1dfb      	adds	r3, r7, #7
    5bb2:	781b      	ldrb	r3, [r3, #0]
    5bb4:	0018      	movs	r0, r3
    5bb6:	4b09      	ldr	r3, [pc, #36]	; (5bdc <extint_chan_clear_detected+0x38>)
    5bb8:	4798      	blx	r3
    5bba:	0003      	movs	r3, r0
    5bbc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5bbe:	1dfb      	adds	r3, r7, #7
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	221f      	movs	r2, #31
    5bc4:	4013      	ands	r3, r2
    5bc6:	2201      	movs	r2, #1
    5bc8:	409a      	lsls	r2, r3
    5bca:	0013      	movs	r3, r2
    5bcc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5bce:	68fb      	ldr	r3, [r7, #12]
    5bd0:	68ba      	ldr	r2, [r7, #8]
    5bd2:	611a      	str	r2, [r3, #16]
}
    5bd4:	46c0      	nop			; (mov r8, r8)
    5bd6:	46bd      	mov	sp, r7
    5bd8:	b004      	add	sp, #16
    5bda:	bd80      	pop	{r7, pc}
    5bdc:	00005b15 	.word	0x00005b15

00005be0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5be0:	b580      	push	{r7, lr}
    5be2:	b082      	sub	sp, #8
    5be4:	af00      	add	r7, sp, #0
    5be6:	6078      	str	r0, [r7, #4]
    5be8:	0008      	movs	r0, r1
    5bea:	0011      	movs	r1, r2
    5bec:	1cfb      	adds	r3, r7, #3
    5bee:	1c02      	adds	r2, r0, #0
    5bf0:	701a      	strb	r2, [r3, #0]
    5bf2:	1cbb      	adds	r3, r7, #2
    5bf4:	1c0a      	adds	r2, r1, #0
    5bf6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5bf8:	1cbb      	adds	r3, r7, #2
    5bfa:	781b      	ldrb	r3, [r3, #0]
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	d001      	beq.n	5c04 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5c00:	2317      	movs	r3, #23
    5c02:	e019      	b.n	5c38 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5c04:	1cfb      	adds	r3, r7, #3
    5c06:	781a      	ldrb	r2, [r3, #0]
    5c08:	4b0d      	ldr	r3, [pc, #52]	; (5c40 <extint_register_callback+0x60>)
    5c0a:	0092      	lsls	r2, r2, #2
    5c0c:	58d3      	ldr	r3, [r2, r3]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d107      	bne.n	5c22 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5c12:	1cfb      	adds	r3, r7, #3
    5c14:	781a      	ldrb	r2, [r3, #0]
    5c16:	4b0a      	ldr	r3, [pc, #40]	; (5c40 <extint_register_callback+0x60>)
    5c18:	0092      	lsls	r2, r2, #2
    5c1a:	6879      	ldr	r1, [r7, #4]
    5c1c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5c1e:	2300      	movs	r3, #0
    5c20:	e00a      	b.n	5c38 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5c22:	1cfb      	adds	r3, r7, #3
    5c24:	781a      	ldrb	r2, [r3, #0]
    5c26:	4b06      	ldr	r3, [pc, #24]	; (5c40 <extint_register_callback+0x60>)
    5c28:	0092      	lsls	r2, r2, #2
    5c2a:	58d2      	ldr	r2, [r2, r3]
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	429a      	cmp	r2, r3
    5c30:	d101      	bne.n	5c36 <extint_register_callback+0x56>
		return STATUS_OK;
    5c32:	2300      	movs	r3, #0
    5c34:	e000      	b.n	5c38 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5c36:	231d      	movs	r3, #29
}
    5c38:	0018      	movs	r0, r3
    5c3a:	46bd      	mov	sp, r7
    5c3c:	b002      	add	sp, #8
    5c3e:	bd80      	pop	{r7, pc}
    5c40:	200003ec 	.word	0x200003ec

00005c44 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5c44:	b580      	push	{r7, lr}
    5c46:	b084      	sub	sp, #16
    5c48:	af00      	add	r7, sp, #0
    5c4a:	0002      	movs	r2, r0
    5c4c:	1dfb      	adds	r3, r7, #7
    5c4e:	701a      	strb	r2, [r3, #0]
    5c50:	1dbb      	adds	r3, r7, #6
    5c52:	1c0a      	adds	r2, r1, #0
    5c54:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5c56:	1dbb      	adds	r3, r7, #6
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d10e      	bne.n	5c7c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5c5e:	1dfb      	adds	r3, r7, #7
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	0018      	movs	r0, r3
    5c64:	4b08      	ldr	r3, [pc, #32]	; (5c88 <extint_chan_enable_callback+0x44>)
    5c66:	4798      	blx	r3
    5c68:	0003      	movs	r3, r0
    5c6a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5c6c:	1dfb      	adds	r3, r7, #7
    5c6e:	781b      	ldrb	r3, [r3, #0]
    5c70:	2201      	movs	r2, #1
    5c72:	409a      	lsls	r2, r3
    5c74:	68fb      	ldr	r3, [r7, #12]
    5c76:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5c78:	2300      	movs	r3, #0
    5c7a:	e000      	b.n	5c7e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5c7c:	2317      	movs	r3, #23
}
    5c7e:	0018      	movs	r0, r3
    5c80:	46bd      	mov	sp, r7
    5c82:	b004      	add	sp, #16
    5c84:	bd80      	pop	{r7, pc}
    5c86:	46c0      	nop			; (mov r8, r8)
    5c88:	00005b15 	.word	0x00005b15

00005c8c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5c8c:	b580      	push	{r7, lr}
    5c8e:	b084      	sub	sp, #16
    5c90:	af00      	add	r7, sp, #0
    5c92:	0002      	movs	r2, r0
    5c94:	1dfb      	adds	r3, r7, #7
    5c96:	701a      	strb	r2, [r3, #0]
    5c98:	1dbb      	adds	r3, r7, #6
    5c9a:	1c0a      	adds	r2, r1, #0
    5c9c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5c9e:	1dbb      	adds	r3, r7, #6
    5ca0:	781b      	ldrb	r3, [r3, #0]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d10e      	bne.n	5cc4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5ca6:	1dfb      	adds	r3, r7, #7
    5ca8:	781b      	ldrb	r3, [r3, #0]
    5caa:	0018      	movs	r0, r3
    5cac:	4b08      	ldr	r3, [pc, #32]	; (5cd0 <extint_chan_disable_callback+0x44>)
    5cae:	4798      	blx	r3
    5cb0:	0003      	movs	r3, r0
    5cb2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5cb4:	1dfb      	adds	r3, r7, #7
    5cb6:	781b      	ldrb	r3, [r3, #0]
    5cb8:	2201      	movs	r2, #1
    5cba:	409a      	lsls	r2, r3
    5cbc:	68fb      	ldr	r3, [r7, #12]
    5cbe:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5cc0:	2300      	movs	r3, #0
    5cc2:	e000      	b.n	5cc6 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5cc4:	2317      	movs	r3, #23
}
    5cc6:	0018      	movs	r0, r3
    5cc8:	46bd      	mov	sp, r7
    5cca:	b004      	add	sp, #16
    5ccc:	bd80      	pop	{r7, pc}
    5cce:	46c0      	nop			; (mov r8, r8)
    5cd0:	00005b15 	.word	0x00005b15

00005cd4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5cd4:	b580      	push	{r7, lr}
    5cd6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5cd8:	4b15      	ldr	r3, [pc, #84]	; (5d30 <EIC_Handler+0x5c>)
    5cda:	2200      	movs	r2, #0
    5cdc:	701a      	strb	r2, [r3, #0]
    5cde:	e020      	b.n	5d22 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5ce0:	4b13      	ldr	r3, [pc, #76]	; (5d30 <EIC_Handler+0x5c>)
    5ce2:	781b      	ldrb	r3, [r3, #0]
    5ce4:	0018      	movs	r0, r3
    5ce6:	4b13      	ldr	r3, [pc, #76]	; (5d34 <EIC_Handler+0x60>)
    5ce8:	4798      	blx	r3
    5cea:	1e03      	subs	r3, r0, #0
    5cec:	d013      	beq.n	5d16 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5cee:	4b10      	ldr	r3, [pc, #64]	; (5d30 <EIC_Handler+0x5c>)
    5cf0:	781b      	ldrb	r3, [r3, #0]
    5cf2:	0018      	movs	r0, r3
    5cf4:	4b10      	ldr	r3, [pc, #64]	; (5d38 <EIC_Handler+0x64>)
    5cf6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5cf8:	4b0d      	ldr	r3, [pc, #52]	; (5d30 <EIC_Handler+0x5c>)
    5cfa:	781b      	ldrb	r3, [r3, #0]
    5cfc:	001a      	movs	r2, r3
    5cfe:	4b0f      	ldr	r3, [pc, #60]	; (5d3c <EIC_Handler+0x68>)
    5d00:	0092      	lsls	r2, r2, #2
    5d02:	58d3      	ldr	r3, [r2, r3]
    5d04:	2b00      	cmp	r3, #0
    5d06:	d006      	beq.n	5d16 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5d08:	4b09      	ldr	r3, [pc, #36]	; (5d30 <EIC_Handler+0x5c>)
    5d0a:	781b      	ldrb	r3, [r3, #0]
    5d0c:	001a      	movs	r2, r3
    5d0e:	4b0b      	ldr	r3, [pc, #44]	; (5d3c <EIC_Handler+0x68>)
    5d10:	0092      	lsls	r2, r2, #2
    5d12:	58d3      	ldr	r3, [r2, r3]
    5d14:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5d16:	4b06      	ldr	r3, [pc, #24]	; (5d30 <EIC_Handler+0x5c>)
    5d18:	781b      	ldrb	r3, [r3, #0]
    5d1a:	3301      	adds	r3, #1
    5d1c:	b2da      	uxtb	r2, r3
    5d1e:	4b04      	ldr	r3, [pc, #16]	; (5d30 <EIC_Handler+0x5c>)
    5d20:	701a      	strb	r2, [r3, #0]
    5d22:	4b03      	ldr	r3, [pc, #12]	; (5d30 <EIC_Handler+0x5c>)
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	2b0f      	cmp	r3, #15
    5d28:	d9da      	bls.n	5ce0 <EIC_Handler+0xc>
			}
		}
	}
}
    5d2a:	46c0      	nop			; (mov r8, r8)
    5d2c:	46bd      	mov	sp, r7
    5d2e:	bd80      	pop	{r7, pc}
    5d30:	200003e8 	.word	0x200003e8
    5d34:	00005b61 	.word	0x00005b61
    5d38:	00005ba5 	.word	0x00005ba5
    5d3c:	200003ec 	.word	0x200003ec

00005d40 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5d40:	b580      	push	{r7, lr}
    5d42:	b082      	sub	sp, #8
    5d44:	af00      	add	r7, sp, #0
    5d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	2200      	movs	r2, #0
    5d4c:	701a      	strb	r2, [r3, #0]
}
    5d4e:	46c0      	nop			; (mov r8, r8)
    5d50:	46bd      	mov	sp, r7
    5d52:	b002      	add	sp, #8
    5d54:	bd80      	pop	{r7, pc}
	...

00005d58 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5d58:	b580      	push	{r7, lr}
    5d5a:	b082      	sub	sp, #8
    5d5c:	af00      	add	r7, sp, #0
    5d5e:	0002      	movs	r2, r0
    5d60:	6039      	str	r1, [r7, #0]
    5d62:	1dfb      	adds	r3, r7, #7
    5d64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d66:	1dfb      	adds	r3, r7, #7
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	2b01      	cmp	r3, #1
    5d6c:	d00a      	beq.n	5d84 <system_apb_clock_set_mask+0x2c>
    5d6e:	2b02      	cmp	r3, #2
    5d70:	d00f      	beq.n	5d92 <system_apb_clock_set_mask+0x3a>
    5d72:	2b00      	cmp	r3, #0
    5d74:	d114      	bne.n	5da0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5d76:	4b0e      	ldr	r3, [pc, #56]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d78:	4a0d      	ldr	r2, [pc, #52]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d7a:	6991      	ldr	r1, [r2, #24]
    5d7c:	683a      	ldr	r2, [r7, #0]
    5d7e:	430a      	orrs	r2, r1
    5d80:	619a      	str	r2, [r3, #24]
			break;
    5d82:	e00f      	b.n	5da4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5d84:	4b0a      	ldr	r3, [pc, #40]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d86:	4a0a      	ldr	r2, [pc, #40]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d88:	69d1      	ldr	r1, [r2, #28]
    5d8a:	683a      	ldr	r2, [r7, #0]
    5d8c:	430a      	orrs	r2, r1
    5d8e:	61da      	str	r2, [r3, #28]
			break;
    5d90:	e008      	b.n	5da4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5d92:	4b07      	ldr	r3, [pc, #28]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d94:	4a06      	ldr	r2, [pc, #24]	; (5db0 <system_apb_clock_set_mask+0x58>)
    5d96:	6a11      	ldr	r1, [r2, #32]
    5d98:	683a      	ldr	r2, [r7, #0]
    5d9a:	430a      	orrs	r2, r1
    5d9c:	621a      	str	r2, [r3, #32]
			break;
    5d9e:	e001      	b.n	5da4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5da0:	2317      	movs	r3, #23
    5da2:	e000      	b.n	5da6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5da4:	2300      	movs	r3, #0
}
    5da6:	0018      	movs	r0, r3
    5da8:	46bd      	mov	sp, r7
    5daa:	b002      	add	sp, #8
    5dac:	bd80      	pop	{r7, pc}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	40000400 	.word	0x40000400

00005db4 <system_pinmux_get_config_defaults>:
{
    5db4:	b580      	push	{r7, lr}
    5db6:	b082      	sub	sp, #8
    5db8:	af00      	add	r7, sp, #0
    5dba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	2280      	movs	r2, #128	; 0x80
    5dc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	2200      	movs	r2, #0
    5dc6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	2201      	movs	r2, #1
    5dcc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	2200      	movs	r2, #0
    5dd2:	70da      	strb	r2, [r3, #3]
}
    5dd4:	46c0      	nop			; (mov r8, r8)
    5dd6:	46bd      	mov	sp, r7
    5dd8:	b002      	add	sp, #8
    5dda:	bd80      	pop	{r7, pc}

00005ddc <system_interrupt_enable>:
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
    5de2:	0002      	movs	r2, r0
    5de4:	1dfb      	adds	r3, r7, #7
    5de6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5de8:	4b06      	ldr	r3, [pc, #24]	; (5e04 <system_interrupt_enable+0x28>)
    5dea:	1dfa      	adds	r2, r7, #7
    5dec:	7812      	ldrb	r2, [r2, #0]
    5dee:	0011      	movs	r1, r2
    5df0:	221f      	movs	r2, #31
    5df2:	400a      	ands	r2, r1
    5df4:	2101      	movs	r1, #1
    5df6:	4091      	lsls	r1, r2
    5df8:	000a      	movs	r2, r1
    5dfa:	601a      	str	r2, [r3, #0]
}
    5dfc:	46c0      	nop			; (mov r8, r8)
    5dfe:	46bd      	mov	sp, r7
    5e00:	b002      	add	sp, #8
    5e02:	bd80      	pop	{r7, pc}
    5e04:	e000e100 	.word	0xe000e100

00005e08 <_extint_get_eic_from_channel>:
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	b084      	sub	sp, #16
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	0002      	movs	r2, r0
    5e10:	1dfb      	adds	r3, r7, #7
    5e12:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5e14:	230f      	movs	r3, #15
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	1dfa      	adds	r2, r7, #7
    5e1a:	7812      	ldrb	r2, [r2, #0]
    5e1c:	0952      	lsrs	r2, r2, #5
    5e1e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    5e20:	230f      	movs	r3, #15
    5e22:	18fb      	adds	r3, r7, r3
    5e24:	781b      	ldrb	r3, [r3, #0]
    5e26:	2b00      	cmp	r3, #0
    5e28:	d10c      	bne.n	5e44 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5e2a:	4b09      	ldr	r3, [pc, #36]	; (5e50 <_extint_get_eic_from_channel+0x48>)
    5e2c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    5e2e:	230f      	movs	r3, #15
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	781b      	ldrb	r3, [r3, #0]
    5e34:	009b      	lsls	r3, r3, #2
    5e36:	2210      	movs	r2, #16
    5e38:	4694      	mov	ip, r2
    5e3a:	44bc      	add	ip, r7
    5e3c:	4463      	add	r3, ip
    5e3e:	3b08      	subs	r3, #8
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	e000      	b.n	5e46 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    5e44:	2300      	movs	r3, #0
}
    5e46:	0018      	movs	r0, r3
    5e48:	46bd      	mov	sp, r7
    5e4a:	b004      	add	sp, #16
    5e4c:	bd80      	pop	{r7, pc}
    5e4e:	46c0      	nop			; (mov r8, r8)
    5e50:	40001800 	.word	0x40001800

00005e54 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    5e54:	b580      	push	{r7, lr}
    5e56:	b082      	sub	sp, #8
    5e58:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5e5a:	4b0f      	ldr	r3, [pc, #60]	; (5e98 <extint_is_syncing+0x44>)
    5e5c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e5e:	2300      	movs	r3, #0
    5e60:	607b      	str	r3, [r7, #4]
    5e62:	e011      	b.n	5e88 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5e64:	687b      	ldr	r3, [r7, #4]
    5e66:	009b      	lsls	r3, r3, #2
    5e68:	2208      	movs	r2, #8
    5e6a:	4694      	mov	ip, r2
    5e6c:	44bc      	add	ip, r7
    5e6e:	4463      	add	r3, ip
    5e70:	3b08      	subs	r3, #8
    5e72:	681b      	ldr	r3, [r3, #0]
    5e74:	785b      	ldrb	r3, [r3, #1]
    5e76:	b2db      	uxtb	r3, r3
    5e78:	b25b      	sxtb	r3, r3
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	da01      	bge.n	5e82 <extint_is_syncing+0x2e>
			return true;
    5e7e:	2301      	movs	r3, #1
    5e80:	e006      	b.n	5e90 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5e82:	687b      	ldr	r3, [r7, #4]
    5e84:	3301      	adds	r3, #1
    5e86:	607b      	str	r3, [r7, #4]
    5e88:	687b      	ldr	r3, [r7, #4]
    5e8a:	2b00      	cmp	r3, #0
    5e8c:	d0ea      	beq.n	5e64 <extint_is_syncing+0x10>
		}
	}
	return false;
    5e8e:	2300      	movs	r3, #0
}
    5e90:	0018      	movs	r0, r3
    5e92:	46bd      	mov	sp, r7
    5e94:	b002      	add	sp, #8
    5e96:	bd80      	pop	{r7, pc}
    5e98:	40001800 	.word	0x40001800

00005e9c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    5e9c:	b580      	push	{r7, lr}
    5e9e:	b084      	sub	sp, #16
    5ea0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5ea2:	4b2d      	ldr	r3, [pc, #180]	; (5f58 <_system_extint_init+0xbc>)
    5ea4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    5ea6:	2140      	movs	r1, #64	; 0x40
    5ea8:	2000      	movs	r0, #0
    5eaa:	4b2c      	ldr	r3, [pc, #176]	; (5f5c <_system_extint_init+0xc0>)
    5eac:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5eae:	003b      	movs	r3, r7
    5eb0:	0018      	movs	r0, r3
    5eb2:	4b2b      	ldr	r3, [pc, #172]	; (5f60 <_system_extint_init+0xc4>)
    5eb4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    5eb6:	003b      	movs	r3, r7
    5eb8:	2200      	movs	r2, #0
    5eba:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5ebc:	003b      	movs	r3, r7
    5ebe:	0019      	movs	r1, r3
    5ec0:	2005      	movs	r0, #5
    5ec2:	4b28      	ldr	r3, [pc, #160]	; (5f64 <_system_extint_init+0xc8>)
    5ec4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    5ec6:	2005      	movs	r0, #5
    5ec8:	4b27      	ldr	r3, [pc, #156]	; (5f68 <_system_extint_init+0xcc>)
    5eca:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5ecc:	2300      	movs	r3, #0
    5ece:	60fb      	str	r3, [r7, #12]
    5ed0:	e018      	b.n	5f04 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5ed2:	68fb      	ldr	r3, [r7, #12]
    5ed4:	009b      	lsls	r3, r3, #2
    5ed6:	2210      	movs	r2, #16
    5ed8:	4694      	mov	ip, r2
    5eda:	44bc      	add	ip, r7
    5edc:	4463      	add	r3, ip
    5ede:	3b0c      	subs	r3, #12
    5ee0:	681a      	ldr	r2, [r3, #0]
    5ee2:	68fb      	ldr	r3, [r7, #12]
    5ee4:	009b      	lsls	r3, r3, #2
    5ee6:	2110      	movs	r1, #16
    5ee8:	468c      	mov	ip, r1
    5eea:	44bc      	add	ip, r7
    5eec:	4463      	add	r3, ip
    5eee:	3b0c      	subs	r3, #12
    5ef0:	681b      	ldr	r3, [r3, #0]
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	b2db      	uxtb	r3, r3
    5ef6:	2101      	movs	r1, #1
    5ef8:	430b      	orrs	r3, r1
    5efa:	b2db      	uxtb	r3, r3
    5efc:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5efe:	68fb      	ldr	r3, [r7, #12]
    5f00:	3301      	adds	r3, #1
    5f02:	60fb      	str	r3, [r7, #12]
    5f04:	68fb      	ldr	r3, [r7, #12]
    5f06:	2b00      	cmp	r3, #0
    5f08:	d0e3      	beq.n	5ed2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	4b17      	ldr	r3, [pc, #92]	; (5f6c <_system_extint_init+0xd0>)
    5f0e:	4798      	blx	r3
    5f10:	1e03      	subs	r3, r0, #0
    5f12:	d1fb      	bne.n	5f0c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5f14:	230b      	movs	r3, #11
    5f16:	18fb      	adds	r3, r7, r3
    5f18:	2200      	movs	r2, #0
    5f1a:	701a      	strb	r2, [r3, #0]
    5f1c:	e00d      	b.n	5f3a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    5f1e:	230b      	movs	r3, #11
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	781a      	ldrb	r2, [r3, #0]
    5f24:	4b12      	ldr	r3, [pc, #72]	; (5f70 <_system_extint_init+0xd4>)
    5f26:	0092      	lsls	r2, r2, #2
    5f28:	2100      	movs	r1, #0
    5f2a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    5f2c:	230b      	movs	r3, #11
    5f2e:	18fb      	adds	r3, r7, r3
    5f30:	781a      	ldrb	r2, [r3, #0]
    5f32:	230b      	movs	r3, #11
    5f34:	18fb      	adds	r3, r7, r3
    5f36:	3201      	adds	r2, #1
    5f38:	701a      	strb	r2, [r3, #0]
    5f3a:	230b      	movs	r3, #11
    5f3c:	18fb      	adds	r3, r7, r3
    5f3e:	781b      	ldrb	r3, [r3, #0]
    5f40:	2b0f      	cmp	r3, #15
    5f42:	d9ec      	bls.n	5f1e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    5f44:	2004      	movs	r0, #4
    5f46:	4b0b      	ldr	r3, [pc, #44]	; (5f74 <_system_extint_init+0xd8>)
    5f48:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    5f4a:	4b0b      	ldr	r3, [pc, #44]	; (5f78 <_system_extint_init+0xdc>)
    5f4c:	4798      	blx	r3
}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	46bd      	mov	sp, r7
    5f52:	b004      	add	sp, #16
    5f54:	bd80      	pop	{r7, pc}
    5f56:	46c0      	nop			; (mov r8, r8)
    5f58:	40001800 	.word	0x40001800
    5f5c:	00005d59 	.word	0x00005d59
    5f60:	00005d41 	.word	0x00005d41
    5f64:	00009a9d 	.word	0x00009a9d
    5f68:	00009ae1 	.word	0x00009ae1
    5f6c:	00005e55 	.word	0x00005e55
    5f70:	200003ec 	.word	0x200003ec
    5f74:	00005ddd 	.word	0x00005ddd
    5f78:	00005f7d 	.word	0x00005f7d

00005f7c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    5f7c:	b580      	push	{r7, lr}
    5f7e:	b082      	sub	sp, #8
    5f80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5f82:	4b15      	ldr	r3, [pc, #84]	; (5fd8 <_extint_enable+0x5c>)
    5f84:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5f86:	2300      	movs	r3, #0
    5f88:	607b      	str	r3, [r7, #4]
    5f8a:	e018      	b.n	5fbe <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	009b      	lsls	r3, r3, #2
    5f90:	2208      	movs	r2, #8
    5f92:	4694      	mov	ip, r2
    5f94:	44bc      	add	ip, r7
    5f96:	4463      	add	r3, ip
    5f98:	3b08      	subs	r3, #8
    5f9a:	681a      	ldr	r2, [r3, #0]
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	009b      	lsls	r3, r3, #2
    5fa0:	2108      	movs	r1, #8
    5fa2:	468c      	mov	ip, r1
    5fa4:	44bc      	add	ip, r7
    5fa6:	4463      	add	r3, ip
    5fa8:	3b08      	subs	r3, #8
    5faa:	681b      	ldr	r3, [r3, #0]
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	b2db      	uxtb	r3, r3
    5fb0:	2102      	movs	r1, #2
    5fb2:	430b      	orrs	r3, r1
    5fb4:	b2db      	uxtb	r3, r3
    5fb6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5fb8:	687b      	ldr	r3, [r7, #4]
    5fba:	3301      	adds	r3, #1
    5fbc:	607b      	str	r3, [r7, #4]
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d0e3      	beq.n	5f8c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    5fc4:	46c0      	nop			; (mov r8, r8)
    5fc6:	4b05      	ldr	r3, [pc, #20]	; (5fdc <_extint_enable+0x60>)
    5fc8:	4798      	blx	r3
    5fca:	1e03      	subs	r3, r0, #0
    5fcc:	d1fb      	bne.n	5fc6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	46bd      	mov	sp, r7
    5fd2:	b002      	add	sp, #8
    5fd4:	bd80      	pop	{r7, pc}
    5fd6:	46c0      	nop			; (mov r8, r8)
    5fd8:	40001800 	.word	0x40001800
    5fdc:	00005e55 	.word	0x00005e55

00005fe0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5fe0:	b580      	push	{r7, lr}
    5fe2:	b082      	sub	sp, #8
    5fe4:	af00      	add	r7, sp, #0
    5fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5fe8:	687b      	ldr	r3, [r7, #4]
    5fea:	2200      	movs	r2, #0
    5fec:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	2200      	movs	r2, #0
    5ff2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    5ff4:	687b      	ldr	r3, [r7, #4]
    5ff6:	2201      	movs	r2, #1
    5ff8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	2201      	movs	r2, #1
    5ffe:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	2200      	movs	r2, #0
    6004:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	2202      	movs	r2, #2
    600a:	72da      	strb	r2, [r3, #11]
}
    600c:	46c0      	nop			; (mov r8, r8)
    600e:	46bd      	mov	sp, r7
    6010:	b002      	add	sp, #8
    6012:	bd80      	pop	{r7, pc}

00006014 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6014:	b580      	push	{r7, lr}
    6016:	b086      	sub	sp, #24
    6018:	af00      	add	r7, sp, #0
    601a:	0002      	movs	r2, r0
    601c:	6039      	str	r1, [r7, #0]
    601e:	1dfb      	adds	r3, r7, #7
    6020:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6022:	2308      	movs	r3, #8
    6024:	18fb      	adds	r3, r7, r3
    6026:	0018      	movs	r0, r3
    6028:	4b36      	ldr	r3, [pc, #216]	; (6104 <extint_chan_set_config+0xf0>)
    602a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    602c:	683b      	ldr	r3, [r7, #0]
    602e:	685b      	ldr	r3, [r3, #4]
    6030:	b2da      	uxtb	r2, r3
    6032:	2308      	movs	r3, #8
    6034:	18fb      	adds	r3, r7, r3
    6036:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6038:	2308      	movs	r3, #8
    603a:	18fb      	adds	r3, r7, r3
    603c:	2200      	movs	r2, #0
    603e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	7a1a      	ldrb	r2, [r3, #8]
    6044:	2308      	movs	r3, #8
    6046:	18fb      	adds	r3, r7, r3
    6048:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    604a:	683b      	ldr	r3, [r7, #0]
    604c:	681b      	ldr	r3, [r3, #0]
    604e:	b2db      	uxtb	r3, r3
    6050:	2208      	movs	r2, #8
    6052:	18ba      	adds	r2, r7, r2
    6054:	0011      	movs	r1, r2
    6056:	0018      	movs	r0, r3
    6058:	4b2b      	ldr	r3, [pc, #172]	; (6108 <extint_chan_set_config+0xf4>)
    605a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    605c:	1dfb      	adds	r3, r7, #7
    605e:	781b      	ldrb	r3, [r3, #0]
    6060:	0018      	movs	r0, r3
    6062:	4b2a      	ldr	r3, [pc, #168]	; (610c <extint_chan_set_config+0xf8>)
    6064:	4798      	blx	r3
    6066:	0003      	movs	r3, r0
    6068:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    606a:	1dfb      	adds	r3, r7, #7
    606c:	781b      	ldrb	r3, [r3, #0]
    606e:	2207      	movs	r2, #7
    6070:	4013      	ands	r3, r2
    6072:	009b      	lsls	r3, r3, #2
    6074:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6076:	683b      	ldr	r3, [r7, #0]
    6078:	7adb      	ldrb	r3, [r3, #11]
    607a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    607c:	683b      	ldr	r3, [r7, #0]
    607e:	7a9b      	ldrb	r3, [r3, #10]
    6080:	2b00      	cmp	r3, #0
    6082:	d003      	beq.n	608c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    6084:	697b      	ldr	r3, [r7, #20]
    6086:	2208      	movs	r2, #8
    6088:	4313      	orrs	r3, r2
    608a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    608c:	1dfb      	adds	r3, r7, #7
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	08db      	lsrs	r3, r3, #3
    6092:	b2db      	uxtb	r3, r3
    6094:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6096:	1dfb      	adds	r3, r7, #7
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	08db      	lsrs	r3, r3, #3
    609c:	b2db      	uxtb	r3, r3
    609e:	001a      	movs	r2, r3
    60a0:	693b      	ldr	r3, [r7, #16]
    60a2:	3206      	adds	r2, #6
    60a4:	0092      	lsls	r2, r2, #2
    60a6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    60a8:	210f      	movs	r1, #15
    60aa:	68fa      	ldr	r2, [r7, #12]
    60ac:	4091      	lsls	r1, r2
    60ae:	000a      	movs	r2, r1
    60b0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    60b2:	401a      	ands	r2, r3
			(new_config << config_pos);
    60b4:	6979      	ldr	r1, [r7, #20]
    60b6:	68fb      	ldr	r3, [r7, #12]
    60b8:	4099      	lsls	r1, r3
    60ba:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    60bc:	431a      	orrs	r2, r3
    60be:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    60c0:	693b      	ldr	r3, [r7, #16]
    60c2:	1d82      	adds	r2, r0, #6
    60c4:	0092      	lsls	r2, r2, #2
    60c6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	7a5b      	ldrb	r3, [r3, #9]
    60cc:	2b00      	cmp	r3, #0
    60ce:	d00a      	beq.n	60e6 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    60d0:	693b      	ldr	r3, [r7, #16]
    60d2:	695a      	ldr	r2, [r3, #20]
    60d4:	1dfb      	adds	r3, r7, #7
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	2101      	movs	r1, #1
    60da:	4099      	lsls	r1, r3
    60dc:	000b      	movs	r3, r1
    60de:	431a      	orrs	r2, r3
    60e0:	693b      	ldr	r3, [r7, #16]
    60e2:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    60e4:	e00a      	b.n	60fc <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    60e6:	693b      	ldr	r3, [r7, #16]
    60e8:	695b      	ldr	r3, [r3, #20]
    60ea:	1dfa      	adds	r2, r7, #7
    60ec:	7812      	ldrb	r2, [r2, #0]
    60ee:	2101      	movs	r1, #1
    60f0:	4091      	lsls	r1, r2
    60f2:	000a      	movs	r2, r1
    60f4:	43d2      	mvns	r2, r2
    60f6:	401a      	ands	r2, r3
    60f8:	693b      	ldr	r3, [r7, #16]
    60fa:	615a      	str	r2, [r3, #20]
}
    60fc:	46c0      	nop			; (mov r8, r8)
    60fe:	46bd      	mov	sp, r7
    6100:	b006      	add	sp, #24
    6102:	bd80      	pop	{r7, pc}
    6104:	00005db5 	.word	0x00005db5
    6108:	00009d89 	.word	0x00009d89
    610c:	00005e09 	.word	0x00005e09

00006110 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    6110:	b580      	push	{r7, lr}
    6112:	b086      	sub	sp, #24
    6114:	af00      	add	r7, sp, #0
    6116:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    6118:	4b28      	ldr	r3, [pc, #160]	; (61bc <_rtc_interrupt_handler+0xac>)
    611a:	687a      	ldr	r2, [r7, #4]
    611c:	0092      	lsls	r2, r2, #2
    611e:	58d3      	ldr	r3, [r2, r3]
    6120:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    6122:	697b      	ldr	r3, [r7, #20]
    6124:	681b      	ldr	r3, [r3, #0]
    6126:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    6128:	230e      	movs	r3, #14
    612a:	18fb      	adds	r3, r7, r3
    612c:	697a      	ldr	r2, [r7, #20]
    612e:	8a52      	ldrh	r2, [r2, #18]
    6130:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    6132:	697b      	ldr	r3, [r7, #20]
    6134:	8a1b      	ldrh	r3, [r3, #16]
    6136:	b29a      	uxth	r2, r3
    6138:	230e      	movs	r3, #14
    613a:	18fb      	adds	r3, r7, r3
    613c:	210e      	movs	r1, #14
    613e:	1879      	adds	r1, r7, r1
    6140:	8809      	ldrh	r1, [r1, #0]
    6142:	400a      	ands	r2, r1
    6144:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    6146:	693b      	ldr	r3, [r7, #16]
    6148:	7a1b      	ldrb	r3, [r3, #8]
    614a:	b2da      	uxtb	r2, r3
    614c:	230c      	movs	r3, #12
    614e:	18fb      	adds	r3, r7, r3
    6150:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    6152:	693b      	ldr	r3, [r7, #16]
    6154:	79db      	ldrb	r3, [r3, #7]
    6156:	b2db      	uxtb	r3, r3
    6158:	b29a      	uxth	r2, r3
    615a:	230c      	movs	r3, #12
    615c:	18fb      	adds	r3, r7, r3
    615e:	210c      	movs	r1, #12
    6160:	1879      	adds	r1, r7, r1
    6162:	8809      	ldrh	r1, [r1, #0]
    6164:	400a      	ands	r2, r1
    6166:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    6168:	230c      	movs	r3, #12
    616a:	18fb      	adds	r3, r7, r3
    616c:	881b      	ldrh	r3, [r3, #0]
    616e:	2280      	movs	r2, #128	; 0x80
    6170:	4013      	ands	r3, r2
    6172:	d00c      	beq.n	618e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    6174:	230e      	movs	r3, #14
    6176:	18fb      	adds	r3, r7, r3
    6178:	881b      	ldrh	r3, [r3, #0]
    617a:	2202      	movs	r2, #2
    617c:	4013      	ands	r3, r2
    617e:	d002      	beq.n	6186 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    6180:	697b      	ldr	r3, [r7, #20]
    6182:	68db      	ldr	r3, [r3, #12]
    6184:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    6186:	693b      	ldr	r3, [r7, #16]
    6188:	2280      	movs	r2, #128	; 0x80
    618a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    618c:	e011      	b.n	61b2 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    618e:	230c      	movs	r3, #12
    6190:	18fb      	adds	r3, r7, r3
    6192:	881b      	ldrh	r3, [r3, #0]
    6194:	2201      	movs	r2, #1
    6196:	4013      	ands	r3, r2
    6198:	d00b      	beq.n	61b2 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    619a:	230e      	movs	r3, #14
    619c:	18fb      	adds	r3, r7, r3
    619e:	881b      	ldrh	r3, [r3, #0]
    61a0:	2201      	movs	r2, #1
    61a2:	4013      	ands	r3, r2
    61a4:	d002      	beq.n	61ac <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    61a6:	697b      	ldr	r3, [r7, #20]
    61a8:	689b      	ldr	r3, [r3, #8]
    61aa:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    61ac:	693b      	ldr	r3, [r7, #16]
    61ae:	2201      	movs	r2, #1
    61b0:	721a      	strb	r2, [r3, #8]
}
    61b2:	46c0      	nop			; (mov r8, r8)
    61b4:	46bd      	mov	sp, r7
    61b6:	b006      	add	sp, #24
    61b8:	bd80      	pop	{r7, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	2000042c 	.word	0x2000042c

000061c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    61c0:	b580      	push	{r7, lr}
    61c2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    61c4:	2000      	movs	r0, #0
    61c6:	4b02      	ldr	r3, [pc, #8]	; (61d0 <RTC_Handler+0x10>)
    61c8:	4798      	blx	r3
}
    61ca:	46c0      	nop			; (mov r8, r8)
    61cc:	46bd      	mov	sp, r7
    61ce:	bd80      	pop	{r7, pc}
    61d0:	00006111 	.word	0x00006111

000061d4 <system_gclk_chan_get_config_defaults>:
{
    61d4:	b580      	push	{r7, lr}
    61d6:	b082      	sub	sp, #8
    61d8:	af00      	add	r7, sp, #0
    61da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    61dc:	687b      	ldr	r3, [r7, #4]
    61de:	2200      	movs	r2, #0
    61e0:	701a      	strb	r2, [r3, #0]
}
    61e2:	46c0      	nop			; (mov r8, r8)
    61e4:	46bd      	mov	sp, r7
    61e6:	b002      	add	sp, #8
    61e8:	bd80      	pop	{r7, pc}
	...

000061ec <system_apb_clock_set_mask>:
{
    61ec:	b580      	push	{r7, lr}
    61ee:	b082      	sub	sp, #8
    61f0:	af00      	add	r7, sp, #0
    61f2:	0002      	movs	r2, r0
    61f4:	6039      	str	r1, [r7, #0]
    61f6:	1dfb      	adds	r3, r7, #7
    61f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    61fa:	1dfb      	adds	r3, r7, #7
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	2b01      	cmp	r3, #1
    6200:	d00a      	beq.n	6218 <system_apb_clock_set_mask+0x2c>
    6202:	2b02      	cmp	r3, #2
    6204:	d00f      	beq.n	6226 <system_apb_clock_set_mask+0x3a>
    6206:	2b00      	cmp	r3, #0
    6208:	d114      	bne.n	6234 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    620a:	4b0e      	ldr	r3, [pc, #56]	; (6244 <system_apb_clock_set_mask+0x58>)
    620c:	4a0d      	ldr	r2, [pc, #52]	; (6244 <system_apb_clock_set_mask+0x58>)
    620e:	6991      	ldr	r1, [r2, #24]
    6210:	683a      	ldr	r2, [r7, #0]
    6212:	430a      	orrs	r2, r1
    6214:	619a      	str	r2, [r3, #24]
			break;
    6216:	e00f      	b.n	6238 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6218:	4b0a      	ldr	r3, [pc, #40]	; (6244 <system_apb_clock_set_mask+0x58>)
    621a:	4a0a      	ldr	r2, [pc, #40]	; (6244 <system_apb_clock_set_mask+0x58>)
    621c:	69d1      	ldr	r1, [r2, #28]
    621e:	683a      	ldr	r2, [r7, #0]
    6220:	430a      	orrs	r2, r1
    6222:	61da      	str	r2, [r3, #28]
			break;
    6224:	e008      	b.n	6238 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6226:	4b07      	ldr	r3, [pc, #28]	; (6244 <system_apb_clock_set_mask+0x58>)
    6228:	4a06      	ldr	r2, [pc, #24]	; (6244 <system_apb_clock_set_mask+0x58>)
    622a:	6a11      	ldr	r1, [r2, #32]
    622c:	683a      	ldr	r2, [r7, #0]
    622e:	430a      	orrs	r2, r1
    6230:	621a      	str	r2, [r3, #32]
			break;
    6232:	e001      	b.n	6238 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6234:	2317      	movs	r3, #23
    6236:	e000      	b.n	623a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6238:	2300      	movs	r3, #0
}
    623a:	0018      	movs	r0, r3
    623c:	46bd      	mov	sp, r7
    623e:	b002      	add	sp, #8
    6240:	bd80      	pop	{r7, pc}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	40000400 	.word	0x40000400

00006248 <system_pinmux_get_config_defaults>:
{
    6248:	b580      	push	{r7, lr}
    624a:	b082      	sub	sp, #8
    624c:	af00      	add	r7, sp, #0
    624e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	2280      	movs	r2, #128	; 0x80
    6254:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	2200      	movs	r2, #0
    625a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	2201      	movs	r2, #1
    6260:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6262:	687b      	ldr	r3, [r7, #4]
    6264:	2200      	movs	r2, #0
    6266:	70da      	strb	r2, [r3, #3]
}
    6268:	46c0      	nop			; (mov r8, r8)
    626a:	46bd      	mov	sp, r7
    626c:	b002      	add	sp, #8
    626e:	bd80      	pop	{r7, pc}

00006270 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    6270:	b580      	push	{r7, lr}
    6272:	b084      	sub	sp, #16
    6274:	af00      	add	r7, sp, #0
    6276:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6278:	2300      	movs	r3, #0
    627a:	60fb      	str	r3, [r7, #12]
    627c:	e00c      	b.n	6298 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    627e:	4b0a      	ldr	r3, [pc, #40]	; (62a8 <_tcc_get_inst_index+0x38>)
    6280:	68fa      	ldr	r2, [r7, #12]
    6282:	0092      	lsls	r2, r2, #2
    6284:	58d2      	ldr	r2, [r2, r3]
    6286:	687b      	ldr	r3, [r7, #4]
    6288:	429a      	cmp	r2, r3
    628a:	d102      	bne.n	6292 <_tcc_get_inst_index+0x22>
			return i;
    628c:	68fb      	ldr	r3, [r7, #12]
    628e:	b2db      	uxtb	r3, r3
    6290:	e006      	b.n	62a0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6292:	68fb      	ldr	r3, [r7, #12]
    6294:	3301      	adds	r3, #1
    6296:	60fb      	str	r3, [r7, #12]
    6298:	68fb      	ldr	r3, [r7, #12]
    629a:	2b02      	cmp	r3, #2
    629c:	d9ef      	bls.n	627e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    629e:	2300      	movs	r3, #0
}
    62a0:	0018      	movs	r0, r3
    62a2:	46bd      	mov	sp, r7
    62a4:	b004      	add	sp, #16
    62a6:	bd80      	pop	{r7, pc}
    62a8:	0000f570 	.word	0x0000f570

000062ac <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    62ac:	b590      	push	{r4, r7, lr}
    62ae:	b085      	sub	sp, #20
    62b0:	af00      	add	r7, sp, #0
    62b2:	6078      	str	r0, [r7, #4]
    62b4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    62b6:	230f      	movs	r3, #15
    62b8:	18fc      	adds	r4, r7, r3
    62ba:	683b      	ldr	r3, [r7, #0]
    62bc:	0018      	movs	r0, r3
    62be:	4bad      	ldr	r3, [pc, #692]	; (6574 <tcc_get_config_defaults+0x2c8>)
    62c0:	4798      	blx	r3
    62c2:	0003      	movs	r3, r0
    62c4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	2200      	movs	r2, #0
    62ca:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    62cc:	230f      	movs	r3, #15
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	781a      	ldrb	r2, [r3, #0]
    62d2:	4ba9      	ldr	r3, [pc, #676]	; (6578 <tcc_get_config_defaults+0x2cc>)
    62d4:	0092      	lsls	r2, r2, #2
    62d6:	58d2      	ldr	r2, [r2, r3]
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	2200      	movs	r2, #0
    62e0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	2200      	movs	r2, #0
    62e6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	2200      	movs	r2, #0
    62ec:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    62ee:	687b      	ldr	r3, [r7, #4]
    62f0:	2200      	movs	r2, #0
    62f2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    62f4:	687b      	ldr	r3, [r7, #4]
    62f6:	2200      	movs	r2, #0
    62f8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	2200      	movs	r2, #0
    62fe:	61da      	str	r2, [r3, #28]
    6300:	687b      	ldr	r3, [r7, #4]
    6302:	2200      	movs	r2, #0
    6304:	621a      	str	r2, [r3, #32]
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	2200      	movs	r2, #0
    630a:	625a      	str	r2, [r3, #36]	; 0x24
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	2200      	movs	r2, #0
    6310:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6312:	687b      	ldr	r3, [r7, #4]
    6314:	2200      	movs	r2, #0
    6316:	751a      	strb	r2, [r3, #20]
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	2200      	movs	r2, #0
    631c:	755a      	strb	r2, [r3, #21]
    631e:	687b      	ldr	r3, [r7, #4]
    6320:	2200      	movs	r2, #0
    6322:	759a      	strb	r2, [r3, #22]
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	2200      	movs	r2, #0
    6328:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	2200      	movs	r2, #0
    632e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    6330:	687b      	ldr	r3, [r7, #4]
    6332:	2200      	movs	r2, #0
    6334:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	2200      	movs	r2, #0
    633a:	741a      	strb	r2, [r3, #16]
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	2200      	movs	r2, #0
    6340:	745a      	strb	r2, [r3, #17]
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	2200      	movs	r2, #0
    6346:	749a      	strb	r2, [r3, #18]
    6348:	687b      	ldr	r3, [r7, #4]
    634a:	2200      	movs	r2, #0
    634c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	222c      	movs	r2, #44	; 0x2c
    6352:	2100      	movs	r1, #0
    6354:	5499      	strb	r1, [r3, r2]
    6356:	687b      	ldr	r3, [r7, #4]
    6358:	222d      	movs	r2, #45	; 0x2d
    635a:	2100      	movs	r1, #0
    635c:	5499      	strb	r1, [r3, r2]
    635e:	687b      	ldr	r3, [r7, #4]
    6360:	222e      	movs	r2, #46	; 0x2e
    6362:	2100      	movs	r1, #0
    6364:	5499      	strb	r1, [r3, r2]
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	222f      	movs	r2, #47	; 0x2f
    636a:	2100      	movs	r1, #0
    636c:	5499      	strb	r1, [r3, r2]
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	2230      	movs	r2, #48	; 0x30
    6372:	2100      	movs	r1, #0
    6374:	5499      	strb	r1, [r3, r2]
    6376:	687b      	ldr	r3, [r7, #4]
    6378:	2231      	movs	r2, #49	; 0x31
    637a:	2100      	movs	r1, #0
    637c:	5499      	strb	r1, [r3, r2]
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	2232      	movs	r2, #50	; 0x32
    6382:	2100      	movs	r1, #0
    6384:	5499      	strb	r1, [r3, r2]
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	2233      	movs	r2, #51	; 0x33
    638a:	2100      	movs	r1, #0
    638c:	5499      	strb	r1, [r3, r2]
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	2234      	movs	r2, #52	; 0x34
    6392:	2100      	movs	r1, #0
    6394:	5499      	strb	r1, [r3, r2]
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	2235      	movs	r2, #53	; 0x35
    639a:	2100      	movs	r1, #0
    639c:	5499      	strb	r1, [r3, r2]
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	2236      	movs	r2, #54	; 0x36
    63a2:	2100      	movs	r1, #0
    63a4:	5499      	strb	r1, [r3, r2]
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	2237      	movs	r2, #55	; 0x37
    63aa:	2100      	movs	r1, #0
    63ac:	5499      	strb	r1, [r3, r2]
    63ae:	687b      	ldr	r3, [r7, #4]
    63b0:	2238      	movs	r2, #56	; 0x38
    63b2:	2100      	movs	r1, #0
    63b4:	5499      	strb	r1, [r3, r2]
    63b6:	687b      	ldr	r3, [r7, #4]
    63b8:	2239      	movs	r2, #57	; 0x39
    63ba:	2100      	movs	r1, #0
    63bc:	5499      	strb	r1, [r3, r2]
    63be:	687b      	ldr	r3, [r7, #4]
    63c0:	223a      	movs	r2, #58	; 0x3a
    63c2:	2100      	movs	r1, #0
    63c4:	5499      	strb	r1, [r3, r2]
    63c6:	687b      	ldr	r3, [r7, #4]
    63c8:	223b      	movs	r2, #59	; 0x3b
    63ca:	2100      	movs	r1, #0
    63cc:	5499      	strb	r1, [r3, r2]
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	223c      	movs	r2, #60	; 0x3c
    63d2:	2100      	movs	r1, #0
    63d4:	5499      	strb	r1, [r3, r2]
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	223d      	movs	r2, #61	; 0x3d
    63da:	2100      	movs	r1, #0
    63dc:	5499      	strb	r1, [r3, r2]
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	223e      	movs	r2, #62	; 0x3e
    63e2:	2100      	movs	r1, #0
    63e4:	5499      	strb	r1, [r3, r2]
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	223f      	movs	r2, #63	; 0x3f
    63ea:	2100      	movs	r1, #0
    63ec:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	2240      	movs	r2, #64	; 0x40
    63f2:	2100      	movs	r1, #0
    63f4:	5499      	strb	r1, [r3, r2]
    63f6:	687b      	ldr	r3, [r7, #4]
    63f8:	2241      	movs	r2, #65	; 0x41
    63fa:	2100      	movs	r1, #0
    63fc:	5499      	strb	r1, [r3, r2]
    63fe:	687b      	ldr	r3, [r7, #4]
    6400:	2242      	movs	r2, #66	; 0x42
    6402:	2100      	movs	r1, #0
    6404:	5499      	strb	r1, [r3, r2]
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	2243      	movs	r2, #67	; 0x43
    640a:	2100      	movs	r1, #0
    640c:	5499      	strb	r1, [r3, r2]
    640e:	687b      	ldr	r3, [r7, #4]
    6410:	2244      	movs	r2, #68	; 0x44
    6412:	2100      	movs	r1, #0
    6414:	5499      	strb	r1, [r3, r2]
    6416:	687b      	ldr	r3, [r7, #4]
    6418:	2245      	movs	r2, #69	; 0x45
    641a:	2100      	movs	r1, #0
    641c:	5499      	strb	r1, [r3, r2]
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	2246      	movs	r2, #70	; 0x46
    6422:	2100      	movs	r1, #0
    6424:	5499      	strb	r1, [r3, r2]
    6426:	687b      	ldr	r3, [r7, #4]
    6428:	2247      	movs	r2, #71	; 0x47
    642a:	2100      	movs	r1, #0
    642c:	5499      	strb	r1, [r3, r2]
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	2248      	movs	r2, #72	; 0x48
    6432:	2100      	movs	r1, #0
    6434:	5499      	strb	r1, [r3, r2]
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	2249      	movs	r2, #73	; 0x49
    643a:	2100      	movs	r1, #0
    643c:	5499      	strb	r1, [r3, r2]
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	224a      	movs	r2, #74	; 0x4a
    6442:	2100      	movs	r1, #0
    6444:	5499      	strb	r1, [r3, r2]
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	224b      	movs	r2, #75	; 0x4b
    644a:	2100      	movs	r1, #0
    644c:	5499      	strb	r1, [r3, r2]
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	224c      	movs	r2, #76	; 0x4c
    6452:	2100      	movs	r1, #0
    6454:	5499      	strb	r1, [r3, r2]
    6456:	687b      	ldr	r3, [r7, #4]
    6458:	224d      	movs	r2, #77	; 0x4d
    645a:	2100      	movs	r1, #0
    645c:	5499      	strb	r1, [r3, r2]
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	224e      	movs	r2, #78	; 0x4e
    6462:	2100      	movs	r1, #0
    6464:	5499      	strb	r1, [r3, r2]
    6466:	687b      	ldr	r3, [r7, #4]
    6468:	224f      	movs	r2, #79	; 0x4f
    646a:	2100      	movs	r1, #0
    646c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    646e:	687b      	ldr	r3, [r7, #4]
    6470:	2250      	movs	r2, #80	; 0x50
    6472:	2100      	movs	r1, #0
    6474:	5499      	strb	r1, [r3, r2]
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	2251      	movs	r2, #81	; 0x51
    647a:	2100      	movs	r1, #0
    647c:	5499      	strb	r1, [r3, r2]
    647e:	687b      	ldr	r3, [r7, #4]
    6480:	2252      	movs	r2, #82	; 0x52
    6482:	2100      	movs	r1, #0
    6484:	5499      	strb	r1, [r3, r2]
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	2253      	movs	r2, #83	; 0x53
    648a:	2100      	movs	r1, #0
    648c:	5499      	strb	r1, [r3, r2]
    648e:	687b      	ldr	r3, [r7, #4]
    6490:	2254      	movs	r2, #84	; 0x54
    6492:	2100      	movs	r1, #0
    6494:	5499      	strb	r1, [r3, r2]
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	2255      	movs	r2, #85	; 0x55
    649a:	2100      	movs	r1, #0
    649c:	5499      	strb	r1, [r3, r2]
    649e:	687b      	ldr	r3, [r7, #4]
    64a0:	2256      	movs	r2, #86	; 0x56
    64a2:	2100      	movs	r1, #0
    64a4:	5499      	strb	r1, [r3, r2]
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	2257      	movs	r2, #87	; 0x57
    64aa:	2100      	movs	r1, #0
    64ac:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	2298      	movs	r2, #152	; 0x98
    64b2:	2100      	movs	r1, #0
    64b4:	5499      	strb	r1, [r3, r2]
    64b6:	687b      	ldr	r3, [r7, #4]
    64b8:	2200      	movs	r2, #0
    64ba:	659a      	str	r2, [r3, #88]	; 0x58
    64bc:	687b      	ldr	r3, [r7, #4]
    64be:	2200      	movs	r2, #0
    64c0:	679a      	str	r2, [r3, #120]	; 0x78
    64c2:	687b      	ldr	r3, [r7, #4]
    64c4:	2299      	movs	r2, #153	; 0x99
    64c6:	2100      	movs	r1, #0
    64c8:	5499      	strb	r1, [r3, r2]
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	2200      	movs	r2, #0
    64ce:	65da      	str	r2, [r3, #92]	; 0x5c
    64d0:	687b      	ldr	r3, [r7, #4]
    64d2:	2200      	movs	r2, #0
    64d4:	67da      	str	r2, [r3, #124]	; 0x7c
    64d6:	687b      	ldr	r3, [r7, #4]
    64d8:	229a      	movs	r2, #154	; 0x9a
    64da:	2100      	movs	r1, #0
    64dc:	5499      	strb	r1, [r3, r2]
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	2200      	movs	r2, #0
    64e2:	661a      	str	r2, [r3, #96]	; 0x60
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	2280      	movs	r2, #128	; 0x80
    64e8:	2100      	movs	r1, #0
    64ea:	5099      	str	r1, [r3, r2]
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	229b      	movs	r2, #155	; 0x9b
    64f0:	2100      	movs	r1, #0
    64f2:	5499      	strb	r1, [r3, r2]
    64f4:	687b      	ldr	r3, [r7, #4]
    64f6:	2200      	movs	r2, #0
    64f8:	665a      	str	r2, [r3, #100]	; 0x64
    64fa:	687b      	ldr	r3, [r7, #4]
    64fc:	2284      	movs	r2, #132	; 0x84
    64fe:	2100      	movs	r1, #0
    6500:	5099      	str	r1, [r3, r2]
    6502:	687b      	ldr	r3, [r7, #4]
    6504:	229c      	movs	r2, #156	; 0x9c
    6506:	2100      	movs	r1, #0
    6508:	5499      	strb	r1, [r3, r2]
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	2200      	movs	r2, #0
    650e:	669a      	str	r2, [r3, #104]	; 0x68
    6510:	687b      	ldr	r3, [r7, #4]
    6512:	2288      	movs	r2, #136	; 0x88
    6514:	2100      	movs	r1, #0
    6516:	5099      	str	r1, [r3, r2]
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	229d      	movs	r2, #157	; 0x9d
    651c:	2100      	movs	r1, #0
    651e:	5499      	strb	r1, [r3, r2]
    6520:	687b      	ldr	r3, [r7, #4]
    6522:	2200      	movs	r2, #0
    6524:	66da      	str	r2, [r3, #108]	; 0x6c
    6526:	687b      	ldr	r3, [r7, #4]
    6528:	228c      	movs	r2, #140	; 0x8c
    652a:	2100      	movs	r1, #0
    652c:	5099      	str	r1, [r3, r2]
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	229e      	movs	r2, #158	; 0x9e
    6532:	2100      	movs	r1, #0
    6534:	5499      	strb	r1, [r3, r2]
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	2200      	movs	r2, #0
    653a:	671a      	str	r2, [r3, #112]	; 0x70
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	2290      	movs	r2, #144	; 0x90
    6540:	2100      	movs	r1, #0
    6542:	5099      	str	r1, [r3, r2]
    6544:	687b      	ldr	r3, [r7, #4]
    6546:	229f      	movs	r2, #159	; 0x9f
    6548:	2100      	movs	r1, #0
    654a:	5499      	strb	r1, [r3, r2]
    654c:	687b      	ldr	r3, [r7, #4]
    654e:	2200      	movs	r2, #0
    6550:	675a      	str	r2, [r3, #116]	; 0x74
    6552:	687b      	ldr	r3, [r7, #4]
    6554:	2294      	movs	r2, #148	; 0x94
    6556:	2100      	movs	r1, #0
    6558:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    655a:	687b      	ldr	r3, [r7, #4]
    655c:	22a0      	movs	r2, #160	; 0xa0
    655e:	2101      	movs	r1, #1
    6560:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    6562:	687b      	ldr	r3, [r7, #4]
    6564:	22a1      	movs	r2, #161	; 0xa1
    6566:	2100      	movs	r1, #0
    6568:	5499      	strb	r1, [r3, r2]
}
    656a:	46c0      	nop			; (mov r8, r8)
    656c:	46bd      	mov	sp, r7
    656e:	b005      	add	sp, #20
    6570:	bd90      	pop	{r4, r7, pc}
    6572:	46c0      	nop			; (mov r8, r8)
    6574:	00006271 	.word	0x00006271
    6578:	0000f58c 	.word	0x0000f58c

0000657c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    657c:	b580      	push	{r7, lr}
    657e:	b086      	sub	sp, #24
    6580:	af00      	add	r7, sp, #0
    6582:	60b9      	str	r1, [r7, #8]
    6584:	607a      	str	r2, [r7, #4]
    6586:	230f      	movs	r3, #15
    6588:	18fb      	adds	r3, r7, r3
    658a:	1c02      	adds	r2, r0, #0
    658c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    658e:	2300      	movs	r3, #0
    6590:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6592:	2300      	movs	r3, #0
    6594:	613b      	str	r3, [r7, #16]
    6596:	e01d      	b.n	65d4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    6598:	68ba      	ldr	r2, [r7, #8]
    659a:	693b      	ldr	r3, [r7, #16]
    659c:	18d3      	adds	r3, r2, r3
    659e:	3310      	adds	r3, #16
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2b01      	cmp	r3, #1
    65a4:	d113      	bne.n	65ce <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    65a6:	230f      	movs	r3, #15
    65a8:	18fb      	adds	r3, r7, r3
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	4a1b      	ldr	r2, [pc, #108]	; (661c <_tcc_build_ctrla+0xa0>)
    65ae:	5cd3      	ldrb	r3, [r2, r3]
    65b0:	001a      	movs	r2, r3
    65b2:	693b      	ldr	r3, [r7, #16]
    65b4:	429a      	cmp	r2, r3
    65b6:	da01      	bge.n	65bc <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    65b8:	2317      	movs	r3, #23
    65ba:	e02a      	b.n	6612 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	045a      	lsls	r2, r3, #17
    65c0:	693b      	ldr	r3, [r7, #16]
    65c2:	409a      	lsls	r2, r3
    65c4:	0013      	movs	r3, r2
    65c6:	001a      	movs	r2, r3
    65c8:	697b      	ldr	r3, [r7, #20]
    65ca:	4313      	orrs	r3, r2
    65cc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    65ce:	693b      	ldr	r3, [r7, #16]
    65d0:	3301      	adds	r3, #1
    65d2:	613b      	str	r3, [r7, #16]
    65d4:	693b      	ldr	r3, [r7, #16]
    65d6:	2b03      	cmp	r3, #3
    65d8:	ddde      	ble.n	6598 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    65da:	68bb      	ldr	r3, [r7, #8]
    65dc:	22a1      	movs	r2, #161	; 0xa1
    65de:	5c9b      	ldrb	r3, [r3, r2]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d004      	beq.n	65ee <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    65e4:	697b      	ldr	r3, [r7, #20]
    65e6:	2280      	movs	r2, #128	; 0x80
    65e8:	0112      	lsls	r2, r2, #4
    65ea:	4313      	orrs	r3, r2
    65ec:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    65ee:	68bb      	ldr	r3, [r7, #8]
    65f0:	7b1b      	ldrb	r3, [r3, #12]
    65f2:	031b      	lsls	r3, r3, #12
    65f4:	001a      	movs	r2, r3
    65f6:	697b      	ldr	r3, [r7, #20]
    65f8:	4313      	orrs	r3, r2
    65fa:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    65fc:	68bb      	ldr	r3, [r7, #8]
    65fe:	7adb      	ldrb	r3, [r3, #11]
    6600:	021b      	lsls	r3, r3, #8
    6602:	001a      	movs	r2, r3
    6604:	697b      	ldr	r3, [r7, #20]
    6606:	4313      	orrs	r3, r2
    6608:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	697a      	ldr	r2, [r7, #20]
    660e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    6610:	2300      	movs	r3, #0
}
    6612:	0018      	movs	r0, r3
    6614:	46bd      	mov	sp, r7
    6616:	b006      	add	sp, #24
    6618:	bd80      	pop	{r7, pc}
    661a:	46c0      	nop			; (mov r8, r8)
    661c:	0000f598 	.word	0x0000f598

00006620 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    6620:	b580      	push	{r7, lr}
    6622:	b086      	sub	sp, #24
    6624:	af00      	add	r7, sp, #0
    6626:	60b9      	str	r1, [r7, #8]
    6628:	607a      	str	r2, [r7, #4]
    662a:	230f      	movs	r3, #15
    662c:	18fb      	adds	r3, r7, r3
    662e:	1c02      	adds	r2, r0, #0
    6630:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    6632:	2317      	movs	r3, #23
    6634:	18fb      	adds	r3, r7, r3
    6636:	2200      	movs	r2, #0
    6638:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    663a:	68bb      	ldr	r3, [r7, #8]
    663c:	7a1b      	ldrb	r3, [r3, #8]
    663e:	2b00      	cmp	r3, #0
    6640:	d007      	beq.n	6652 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    6642:	2317      	movs	r3, #23
    6644:	18fb      	adds	r3, r7, r3
    6646:	2217      	movs	r2, #23
    6648:	18ba      	adds	r2, r7, r2
    664a:	7812      	ldrb	r2, [r2, #0]
    664c:	2104      	movs	r1, #4
    664e:	430a      	orrs	r2, r1
    6650:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    6652:	68bb      	ldr	r3, [r7, #8]
    6654:	7a5b      	ldrb	r3, [r3, #9]
    6656:	2b01      	cmp	r3, #1
    6658:	d107      	bne.n	666a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    665a:	2317      	movs	r3, #23
    665c:	18fb      	adds	r3, r7, r3
    665e:	2217      	movs	r2, #23
    6660:	18ba      	adds	r2, r7, r2
    6662:	7812      	ldrb	r2, [r2, #0]
    6664:	2101      	movs	r1, #1
    6666:	430a      	orrs	r2, r1
    6668:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    666a:	687b      	ldr	r3, [r7, #4]
    666c:	2217      	movs	r2, #23
    666e:	18ba      	adds	r2, r7, r2
    6670:	7812      	ldrb	r2, [r2, #0]
    6672:	701a      	strb	r2, [r3, #0]
}
    6674:	46c0      	nop			; (mov r8, r8)
    6676:	46bd      	mov	sp, r7
    6678:	b006      	add	sp, #24
    667a:	bd80      	pop	{r7, pc}

0000667c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    667c:	b580      	push	{r7, lr}
    667e:	b088      	sub	sp, #32
    6680:	af00      	add	r7, sp, #0
    6682:	60b9      	str	r1, [r7, #8]
    6684:	607a      	str	r2, [r7, #4]
    6686:	230f      	movs	r3, #15
    6688:	18fb      	adds	r3, r7, r3
    668a:	1c02      	adds	r2, r0, #0
    668c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    668e:	230f      	movs	r3, #15
    6690:	18fb      	adds	r3, r7, r3
    6692:	781a      	ldrb	r2, [r3, #0]
    6694:	231b      	movs	r3, #27
    6696:	18fb      	adds	r3, r7, r3
    6698:	493e      	ldr	r1, [pc, #248]	; (6794 <_tcc_build_faults+0x118>)
    669a:	5c8a      	ldrb	r2, [r1, r2]
    669c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    669e:	2300      	movs	r3, #0
    66a0:	61fb      	str	r3, [r7, #28]
    66a2:	e06e      	b.n	6782 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    66a4:	69fa      	ldr	r2, [r7, #28]
    66a6:	0013      	movs	r3, r2
    66a8:	009b      	lsls	r3, r3, #2
    66aa:	189b      	adds	r3, r3, r2
    66ac:	005b      	lsls	r3, r3, #1
    66ae:	3328      	adds	r3, #40	; 0x28
    66b0:	68ba      	ldr	r2, [r7, #8]
    66b2:	18d3      	adds	r3, r2, r3
    66b4:	3304      	adds	r3, #4
    66b6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    66b8:	697b      	ldr	r3, [r7, #20]
    66ba:	7a5b      	ldrb	r3, [r3, #9]
    66bc:	221b      	movs	r2, #27
    66be:	18ba      	adds	r2, r7, r2
    66c0:	7812      	ldrb	r2, [r2, #0]
    66c2:	429a      	cmp	r2, r3
    66c4:	d801      	bhi.n	66ca <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    66c6:	2317      	movs	r3, #23
    66c8:	e05f      	b.n	678a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    66ca:	697b      	ldr	r3, [r7, #20]
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	2b0f      	cmp	r3, #15
    66d0:	d901      	bls.n	66d6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    66d2:	2317      	movs	r3, #23
    66d4:	e059      	b.n	678a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    66d6:	697b      	ldr	r3, [r7, #20]
    66d8:	781b      	ldrb	r3, [r3, #0]
    66da:	061b      	lsls	r3, r3, #24
    66dc:	001a      	movs	r2, r3
    66de:	23f0      	movs	r3, #240	; 0xf0
    66e0:	051b      	lsls	r3, r3, #20
    66e2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    66e4:	697b      	ldr	r3, [r7, #20]
    66e6:	785b      	ldrb	r3, [r3, #1]
    66e8:	041b      	lsls	r3, r3, #16
    66ea:	0019      	movs	r1, r3
    66ec:	23ff      	movs	r3, #255	; 0xff
    66ee:	041b      	lsls	r3, r3, #16
    66f0:	400b      	ands	r3, r1
    66f2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    66f4:	697b      	ldr	r3, [r7, #20]
    66f6:	789b      	ldrb	r3, [r3, #2]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d001      	beq.n	6700 <_tcc_build_faults+0x84>
    66fc:	2380      	movs	r3, #128	; 0x80
    66fe:	e000      	b.n	6702 <_tcc_build_faults+0x86>
    6700:	2300      	movs	r3, #0
    6702:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    6704:	697b      	ldr	r3, [r7, #20]
    6706:	78db      	ldrb	r3, [r3, #3]
    6708:	2b00      	cmp	r3, #0
    670a:	d001      	beq.n	6710 <_tcc_build_faults+0x94>
    670c:	2308      	movs	r3, #8
    670e:	e000      	b.n	6712 <_tcc_build_faults+0x96>
    6710:	2300      	movs	r3, #0
    6712:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    6714:	697b      	ldr	r3, [r7, #20]
    6716:	791b      	ldrb	r3, [r3, #4]
    6718:	2b00      	cmp	r3, #0
    671a:	d001      	beq.n	6720 <_tcc_build_faults+0xa4>
    671c:	2310      	movs	r3, #16
    671e:	e000      	b.n	6722 <_tcc_build_faults+0xa6>
    6720:	2300      	movs	r3, #0
    6722:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    6724:	697b      	ldr	r3, [r7, #20]
    6726:	795b      	ldrb	r3, [r3, #5]
    6728:	0019      	movs	r1, r3
    672a:	2303      	movs	r3, #3
    672c:	400b      	ands	r3, r1
    672e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    6730:	697b      	ldr	r3, [r7, #20]
    6732:	799b      	ldrb	r3, [r3, #6]
    6734:	015b      	lsls	r3, r3, #5
    6736:	0019      	movs	r1, r3
    6738:	2360      	movs	r3, #96	; 0x60
    673a:	400b      	ands	r3, r1
    673c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    673e:	697b      	ldr	r3, [r7, #20]
    6740:	79db      	ldrb	r3, [r3, #7]
    6742:	021b      	lsls	r3, r3, #8
    6744:	0019      	movs	r1, r3
    6746:	23c0      	movs	r3, #192	; 0xc0
    6748:	009b      	lsls	r3, r3, #2
    674a:	400b      	ands	r3, r1
    674c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    674e:	697b      	ldr	r3, [r7, #20]
    6750:	7a1b      	ldrb	r3, [r3, #8]
    6752:	031b      	lsls	r3, r3, #12
    6754:	0019      	movs	r1, r3
    6756:	23e0      	movs	r3, #224	; 0xe0
    6758:	01db      	lsls	r3, r3, #7
    675a:	400b      	ands	r3, r1
    675c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    675e:	697b      	ldr	r3, [r7, #20]
    6760:	7a5b      	ldrb	r3, [r3, #9]
    6762:	029b      	lsls	r3, r3, #10
    6764:	0019      	movs	r1, r3
    6766:	23c0      	movs	r3, #192	; 0xc0
    6768:	011b      	lsls	r3, r3, #4
    676a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    676c:	4313      	orrs	r3, r2
    676e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    6770:	69fb      	ldr	r3, [r7, #28]
    6772:	009b      	lsls	r3, r3, #2
    6774:	687a      	ldr	r2, [r7, #4]
    6776:	18d3      	adds	r3, r2, r3
    6778:	693a      	ldr	r2, [r7, #16]
    677a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    677c:	69fb      	ldr	r3, [r7, #28]
    677e:	3301      	adds	r3, #1
    6780:	61fb      	str	r3, [r7, #28]
    6782:	69fb      	ldr	r3, [r7, #28]
    6784:	2b01      	cmp	r3, #1
    6786:	dd8d      	ble.n	66a4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    6788:	2300      	movs	r3, #0
}
    678a:	0018      	movs	r0, r3
    678c:	46bd      	mov	sp, r7
    678e:	b008      	add	sp, #32
    6790:	bd80      	pop	{r7, pc}
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	0000f598 	.word	0x0000f598

00006798 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    6798:	b580      	push	{r7, lr}
    679a:	b088      	sub	sp, #32
    679c:	af00      	add	r7, sp, #0
    679e:	60b9      	str	r1, [r7, #8]
    67a0:	607a      	str	r2, [r7, #4]
    67a2:	230f      	movs	r3, #15
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	1c02      	adds	r2, r0, #0
    67a8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    67aa:	230f      	movs	r3, #15
    67ac:	18fb      	adds	r3, r7, r3
    67ae:	781a      	ldrb	r2, [r3, #0]
    67b0:	2317      	movs	r3, #23
    67b2:	18fb      	adds	r3, r7, r3
    67b4:	492d      	ldr	r1, [pc, #180]	; (686c <_tcc_build_drvctrl+0xd4>)
    67b6:	5c8a      	ldrb	r2, [r1, r2]
    67b8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    67ba:	2300      	movs	r3, #0
    67bc:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    67be:	2300      	movs	r3, #0
    67c0:	61fb      	str	r3, [r7, #28]
    67c2:	e048      	b.n	6856 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    67c4:	68ba      	ldr	r2, [r7, #8]
    67c6:	2150      	movs	r1, #80	; 0x50
    67c8:	69fb      	ldr	r3, [r7, #28]
    67ca:	18d3      	adds	r3, r2, r3
    67cc:	185b      	adds	r3, r3, r1
    67ce:	781b      	ldrb	r3, [r3, #0]
    67d0:	2b00      	cmp	r3, #0
    67d2:	d010      	beq.n	67f6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    67d4:	2317      	movs	r3, #23
    67d6:	18fb      	adds	r3, r7, r3
    67d8:	781a      	ldrb	r2, [r3, #0]
    67da:	69fb      	ldr	r3, [r7, #28]
    67dc:	429a      	cmp	r2, r3
    67de:	d801      	bhi.n	67e4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    67e0:	2317      	movs	r3, #23
    67e2:	e03f      	b.n	6864 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    67e4:	2380      	movs	r3, #128	; 0x80
    67e6:	025a      	lsls	r2, r3, #9
    67e8:	69fb      	ldr	r3, [r7, #28]
    67ea:	409a      	lsls	r2, r3
    67ec:	0013      	movs	r3, r2
    67ee:	001a      	movs	r2, r3
    67f0:	69bb      	ldr	r3, [r7, #24]
    67f2:	4313      	orrs	r3, r2
    67f4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    67f6:	68ba      	ldr	r2, [r7, #8]
    67f8:	69fb      	ldr	r3, [r7, #28]
    67fa:	331c      	adds	r3, #28
    67fc:	005b      	lsls	r3, r3, #1
    67fe:	18d3      	adds	r3, r2, r3
    6800:	3309      	adds	r3, #9
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	2b00      	cmp	r3, #0
    6806:	d023      	beq.n	6850 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    6808:	2317      	movs	r3, #23
    680a:	18fb      	adds	r3, r7, r3
    680c:	781a      	ldrb	r2, [r3, #0]
    680e:	69fb      	ldr	r3, [r7, #28]
    6810:	429a      	cmp	r2, r3
    6812:	d801      	bhi.n	6818 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    6814:	2317      	movs	r3, #23
    6816:	e025      	b.n	6864 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    6818:	68ba      	ldr	r2, [r7, #8]
    681a:	69fb      	ldr	r3, [r7, #28]
    681c:	331c      	adds	r3, #28
    681e:	005b      	lsls	r3, r3, #1
    6820:	18d3      	adds	r3, r2, r3
    6822:	3309      	adds	r3, #9
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	2b02      	cmp	r3, #2
    6828:	d10a      	bne.n	6840 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    682a:	2302      	movs	r3, #2
    682c:	33ff      	adds	r3, #255	; 0xff
    682e:	001a      	movs	r2, r3
    6830:	69fb      	ldr	r3, [r7, #28]
    6832:	409a      	lsls	r2, r3
    6834:	0013      	movs	r3, r2
    6836:	001a      	movs	r2, r3
    6838:	69bb      	ldr	r3, [r7, #24]
    683a:	4313      	orrs	r3, r2
    683c:	61bb      	str	r3, [r7, #24]
    683e:	e007      	b.n	6850 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6840:	2201      	movs	r2, #1
    6842:	69fb      	ldr	r3, [r7, #28]
    6844:	409a      	lsls	r2, r3
    6846:	0013      	movs	r3, r2
    6848:	001a      	movs	r2, r3
    684a:	69bb      	ldr	r3, [r7, #24]
    684c:	4313      	orrs	r3, r2
    684e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    6850:	69fb      	ldr	r3, [r7, #28]
    6852:	3301      	adds	r3, #1
    6854:	61fb      	str	r3, [r7, #28]
    6856:	69fb      	ldr	r3, [r7, #28]
    6858:	2b07      	cmp	r3, #7
    685a:	d9b3      	bls.n	67c4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    685c:	687b      	ldr	r3, [r7, #4]
    685e:	69ba      	ldr	r2, [r7, #24]
    6860:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    6862:	2300      	movs	r3, #0
}
    6864:	0018      	movs	r0, r3
    6866:	46bd      	mov	sp, r7
    6868:	b008      	add	sp, #32
    686a:	bd80      	pop	{r7, pc}
    686c:	0000f59c 	.word	0x0000f59c

00006870 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    6870:	b580      	push	{r7, lr}
    6872:	b088      	sub	sp, #32
    6874:	af00      	add	r7, sp, #0
    6876:	60b9      	str	r1, [r7, #8]
    6878:	607a      	str	r2, [r7, #4]
    687a:	230f      	movs	r3, #15
    687c:	18fb      	adds	r3, r7, r3
    687e:	1c02      	adds	r2, r0, #0
    6880:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    6882:	230f      	movs	r3, #15
    6884:	18fb      	adds	r3, r7, r3
    6886:	781a      	ldrb	r2, [r3, #0]
    6888:	2317      	movs	r3, #23
    688a:	18fb      	adds	r3, r7, r3
    688c:	491d      	ldr	r1, [pc, #116]	; (6904 <_tcc_build_waves+0x94>)
    688e:	5c8a      	ldrb	r2, [r1, r2]
    6890:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    6892:	68bb      	ldr	r3, [r7, #8]
    6894:	3310      	adds	r3, #16
    6896:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6898:	693b      	ldr	r3, [r7, #16]
    689a:	7a5b      	ldrb	r3, [r3, #9]
    689c:	011b      	lsls	r3, r3, #4
    689e:	001a      	movs	r2, r3
    68a0:	2330      	movs	r3, #48	; 0x30
    68a2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    68a4:	693b      	ldr	r3, [r7, #16]
    68a6:	7a1b      	ldrb	r3, [r3, #8]
    68a8:	0019      	movs	r1, r3
    68aa:	2307      	movs	r3, #7
    68ac:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    68ae:	4313      	orrs	r3, r2
    68b0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    68b2:	2300      	movs	r3, #0
    68b4:	61fb      	str	r3, [r7, #28]
    68b6:	e01a      	b.n	68ee <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    68b8:	693a      	ldr	r2, [r7, #16]
    68ba:	69fb      	ldr	r3, [r7, #28]
    68bc:	18d3      	adds	r3, r2, r3
    68be:	3304      	adds	r3, #4
    68c0:	781b      	ldrb	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d010      	beq.n	68e8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    68c6:	2317      	movs	r3, #23
    68c8:	18fb      	adds	r3, r7, r3
    68ca:	781a      	ldrb	r2, [r3, #0]
    68cc:	69fb      	ldr	r3, [r7, #28]
    68ce:	429a      	cmp	r2, r3
    68d0:	dc01      	bgt.n	68d6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    68d2:	2317      	movs	r3, #23
    68d4:	e012      	b.n	68fc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    68d6:	2380      	movs	r3, #128	; 0x80
    68d8:	025a      	lsls	r2, r3, #9
    68da:	69fb      	ldr	r3, [r7, #28]
    68dc:	409a      	lsls	r2, r3
    68de:	0013      	movs	r3, r2
    68e0:	001a      	movs	r2, r3
    68e2:	69bb      	ldr	r3, [r7, #24]
    68e4:	4313      	orrs	r3, r2
    68e6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    68e8:	69fb      	ldr	r3, [r7, #28]
    68ea:	3301      	adds	r3, #1
    68ec:	61fb      	str	r3, [r7, #28]
    68ee:	69fb      	ldr	r3, [r7, #28]
    68f0:	2b03      	cmp	r3, #3
    68f2:	dde1      	ble.n	68b8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    68f4:	687b      	ldr	r3, [r7, #4]
    68f6:	69ba      	ldr	r2, [r7, #24]
    68f8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    68fa:	2300      	movs	r3, #0
}
    68fc:	0018      	movs	r0, r3
    68fe:	46bd      	mov	sp, r7
    6900:	b008      	add	sp, #32
    6902:	bd80      	pop	{r7, pc}
    6904:	0000f598 	.word	0x0000f598

00006908 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    6908:	b590      	push	{r4, r7, lr}
    690a:	b091      	sub	sp, #68	; 0x44
    690c:	af00      	add	r7, sp, #0
    690e:	60f8      	str	r0, [r7, #12]
    6910:	60b9      	str	r1, [r7, #8]
    6912:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6914:	233b      	movs	r3, #59	; 0x3b
    6916:	18fc      	adds	r4, r7, r3
    6918:	68bb      	ldr	r3, [r7, #8]
    691a:	0018      	movs	r0, r3
    691c:	4bc4      	ldr	r3, [pc, #784]	; (6c30 <tcc_init+0x328>)
    691e:	4798      	blx	r3
    6920:	0003      	movs	r3, r0
    6922:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    6924:	233b      	movs	r3, #59	; 0x3b
    6926:	18fb      	adds	r3, r7, r3
    6928:	781a      	ldrb	r2, [r3, #0]
    692a:	4bc2      	ldr	r3, [pc, #776]	; (6c34 <tcc_init+0x32c>)
    692c:	0092      	lsls	r2, r2, #2
    692e:	58d3      	ldr	r3, [r2, r3]
    6930:	0019      	movs	r1, r3
    6932:	2002      	movs	r0, #2
    6934:	4bc0      	ldr	r3, [pc, #768]	; (6c38 <tcc_init+0x330>)
    6936:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    6938:	68bb      	ldr	r3, [r7, #8]
    693a:	681b      	ldr	r3, [r3, #0]
    693c:	2202      	movs	r2, #2
    693e:	4013      	ands	r3, r2
    6940:	d001      	beq.n	6946 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    6942:	231c      	movs	r3, #28
    6944:	e1be      	b.n	6cc4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    6946:	68bb      	ldr	r3, [r7, #8]
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	2201      	movs	r2, #1
    694c:	4013      	ands	r3, r2
    694e:	d001      	beq.n	6954 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    6950:	231c      	movs	r3, #28
    6952:	e1b7      	b.n	6cc4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    6954:	233b      	movs	r3, #59	; 0x3b
    6956:	18fb      	adds	r3, r7, r3
    6958:	781a      	ldrb	r2, [r3, #0]
    695a:	4bb8      	ldr	r3, [pc, #736]	; (6c3c <tcc_init+0x334>)
    695c:	0092      	lsls	r2, r2, #2
    695e:	58d3      	ldr	r3, [r2, r3]
    6960:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	681a      	ldr	r2, [r3, #0]
    6966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6968:	429a      	cmp	r2, r3
    696a:	d804      	bhi.n	6976 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    696c:	687b      	ldr	r3, [r7, #4]
    696e:	685a      	ldr	r2, [r3, #4]
    6970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6972:	429a      	cmp	r2, r3
    6974:	d901      	bls.n	697a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    6976:	2317      	movs	r3, #23
    6978:	e1a4      	b.n	6cc4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    697a:	2300      	movs	r3, #0
    697c:	63fb      	str	r3, [r7, #60]	; 0x3c
    697e:	e00e      	b.n	699e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    6980:	687a      	ldr	r2, [r7, #4]
    6982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6984:	3306      	adds	r3, #6
    6986:	009b      	lsls	r3, r3, #2
    6988:	18d3      	adds	r3, r2, r3
    698a:	3304      	adds	r3, #4
    698c:	681a      	ldr	r2, [r3, #0]
    698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6990:	429a      	cmp	r2, r3
    6992:	d901      	bls.n	6998 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    6994:	2317      	movs	r3, #23
    6996:	e195      	b.n	6cc4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    699a:	3301      	adds	r3, #1
    699c:	63fb      	str	r3, [r7, #60]	; 0x3c
    699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69a0:	2b03      	cmp	r3, #3
    69a2:	dded      	ble.n	6980 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    69a4:	2300      	movs	r3, #0
    69a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    69a8:	e019      	b.n	69de <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    69aa:	687a      	ldr	r2, [r7, #4]
    69ac:	2198      	movs	r1, #152	; 0x98
    69ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69b0:	18d3      	adds	r3, r2, r3
    69b2:	185b      	adds	r3, r3, r1
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	2201      	movs	r2, #1
    69b8:	4053      	eors	r3, r2
    69ba:	b2db      	uxtb	r3, r3
    69bc:	2b00      	cmp	r3, #0
    69be:	d10a      	bne.n	69d6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    69c0:	233b      	movs	r3, #59	; 0x3b
    69c2:	18fb      	adds	r3, r7, r3
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	4a9e      	ldr	r2, [pc, #632]	; (6c40 <tcc_init+0x338>)
    69c8:	5cd3      	ldrb	r3, [r2, r3]
    69ca:	001a      	movs	r2, r3
    69cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69ce:	429a      	cmp	r2, r3
    69d0:	dc02      	bgt.n	69d8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    69d2:	2317      	movs	r3, #23
    69d4:	e176      	b.n	6cc4 <tcc_init+0x3bc>
			continue;
    69d6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    69d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69da:	3301      	adds	r3, #1
    69dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    69de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    69e0:	2b07      	cmp	r3, #7
    69e2:	dde2      	ble.n	69aa <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    69e4:	2300      	movs	r3, #0
    69e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    69e8:	2333      	movs	r3, #51	; 0x33
    69ea:	18fc      	adds	r4, r7, r3
    69ec:	232c      	movs	r3, #44	; 0x2c
    69ee:	18fa      	adds	r2, r7, r3
    69f0:	6879      	ldr	r1, [r7, #4]
    69f2:	233b      	movs	r3, #59	; 0x3b
    69f4:	18fb      	adds	r3, r7, r3
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	0018      	movs	r0, r3
    69fa:	4b92      	ldr	r3, [pc, #584]	; (6c44 <tcc_init+0x33c>)
    69fc:	4798      	blx	r3
    69fe:	0003      	movs	r3, r0
    6a00:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    6a02:	2333      	movs	r3, #51	; 0x33
    6a04:	18fb      	adds	r3, r7, r3
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d003      	beq.n	6a14 <tcc_init+0x10c>
		return status;
    6a0c:	2333      	movs	r3, #51	; 0x33
    6a0e:	18fb      	adds	r3, r7, r3
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	e157      	b.n	6cc4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    6a14:	232b      	movs	r3, #43	; 0x2b
    6a16:	18fa      	adds	r2, r7, r3
    6a18:	6879      	ldr	r1, [r7, #4]
    6a1a:	233b      	movs	r3, #59	; 0x3b
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	0018      	movs	r0, r3
    6a22:	4b89      	ldr	r3, [pc, #548]	; (6c48 <tcc_init+0x340>)
    6a24:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    6a26:	2333      	movs	r3, #51	; 0x33
    6a28:	18fc      	adds	r4, r7, r3
    6a2a:	2320      	movs	r3, #32
    6a2c:	18fa      	adds	r2, r7, r3
    6a2e:	6879      	ldr	r1, [r7, #4]
    6a30:	233b      	movs	r3, #59	; 0x3b
    6a32:	18fb      	adds	r3, r7, r3
    6a34:	781b      	ldrb	r3, [r3, #0]
    6a36:	0018      	movs	r0, r3
    6a38:	4b84      	ldr	r3, [pc, #528]	; (6c4c <tcc_init+0x344>)
    6a3a:	4798      	blx	r3
    6a3c:	0003      	movs	r3, r0
    6a3e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    6a40:	2333      	movs	r3, #51	; 0x33
    6a42:	18fb      	adds	r3, r7, r3
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	2b00      	cmp	r3, #0
    6a48:	d003      	beq.n	6a52 <tcc_init+0x14a>
		return status;
    6a4a:	2333      	movs	r3, #51	; 0x33
    6a4c:	18fb      	adds	r3, r7, r3
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	e138      	b.n	6cc4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    6a52:	2300      	movs	r3, #0
    6a54:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    6a56:	2333      	movs	r3, #51	; 0x33
    6a58:	18fc      	adds	r4, r7, r3
    6a5a:	231c      	movs	r3, #28
    6a5c:	18fa      	adds	r2, r7, r3
    6a5e:	6879      	ldr	r1, [r7, #4]
    6a60:	233b      	movs	r3, #59	; 0x3b
    6a62:	18fb      	adds	r3, r7, r3
    6a64:	781b      	ldrb	r3, [r3, #0]
    6a66:	0018      	movs	r0, r3
    6a68:	4b79      	ldr	r3, [pc, #484]	; (6c50 <tcc_init+0x348>)
    6a6a:	4798      	blx	r3
    6a6c:	0003      	movs	r3, r0
    6a6e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    6a70:	2333      	movs	r3, #51	; 0x33
    6a72:	18fb      	adds	r3, r7, r3
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	2b00      	cmp	r3, #0
    6a78:	d003      	beq.n	6a82 <tcc_init+0x17a>
		return status;
    6a7a:	2333      	movs	r3, #51	; 0x33
    6a7c:	18fb      	adds	r3, r7, r3
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	e120      	b.n	6cc4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    6a82:	2333      	movs	r3, #51	; 0x33
    6a84:	18fc      	adds	r4, r7, r3
    6a86:	2318      	movs	r3, #24
    6a88:	18fa      	adds	r2, r7, r3
    6a8a:	6879      	ldr	r1, [r7, #4]
    6a8c:	233b      	movs	r3, #59	; 0x3b
    6a8e:	18fb      	adds	r3, r7, r3
    6a90:	781b      	ldrb	r3, [r3, #0]
    6a92:	0018      	movs	r0, r3
    6a94:	4b6f      	ldr	r3, [pc, #444]	; (6c54 <tcc_init+0x34c>)
    6a96:	4798      	blx	r3
    6a98:	0003      	movs	r3, r0
    6a9a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    6a9c:	2333      	movs	r3, #51	; 0x33
    6a9e:	18fb      	adds	r3, r7, r3
    6aa0:	781b      	ldrb	r3, [r3, #0]
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d003      	beq.n	6aae <tcc_init+0x1a6>
		return status;
    6aa6:	2333      	movs	r3, #51	; 0x33
    6aa8:	18fb      	adds	r3, r7, r3
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	e10a      	b.n	6cc4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6aae:	2300      	movs	r3, #0
    6ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    6ab2:	e009      	b.n	6ac8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    6ab4:	68fa      	ldr	r2, [r7, #12]
    6ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ab8:	009b      	lsls	r3, r3, #2
    6aba:	18d3      	adds	r3, r2, r3
    6abc:	3304      	adds	r3, #4
    6abe:	2200      	movs	r2, #0
    6ac0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ac4:	3301      	adds	r3, #1
    6ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    6ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6aca:	2b0b      	cmp	r3, #11
    6acc:	ddf2      	ble.n	6ab4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    6ace:	68fb      	ldr	r3, [r7, #12]
    6ad0:	2200      	movs	r2, #0
    6ad2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    6ad4:	68fb      	ldr	r3, [r7, #12]
    6ad6:	2200      	movs	r2, #0
    6ad8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    6ada:	233b      	movs	r3, #59	; 0x3b
    6adc:	18fb      	adds	r3, r7, r3
    6ade:	781a      	ldrb	r2, [r3, #0]
    6ae0:	4b5d      	ldr	r3, [pc, #372]	; (6c58 <tcc_init+0x350>)
    6ae2:	0092      	lsls	r2, r2, #2
    6ae4:	68f9      	ldr	r1, [r7, #12]
    6ae6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    6ae8:	68fb      	ldr	r3, [r7, #12]
    6aea:	68ba      	ldr	r2, [r7, #8]
    6aec:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6aee:	687b      	ldr	r3, [r7, #4]
    6af0:	22a0      	movs	r2, #160	; 0xa0
    6af2:	5c99      	ldrb	r1, [r3, r2]
    6af4:	68fb      	ldr	r3, [r7, #12]
    6af6:	223c      	movs	r2, #60	; 0x3c
    6af8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    6afa:	2314      	movs	r3, #20
    6afc:	18fb      	adds	r3, r7, r3
    6afe:	0018      	movs	r0, r3
    6b00:	4b56      	ldr	r3, [pc, #344]	; (6c5c <tcc_init+0x354>)
    6b02:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	7a9a      	ldrb	r2, [r3, #10]
    6b08:	2314      	movs	r3, #20
    6b0a:	18fb      	adds	r3, r7, r3
    6b0c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6b0e:	233b      	movs	r3, #59	; 0x3b
    6b10:	18fb      	adds	r3, r7, r3
    6b12:	781b      	ldrb	r3, [r3, #0]
    6b14:	4a52      	ldr	r2, [pc, #328]	; (6c60 <tcc_init+0x358>)
    6b16:	5cd3      	ldrb	r3, [r2, r3]
    6b18:	2214      	movs	r2, #20
    6b1a:	18ba      	adds	r2, r7, r2
    6b1c:	0011      	movs	r1, r2
    6b1e:	0018      	movs	r0, r3
    6b20:	4b50      	ldr	r3, [pc, #320]	; (6c64 <tcc_init+0x35c>)
    6b22:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    6b24:	233b      	movs	r3, #59	; 0x3b
    6b26:	18fb      	adds	r3, r7, r3
    6b28:	781b      	ldrb	r3, [r3, #0]
    6b2a:	4a4d      	ldr	r2, [pc, #308]	; (6c60 <tcc_init+0x358>)
    6b2c:	5cd3      	ldrb	r3, [r2, r3]
    6b2e:	0018      	movs	r0, r3
    6b30:	4b4d      	ldr	r3, [pc, #308]	; (6c68 <tcc_init+0x360>)
    6b32:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6b34:	2300      	movs	r3, #0
    6b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    6b38:	e02d      	b.n	6b96 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    6b3a:	687a      	ldr	r2, [r7, #4]
    6b3c:	2198      	movs	r1, #152	; 0x98
    6b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b40:	18d3      	adds	r3, r2, r3
    6b42:	185b      	adds	r3, r3, r1
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	2201      	movs	r2, #1
    6b48:	4053      	eors	r3, r2
    6b4a:	b2db      	uxtb	r3, r3
    6b4c:	2b00      	cmp	r3, #0
    6b4e:	d11e      	bne.n	6b8e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    6b50:	2310      	movs	r3, #16
    6b52:	18fb      	adds	r3, r7, r3
    6b54:	0018      	movs	r0, r3
    6b56:	4b45      	ldr	r3, [pc, #276]	; (6c6c <tcc_init+0x364>)
    6b58:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6b5e:	321e      	adds	r2, #30
    6b60:	0092      	lsls	r2, r2, #2
    6b62:	58d3      	ldr	r3, [r2, r3]
    6b64:	b2da      	uxtb	r2, r3
    6b66:	2310      	movs	r3, #16
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    6b6c:	2310      	movs	r3, #16
    6b6e:	18fb      	adds	r3, r7, r3
    6b70:	2201      	movs	r2, #1
    6b72:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    6b74:	687b      	ldr	r3, [r7, #4]
    6b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6b78:	3216      	adds	r2, #22
    6b7a:	0092      	lsls	r2, r2, #2
    6b7c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    6b7e:	b2db      	uxtb	r3, r3
    6b80:	2210      	movs	r2, #16
    6b82:	18ba      	adds	r2, r7, r2
    6b84:	0011      	movs	r1, r2
    6b86:	0018      	movs	r0, r3
    6b88:	4b39      	ldr	r3, [pc, #228]	; (6c70 <tcc_init+0x368>)
    6b8a:	4798      	blx	r3
    6b8c:	e000      	b.n	6b90 <tcc_init+0x288>
			continue;
    6b8e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6b92:	3301      	adds	r3, #1
    6b94:	63fb      	str	r3, [r7, #60]	; 0x3c
    6b96:	233b      	movs	r3, #59	; 0x3b
    6b98:	18fb      	adds	r3, r7, r3
    6b9a:	781b      	ldrb	r3, [r3, #0]
    6b9c:	4a28      	ldr	r2, [pc, #160]	; (6c40 <tcc_init+0x338>)
    6b9e:	5cd3      	ldrb	r3, [r2, r3]
    6ba0:	001a      	movs	r2, r3
    6ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ba4:	429a      	cmp	r2, r3
    6ba6:	dcc8      	bgt.n	6b3a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    6ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6baa:	68bb      	ldr	r3, [r7, #8]
    6bac:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6bae:	46c0      	nop			; (mov r8, r8)
    6bb0:	68bb      	ldr	r3, [r7, #8]
    6bb2:	689b      	ldr	r3, [r3, #8]
    6bb4:	2204      	movs	r2, #4
    6bb6:	4013      	ands	r3, r2
    6bb8:	d1fa      	bne.n	6bb0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    6bba:	68bb      	ldr	r3, [r7, #8]
    6bbc:	22ff      	movs	r2, #255	; 0xff
    6bbe:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6bc0:	46c0      	nop			; (mov r8, r8)
    6bc2:	68bb      	ldr	r3, [r7, #8]
    6bc4:	689b      	ldr	r3, [r3, #8]
    6bc6:	2204      	movs	r2, #4
    6bc8:	4013      	ands	r3, r2
    6bca:	d1fa      	bne.n	6bc2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    6bcc:	232b      	movs	r3, #43	; 0x2b
    6bce:	18fb      	adds	r3, r7, r3
    6bd0:	781a      	ldrb	r2, [r3, #0]
    6bd2:	68bb      	ldr	r3, [r7, #8]
    6bd4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    6bd6:	2320      	movs	r3, #32
    6bd8:	18fb      	adds	r3, r7, r3
    6bda:	681a      	ldr	r2, [r3, #0]
    6bdc:	68bb      	ldr	r3, [r7, #8]
    6bde:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    6be0:	2320      	movs	r3, #32
    6be2:	18fb      	adds	r3, r7, r3
    6be4:	685a      	ldr	r2, [r3, #4]
    6be6:	68bb      	ldr	r3, [r7, #8]
    6be8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    6bea:	69fa      	ldr	r2, [r7, #28]
    6bec:	68bb      	ldr	r3, [r7, #8]
    6bee:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6bf0:	46c0      	nop			; (mov r8, r8)
    6bf2:	68bb      	ldr	r3, [r7, #8]
    6bf4:	689b      	ldr	r3, [r3, #8]
    6bf6:	4a1f      	ldr	r2, [pc, #124]	; (6c74 <tcc_init+0x36c>)
    6bf8:	4013      	ands	r3, r2
    6bfa:	d1fa      	bne.n	6bf2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    6bfc:	69ba      	ldr	r2, [r7, #24]
    6bfe:	68bb      	ldr	r3, [r7, #8]
    6c00:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6c02:	46c0      	nop			; (mov r8, r8)
    6c04:	68bb      	ldr	r3, [r7, #8]
    6c06:	689b      	ldr	r3, [r3, #8]
    6c08:	2210      	movs	r2, #16
    6c0a:	4013      	ands	r3, r2
    6c0c:	d1fa      	bne.n	6c04 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	681a      	ldr	r2, [r3, #0]
    6c12:	68bb      	ldr	r3, [r7, #8]
    6c14:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6c16:	46c0      	nop			; (mov r8, r8)
    6c18:	68bb      	ldr	r3, [r7, #8]
    6c1a:	689b      	ldr	r3, [r3, #8]
    6c1c:	4a16      	ldr	r2, [pc, #88]	; (6c78 <tcc_init+0x370>)
    6c1e:	4013      	ands	r3, r2
    6c20:	d1fa      	bne.n	6c18 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    6c22:	687b      	ldr	r3, [r7, #4]
    6c24:	685a      	ldr	r2, [r3, #4]
    6c26:	68bb      	ldr	r3, [r7, #8]
    6c28:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6c2a:	2300      	movs	r3, #0
    6c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    6c2e:	e03f      	b.n	6cb0 <tcc_init+0x3a8>
    6c30:	00006271 	.word	0x00006271
    6c34:	0000f580 	.word	0x0000f580
    6c38:	000061ed 	.word	0x000061ed
    6c3c:	0000f58c 	.word	0x0000f58c
    6c40:	0000f59c 	.word	0x0000f59c
    6c44:	0000657d 	.word	0x0000657d
    6c48:	00006621 	.word	0x00006621
    6c4c:	0000667d 	.word	0x0000667d
    6c50:	00006799 	.word	0x00006799
    6c54:	00006871 	.word	0x00006871
    6c58:	20000430 	.word	0x20000430
    6c5c:	000061d5 	.word	0x000061d5
    6c60:	0000f57c 	.word	0x0000f57c
    6c64:	00009a9d 	.word	0x00009a9d
    6c68:	00009ae1 	.word	0x00009ae1
    6c6c:	00006249 	.word	0x00006249
    6c70:	00009d89 	.word	0x00009d89
    6c74:	00020040 	.word	0x00020040
    6c78:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    6c7c:	46c0      	nop			; (mov r8, r8)
    6c7e:	68bb      	ldr	r3, [r7, #8]
    6c80:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    6c82:	4912      	ldr	r1, [pc, #72]	; (6ccc <tcc_init+0x3c4>)
    6c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6c86:	4091      	lsls	r1, r2
    6c88:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    6c8a:	4013      	ands	r3, r2
    6c8c:	d1f7      	bne.n	6c7e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    6c8e:	687a      	ldr	r2, [r7, #4]
    6c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6c92:	3306      	adds	r3, #6
    6c94:	009b      	lsls	r3, r3, #2
    6c96:	18d3      	adds	r3, r2, r3
    6c98:	3304      	adds	r3, #4
    6c9a:	681a      	ldr	r2, [r3, #0]
    6c9c:	68b9      	ldr	r1, [r7, #8]
    6c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ca0:	3310      	adds	r3, #16
    6ca2:	009b      	lsls	r3, r3, #2
    6ca4:	18cb      	adds	r3, r1, r3
    6ca6:	3304      	adds	r3, #4
    6ca8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cac:	3301      	adds	r3, #1
    6cae:	63fb      	str	r3, [r7, #60]	; 0x3c
    6cb0:	233b      	movs	r3, #59	; 0x3b
    6cb2:	18fb      	adds	r3, r7, r3
    6cb4:	781b      	ldrb	r3, [r3, #0]
    6cb6:	4a06      	ldr	r2, [pc, #24]	; (6cd0 <tcc_init+0x3c8>)
    6cb8:	5cd3      	ldrb	r3, [r2, r3]
    6cba:	001a      	movs	r2, r3
    6cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6cbe:	429a      	cmp	r2, r3
    6cc0:	dcdc      	bgt.n	6c7c <tcc_init+0x374>
	}

	return STATUS_OK;
    6cc2:	2300      	movs	r3, #0
}
    6cc4:	0018      	movs	r0, r3
    6cc6:	46bd      	mov	sp, r7
    6cc8:	b011      	add	sp, #68	; 0x44
    6cca:	bd90      	pop	{r4, r7, pc}
    6ccc:	00080100 	.word	0x00080100
    6cd0:	0000f598 	.word	0x0000f598

00006cd4 <system_interrupt_enable>:
{
    6cd4:	b580      	push	{r7, lr}
    6cd6:	b082      	sub	sp, #8
    6cd8:	af00      	add	r7, sp, #0
    6cda:	0002      	movs	r2, r0
    6cdc:	1dfb      	adds	r3, r7, #7
    6cde:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ce0:	4b06      	ldr	r3, [pc, #24]	; (6cfc <system_interrupt_enable+0x28>)
    6ce2:	1dfa      	adds	r2, r7, #7
    6ce4:	7812      	ldrb	r2, [r2, #0]
    6ce6:	0011      	movs	r1, r2
    6ce8:	221f      	movs	r2, #31
    6cea:	400a      	ands	r2, r1
    6cec:	2101      	movs	r1, #1
    6cee:	4091      	lsls	r1, r2
    6cf0:	000a      	movs	r2, r1
    6cf2:	601a      	str	r2, [r3, #0]
}
    6cf4:	46c0      	nop			; (mov r8, r8)
    6cf6:	46bd      	mov	sp, r7
    6cf8:	b002      	add	sp, #8
    6cfa:	bd80      	pop	{r7, pc}
    6cfc:	e000e100 	.word	0xe000e100

00006d00 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b082      	sub	sp, #8
    6d04:	af00      	add	r7, sp, #0
    6d06:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    6d08:	4a04      	ldr	r2, [pc, #16]	; (6d1c <_tcc_interrupt_get_interrupt_vector+0x1c>)
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	18d3      	adds	r3, r2, r3
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	b25b      	sxtb	r3, r3
}
    6d12:	0018      	movs	r0, r3
    6d14:	46bd      	mov	sp, r7
    6d16:	b002      	add	sp, #8
    6d18:	bd80      	pop	{r7, pc}
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	2000000c 	.word	0x2000000c

00006d20 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    6d20:	b580      	push	{r7, lr}
    6d22:	b084      	sub	sp, #16
    6d24:	af00      	add	r7, sp, #0
    6d26:	60f8      	str	r0, [r7, #12]
    6d28:	60b9      	str	r1, [r7, #8]
    6d2a:	1dfb      	adds	r3, r7, #7
    6d2c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6d2e:	1dfb      	adds	r3, r7, #7
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	68fa      	ldr	r2, [r7, #12]
    6d34:	009b      	lsls	r3, r3, #2
    6d36:	18d3      	adds	r3, r2, r3
    6d38:	3304      	adds	r3, #4
    6d3a:	68ba      	ldr	r2, [r7, #8]
    6d3c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    6d3e:	68fb      	ldr	r3, [r7, #12]
    6d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    6d42:	1dfb      	adds	r3, r7, #7
    6d44:	7819      	ldrb	r1, [r3, #0]
    6d46:	4b05      	ldr	r3, [pc, #20]	; (6d5c <tcc_register_callback+0x3c>)
    6d48:	0089      	lsls	r1, r1, #2
    6d4a:	58cb      	ldr	r3, [r1, r3]
    6d4c:	431a      	orrs	r2, r3
    6d4e:	68fb      	ldr	r3, [r7, #12]
    6d50:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    6d52:	2300      	movs	r3, #0
}
    6d54:	0018      	movs	r0, r3
    6d56:	46bd      	mov	sp, r7
    6d58:	b004      	add	sp, #16
    6d5a:	bd80      	pop	{r7, pc}
    6d5c:	0000f5a0 	.word	0x0000f5a0

00006d60 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    6d60:	b580      	push	{r7, lr}
    6d62:	b082      	sub	sp, #8
    6d64:	af00      	add	r7, sp, #0
    6d66:	6078      	str	r0, [r7, #4]
    6d68:	000a      	movs	r2, r1
    6d6a:	1cfb      	adds	r3, r7, #3
    6d6c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    6d6e:	687b      	ldr	r3, [r7, #4]
    6d70:	681b      	ldr	r3, [r3, #0]
    6d72:	0018      	movs	r0, r3
    6d74:	4b0f      	ldr	r3, [pc, #60]	; (6db4 <tcc_enable_callback+0x54>)
    6d76:	4798      	blx	r3
    6d78:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b0e      	ldr	r3, [pc, #56]	; (6db8 <tcc_enable_callback+0x58>)
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	0018      	movs	r0, r3
    6d84:	4b0d      	ldr	r3, [pc, #52]	; (6dbc <tcc_enable_callback+0x5c>)
    6d86:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6d8c:	1cfb      	adds	r3, r7, #3
    6d8e:	7819      	ldrb	r1, [r3, #0]
    6d90:	4b0b      	ldr	r3, [pc, #44]	; (6dc0 <tcc_enable_callback+0x60>)
    6d92:	0089      	lsls	r1, r1, #2
    6d94:	58cb      	ldr	r3, [r1, r3]
    6d96:	431a      	orrs	r2, r3
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    6d9c:	687b      	ldr	r3, [r7, #4]
    6d9e:	681b      	ldr	r3, [r3, #0]
    6da0:	1cfa      	adds	r2, r7, #3
    6da2:	7811      	ldrb	r1, [r2, #0]
    6da4:	4a06      	ldr	r2, [pc, #24]	; (6dc0 <tcc_enable_callback+0x60>)
    6da6:	0089      	lsls	r1, r1, #2
    6da8:	588a      	ldr	r2, [r1, r2]
    6daa:	629a      	str	r2, [r3, #40]	; 0x28
}
    6dac:	46c0      	nop			; (mov r8, r8)
    6dae:	46bd      	mov	sp, r7
    6db0:	b002      	add	sp, #8
    6db2:	bd80      	pop	{r7, pc}
    6db4:	00006271 	.word	0x00006271
    6db8:	00006d01 	.word	0x00006d01
    6dbc:	00006cd5 	.word	0x00006cd5
    6dc0:	0000f5a0 	.word	0x0000f5a0

00006dc4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6dc4:	b580      	push	{r7, lr}
    6dc6:	af00      	add	r7, sp, #0
    6dc8:	2000      	movs	r0, #0
    6dca:	4b02      	ldr	r3, [pc, #8]	; (6dd4 <TCC0_Handler+0x10>)
    6dcc:	4798      	blx	r3
    6dce:	46c0      	nop			; (mov r8, r8)
    6dd0:	46bd      	mov	sp, r7
    6dd2:	bd80      	pop	{r7, pc}
    6dd4:	00006e01 	.word	0x00006e01

00006dd8 <TCC1_Handler>:
    6dd8:	b580      	push	{r7, lr}
    6dda:	af00      	add	r7, sp, #0
    6ddc:	2001      	movs	r0, #1
    6dde:	4b02      	ldr	r3, [pc, #8]	; (6de8 <TCC1_Handler+0x10>)
    6de0:	4798      	blx	r3
    6de2:	46c0      	nop			; (mov r8, r8)
    6de4:	46bd      	mov	sp, r7
    6de6:	bd80      	pop	{r7, pc}
    6de8:	00006e01 	.word	0x00006e01

00006dec <TCC2_Handler>:
    6dec:	b580      	push	{r7, lr}
    6dee:	af00      	add	r7, sp, #0
    6df0:	2002      	movs	r0, #2
    6df2:	4b02      	ldr	r3, [pc, #8]	; (6dfc <TCC2_Handler+0x10>)
    6df4:	4798      	blx	r3
    6df6:	46c0      	nop			; (mov r8, r8)
    6df8:	46bd      	mov	sp, r7
    6dfa:	bd80      	pop	{r7, pc}
    6dfc:	00006e01 	.word	0x00006e01

00006e00 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b086      	sub	sp, #24
    6e04:	af00      	add	r7, sp, #0
    6e06:	0002      	movs	r2, r0
    6e08:	1dfb      	adds	r3, r7, #7
    6e0a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    6e0c:	1dfb      	adds	r3, r7, #7
    6e0e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    6e10:	4b18      	ldr	r3, [pc, #96]	; (6e74 <_tcc_interrupt_handler+0x74>)
    6e12:	0092      	lsls	r2, r2, #2
    6e14:	58d3      	ldr	r3, [r2, r3]
    6e16:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6e18:	693b      	ldr	r3, [r7, #16]
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    6e1e:	693b      	ldr	r3, [r7, #16]
    6e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6e22:	401a      	ands	r2, r3
			module->enable_callback_mask);
    6e24:	693b      	ldr	r3, [r7, #16]
    6e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6e28:	4013      	ands	r3, r2
    6e2a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6e2c:	2300      	movs	r3, #0
    6e2e:	617b      	str	r3, [r7, #20]
    6e30:	e019      	b.n	6e66 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6e32:	4b11      	ldr	r3, [pc, #68]	; (6e78 <_tcc_interrupt_handler+0x78>)
    6e34:	697a      	ldr	r2, [r7, #20]
    6e36:	0092      	lsls	r2, r2, #2
    6e38:	58d3      	ldr	r3, [r2, r3]
    6e3a:	68fa      	ldr	r2, [r7, #12]
    6e3c:	4013      	ands	r3, r2
    6e3e:	d00f      	beq.n	6e60 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6e40:	693a      	ldr	r2, [r7, #16]
    6e42:	697b      	ldr	r3, [r7, #20]
    6e44:	009b      	lsls	r3, r3, #2
    6e46:	18d3      	adds	r3, r2, r3
    6e48:	3304      	adds	r3, #4
    6e4a:	681b      	ldr	r3, [r3, #0]
    6e4c:	693a      	ldr	r2, [r7, #16]
    6e4e:	0010      	movs	r0, r2
    6e50:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6e52:	693b      	ldr	r3, [r7, #16]
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	4a08      	ldr	r2, [pc, #32]	; (6e78 <_tcc_interrupt_handler+0x78>)
    6e58:	6979      	ldr	r1, [r7, #20]
    6e5a:	0089      	lsls	r1, r1, #2
    6e5c:	588a      	ldr	r2, [r1, r2]
    6e5e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6e60:	697b      	ldr	r3, [r7, #20]
    6e62:	3301      	adds	r3, #1
    6e64:	617b      	str	r3, [r7, #20]
    6e66:	697b      	ldr	r3, [r7, #20]
    6e68:	2b0b      	cmp	r3, #11
    6e6a:	dde2      	ble.n	6e32 <_tcc_interrupt_handler+0x32>
		}
	}
}
    6e6c:	46c0      	nop			; (mov r8, r8)
    6e6e:	46bd      	mov	sp, r7
    6e70:	b006      	add	sp, #24
    6e72:	bd80      	pop	{r7, pc}
    6e74:	20000430 	.word	0x20000430
    6e78:	0000f5a0 	.word	0x0000f5a0

00006e7c <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    6e82:	4b07      	ldr	r3, [pc, #28]	; (6ea0 <nvm_is_ready+0x24>)
    6e84:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	7d1b      	ldrb	r3, [r3, #20]
    6e8a:	b2db      	uxtb	r3, r3
    6e8c:	001a      	movs	r2, r3
    6e8e:	2301      	movs	r3, #1
    6e90:	4013      	ands	r3, r2
    6e92:	1e5a      	subs	r2, r3, #1
    6e94:	4193      	sbcs	r3, r2
    6e96:	b2db      	uxtb	r3, r3
}
    6e98:	0018      	movs	r0, r3
    6e9a:	46bd      	mov	sp, r7
    6e9c:	b002      	add	sp, #8
    6e9e:	bd80      	pop	{r7, pc}
    6ea0:	41004000 	.word	0x41004000

00006ea4 <system_apb_clock_set_mask>:
{
    6ea4:	b580      	push	{r7, lr}
    6ea6:	b082      	sub	sp, #8
    6ea8:	af00      	add	r7, sp, #0
    6eaa:	0002      	movs	r2, r0
    6eac:	6039      	str	r1, [r7, #0]
    6eae:	1dfb      	adds	r3, r7, #7
    6eb0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6eb2:	1dfb      	adds	r3, r7, #7
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	2b01      	cmp	r3, #1
    6eb8:	d00a      	beq.n	6ed0 <system_apb_clock_set_mask+0x2c>
    6eba:	2b02      	cmp	r3, #2
    6ebc:	d00f      	beq.n	6ede <system_apb_clock_set_mask+0x3a>
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d114      	bne.n	6eec <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6ec2:	4b0e      	ldr	r3, [pc, #56]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ec4:	4a0d      	ldr	r2, [pc, #52]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ec6:	6991      	ldr	r1, [r2, #24]
    6ec8:	683a      	ldr	r2, [r7, #0]
    6eca:	430a      	orrs	r2, r1
    6ecc:	619a      	str	r2, [r3, #24]
			break;
    6ece:	e00f      	b.n	6ef0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6ed0:	4b0a      	ldr	r3, [pc, #40]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ed2:	4a0a      	ldr	r2, [pc, #40]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ed4:	69d1      	ldr	r1, [r2, #28]
    6ed6:	683a      	ldr	r2, [r7, #0]
    6ed8:	430a      	orrs	r2, r1
    6eda:	61da      	str	r2, [r3, #28]
			break;
    6edc:	e008      	b.n	6ef0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6ede:	4b07      	ldr	r3, [pc, #28]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ee0:	4a06      	ldr	r2, [pc, #24]	; (6efc <system_apb_clock_set_mask+0x58>)
    6ee2:	6a11      	ldr	r1, [r2, #32]
    6ee4:	683a      	ldr	r2, [r7, #0]
    6ee6:	430a      	orrs	r2, r1
    6ee8:	621a      	str	r2, [r3, #32]
			break;
    6eea:	e001      	b.n	6ef0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6eec:	2317      	movs	r3, #23
    6eee:	e000      	b.n	6ef2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6ef0:	2300      	movs	r3, #0
}
    6ef2:	0018      	movs	r0, r3
    6ef4:	46bd      	mov	sp, r7
    6ef6:	b002      	add	sp, #8
    6ef8:	bd80      	pop	{r7, pc}
    6efa:	46c0      	nop			; (mov r8, r8)
    6efc:	40000400 	.word	0x40000400

00006f00 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    6f00:	b580      	push	{r7, lr}
    6f02:	b084      	sub	sp, #16
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    6f08:	4b2f      	ldr	r3, [pc, #188]	; (6fc8 <nvm_set_config+0xc8>)
    6f0a:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    6f0c:	2104      	movs	r1, #4
    6f0e:	2001      	movs	r0, #1
    6f10:	4b2e      	ldr	r3, [pc, #184]	; (6fcc <nvm_set_config+0xcc>)
    6f12:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	2220      	movs	r2, #32
    6f18:	32ff      	adds	r2, #255	; 0xff
    6f1a:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6f1c:	4b2c      	ldr	r3, [pc, #176]	; (6fd0 <nvm_set_config+0xd0>)
    6f1e:	4798      	blx	r3
    6f20:	0003      	movs	r3, r0
    6f22:	001a      	movs	r2, r3
    6f24:	2301      	movs	r3, #1
    6f26:	4053      	eors	r3, r2
    6f28:	b2db      	uxtb	r3, r3
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d001      	beq.n	6f32 <nvm_set_config+0x32>
		return STATUS_BUSY;
    6f2e:	2305      	movs	r3, #5
    6f30:	e045      	b.n	6fbe <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6f32:	687b      	ldr	r3, [r7, #4]
    6f34:	781b      	ldrb	r3, [r3, #0]
    6f36:	021b      	lsls	r3, r3, #8
    6f38:	001a      	movs	r2, r3
    6f3a:	23c0      	movs	r3, #192	; 0xc0
    6f3c:	009b      	lsls	r3, r3, #2
    6f3e:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	785b      	ldrb	r3, [r3, #1]
    6f44:	01db      	lsls	r3, r3, #7
    6f46:	0019      	movs	r1, r3
    6f48:	23ff      	movs	r3, #255	; 0xff
    6f4a:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    6f4c:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6f4e:	687b      	ldr	r3, [r7, #4]
    6f50:	789b      	ldrb	r3, [r3, #2]
    6f52:	005b      	lsls	r3, r3, #1
    6f54:	0019      	movs	r1, r3
    6f56:	231e      	movs	r3, #30
    6f58:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    6f5a:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	78db      	ldrb	r3, [r3, #3]
    6f60:	049b      	lsls	r3, r3, #18
    6f62:	0019      	movs	r1, r3
    6f64:	2380      	movs	r3, #128	; 0x80
    6f66:	02db      	lsls	r3, r3, #11
    6f68:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    6f6a:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    6f6c:	687b      	ldr	r3, [r7, #4]
    6f6e:	791b      	ldrb	r3, [r3, #4]
    6f70:	041b      	lsls	r3, r3, #16
    6f72:	0019      	movs	r1, r3
    6f74:	23c0      	movs	r3, #192	; 0xc0
    6f76:	029b      	lsls	r3, r3, #10
    6f78:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6f7a:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    6f7c:	68fb      	ldr	r3, [r7, #12]
    6f7e:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    6f80:	68fb      	ldr	r3, [r7, #12]
    6f82:	689b      	ldr	r3, [r3, #8]
    6f84:	035b      	lsls	r3, r3, #13
    6f86:	0f5b      	lsrs	r3, r3, #29
    6f88:	b2db      	uxtb	r3, r3
    6f8a:	001a      	movs	r2, r3
    6f8c:	2308      	movs	r3, #8
    6f8e:	4093      	lsls	r3, r2
    6f90:	b29a      	uxth	r2, r3
    6f92:	4b10      	ldr	r3, [pc, #64]	; (6fd4 <nvm_set_config+0xd4>)
    6f94:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6f96:	68fb      	ldr	r3, [r7, #12]
    6f98:	689b      	ldr	r3, [r3, #8]
    6f9a:	b29a      	uxth	r2, r3
    6f9c:	4b0d      	ldr	r3, [pc, #52]	; (6fd4 <nvm_set_config+0xd4>)
    6f9e:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	785a      	ldrb	r2, [r3, #1]
    6fa4:	4b0b      	ldr	r3, [pc, #44]	; (6fd4 <nvm_set_config+0xd4>)
    6fa6:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6fa8:	68fb      	ldr	r3, [r7, #12]
    6faa:	8b1b      	ldrh	r3, [r3, #24]
    6fac:	b29b      	uxth	r3, r3
    6fae:	001a      	movs	r2, r3
    6fb0:	2380      	movs	r3, #128	; 0x80
    6fb2:	005b      	lsls	r3, r3, #1
    6fb4:	4013      	ands	r3, r2
    6fb6:	d001      	beq.n	6fbc <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    6fb8:	2310      	movs	r3, #16
    6fba:	e000      	b.n	6fbe <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    6fbc:	2300      	movs	r3, #0
}
    6fbe:	0018      	movs	r0, r3
    6fc0:	46bd      	mov	sp, r7
    6fc2:	b004      	add	sp, #16
    6fc4:	bd80      	pop	{r7, pc}
    6fc6:	46c0      	nop			; (mov r8, r8)
    6fc8:	41004000 	.word	0x41004000
    6fcc:	00006ea5 	.word	0x00006ea5
    6fd0:	00006e7d 	.word	0x00006e7d
    6fd4:	20000218 	.word	0x20000218

00006fd8 <system_pinmux_get_config_defaults>:
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b082      	sub	sp, #8
    6fdc:	af00      	add	r7, sp, #0
    6fde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	2280      	movs	r2, #128	; 0x80
    6fe4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	2200      	movs	r2, #0
    6fea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6fec:	687b      	ldr	r3, [r7, #4]
    6fee:	2201      	movs	r2, #1
    6ff0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	2200      	movs	r2, #0
    6ff6:	70da      	strb	r2, [r3, #3]
}
    6ff8:	46c0      	nop			; (mov r8, r8)
    6ffa:	46bd      	mov	sp, r7
    6ffc:	b002      	add	sp, #8
    6ffe:	bd80      	pop	{r7, pc}

00007000 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7000:	b580      	push	{r7, lr}
    7002:	b084      	sub	sp, #16
    7004:	af00      	add	r7, sp, #0
    7006:	0002      	movs	r2, r0
    7008:	6039      	str	r1, [r7, #0]
    700a:	1dfb      	adds	r3, r7, #7
    700c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    700e:	230c      	movs	r3, #12
    7010:	18fb      	adds	r3, r7, r3
    7012:	0018      	movs	r0, r3
    7014:	4b10      	ldr	r3, [pc, #64]	; (7058 <port_pin_set_config+0x58>)
    7016:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7018:	230c      	movs	r3, #12
    701a:	18fb      	adds	r3, r7, r3
    701c:	2280      	movs	r2, #128	; 0x80
    701e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7020:	683b      	ldr	r3, [r7, #0]
    7022:	781a      	ldrb	r2, [r3, #0]
    7024:	230c      	movs	r3, #12
    7026:	18fb      	adds	r3, r7, r3
    7028:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    702a:	683b      	ldr	r3, [r7, #0]
    702c:	785a      	ldrb	r2, [r3, #1]
    702e:	230c      	movs	r3, #12
    7030:	18fb      	adds	r3, r7, r3
    7032:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7034:	683b      	ldr	r3, [r7, #0]
    7036:	789a      	ldrb	r2, [r3, #2]
    7038:	230c      	movs	r3, #12
    703a:	18fb      	adds	r3, r7, r3
    703c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    703e:	230c      	movs	r3, #12
    7040:	18fa      	adds	r2, r7, r3
    7042:	1dfb      	adds	r3, r7, #7
    7044:	781b      	ldrb	r3, [r3, #0]
    7046:	0011      	movs	r1, r2
    7048:	0018      	movs	r0, r3
    704a:	4b04      	ldr	r3, [pc, #16]	; (705c <port_pin_set_config+0x5c>)
    704c:	4798      	blx	r3
}
    704e:	46c0      	nop			; (mov r8, r8)
    7050:	46bd      	mov	sp, r7
    7052:	b004      	add	sp, #16
    7054:	bd80      	pop	{r7, pc}
    7056:	46c0      	nop			; (mov r8, r8)
    7058:	00006fd9 	.word	0x00006fd9
    705c:	00009d89 	.word	0x00009d89

00007060 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7060:	b580      	push	{r7, lr}
    7062:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    7064:	46c0      	nop			; (mov r8, r8)
    7066:	46bd      	mov	sp, r7
    7068:	bd80      	pop	{r7, pc}
	...

0000706c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    706c:	b580      	push	{r7, lr}
    706e:	b082      	sub	sp, #8
    7070:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7072:	4b10      	ldr	r3, [pc, #64]	; (70b4 <cpu_irq_enter_critical+0x48>)
    7074:	681b      	ldr	r3, [r3, #0]
    7076:	2b00      	cmp	r3, #0
    7078:	d112      	bne.n	70a0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    707a:	f3ef 8310 	mrs	r3, PRIMASK
    707e:	607b      	str	r3, [r7, #4]
  return(result);
    7080:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7082:	2b00      	cmp	r3, #0
    7084:	d109      	bne.n	709a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    7086:	b672      	cpsid	i
    7088:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    708c:	4b0a      	ldr	r3, [pc, #40]	; (70b8 <cpu_irq_enter_critical+0x4c>)
    708e:	2200      	movs	r2, #0
    7090:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7092:	4b0a      	ldr	r3, [pc, #40]	; (70bc <cpu_irq_enter_critical+0x50>)
    7094:	2201      	movs	r2, #1
    7096:	701a      	strb	r2, [r3, #0]
    7098:	e002      	b.n	70a0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    709a:	4b08      	ldr	r3, [pc, #32]	; (70bc <cpu_irq_enter_critical+0x50>)
    709c:	2200      	movs	r2, #0
    709e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    70a0:	4b04      	ldr	r3, [pc, #16]	; (70b4 <cpu_irq_enter_critical+0x48>)
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	1c5a      	adds	r2, r3, #1
    70a6:	4b03      	ldr	r3, [pc, #12]	; (70b4 <cpu_irq_enter_critical+0x48>)
    70a8:	601a      	str	r2, [r3, #0]
}
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	46bd      	mov	sp, r7
    70ae:	b002      	add	sp, #8
    70b0:	bd80      	pop	{r7, pc}
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	20000220 	.word	0x20000220
    70b8:	2000000f 	.word	0x2000000f
    70bc:	20000224 	.word	0x20000224

000070c0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    70c4:	4b0b      	ldr	r3, [pc, #44]	; (70f4 <cpu_irq_leave_critical+0x34>)
    70c6:	681b      	ldr	r3, [r3, #0]
    70c8:	1e5a      	subs	r2, r3, #1
    70ca:	4b0a      	ldr	r3, [pc, #40]	; (70f4 <cpu_irq_leave_critical+0x34>)
    70cc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    70ce:	4b09      	ldr	r3, [pc, #36]	; (70f4 <cpu_irq_leave_critical+0x34>)
    70d0:	681b      	ldr	r3, [r3, #0]
    70d2:	2b00      	cmp	r3, #0
    70d4:	d10a      	bne.n	70ec <cpu_irq_leave_critical+0x2c>
    70d6:	4b08      	ldr	r3, [pc, #32]	; (70f8 <cpu_irq_leave_critical+0x38>)
    70d8:	781b      	ldrb	r3, [r3, #0]
    70da:	b2db      	uxtb	r3, r3
    70dc:	2b00      	cmp	r3, #0
    70de:	d005      	beq.n	70ec <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    70e0:	4b06      	ldr	r3, [pc, #24]	; (70fc <cpu_irq_leave_critical+0x3c>)
    70e2:	2201      	movs	r2, #1
    70e4:	701a      	strb	r2, [r3, #0]
    70e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    70ea:	b662      	cpsie	i
	}
}
    70ec:	46c0      	nop			; (mov r8, r8)
    70ee:	46bd      	mov	sp, r7
    70f0:	bd80      	pop	{r7, pc}
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	20000220 	.word	0x20000220
    70f8:	20000224 	.word	0x20000224
    70fc:	2000000f 	.word	0x2000000f

00007100 <system_gclk_chan_get_config_defaults>:
{
    7100:	b580      	push	{r7, lr}
    7102:	b082      	sub	sp, #8
    7104:	af00      	add	r7, sp, #0
    7106:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	2200      	movs	r2, #0
    710c:	701a      	strb	r2, [r3, #0]
}
    710e:	46c0      	nop			; (mov r8, r8)
    7110:	46bd      	mov	sp, r7
    7112:	b002      	add	sp, #8
    7114:	bd80      	pop	{r7, pc}

00007116 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7116:	b5f0      	push	{r4, r5, r6, r7, lr}
    7118:	b08d      	sub	sp, #52	; 0x34
    711a:	af00      	add	r7, sp, #0
    711c:	60b8      	str	r0, [r7, #8]
    711e:	60f9      	str	r1, [r7, #12]
    7120:	603a      	str	r2, [r7, #0]
    7122:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7124:	2300      	movs	r3, #0
    7126:	2400      	movs	r4, #0
    7128:	623b      	str	r3, [r7, #32]
    712a:	627c      	str	r4, [r7, #36]	; 0x24
    712c:	2300      	movs	r3, #0
    712e:	2400      	movs	r4, #0
    7130:	61bb      	str	r3, [r7, #24]
    7132:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    7134:	233f      	movs	r3, #63	; 0x3f
    7136:	62fb      	str	r3, [r7, #44]	; 0x2c
    7138:	e053      	b.n	71e2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    713c:	3b20      	subs	r3, #32
    713e:	2b00      	cmp	r3, #0
    7140:	db04      	blt.n	714c <long_division+0x36>
    7142:	2201      	movs	r2, #1
    7144:	409a      	lsls	r2, r3
    7146:	0013      	movs	r3, r2
    7148:	617b      	str	r3, [r7, #20]
    714a:	e00b      	b.n	7164 <long_division+0x4e>
    714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    714e:	2220      	movs	r2, #32
    7150:	1ad3      	subs	r3, r2, r3
    7152:	2201      	movs	r2, #1
    7154:	40da      	lsrs	r2, r3
    7156:	0013      	movs	r3, r2
    7158:	2100      	movs	r1, #0
    715a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    715c:	4091      	lsls	r1, r2
    715e:	000a      	movs	r2, r1
    7160:	4313      	orrs	r3, r2
    7162:	617b      	str	r3, [r7, #20]
    7164:	2201      	movs	r2, #1
    7166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7168:	409a      	lsls	r2, r3
    716a:	0013      	movs	r3, r2
    716c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    716e:	69bb      	ldr	r3, [r7, #24]
    7170:	69fc      	ldr	r4, [r7, #28]
    7172:	18db      	adds	r3, r3, r3
    7174:	4164      	adcs	r4, r4
    7176:	61bb      	str	r3, [r7, #24]
    7178:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    717a:	68bb      	ldr	r3, [r7, #8]
    717c:	693a      	ldr	r2, [r7, #16]
    717e:	401a      	ands	r2, r3
    7180:	0015      	movs	r5, r2
    7182:	68fb      	ldr	r3, [r7, #12]
    7184:	697a      	ldr	r2, [r7, #20]
    7186:	401a      	ands	r2, r3
    7188:	0016      	movs	r6, r2
    718a:	002b      	movs	r3, r5
    718c:	4333      	orrs	r3, r6
    718e:	d007      	beq.n	71a0 <long_division+0x8a>
			r |= 0x01;
    7190:	69bb      	ldr	r3, [r7, #24]
    7192:	2201      	movs	r2, #1
    7194:	4313      	orrs	r3, r2
    7196:	61bb      	str	r3, [r7, #24]
    7198:	69fb      	ldr	r3, [r7, #28]
    719a:	2200      	movs	r2, #0
    719c:	4313      	orrs	r3, r2
    719e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    71a0:	687a      	ldr	r2, [r7, #4]
    71a2:	69fb      	ldr	r3, [r7, #28]
    71a4:	429a      	cmp	r2, r3
    71a6:	d819      	bhi.n	71dc <long_division+0xc6>
    71a8:	687a      	ldr	r2, [r7, #4]
    71aa:	69fb      	ldr	r3, [r7, #28]
    71ac:	429a      	cmp	r2, r3
    71ae:	d103      	bne.n	71b8 <long_division+0xa2>
    71b0:	683a      	ldr	r2, [r7, #0]
    71b2:	69bb      	ldr	r3, [r7, #24]
    71b4:	429a      	cmp	r2, r3
    71b6:	d811      	bhi.n	71dc <long_division+0xc6>
			r = r - d;
    71b8:	69b9      	ldr	r1, [r7, #24]
    71ba:	69fa      	ldr	r2, [r7, #28]
    71bc:	683b      	ldr	r3, [r7, #0]
    71be:	687c      	ldr	r4, [r7, #4]
    71c0:	1ac9      	subs	r1, r1, r3
    71c2:	41a2      	sbcs	r2, r4
    71c4:	000b      	movs	r3, r1
    71c6:	0014      	movs	r4, r2
    71c8:	61bb      	str	r3, [r7, #24]
    71ca:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    71cc:	6a3a      	ldr	r2, [r7, #32]
    71ce:	693b      	ldr	r3, [r7, #16]
    71d0:	4313      	orrs	r3, r2
    71d2:	623b      	str	r3, [r7, #32]
    71d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    71d6:	697b      	ldr	r3, [r7, #20]
    71d8:	4313      	orrs	r3, r2
    71da:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    71dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71de:	3b01      	subs	r3, #1
    71e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    71e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    71e4:	2b00      	cmp	r3, #0
    71e6:	daa8      	bge.n	713a <long_division+0x24>
		}
	}

	return q;
    71e8:	6a3b      	ldr	r3, [r7, #32]
    71ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    71ec:	0018      	movs	r0, r3
    71ee:	0021      	movs	r1, r4
    71f0:	46bd      	mov	sp, r7
    71f2:	b00d      	add	sp, #52	; 0x34
    71f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071f6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    71f6:	b580      	push	{r7, lr}
    71f8:	b086      	sub	sp, #24
    71fa:	af00      	add	r7, sp, #0
    71fc:	60f8      	str	r0, [r7, #12]
    71fe:	60b9      	str	r1, [r7, #8]
    7200:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7202:	2316      	movs	r3, #22
    7204:	18fb      	adds	r3, r7, r3
    7206:	2200      	movs	r2, #0
    7208:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    720a:	68bb      	ldr	r3, [r7, #8]
    720c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    720e:	68bb      	ldr	r3, [r7, #8]
    7210:	085a      	lsrs	r2, r3, #1
    7212:	68fb      	ldr	r3, [r7, #12]
    7214:	429a      	cmp	r2, r3
    7216:	d201      	bcs.n	721c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7218:	2340      	movs	r3, #64	; 0x40
    721a:	e026      	b.n	726a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    721c:	68bb      	ldr	r3, [r7, #8]
    721e:	085b      	lsrs	r3, r3, #1
    7220:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7222:	e00a      	b.n	723a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7224:	693a      	ldr	r2, [r7, #16]
    7226:	68fb      	ldr	r3, [r7, #12]
    7228:	1ad3      	subs	r3, r2, r3
    722a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    722c:	2316      	movs	r3, #22
    722e:	18fb      	adds	r3, r7, r3
    7230:	881a      	ldrh	r2, [r3, #0]
    7232:	2316      	movs	r3, #22
    7234:	18fb      	adds	r3, r7, r3
    7236:	3201      	adds	r2, #1
    7238:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    723a:	693a      	ldr	r2, [r7, #16]
    723c:	68fb      	ldr	r3, [r7, #12]
    723e:	429a      	cmp	r2, r3
    7240:	d2f0      	bcs.n	7224 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    7242:	2316      	movs	r3, #22
    7244:	18fb      	adds	r3, r7, r3
    7246:	2216      	movs	r2, #22
    7248:	18ba      	adds	r2, r7, r2
    724a:	8812      	ldrh	r2, [r2, #0]
    724c:	3a01      	subs	r2, #1
    724e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7250:	2316      	movs	r3, #22
    7252:	18fb      	adds	r3, r7, r3
    7254:	881b      	ldrh	r3, [r3, #0]
    7256:	2bff      	cmp	r3, #255	; 0xff
    7258:	d901      	bls.n	725e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    725a:	2340      	movs	r3, #64	; 0x40
    725c:	e005      	b.n	726a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	2216      	movs	r2, #22
    7262:	18ba      	adds	r2, r7, r2
    7264:	8812      	ldrh	r2, [r2, #0]
    7266:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    7268:	2300      	movs	r3, #0
	}
}
    726a:	0018      	movs	r0, r3
    726c:	46bd      	mov	sp, r7
    726e:	b006      	add	sp, #24
    7270:	bd80      	pop	{r7, pc}
	...

00007274 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7274:	b5f0      	push	{r4, r5, r6, r7, lr}
    7276:	b0a1      	sub	sp, #132	; 0x84
    7278:	af00      	add	r7, sp, #0
    727a:	64f8      	str	r0, [r7, #76]	; 0x4c
    727c:	64b9      	str	r1, [r7, #72]	; 0x48
    727e:	647a      	str	r2, [r7, #68]	; 0x44
    7280:	2243      	movs	r2, #67	; 0x43
    7282:	18ba      	adds	r2, r7, r2
    7284:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    7286:	2300      	movs	r3, #0
    7288:	2400      	movs	r4, #0
    728a:	673b      	str	r3, [r7, #112]	; 0x70
    728c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    728e:	2300      	movs	r3, #0
    7290:	2400      	movs	r4, #0
    7292:	66bb      	str	r3, [r7, #104]	; 0x68
    7294:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    7296:	2300      	movs	r3, #0
    7298:	2400      	movs	r4, #0
    729a:	67bb      	str	r3, [r7, #120]	; 0x78
    729c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    729e:	2300      	movs	r3, #0
    72a0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    72a2:	2358      	movs	r3, #88	; 0x58
    72a4:	2240      	movs	r2, #64	; 0x40
    72a6:	4694      	mov	ip, r2
    72a8:	44bc      	add	ip, r7
    72aa:	4463      	add	r3, ip
    72ac:	781a      	ldrb	r2, [r3, #0]
    72ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    72b0:	435a      	muls	r2, r3
    72b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    72b4:	429a      	cmp	r2, r3
    72b6:	d901      	bls.n	72bc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72b8:	2340      	movs	r3, #64	; 0x40
    72ba:	e0b3      	b.n	7424 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    72bc:	2343      	movs	r3, #67	; 0x43
    72be:	18fb      	adds	r3, r7, r3
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	2b00      	cmp	r3, #0
    72c4:	d13d      	bne.n	7342 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    72c6:	2358      	movs	r3, #88	; 0x58
    72c8:	2240      	movs	r2, #64	; 0x40
    72ca:	4694      	mov	ip, r2
    72cc:	44bc      	add	ip, r7
    72ce:	4463      	add	r3, ip
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	b2db      	uxtb	r3, r3
    72d4:	613b      	str	r3, [r7, #16]
    72d6:	2300      	movs	r3, #0
    72d8:	617b      	str	r3, [r7, #20]
    72da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    72dc:	60bb      	str	r3, [r7, #8]
    72de:	2300      	movs	r3, #0
    72e0:	60fb      	str	r3, [r7, #12]
    72e2:	4c52      	ldr	r4, [pc, #328]	; (742c <_sercom_get_async_baud_val+0x1b8>)
    72e4:	68ba      	ldr	r2, [r7, #8]
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6938      	ldr	r0, [r7, #16]
    72ea:	6979      	ldr	r1, [r7, #20]
    72ec:	47a0      	blx	r4
    72ee:	0003      	movs	r3, r0
    72f0:	000c      	movs	r4, r1
    72f2:	001b      	movs	r3, r3
    72f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    72f6:	2300      	movs	r3, #0
    72f8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    72fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    72fc:	603b      	str	r3, [r7, #0]
    72fe:	2300      	movs	r3, #0
    7300:	607b      	str	r3, [r7, #4]
    7302:	6db8      	ldr	r0, [r7, #88]	; 0x58
    7304:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    7306:	683a      	ldr	r2, [r7, #0]
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	4c49      	ldr	r4, [pc, #292]	; (7430 <_sercom_get_async_baud_val+0x1bc>)
    730c:	47a0      	blx	r4
    730e:	0003      	movs	r3, r0
    7310:	000c      	movs	r4, r1
    7312:	673b      	str	r3, [r7, #112]	; 0x70
    7314:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7316:	2100      	movs	r1, #0
    7318:	2201      	movs	r2, #1
    731a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    731c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    731e:	1ac9      	subs	r1, r1, r3
    7320:	41a2      	sbcs	r2, r4
    7322:	000b      	movs	r3, r1
    7324:	0014      	movs	r4, r2
    7326:	66bb      	str	r3, [r7, #104]	; 0x68
    7328:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    732a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    732c:	0c1b      	lsrs	r3, r3, #16
    732e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7330:	0416      	lsls	r6, r2, #16
    7332:	431e      	orrs	r6, r3
    7334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7336:	041d      	lsls	r5, r3, #16
    7338:	0033      	movs	r3, r6
    733a:	67bb      	str	r3, [r7, #120]	; 0x78
    733c:	2300      	movs	r3, #0
    733e:	67fb      	str	r3, [r7, #124]	; 0x7c
    7340:	e06a      	b.n	7418 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7342:	2343      	movs	r3, #67	; 0x43
    7344:	18fb      	adds	r3, r7, r3
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	2b01      	cmp	r3, #1
    734a:	d165      	bne.n	7418 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    734c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    734e:	633b      	str	r3, [r7, #48]	; 0x30
    7350:	2300      	movs	r3, #0
    7352:	637b      	str	r3, [r7, #52]	; 0x34
    7354:	2358      	movs	r3, #88	; 0x58
    7356:	2240      	movs	r2, #64	; 0x40
    7358:	4694      	mov	ip, r2
    735a:	44bc      	add	ip, r7
    735c:	4463      	add	r3, ip
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	b2db      	uxtb	r3, r3
    7362:	62bb      	str	r3, [r7, #40]	; 0x28
    7364:	2300      	movs	r3, #0
    7366:	62fb      	str	r3, [r7, #44]	; 0x2c
    7368:	4c30      	ldr	r4, [pc, #192]	; (742c <_sercom_get_async_baud_val+0x1b8>)
    736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    736e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    7370:	6b79      	ldr	r1, [r7, #52]	; 0x34
    7372:	47a0      	blx	r4
    7374:	0003      	movs	r3, r0
    7376:	000c      	movs	r4, r1
    7378:	65bb      	str	r3, [r7, #88]	; 0x58
    737a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    737c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    737e:	623b      	str	r3, [r7, #32]
    7380:	2300      	movs	r3, #0
    7382:	627b      	str	r3, [r7, #36]	; 0x24
    7384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7386:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7388:	001a      	movs	r2, r3
    738a:	0023      	movs	r3, r4
    738c:	6a38      	ldr	r0, [r7, #32]
    738e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7390:	4c27      	ldr	r4, [pc, #156]	; (7430 <_sercom_get_async_baud_val+0x1bc>)
    7392:	47a0      	blx	r4
    7394:	0003      	movs	r3, r0
    7396:	000c      	movs	r4, r1
    7398:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    739a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    739c:	2380      	movs	r3, #128	; 0x80
    739e:	019b      	lsls	r3, r3, #6
    73a0:	429a      	cmp	r2, r3
    73a2:	d901      	bls.n	73a8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    73a4:	2340      	movs	r3, #64	; 0x40
    73a6:	e03d      	b.n	7424 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    73a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    73aa:	61bb      	str	r3, [r7, #24]
    73ac:	2300      	movs	r3, #0
    73ae:	61fb      	str	r3, [r7, #28]
    73b0:	69b9      	ldr	r1, [r7, #24]
    73b2:	69fa      	ldr	r2, [r7, #28]
    73b4:	000b      	movs	r3, r1
    73b6:	0f5b      	lsrs	r3, r3, #29
    73b8:	0010      	movs	r0, r2
    73ba:	00c0      	lsls	r0, r0, #3
    73bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    73be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    73c0:	4318      	orrs	r0, r3
    73c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    73c4:	000b      	movs	r3, r1
    73c6:	00db      	lsls	r3, r3, #3
    73c8:	63bb      	str	r3, [r7, #56]	; 0x38
    73ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    73cc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    73ce:	001a      	movs	r2, r3
    73d0:	0023      	movs	r3, r4
    73d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    73d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    73d6:	4c16      	ldr	r4, [pc, #88]	; (7430 <_sercom_get_async_baud_val+0x1bc>)
    73d8:	47a0      	blx	r4
    73da:	0003      	movs	r3, r0
    73dc:	000c      	movs	r4, r1
    73de:	65bb      	str	r3, [r7, #88]	; 0x58
    73e0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    73e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    73e4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    73e6:	b2d9      	uxtb	r1, r3
    73e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    73ea:	b2db      	uxtb	r3, r3
    73ec:	00db      	lsls	r3, r3, #3
    73ee:	b2da      	uxtb	r2, r3
    73f0:	2317      	movs	r3, #23
    73f2:	2040      	movs	r0, #64	; 0x40
    73f4:	4684      	mov	ip, r0
    73f6:	44bc      	add	ip, r7
    73f8:	4463      	add	r3, ip
    73fa:	1a8a      	subs	r2, r1, r2
    73fc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    73fe:	2317      	movs	r3, #23
    7400:	2240      	movs	r2, #64	; 0x40
    7402:	4694      	mov	ip, r2
    7404:	44bc      	add	ip, r7
    7406:	4463      	add	r3, ip
    7408:	781b      	ldrb	r3, [r3, #0]
    740a:	035b      	lsls	r3, r3, #13
    740c:	001a      	movs	r2, r3
    740e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7410:	4313      	orrs	r3, r2
    7412:	67bb      	str	r3, [r7, #120]	; 0x78
    7414:	2300      	movs	r3, #0
    7416:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    7418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    741a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    741c:	b29a      	uxth	r2, r3
    741e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7420:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    7422:	2300      	movs	r3, #0
}
    7424:	0018      	movs	r0, r3
    7426:	46bd      	mov	sp, r7
    7428:	b021      	add	sp, #132	; 0x84
    742a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    742c:	0000ccbd 	.word	0x0000ccbd
    7430:	00007117 	.word	0x00007117

00007434 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7434:	b580      	push	{r7, lr}
    7436:	b084      	sub	sp, #16
    7438:	af00      	add	r7, sp, #0
    743a:	0002      	movs	r2, r0
    743c:	1dfb      	adds	r3, r7, #7
    743e:	701a      	strb	r2, [r3, #0]
    7440:	1dbb      	adds	r3, r7, #6
    7442:	1c0a      	adds	r2, r1, #0
    7444:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7446:	4b1a      	ldr	r3, [pc, #104]	; (74b0 <sercom_set_gclk_generator+0x7c>)
    7448:	781b      	ldrb	r3, [r3, #0]
    744a:	2201      	movs	r2, #1
    744c:	4053      	eors	r3, r2
    744e:	b2db      	uxtb	r3, r3
    7450:	2b00      	cmp	r3, #0
    7452:	d103      	bne.n	745c <sercom_set_gclk_generator+0x28>
    7454:	1dbb      	adds	r3, r7, #6
    7456:	781b      	ldrb	r3, [r3, #0]
    7458:	2b00      	cmp	r3, #0
    745a:	d01b      	beq.n	7494 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    745c:	230c      	movs	r3, #12
    745e:	18fb      	adds	r3, r7, r3
    7460:	0018      	movs	r0, r3
    7462:	4b14      	ldr	r3, [pc, #80]	; (74b4 <sercom_set_gclk_generator+0x80>)
    7464:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    7466:	230c      	movs	r3, #12
    7468:	18fb      	adds	r3, r7, r3
    746a:	1dfa      	adds	r2, r7, #7
    746c:	7812      	ldrb	r2, [r2, #0]
    746e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7470:	230c      	movs	r3, #12
    7472:	18fb      	adds	r3, r7, r3
    7474:	0019      	movs	r1, r3
    7476:	2013      	movs	r0, #19
    7478:	4b0f      	ldr	r3, [pc, #60]	; (74b8 <sercom_set_gclk_generator+0x84>)
    747a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    747c:	2013      	movs	r0, #19
    747e:	4b0f      	ldr	r3, [pc, #60]	; (74bc <sercom_set_gclk_generator+0x88>)
    7480:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    7482:	4b0b      	ldr	r3, [pc, #44]	; (74b0 <sercom_set_gclk_generator+0x7c>)
    7484:	1dfa      	adds	r2, r7, #7
    7486:	7812      	ldrb	r2, [r2, #0]
    7488:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    748a:	4b09      	ldr	r3, [pc, #36]	; (74b0 <sercom_set_gclk_generator+0x7c>)
    748c:	2201      	movs	r2, #1
    748e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7490:	2300      	movs	r3, #0
    7492:	e008      	b.n	74a6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    7494:	4b06      	ldr	r3, [pc, #24]	; (74b0 <sercom_set_gclk_generator+0x7c>)
    7496:	785b      	ldrb	r3, [r3, #1]
    7498:	1dfa      	adds	r2, r7, #7
    749a:	7812      	ldrb	r2, [r2, #0]
    749c:	429a      	cmp	r2, r3
    749e:	d101      	bne.n	74a4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    74a0:	2300      	movs	r3, #0
    74a2:	e000      	b.n	74a6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    74a4:	231d      	movs	r3, #29
}
    74a6:	0018      	movs	r0, r3
    74a8:	46bd      	mov	sp, r7
    74aa:	b004      	add	sp, #16
    74ac:	bd80      	pop	{r7, pc}
    74ae:	46c0      	nop			; (mov r8, r8)
    74b0:	20000228 	.word	0x20000228
    74b4:	00007101 	.word	0x00007101
    74b8:	00009a9d 	.word	0x00009a9d
    74bc:	00009ae1 	.word	0x00009ae1

000074c0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b082      	sub	sp, #8
    74c4:	af00      	add	r7, sp, #0
    74c6:	6078      	str	r0, [r7, #4]
    74c8:	000a      	movs	r2, r1
    74ca:	1cfb      	adds	r3, r7, #3
    74cc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	4a4d      	ldr	r2, [pc, #308]	; (7608 <_sercom_get_default_pad+0x148>)
    74d2:	4293      	cmp	r3, r2
    74d4:	d03f      	beq.n	7556 <_sercom_get_default_pad+0x96>
    74d6:	4a4c      	ldr	r2, [pc, #304]	; (7608 <_sercom_get_default_pad+0x148>)
    74d8:	4293      	cmp	r3, r2
    74da:	d806      	bhi.n	74ea <_sercom_get_default_pad+0x2a>
    74dc:	4a4b      	ldr	r2, [pc, #300]	; (760c <_sercom_get_default_pad+0x14c>)
    74de:	4293      	cmp	r3, r2
    74e0:	d00f      	beq.n	7502 <_sercom_get_default_pad+0x42>
    74e2:	4a4b      	ldr	r2, [pc, #300]	; (7610 <_sercom_get_default_pad+0x150>)
    74e4:	4293      	cmp	r3, r2
    74e6:	d021      	beq.n	752c <_sercom_get_default_pad+0x6c>
    74e8:	e089      	b.n	75fe <_sercom_get_default_pad+0x13e>
    74ea:	4a4a      	ldr	r2, [pc, #296]	; (7614 <_sercom_get_default_pad+0x154>)
    74ec:	4293      	cmp	r3, r2
    74ee:	d100      	bne.n	74f2 <_sercom_get_default_pad+0x32>
    74f0:	e05b      	b.n	75aa <_sercom_get_default_pad+0xea>
    74f2:	4a49      	ldr	r2, [pc, #292]	; (7618 <_sercom_get_default_pad+0x158>)
    74f4:	4293      	cmp	r3, r2
    74f6:	d100      	bne.n	74fa <_sercom_get_default_pad+0x3a>
    74f8:	e06c      	b.n	75d4 <_sercom_get_default_pad+0x114>
    74fa:	4a48      	ldr	r2, [pc, #288]	; (761c <_sercom_get_default_pad+0x15c>)
    74fc:	4293      	cmp	r3, r2
    74fe:	d03f      	beq.n	7580 <_sercom_get_default_pad+0xc0>
    7500:	e07d      	b.n	75fe <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7502:	1cfb      	adds	r3, r7, #3
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	2b01      	cmp	r3, #1
    7508:	d00a      	beq.n	7520 <_sercom_get_default_pad+0x60>
    750a:	dc02      	bgt.n	7512 <_sercom_get_default_pad+0x52>
    750c:	2b00      	cmp	r3, #0
    750e:	d005      	beq.n	751c <_sercom_get_default_pad+0x5c>
    7510:	e075      	b.n	75fe <_sercom_get_default_pad+0x13e>
    7512:	2b02      	cmp	r3, #2
    7514:	d006      	beq.n	7524 <_sercom_get_default_pad+0x64>
    7516:	2b03      	cmp	r3, #3
    7518:	d006      	beq.n	7528 <_sercom_get_default_pad+0x68>
    751a:	e070      	b.n	75fe <_sercom_get_default_pad+0x13e>
    751c:	4b40      	ldr	r3, [pc, #256]	; (7620 <_sercom_get_default_pad+0x160>)
    751e:	e06f      	b.n	7600 <_sercom_get_default_pad+0x140>
    7520:	4b40      	ldr	r3, [pc, #256]	; (7624 <_sercom_get_default_pad+0x164>)
    7522:	e06d      	b.n	7600 <_sercom_get_default_pad+0x140>
    7524:	4b40      	ldr	r3, [pc, #256]	; (7628 <_sercom_get_default_pad+0x168>)
    7526:	e06b      	b.n	7600 <_sercom_get_default_pad+0x140>
    7528:	4b40      	ldr	r3, [pc, #256]	; (762c <_sercom_get_default_pad+0x16c>)
    752a:	e069      	b.n	7600 <_sercom_get_default_pad+0x140>
    752c:	1cfb      	adds	r3, r7, #3
    752e:	781b      	ldrb	r3, [r3, #0]
    7530:	2b01      	cmp	r3, #1
    7532:	d00a      	beq.n	754a <_sercom_get_default_pad+0x8a>
    7534:	dc02      	bgt.n	753c <_sercom_get_default_pad+0x7c>
    7536:	2b00      	cmp	r3, #0
    7538:	d005      	beq.n	7546 <_sercom_get_default_pad+0x86>
    753a:	e060      	b.n	75fe <_sercom_get_default_pad+0x13e>
    753c:	2b02      	cmp	r3, #2
    753e:	d006      	beq.n	754e <_sercom_get_default_pad+0x8e>
    7540:	2b03      	cmp	r3, #3
    7542:	d006      	beq.n	7552 <_sercom_get_default_pad+0x92>
    7544:	e05b      	b.n	75fe <_sercom_get_default_pad+0x13e>
    7546:	2303      	movs	r3, #3
    7548:	e05a      	b.n	7600 <_sercom_get_default_pad+0x140>
    754a:	4b39      	ldr	r3, [pc, #228]	; (7630 <_sercom_get_default_pad+0x170>)
    754c:	e058      	b.n	7600 <_sercom_get_default_pad+0x140>
    754e:	4b39      	ldr	r3, [pc, #228]	; (7634 <_sercom_get_default_pad+0x174>)
    7550:	e056      	b.n	7600 <_sercom_get_default_pad+0x140>
    7552:	4b39      	ldr	r3, [pc, #228]	; (7638 <_sercom_get_default_pad+0x178>)
    7554:	e054      	b.n	7600 <_sercom_get_default_pad+0x140>
    7556:	1cfb      	adds	r3, r7, #3
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	2b01      	cmp	r3, #1
    755c:	d00a      	beq.n	7574 <_sercom_get_default_pad+0xb4>
    755e:	dc02      	bgt.n	7566 <_sercom_get_default_pad+0xa6>
    7560:	2b00      	cmp	r3, #0
    7562:	d005      	beq.n	7570 <_sercom_get_default_pad+0xb0>
    7564:	e04b      	b.n	75fe <_sercom_get_default_pad+0x13e>
    7566:	2b02      	cmp	r3, #2
    7568:	d006      	beq.n	7578 <_sercom_get_default_pad+0xb8>
    756a:	2b03      	cmp	r3, #3
    756c:	d006      	beq.n	757c <_sercom_get_default_pad+0xbc>
    756e:	e046      	b.n	75fe <_sercom_get_default_pad+0x13e>
    7570:	4b32      	ldr	r3, [pc, #200]	; (763c <_sercom_get_default_pad+0x17c>)
    7572:	e045      	b.n	7600 <_sercom_get_default_pad+0x140>
    7574:	4b32      	ldr	r3, [pc, #200]	; (7640 <_sercom_get_default_pad+0x180>)
    7576:	e043      	b.n	7600 <_sercom_get_default_pad+0x140>
    7578:	4b32      	ldr	r3, [pc, #200]	; (7644 <_sercom_get_default_pad+0x184>)
    757a:	e041      	b.n	7600 <_sercom_get_default_pad+0x140>
    757c:	4b32      	ldr	r3, [pc, #200]	; (7648 <_sercom_get_default_pad+0x188>)
    757e:	e03f      	b.n	7600 <_sercom_get_default_pad+0x140>
    7580:	1cfb      	adds	r3, r7, #3
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	2b01      	cmp	r3, #1
    7586:	d00a      	beq.n	759e <_sercom_get_default_pad+0xde>
    7588:	dc02      	bgt.n	7590 <_sercom_get_default_pad+0xd0>
    758a:	2b00      	cmp	r3, #0
    758c:	d005      	beq.n	759a <_sercom_get_default_pad+0xda>
    758e:	e036      	b.n	75fe <_sercom_get_default_pad+0x13e>
    7590:	2b02      	cmp	r3, #2
    7592:	d006      	beq.n	75a2 <_sercom_get_default_pad+0xe2>
    7594:	2b03      	cmp	r3, #3
    7596:	d006      	beq.n	75a6 <_sercom_get_default_pad+0xe6>
    7598:	e031      	b.n	75fe <_sercom_get_default_pad+0x13e>
    759a:	4b2c      	ldr	r3, [pc, #176]	; (764c <_sercom_get_default_pad+0x18c>)
    759c:	e030      	b.n	7600 <_sercom_get_default_pad+0x140>
    759e:	4b2c      	ldr	r3, [pc, #176]	; (7650 <_sercom_get_default_pad+0x190>)
    75a0:	e02e      	b.n	7600 <_sercom_get_default_pad+0x140>
    75a2:	4b2c      	ldr	r3, [pc, #176]	; (7654 <_sercom_get_default_pad+0x194>)
    75a4:	e02c      	b.n	7600 <_sercom_get_default_pad+0x140>
    75a6:	4b2c      	ldr	r3, [pc, #176]	; (7658 <_sercom_get_default_pad+0x198>)
    75a8:	e02a      	b.n	7600 <_sercom_get_default_pad+0x140>
    75aa:	1cfb      	adds	r3, r7, #3
    75ac:	781b      	ldrb	r3, [r3, #0]
    75ae:	2b01      	cmp	r3, #1
    75b0:	d00a      	beq.n	75c8 <_sercom_get_default_pad+0x108>
    75b2:	dc02      	bgt.n	75ba <_sercom_get_default_pad+0xfa>
    75b4:	2b00      	cmp	r3, #0
    75b6:	d005      	beq.n	75c4 <_sercom_get_default_pad+0x104>
    75b8:	e021      	b.n	75fe <_sercom_get_default_pad+0x13e>
    75ba:	2b02      	cmp	r3, #2
    75bc:	d006      	beq.n	75cc <_sercom_get_default_pad+0x10c>
    75be:	2b03      	cmp	r3, #3
    75c0:	d006      	beq.n	75d0 <_sercom_get_default_pad+0x110>
    75c2:	e01c      	b.n	75fe <_sercom_get_default_pad+0x13e>
    75c4:	4b25      	ldr	r3, [pc, #148]	; (765c <_sercom_get_default_pad+0x19c>)
    75c6:	e01b      	b.n	7600 <_sercom_get_default_pad+0x140>
    75c8:	4b25      	ldr	r3, [pc, #148]	; (7660 <_sercom_get_default_pad+0x1a0>)
    75ca:	e019      	b.n	7600 <_sercom_get_default_pad+0x140>
    75cc:	4b25      	ldr	r3, [pc, #148]	; (7664 <_sercom_get_default_pad+0x1a4>)
    75ce:	e017      	b.n	7600 <_sercom_get_default_pad+0x140>
    75d0:	4b25      	ldr	r3, [pc, #148]	; (7668 <_sercom_get_default_pad+0x1a8>)
    75d2:	e015      	b.n	7600 <_sercom_get_default_pad+0x140>
    75d4:	1cfb      	adds	r3, r7, #3
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	2b01      	cmp	r3, #1
    75da:	d00a      	beq.n	75f2 <_sercom_get_default_pad+0x132>
    75dc:	dc02      	bgt.n	75e4 <_sercom_get_default_pad+0x124>
    75de:	2b00      	cmp	r3, #0
    75e0:	d005      	beq.n	75ee <_sercom_get_default_pad+0x12e>
    75e2:	e00c      	b.n	75fe <_sercom_get_default_pad+0x13e>
    75e4:	2b02      	cmp	r3, #2
    75e6:	d006      	beq.n	75f6 <_sercom_get_default_pad+0x136>
    75e8:	2b03      	cmp	r3, #3
    75ea:	d006      	beq.n	75fa <_sercom_get_default_pad+0x13a>
    75ec:	e007      	b.n	75fe <_sercom_get_default_pad+0x13e>
    75ee:	4b1f      	ldr	r3, [pc, #124]	; (766c <_sercom_get_default_pad+0x1ac>)
    75f0:	e006      	b.n	7600 <_sercom_get_default_pad+0x140>
    75f2:	4b1f      	ldr	r3, [pc, #124]	; (7670 <_sercom_get_default_pad+0x1b0>)
    75f4:	e004      	b.n	7600 <_sercom_get_default_pad+0x140>
    75f6:	4b1f      	ldr	r3, [pc, #124]	; (7674 <_sercom_get_default_pad+0x1b4>)
    75f8:	e002      	b.n	7600 <_sercom_get_default_pad+0x140>
    75fa:	4b1f      	ldr	r3, [pc, #124]	; (7678 <_sercom_get_default_pad+0x1b8>)
    75fc:	e000      	b.n	7600 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    75fe:	2300      	movs	r3, #0
}
    7600:	0018      	movs	r0, r3
    7602:	46bd      	mov	sp, r7
    7604:	b002      	add	sp, #8
    7606:	bd80      	pop	{r7, pc}
    7608:	42001000 	.word	0x42001000
    760c:	42000800 	.word	0x42000800
    7610:	42000c00 	.word	0x42000c00
    7614:	42001800 	.word	0x42001800
    7618:	42001c00 	.word	0x42001c00
    761c:	42001400 	.word	0x42001400
    7620:	00040003 	.word	0x00040003
    7624:	00050003 	.word	0x00050003
    7628:	00060003 	.word	0x00060003
    762c:	00070003 	.word	0x00070003
    7630:	00010003 	.word	0x00010003
    7634:	001e0003 	.word	0x001e0003
    7638:	001f0003 	.word	0x001f0003
    763c:	00080003 	.word	0x00080003
    7640:	00090003 	.word	0x00090003
    7644:	000a0003 	.word	0x000a0003
    7648:	000b0003 	.word	0x000b0003
    764c:	00100003 	.word	0x00100003
    7650:	00110003 	.word	0x00110003
    7654:	00120003 	.word	0x00120003
    7658:	00130003 	.word	0x00130003
    765c:	000c0003 	.word	0x000c0003
    7660:	000d0003 	.word	0x000d0003
    7664:	000e0003 	.word	0x000e0003
    7668:	000f0003 	.word	0x000f0003
    766c:	00160003 	.word	0x00160003
    7670:	00170003 	.word	0x00170003
    7674:	00180003 	.word	0x00180003
    7678:	00190003 	.word	0x00190003

0000767c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    767c:	b590      	push	{r4, r7, lr}
    767e:	b08b      	sub	sp, #44	; 0x2c
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7684:	230c      	movs	r3, #12
    7686:	18fb      	adds	r3, r7, r3
    7688:	4a0f      	ldr	r2, [pc, #60]	; (76c8 <_sercom_get_sercom_inst_index+0x4c>)
    768a:	ca13      	ldmia	r2!, {r0, r1, r4}
    768c:	c313      	stmia	r3!, {r0, r1, r4}
    768e:	ca13      	ldmia	r2!, {r0, r1, r4}
    7690:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7692:	2300      	movs	r3, #0
    7694:	627b      	str	r3, [r7, #36]	; 0x24
    7696:	e00e      	b.n	76b6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7698:	230c      	movs	r3, #12
    769a:	18fb      	adds	r3, r7, r3
    769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    769e:	0092      	lsls	r2, r2, #2
    76a0:	58d3      	ldr	r3, [r2, r3]
    76a2:	001a      	movs	r2, r3
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	429a      	cmp	r2, r3
    76a8:	d102      	bne.n	76b0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    76aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76ac:	b2db      	uxtb	r3, r3
    76ae:	e006      	b.n	76be <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    76b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76b2:	3301      	adds	r3, #1
    76b4:	627b      	str	r3, [r7, #36]	; 0x24
    76b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76b8:	2b05      	cmp	r3, #5
    76ba:	d9ed      	bls.n	7698 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    76bc:	2300      	movs	r3, #0
}
    76be:	0018      	movs	r0, r3
    76c0:	46bd      	mov	sp, r7
    76c2:	b00b      	add	sp, #44	; 0x2c
    76c4:	bd90      	pop	{r4, r7, pc}
    76c6:	46c0      	nop			; (mov r8, r8)
    76c8:	0000f5d0 	.word	0x0000f5d0

000076cc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    76cc:	b580      	push	{r7, lr}
    76ce:	b082      	sub	sp, #8
    76d0:	af00      	add	r7, sp, #0
    76d2:	0002      	movs	r2, r0
    76d4:	1dfb      	adds	r3, r7, #7
    76d6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    76d8:	46c0      	nop			; (mov r8, r8)
    76da:	46bd      	mov	sp, r7
    76dc:	b002      	add	sp, #8
    76de:	bd80      	pop	{r7, pc}

000076e0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    76e0:	b580      	push	{r7, lr}
    76e2:	b084      	sub	sp, #16
    76e4:	af00      	add	r7, sp, #0
    76e6:	0002      	movs	r2, r0
    76e8:	6039      	str	r1, [r7, #0]
    76ea:	1dfb      	adds	r3, r7, #7
    76ec:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    76ee:	4b13      	ldr	r3, [pc, #76]	; (773c <_sercom_set_handler+0x5c>)
    76f0:	781b      	ldrb	r3, [r3, #0]
    76f2:	2201      	movs	r2, #1
    76f4:	4053      	eors	r3, r2
    76f6:	b2db      	uxtb	r3, r3
    76f8:	2b00      	cmp	r3, #0
    76fa:	d015      	beq.n	7728 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    76fc:	2300      	movs	r3, #0
    76fe:	60fb      	str	r3, [r7, #12]
    7700:	e00c      	b.n	771c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    7702:	4b0f      	ldr	r3, [pc, #60]	; (7740 <_sercom_set_handler+0x60>)
    7704:	68fa      	ldr	r2, [r7, #12]
    7706:	0092      	lsls	r2, r2, #2
    7708:	490e      	ldr	r1, [pc, #56]	; (7744 <_sercom_set_handler+0x64>)
    770a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    770c:	4b0e      	ldr	r3, [pc, #56]	; (7748 <_sercom_set_handler+0x68>)
    770e:	68fa      	ldr	r2, [r7, #12]
    7710:	0092      	lsls	r2, r2, #2
    7712:	2100      	movs	r1, #0
    7714:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7716:	68fb      	ldr	r3, [r7, #12]
    7718:	3301      	adds	r3, #1
    771a:	60fb      	str	r3, [r7, #12]
    771c:	68fb      	ldr	r3, [r7, #12]
    771e:	2b05      	cmp	r3, #5
    7720:	d9ef      	bls.n	7702 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    7722:	4b06      	ldr	r3, [pc, #24]	; (773c <_sercom_set_handler+0x5c>)
    7724:	2201      	movs	r2, #1
    7726:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    7728:	1dfb      	adds	r3, r7, #7
    772a:	781a      	ldrb	r2, [r3, #0]
    772c:	4b04      	ldr	r3, [pc, #16]	; (7740 <_sercom_set_handler+0x60>)
    772e:	0092      	lsls	r2, r2, #2
    7730:	6839      	ldr	r1, [r7, #0]
    7732:	50d1      	str	r1, [r2, r3]
}
    7734:	46c0      	nop			; (mov r8, r8)
    7736:	46bd      	mov	sp, r7
    7738:	b004      	add	sp, #16
    773a:	bd80      	pop	{r7, pc}
    773c:	2000022a 	.word	0x2000022a
    7740:	2000022c 	.word	0x2000022c
    7744:	000076cd 	.word	0x000076cd
    7748:	2000043c 	.word	0x2000043c

0000774c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    774c:	b590      	push	{r4, r7, lr}
    774e:	b085      	sub	sp, #20
    7750:	af00      	add	r7, sp, #0
    7752:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7754:	2308      	movs	r3, #8
    7756:	18fb      	adds	r3, r7, r3
    7758:	4a0b      	ldr	r2, [pc, #44]	; (7788 <_sercom_get_interrupt_vector+0x3c>)
    775a:	6811      	ldr	r1, [r2, #0]
    775c:	6019      	str	r1, [r3, #0]
    775e:	8892      	ldrh	r2, [r2, #4]
    7760:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7762:	230f      	movs	r3, #15
    7764:	18fc      	adds	r4, r7, r3
    7766:	687b      	ldr	r3, [r7, #4]
    7768:	0018      	movs	r0, r3
    776a:	4b08      	ldr	r3, [pc, #32]	; (778c <_sercom_get_interrupt_vector+0x40>)
    776c:	4798      	blx	r3
    776e:	0003      	movs	r3, r0
    7770:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7772:	230f      	movs	r3, #15
    7774:	18fb      	adds	r3, r7, r3
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	2208      	movs	r2, #8
    777a:	18ba      	adds	r2, r7, r2
    777c:	5cd3      	ldrb	r3, [r2, r3]
    777e:	b25b      	sxtb	r3, r3
}
    7780:	0018      	movs	r0, r3
    7782:	46bd      	mov	sp, r7
    7784:	b005      	add	sp, #20
    7786:	bd90      	pop	{r4, r7, pc}
    7788:	0000f5e8 	.word	0x0000f5e8
    778c:	0000767d 	.word	0x0000767d

00007790 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7790:	b580      	push	{r7, lr}
    7792:	af00      	add	r7, sp, #0
    7794:	4b03      	ldr	r3, [pc, #12]	; (77a4 <SERCOM0_Handler+0x14>)
    7796:	681b      	ldr	r3, [r3, #0]
    7798:	2000      	movs	r0, #0
    779a:	4798      	blx	r3
    779c:	46c0      	nop			; (mov r8, r8)
    779e:	46bd      	mov	sp, r7
    77a0:	bd80      	pop	{r7, pc}
    77a2:	46c0      	nop			; (mov r8, r8)
    77a4:	2000022c 	.word	0x2000022c

000077a8 <SERCOM1_Handler>:
    77a8:	b580      	push	{r7, lr}
    77aa:	af00      	add	r7, sp, #0
    77ac:	4b03      	ldr	r3, [pc, #12]	; (77bc <SERCOM1_Handler+0x14>)
    77ae:	685b      	ldr	r3, [r3, #4]
    77b0:	2001      	movs	r0, #1
    77b2:	4798      	blx	r3
    77b4:	46c0      	nop			; (mov r8, r8)
    77b6:	46bd      	mov	sp, r7
    77b8:	bd80      	pop	{r7, pc}
    77ba:	46c0      	nop			; (mov r8, r8)
    77bc:	2000022c 	.word	0x2000022c

000077c0 <SERCOM2_Handler>:
    77c0:	b580      	push	{r7, lr}
    77c2:	af00      	add	r7, sp, #0
    77c4:	4b03      	ldr	r3, [pc, #12]	; (77d4 <SERCOM2_Handler+0x14>)
    77c6:	689b      	ldr	r3, [r3, #8]
    77c8:	2002      	movs	r0, #2
    77ca:	4798      	blx	r3
    77cc:	46c0      	nop			; (mov r8, r8)
    77ce:	46bd      	mov	sp, r7
    77d0:	bd80      	pop	{r7, pc}
    77d2:	46c0      	nop			; (mov r8, r8)
    77d4:	2000022c 	.word	0x2000022c

000077d8 <SERCOM3_Handler>:
    77d8:	b580      	push	{r7, lr}
    77da:	af00      	add	r7, sp, #0
    77dc:	4b03      	ldr	r3, [pc, #12]	; (77ec <SERCOM3_Handler+0x14>)
    77de:	68db      	ldr	r3, [r3, #12]
    77e0:	2003      	movs	r0, #3
    77e2:	4798      	blx	r3
    77e4:	46c0      	nop			; (mov r8, r8)
    77e6:	46bd      	mov	sp, r7
    77e8:	bd80      	pop	{r7, pc}
    77ea:	46c0      	nop			; (mov r8, r8)
    77ec:	2000022c 	.word	0x2000022c

000077f0 <SERCOM4_Handler>:
    77f0:	b580      	push	{r7, lr}
    77f2:	af00      	add	r7, sp, #0
    77f4:	4b03      	ldr	r3, [pc, #12]	; (7804 <SERCOM4_Handler+0x14>)
    77f6:	691b      	ldr	r3, [r3, #16]
    77f8:	2004      	movs	r0, #4
    77fa:	4798      	blx	r3
    77fc:	46c0      	nop			; (mov r8, r8)
    77fe:	46bd      	mov	sp, r7
    7800:	bd80      	pop	{r7, pc}
    7802:	46c0      	nop			; (mov r8, r8)
    7804:	2000022c 	.word	0x2000022c

00007808 <SERCOM5_Handler>:
    7808:	b580      	push	{r7, lr}
    780a:	af00      	add	r7, sp, #0
    780c:	4b03      	ldr	r3, [pc, #12]	; (781c <SERCOM5_Handler+0x14>)
    780e:	695b      	ldr	r3, [r3, #20]
    7810:	2005      	movs	r0, #5
    7812:	4798      	blx	r3
    7814:	46c0      	nop			; (mov r8, r8)
    7816:	46bd      	mov	sp, r7
    7818:	bd80      	pop	{r7, pc}
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	2000022c 	.word	0x2000022c

00007820 <system_pinmux_get_config_defaults>:
{
    7820:	b580      	push	{r7, lr}
    7822:	b082      	sub	sp, #8
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	2280      	movs	r2, #128	; 0x80
    782c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    782e:	687b      	ldr	r3, [r7, #4]
    7830:	2200      	movs	r2, #0
    7832:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	2201      	movs	r2, #1
    7838:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    783a:	687b      	ldr	r3, [r7, #4]
    783c:	2200      	movs	r2, #0
    783e:	70da      	strb	r2, [r3, #3]
}
    7840:	46c0      	nop			; (mov r8, r8)
    7842:	46bd      	mov	sp, r7
    7844:	b002      	add	sp, #8
    7846:	bd80      	pop	{r7, pc}

00007848 <system_pinmux_get_group_from_gpio_pin>:
{
    7848:	b580      	push	{r7, lr}
    784a:	b084      	sub	sp, #16
    784c:	af00      	add	r7, sp, #0
    784e:	0002      	movs	r2, r0
    7850:	1dfb      	adds	r3, r7, #7
    7852:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7854:	230f      	movs	r3, #15
    7856:	18fb      	adds	r3, r7, r3
    7858:	1dfa      	adds	r2, r7, #7
    785a:	7812      	ldrb	r2, [r2, #0]
    785c:	09d2      	lsrs	r2, r2, #7
    785e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7860:	230e      	movs	r3, #14
    7862:	18fb      	adds	r3, r7, r3
    7864:	1dfa      	adds	r2, r7, #7
    7866:	7812      	ldrb	r2, [r2, #0]
    7868:	0952      	lsrs	r2, r2, #5
    786a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    786c:	4b0d      	ldr	r3, [pc, #52]	; (78a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    786e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7870:	230f      	movs	r3, #15
    7872:	18fb      	adds	r3, r7, r3
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	2b00      	cmp	r3, #0
    7878:	d10f      	bne.n	789a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    787a:	230f      	movs	r3, #15
    787c:	18fb      	adds	r3, r7, r3
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	009b      	lsls	r3, r3, #2
    7882:	2210      	movs	r2, #16
    7884:	4694      	mov	ip, r2
    7886:	44bc      	add	ip, r7
    7888:	4463      	add	r3, ip
    788a:	3b08      	subs	r3, #8
    788c:	681a      	ldr	r2, [r3, #0]
    788e:	230e      	movs	r3, #14
    7890:	18fb      	adds	r3, r7, r3
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	01db      	lsls	r3, r3, #7
    7896:	18d3      	adds	r3, r2, r3
    7898:	e000      	b.n	789c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    789a:	2300      	movs	r3, #0
}
    789c:	0018      	movs	r0, r3
    789e:	46bd      	mov	sp, r7
    78a0:	b004      	add	sp, #16
    78a2:	bd80      	pop	{r7, pc}
    78a4:	41004400 	.word	0x41004400

000078a8 <port_get_group_from_gpio_pin>:
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b082      	sub	sp, #8
    78ac:	af00      	add	r7, sp, #0
    78ae:	0002      	movs	r2, r0
    78b0:	1dfb      	adds	r3, r7, #7
    78b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    78b4:	1dfb      	adds	r3, r7, #7
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	0018      	movs	r0, r3
    78ba:	4b03      	ldr	r3, [pc, #12]	; (78c8 <port_get_group_from_gpio_pin+0x20>)
    78bc:	4798      	blx	r3
    78be:	0003      	movs	r3, r0
}
    78c0:	0018      	movs	r0, r3
    78c2:	46bd      	mov	sp, r7
    78c4:	b002      	add	sp, #8
    78c6:	bd80      	pop	{r7, pc}
    78c8:	00007849 	.word	0x00007849

000078cc <port_pin_set_output_level>:
{
    78cc:	b580      	push	{r7, lr}
    78ce:	b084      	sub	sp, #16
    78d0:	af00      	add	r7, sp, #0
    78d2:	0002      	movs	r2, r0
    78d4:	1dfb      	adds	r3, r7, #7
    78d6:	701a      	strb	r2, [r3, #0]
    78d8:	1dbb      	adds	r3, r7, #6
    78da:	1c0a      	adds	r2, r1, #0
    78dc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    78de:	1dfb      	adds	r3, r7, #7
    78e0:	781b      	ldrb	r3, [r3, #0]
    78e2:	0018      	movs	r0, r3
    78e4:	4b0d      	ldr	r3, [pc, #52]	; (791c <port_pin_set_output_level+0x50>)
    78e6:	4798      	blx	r3
    78e8:	0003      	movs	r3, r0
    78ea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    78ec:	1dfb      	adds	r3, r7, #7
    78ee:	781b      	ldrb	r3, [r3, #0]
    78f0:	221f      	movs	r2, #31
    78f2:	4013      	ands	r3, r2
    78f4:	2201      	movs	r2, #1
    78f6:	409a      	lsls	r2, r3
    78f8:	0013      	movs	r3, r2
    78fa:	60bb      	str	r3, [r7, #8]
	if (level) {
    78fc:	1dbb      	adds	r3, r7, #6
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	2b00      	cmp	r3, #0
    7902:	d003      	beq.n	790c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7904:	68fb      	ldr	r3, [r7, #12]
    7906:	68ba      	ldr	r2, [r7, #8]
    7908:	619a      	str	r2, [r3, #24]
}
    790a:	e002      	b.n	7912 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    790c:	68fb      	ldr	r3, [r7, #12]
    790e:	68ba      	ldr	r2, [r7, #8]
    7910:	615a      	str	r2, [r3, #20]
}
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	46bd      	mov	sp, r7
    7916:	b004      	add	sp, #16
    7918:	bd80      	pop	{r7, pc}
    791a:	46c0      	nop			; (mov r8, r8)
    791c:	000078a9 	.word	0x000078a9

00007920 <system_gclk_chan_get_config_defaults>:
{
    7920:	b580      	push	{r7, lr}
    7922:	b082      	sub	sp, #8
    7924:	af00      	add	r7, sp, #0
    7926:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7928:	687b      	ldr	r3, [r7, #4]
    792a:	2200      	movs	r2, #0
    792c:	701a      	strb	r2, [r3, #0]
}
    792e:	46c0      	nop			; (mov r8, r8)
    7930:	46bd      	mov	sp, r7
    7932:	b002      	add	sp, #8
    7934:	bd80      	pop	{r7, pc}
	...

00007938 <system_apb_clock_set_mask>:
{
    7938:	b580      	push	{r7, lr}
    793a:	b082      	sub	sp, #8
    793c:	af00      	add	r7, sp, #0
    793e:	0002      	movs	r2, r0
    7940:	6039      	str	r1, [r7, #0]
    7942:	1dfb      	adds	r3, r7, #7
    7944:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7946:	1dfb      	adds	r3, r7, #7
    7948:	781b      	ldrb	r3, [r3, #0]
    794a:	2b01      	cmp	r3, #1
    794c:	d00a      	beq.n	7964 <system_apb_clock_set_mask+0x2c>
    794e:	2b02      	cmp	r3, #2
    7950:	d00f      	beq.n	7972 <system_apb_clock_set_mask+0x3a>
    7952:	2b00      	cmp	r3, #0
    7954:	d114      	bne.n	7980 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7956:	4b0e      	ldr	r3, [pc, #56]	; (7990 <system_apb_clock_set_mask+0x58>)
    7958:	4a0d      	ldr	r2, [pc, #52]	; (7990 <system_apb_clock_set_mask+0x58>)
    795a:	6991      	ldr	r1, [r2, #24]
    795c:	683a      	ldr	r2, [r7, #0]
    795e:	430a      	orrs	r2, r1
    7960:	619a      	str	r2, [r3, #24]
			break;
    7962:	e00f      	b.n	7984 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7964:	4b0a      	ldr	r3, [pc, #40]	; (7990 <system_apb_clock_set_mask+0x58>)
    7966:	4a0a      	ldr	r2, [pc, #40]	; (7990 <system_apb_clock_set_mask+0x58>)
    7968:	69d1      	ldr	r1, [r2, #28]
    796a:	683a      	ldr	r2, [r7, #0]
    796c:	430a      	orrs	r2, r1
    796e:	61da      	str	r2, [r3, #28]
			break;
    7970:	e008      	b.n	7984 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7972:	4b07      	ldr	r3, [pc, #28]	; (7990 <system_apb_clock_set_mask+0x58>)
    7974:	4a06      	ldr	r2, [pc, #24]	; (7990 <system_apb_clock_set_mask+0x58>)
    7976:	6a11      	ldr	r1, [r2, #32]
    7978:	683a      	ldr	r2, [r7, #0]
    797a:	430a      	orrs	r2, r1
    797c:	621a      	str	r2, [r3, #32]
			break;
    797e:	e001      	b.n	7984 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7980:	2317      	movs	r3, #23
    7982:	e000      	b.n	7986 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7984:	2300      	movs	r3, #0
}
    7986:	0018      	movs	r0, r3
    7988:	46bd      	mov	sp, r7
    798a:	b002      	add	sp, #8
    798c:	bd80      	pop	{r7, pc}
    798e:	46c0      	nop			; (mov r8, r8)
    7990:	40000400 	.word	0x40000400

00007994 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7994:	b580      	push	{r7, lr}
    7996:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7998:	4b05      	ldr	r3, [pc, #20]	; (79b0 <system_is_debugger_present+0x1c>)
    799a:	789b      	ldrb	r3, [r3, #2]
    799c:	b2db      	uxtb	r3, r3
    799e:	001a      	movs	r2, r3
    79a0:	2302      	movs	r3, #2
    79a2:	4013      	ands	r3, r2
    79a4:	1e5a      	subs	r2, r3, #1
    79a6:	4193      	sbcs	r3, r2
    79a8:	b2db      	uxtb	r3, r3
}
    79aa:	0018      	movs	r0, r3
    79ac:	46bd      	mov	sp, r7
    79ae:	bd80      	pop	{r7, pc}
    79b0:	41002000 	.word	0x41002000

000079b4 <spi_is_ready_to_write>:
{
    79b4:	b580      	push	{r7, lr}
    79b6:	b084      	sub	sp, #16
    79b8:	af00      	add	r7, sp, #0
    79ba:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	681b      	ldr	r3, [r3, #0]
    79c0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    79c2:	68fb      	ldr	r3, [r7, #12]
    79c4:	7e1b      	ldrb	r3, [r3, #24]
    79c6:	b2db      	uxtb	r3, r3
    79c8:	001a      	movs	r2, r3
    79ca:	2301      	movs	r3, #1
    79cc:	4013      	ands	r3, r2
    79ce:	1e5a      	subs	r2, r3, #1
    79d0:	4193      	sbcs	r3, r2
    79d2:	b2db      	uxtb	r3, r3
}
    79d4:	0018      	movs	r0, r3
    79d6:	46bd      	mov	sp, r7
    79d8:	b004      	add	sp, #16
    79da:	bd80      	pop	{r7, pc}

000079dc <spi_is_ready_to_read>:
{
    79dc:	b580      	push	{r7, lr}
    79de:	b084      	sub	sp, #16
    79e0:	af00      	add	r7, sp, #0
    79e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    79e4:	687b      	ldr	r3, [r7, #4]
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    79ea:	68fb      	ldr	r3, [r7, #12]
    79ec:	7e1b      	ldrb	r3, [r3, #24]
    79ee:	b2db      	uxtb	r3, r3
    79f0:	001a      	movs	r2, r3
    79f2:	2304      	movs	r3, #4
    79f4:	4013      	ands	r3, r2
    79f6:	1e5a      	subs	r2, r3, #1
    79f8:	4193      	sbcs	r3, r2
    79fa:	b2db      	uxtb	r3, r3
}
    79fc:	0018      	movs	r0, r3
    79fe:	46bd      	mov	sp, r7
    7a00:	b004      	add	sp, #16
    7a02:	bd80      	pop	{r7, pc}

00007a04 <spi_write>:
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b084      	sub	sp, #16
    7a08:	af00      	add	r7, sp, #0
    7a0a:	6078      	str	r0, [r7, #4]
    7a0c:	000a      	movs	r2, r1
    7a0e:	1cbb      	adds	r3, r7, #2
    7a10:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    7a18:	687b      	ldr	r3, [r7, #4]
    7a1a:	0018      	movs	r0, r3
    7a1c:	4b0a      	ldr	r3, [pc, #40]	; (7a48 <spi_write+0x44>)
    7a1e:	4798      	blx	r3
    7a20:	0003      	movs	r3, r0
    7a22:	001a      	movs	r2, r3
    7a24:	2301      	movs	r3, #1
    7a26:	4053      	eors	r3, r2
    7a28:	b2db      	uxtb	r3, r3
    7a2a:	2b00      	cmp	r3, #0
    7a2c:	d001      	beq.n	7a32 <spi_write+0x2e>
		return STATUS_BUSY;
    7a2e:	2305      	movs	r3, #5
    7a30:	e006      	b.n	7a40 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a32:	1cbb      	adds	r3, r7, #2
    7a34:	881b      	ldrh	r3, [r3, #0]
    7a36:	05db      	lsls	r3, r3, #23
    7a38:	0dda      	lsrs	r2, r3, #23
    7a3a:	68fb      	ldr	r3, [r7, #12]
    7a3c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    7a3e:	2300      	movs	r3, #0
}
    7a40:	0018      	movs	r0, r3
    7a42:	46bd      	mov	sp, r7
    7a44:	b004      	add	sp, #16
    7a46:	bd80      	pop	{r7, pc}
    7a48:	000079b5 	.word	0x000079b5

00007a4c <spi_read>:
{
    7a4c:	b580      	push	{r7, lr}
    7a4e:	b084      	sub	sp, #16
    7a50:	af00      	add	r7, sp, #0
    7a52:	6078      	str	r0, [r7, #4]
    7a54:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a56:	687b      	ldr	r3, [r7, #4]
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	0018      	movs	r0, r3
    7a60:	4b1b      	ldr	r3, [pc, #108]	; (7ad0 <spi_read+0x84>)
    7a62:	4798      	blx	r3
    7a64:	0003      	movs	r3, r0
    7a66:	001a      	movs	r2, r3
    7a68:	2301      	movs	r3, #1
    7a6a:	4053      	eors	r3, r2
    7a6c:	b2db      	uxtb	r3, r3
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d001      	beq.n	7a76 <spi_read+0x2a>
		return STATUS_ERR_IO;
    7a72:	2310      	movs	r3, #16
    7a74:	e027      	b.n	7ac6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    7a76:	230f      	movs	r3, #15
    7a78:	18fb      	adds	r3, r7, r3
    7a7a:	2200      	movs	r2, #0
    7a7c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7a7e:	68bb      	ldr	r3, [r7, #8]
    7a80:	8b5b      	ldrh	r3, [r3, #26]
    7a82:	b29b      	uxth	r3, r3
    7a84:	001a      	movs	r2, r3
    7a86:	2304      	movs	r3, #4
    7a88:	4013      	ands	r3, r2
    7a8a:	d006      	beq.n	7a9a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    7a8c:	230f      	movs	r3, #15
    7a8e:	18fb      	adds	r3, r7, r3
    7a90:	221e      	movs	r2, #30
    7a92:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7a94:	68bb      	ldr	r3, [r7, #8]
    7a96:	2204      	movs	r2, #4
    7a98:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	799b      	ldrb	r3, [r3, #6]
    7a9e:	2b01      	cmp	r3, #1
    7aa0:	d108      	bne.n	7ab4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7aa2:	68bb      	ldr	r3, [r7, #8]
    7aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aa6:	b29b      	uxth	r3, r3
    7aa8:	05db      	lsls	r3, r3, #23
    7aaa:	0ddb      	lsrs	r3, r3, #23
    7aac:	b29a      	uxth	r2, r3
    7aae:	683b      	ldr	r3, [r7, #0]
    7ab0:	801a      	strh	r2, [r3, #0]
    7ab2:	e005      	b.n	7ac0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7ab4:	68bb      	ldr	r3, [r7, #8]
    7ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7ab8:	b2db      	uxtb	r3, r3
    7aba:	b29a      	uxth	r2, r3
    7abc:	683b      	ldr	r3, [r7, #0]
    7abe:	801a      	strh	r2, [r3, #0]
	return retval;
    7ac0:	230f      	movs	r3, #15
    7ac2:	18fb      	adds	r3, r7, r3
    7ac4:	781b      	ldrb	r3, [r3, #0]
}
    7ac6:	0018      	movs	r0, r3
    7ac8:	46bd      	mov	sp, r7
    7aca:	b004      	add	sp, #16
    7acc:	bd80      	pop	{r7, pc}
    7ace:	46c0      	nop			; (mov r8, r8)
    7ad0:	000079dd 	.word	0x000079dd

00007ad4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    7ad4:	b590      	push	{r4, r7, lr}
    7ad6:	b093      	sub	sp, #76	; 0x4c
    7ad8:	af00      	add	r7, sp, #0
    7ada:	6078      	str	r0, [r7, #4]
    7adc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7ade:	687b      	ldr	r3, [r7, #4]
    7ae0:	681b      	ldr	r3, [r3, #0]
    7ae2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    7ae4:	687b      	ldr	r3, [r7, #4]
    7ae6:	681b      	ldr	r3, [r3, #0]
    7ae8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7aea:	231c      	movs	r3, #28
    7aec:	18fb      	adds	r3, r7, r3
    7aee:	0018      	movs	r0, r3
    7af0:	4b75      	ldr	r3, [pc, #468]	; (7cc8 <_spi_set_config+0x1f4>)
    7af2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7af4:	231c      	movs	r3, #28
    7af6:	18fb      	adds	r3, r7, r3
    7af8:	2200      	movs	r2, #0
    7afa:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    7afc:	683b      	ldr	r3, [r7, #0]
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d103      	bne.n	7b0c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7b04:	231c      	movs	r3, #28
    7b06:	18fb      	adds	r3, r7, r3
    7b08:	2200      	movs	r2, #0
    7b0a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7b0c:	683b      	ldr	r3, [r7, #0]
    7b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    7b10:	230c      	movs	r3, #12
    7b12:	18fb      	adds	r3, r7, r3
    7b14:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7b16:	683b      	ldr	r3, [r7, #0]
    7b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    7b1a:	230c      	movs	r3, #12
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    7b20:	683b      	ldr	r3, [r7, #0]
    7b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    7b24:	230c      	movs	r3, #12
    7b26:	18fb      	adds	r3, r7, r3
    7b28:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    7b2a:	683b      	ldr	r3, [r7, #0]
    7b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    7b2e:	230c      	movs	r3, #12
    7b30:	18fb      	adds	r3, r7, r3
    7b32:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b34:	2347      	movs	r3, #71	; 0x47
    7b36:	18fb      	adds	r3, r7, r3
    7b38:	2200      	movs	r2, #0
    7b3a:	701a      	strb	r2, [r3, #0]
    7b3c:	e02c      	b.n	7b98 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7b3e:	2347      	movs	r3, #71	; 0x47
    7b40:	18fb      	adds	r3, r7, r3
    7b42:	781a      	ldrb	r2, [r3, #0]
    7b44:	230c      	movs	r3, #12
    7b46:	18fb      	adds	r3, r7, r3
    7b48:	0092      	lsls	r2, r2, #2
    7b4a:	58d3      	ldr	r3, [r2, r3]
    7b4c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b50:	2b00      	cmp	r3, #0
    7b52:	d109      	bne.n	7b68 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7b54:	2347      	movs	r3, #71	; 0x47
    7b56:	18fb      	adds	r3, r7, r3
    7b58:	781a      	ldrb	r2, [r3, #0]
    7b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7b5c:	0011      	movs	r1, r2
    7b5e:	0018      	movs	r0, r3
    7b60:	4b5a      	ldr	r3, [pc, #360]	; (7ccc <_spi_set_config+0x1f8>)
    7b62:	4798      	blx	r3
    7b64:	0003      	movs	r3, r0
    7b66:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b6a:	3301      	adds	r3, #1
    7b6c:	d00d      	beq.n	7b8a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b70:	b2da      	uxtb	r2, r3
    7b72:	231c      	movs	r3, #28
    7b74:	18fb      	adds	r3, r7, r3
    7b76:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b7a:	0c1b      	lsrs	r3, r3, #16
    7b7c:	b2db      	uxtb	r3, r3
    7b7e:	221c      	movs	r2, #28
    7b80:	18ba      	adds	r2, r7, r2
    7b82:	0011      	movs	r1, r2
    7b84:	0018      	movs	r0, r3
    7b86:	4b52      	ldr	r3, [pc, #328]	; (7cd0 <_spi_set_config+0x1fc>)
    7b88:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b8a:	2347      	movs	r3, #71	; 0x47
    7b8c:	18fb      	adds	r3, r7, r3
    7b8e:	781a      	ldrb	r2, [r3, #0]
    7b90:	2347      	movs	r3, #71	; 0x47
    7b92:	18fb      	adds	r3, r7, r3
    7b94:	3201      	adds	r2, #1
    7b96:	701a      	strb	r2, [r3, #0]
    7b98:	2347      	movs	r3, #71	; 0x47
    7b9a:	18fb      	adds	r3, r7, r3
    7b9c:	781b      	ldrb	r3, [r3, #0]
    7b9e:	2b03      	cmp	r3, #3
    7ba0:	d9cd      	bls.n	7b3e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    7ba2:	683b      	ldr	r3, [r7, #0]
    7ba4:	781a      	ldrb	r2, [r3, #0]
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    7baa:	683b      	ldr	r3, [r7, #0]
    7bac:	7c1a      	ldrb	r2, [r3, #16]
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    7bb2:	683b      	ldr	r3, [r7, #0]
    7bb4:	7c9a      	ldrb	r2, [r3, #18]
    7bb6:	687b      	ldr	r3, [r7, #4]
    7bb8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    7bba:	683b      	ldr	r3, [r7, #0]
    7bbc:	7d1a      	ldrb	r2, [r3, #20]
    7bbe:	687b      	ldr	r3, [r7, #4]
    7bc0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7bc2:	230a      	movs	r3, #10
    7bc4:	18fb      	adds	r3, r7, r3
    7bc6:	2200      	movs	r2, #0
    7bc8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    7bca:	2300      	movs	r3, #0
    7bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    7bce:	2300      	movs	r3, #0
    7bd0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    7bd2:	683b      	ldr	r3, [r7, #0]
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	2b01      	cmp	r3, #1
    7bd8:	d129      	bne.n	7c2e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7bda:	687b      	ldr	r3, [r7, #4]
    7bdc:	681b      	ldr	r3, [r3, #0]
    7bde:	0018      	movs	r0, r3
    7be0:	4b3c      	ldr	r3, [pc, #240]	; (7cd4 <_spi_set_config+0x200>)
    7be2:	4798      	blx	r3
    7be4:	0003      	movs	r3, r0
    7be6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bea:	3314      	adds	r3, #20
    7bec:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7bf0:	b2db      	uxtb	r3, r3
    7bf2:	0018      	movs	r0, r3
    7bf4:	4b38      	ldr	r3, [pc, #224]	; (7cd8 <_spi_set_config+0x204>)
    7bf6:	4798      	blx	r3
    7bf8:	0003      	movs	r3, r0
    7bfa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    7bfc:	683b      	ldr	r3, [r7, #0]
    7bfe:	699b      	ldr	r3, [r3, #24]
    7c00:	2223      	movs	r2, #35	; 0x23
    7c02:	18bc      	adds	r4, r7, r2
    7c04:	220a      	movs	r2, #10
    7c06:	18ba      	adds	r2, r7, r2
    7c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7c0a:	0018      	movs	r0, r3
    7c0c:	4b33      	ldr	r3, [pc, #204]	; (7cdc <_spi_set_config+0x208>)
    7c0e:	4798      	blx	r3
    7c10:	0003      	movs	r3, r0
    7c12:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    7c14:	2323      	movs	r3, #35	; 0x23
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	781b      	ldrb	r3, [r3, #0]
    7c1a:	2b00      	cmp	r3, #0
    7c1c:	d001      	beq.n	7c22 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    7c1e:	2317      	movs	r3, #23
    7c20:	e04e      	b.n	7cc0 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    7c22:	230a      	movs	r3, #10
    7c24:	18fb      	adds	r3, r7, r3
    7c26:	881b      	ldrh	r3, [r3, #0]
    7c28:	b2da      	uxtb	r2, r3
    7c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c2c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    7c2e:	683b      	ldr	r3, [r7, #0]
    7c30:	685b      	ldr	r3, [r3, #4]
    7c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7c34:	4313      	orrs	r3, r2
    7c36:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    7c38:	683b      	ldr	r3, [r7, #0]
    7c3a:	689b      	ldr	r3, [r3, #8]
    7c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7c3e:	4313      	orrs	r3, r2
    7c40:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    7c42:	683b      	ldr	r3, [r7, #0]
    7c44:	68db      	ldr	r3, [r3, #12]
    7c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7c48:	4313      	orrs	r3, r2
    7c4a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    7c4c:	683b      	ldr	r3, [r7, #0]
    7c4e:	7c1b      	ldrb	r3, [r3, #16]
    7c50:	001a      	movs	r2, r3
    7c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c54:	4313      	orrs	r3, r2
    7c56:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7c58:	683b      	ldr	r3, [r7, #0]
    7c5a:	7c5b      	ldrb	r3, [r3, #17]
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d103      	bne.n	7c68 <_spi_set_config+0x194>
    7c60:	4b1f      	ldr	r3, [pc, #124]	; (7ce0 <_spi_set_config+0x20c>)
    7c62:	4798      	blx	r3
    7c64:	1e03      	subs	r3, r0, #0
    7c66:	d003      	beq.n	7c70 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c6a:	2280      	movs	r2, #128	; 0x80
    7c6c:	4313      	orrs	r3, r2
    7c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	7c9b      	ldrb	r3, [r3, #18]
    7c74:	2b00      	cmp	r3, #0
    7c76:	d004      	beq.n	7c82 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c7a:	2280      	movs	r2, #128	; 0x80
    7c7c:	0292      	lsls	r2, r2, #10
    7c7e:	4313      	orrs	r3, r2
    7c80:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    7c82:	683b      	ldr	r3, [r7, #0]
    7c84:	7cdb      	ldrb	r3, [r3, #19]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d004      	beq.n	7c94 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c8c:	2280      	movs	r2, #128	; 0x80
    7c8e:	0092      	lsls	r2, r2, #2
    7c90:	4313      	orrs	r3, r2
    7c92:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    7c94:	683b      	ldr	r3, [r7, #0]
    7c96:	7d1b      	ldrb	r3, [r3, #20]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d004      	beq.n	7ca6 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c9e:	2280      	movs	r2, #128	; 0x80
    7ca0:	0192      	lsls	r2, r2, #6
    7ca2:	4313      	orrs	r3, r2
    7ca4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    7ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7ca8:	681a      	ldr	r2, [r3, #0]
    7caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7cac:	431a      	orrs	r2, r3
    7cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7cb0:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    7cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7cb4:	685a      	ldr	r2, [r3, #4]
    7cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7cb8:	431a      	orrs	r2, r3
    7cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7cbc:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    7cbe:	2300      	movs	r3, #0
}
    7cc0:	0018      	movs	r0, r3
    7cc2:	46bd      	mov	sp, r7
    7cc4:	b013      	add	sp, #76	; 0x4c
    7cc6:	bd90      	pop	{r4, r7, pc}
    7cc8:	00007821 	.word	0x00007821
    7ccc:	000074c1 	.word	0x000074c1
    7cd0:	00009d89 	.word	0x00009d89
    7cd4:	0000767d 	.word	0x0000767d
    7cd8:	00009bc1 	.word	0x00009bc1
    7cdc:	000071f7 	.word	0x000071f7
    7ce0:	00007995 	.word	0x00007995

00007ce4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7ce4:	b590      	push	{r4, r7, lr}
    7ce6:	b08b      	sub	sp, #44	; 0x2c
    7ce8:	af00      	add	r7, sp, #0
    7cea:	60f8      	str	r0, [r7, #12]
    7cec:	60b9      	str	r1, [r7, #8]
    7cee:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7cf0:	68fb      	ldr	r3, [r7, #12]
    7cf2:	68ba      	ldr	r2, [r7, #8]
    7cf4:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7cf6:	68fb      	ldr	r3, [r7, #12]
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7cfc:	6a3b      	ldr	r3, [r7, #32]
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	2202      	movs	r2, #2
    7d02:	4013      	ands	r3, r2
    7d04:	d001      	beq.n	7d0a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7d06:	231c      	movs	r3, #28
    7d08:	e09c      	b.n	7e44 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7d0a:	6a3b      	ldr	r3, [r7, #32]
    7d0c:	681b      	ldr	r3, [r3, #0]
    7d0e:	2201      	movs	r2, #1
    7d10:	4013      	ands	r3, r2
    7d12:	d001      	beq.n	7d18 <spi_init+0x34>
		return STATUS_BUSY;
    7d14:	2305      	movs	r3, #5
    7d16:	e095      	b.n	7e44 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7d18:	68fb      	ldr	r3, [r7, #12]
    7d1a:	681b      	ldr	r3, [r3, #0]
    7d1c:	0018      	movs	r0, r3
    7d1e:	4b4b      	ldr	r3, [pc, #300]	; (7e4c <spi_init+0x168>)
    7d20:	4798      	blx	r3
    7d22:	0003      	movs	r3, r0
    7d24:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7d26:	69fb      	ldr	r3, [r7, #28]
    7d28:	3302      	adds	r3, #2
    7d2a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7d2c:	69fb      	ldr	r3, [r7, #28]
    7d2e:	3314      	adds	r3, #20
    7d30:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7d32:	2201      	movs	r2, #1
    7d34:	69bb      	ldr	r3, [r7, #24]
    7d36:	409a      	lsls	r2, r3
    7d38:	0013      	movs	r3, r2
    7d3a:	0019      	movs	r1, r3
    7d3c:	2002      	movs	r0, #2
    7d3e:	4b44      	ldr	r3, [pc, #272]	; (7e50 <spi_init+0x16c>)
    7d40:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7d42:	2310      	movs	r3, #16
    7d44:	18fb      	adds	r3, r7, r3
    7d46:	0018      	movs	r0, r3
    7d48:	4b42      	ldr	r3, [pc, #264]	; (7e54 <spi_init+0x170>)
    7d4a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7d4c:	687b      	ldr	r3, [r7, #4]
    7d4e:	2224      	movs	r2, #36	; 0x24
    7d50:	5c9a      	ldrb	r2, [r3, r2]
    7d52:	2310      	movs	r3, #16
    7d54:	18fb      	adds	r3, r7, r3
    7d56:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7d58:	697b      	ldr	r3, [r7, #20]
    7d5a:	b2db      	uxtb	r3, r3
    7d5c:	2210      	movs	r2, #16
    7d5e:	18ba      	adds	r2, r7, r2
    7d60:	0011      	movs	r1, r2
    7d62:	0018      	movs	r0, r3
    7d64:	4b3c      	ldr	r3, [pc, #240]	; (7e58 <spi_init+0x174>)
    7d66:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7d68:	697b      	ldr	r3, [r7, #20]
    7d6a:	b2db      	uxtb	r3, r3
    7d6c:	0018      	movs	r0, r3
    7d6e:	4b3b      	ldr	r3, [pc, #236]	; (7e5c <spi_init+0x178>)
    7d70:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7d72:	687b      	ldr	r3, [r7, #4]
    7d74:	2224      	movs	r2, #36	; 0x24
    7d76:	5c9b      	ldrb	r3, [r3, r2]
    7d78:	2100      	movs	r1, #0
    7d7a:	0018      	movs	r0, r3
    7d7c:	4b38      	ldr	r3, [pc, #224]	; (7e60 <spi_init+0x17c>)
    7d7e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    7d80:	687b      	ldr	r3, [r7, #4]
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	2b01      	cmp	r3, #1
    7d86:	d105      	bne.n	7d94 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7d88:	6a3b      	ldr	r3, [r7, #32]
    7d8a:	681b      	ldr	r3, [r3, #0]
    7d8c:	220c      	movs	r2, #12
    7d8e:	431a      	orrs	r2, r3
    7d90:	6a3b      	ldr	r3, [r7, #32]
    7d92:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7d94:	2327      	movs	r3, #39	; 0x27
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	2200      	movs	r2, #0
    7d9a:	701a      	strb	r2, [r3, #0]
    7d9c:	e010      	b.n	7dc0 <spi_init+0xdc>
		module->callback[i]        = NULL;
    7d9e:	2327      	movs	r3, #39	; 0x27
    7da0:	18fb      	adds	r3, r7, r3
    7da2:	781b      	ldrb	r3, [r3, #0]
    7da4:	68fa      	ldr	r2, [r7, #12]
    7da6:	3302      	adds	r3, #2
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	18d3      	adds	r3, r2, r3
    7dac:	3304      	adds	r3, #4
    7dae:	2200      	movs	r2, #0
    7db0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7db2:	2327      	movs	r3, #39	; 0x27
    7db4:	18fb      	adds	r3, r7, r3
    7db6:	781a      	ldrb	r2, [r3, #0]
    7db8:	2327      	movs	r3, #39	; 0x27
    7dba:	18fb      	adds	r3, r7, r3
    7dbc:	3201      	adds	r2, #1
    7dbe:	701a      	strb	r2, [r3, #0]
    7dc0:	2327      	movs	r3, #39	; 0x27
    7dc2:	18fb      	adds	r3, r7, r3
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	2b06      	cmp	r3, #6
    7dc8:	d9e9      	bls.n	7d9e <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    7dca:	68fb      	ldr	r3, [r7, #12]
    7dcc:	2200      	movs	r2, #0
    7dce:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7dd0:	68fb      	ldr	r3, [r7, #12]
    7dd2:	2200      	movs	r2, #0
    7dd4:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7dd6:	68fb      	ldr	r3, [r7, #12]
    7dd8:	2200      	movs	r2, #0
    7dda:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7ddc:	68fb      	ldr	r3, [r7, #12]
    7dde:	2200      	movs	r2, #0
    7de0:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    7de2:	68fb      	ldr	r3, [r7, #12]
    7de4:	2236      	movs	r2, #54	; 0x36
    7de6:	2100      	movs	r1, #0
    7de8:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    7dea:	68fb      	ldr	r3, [r7, #12]
    7dec:	2237      	movs	r2, #55	; 0x37
    7dee:	2100      	movs	r1, #0
    7df0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    7df2:	68fb      	ldr	r3, [r7, #12]
    7df4:	2238      	movs	r2, #56	; 0x38
    7df6:	2100      	movs	r1, #0
    7df8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    7dfa:	68fb      	ldr	r3, [r7, #12]
    7dfc:	2203      	movs	r2, #3
    7dfe:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    7e00:	68fb      	ldr	r3, [r7, #12]
    7e02:	2200      	movs	r2, #0
    7e04:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7e06:	68fb      	ldr	r3, [r7, #12]
    7e08:	681b      	ldr	r3, [r3, #0]
    7e0a:	2213      	movs	r2, #19
    7e0c:	18bc      	adds	r4, r7, r2
    7e0e:	0018      	movs	r0, r3
    7e10:	4b0e      	ldr	r3, [pc, #56]	; (7e4c <spi_init+0x168>)
    7e12:	4798      	blx	r3
    7e14:	0003      	movs	r3, r0
    7e16:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7e18:	4a12      	ldr	r2, [pc, #72]	; (7e64 <spi_init+0x180>)
    7e1a:	2313      	movs	r3, #19
    7e1c:	18fb      	adds	r3, r7, r3
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	0011      	movs	r1, r2
    7e22:	0018      	movs	r0, r3
    7e24:	4b10      	ldr	r3, [pc, #64]	; (7e68 <spi_init+0x184>)
    7e26:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7e28:	2313      	movs	r3, #19
    7e2a:	18fb      	adds	r3, r7, r3
    7e2c:	781a      	ldrb	r2, [r3, #0]
    7e2e:	4b0f      	ldr	r3, [pc, #60]	; (7e6c <spi_init+0x188>)
    7e30:	0092      	lsls	r2, r2, #2
    7e32:	68f9      	ldr	r1, [r7, #12]
    7e34:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    7e36:	687a      	ldr	r2, [r7, #4]
    7e38:	68fb      	ldr	r3, [r7, #12]
    7e3a:	0011      	movs	r1, r2
    7e3c:	0018      	movs	r0, r3
    7e3e:	4b0c      	ldr	r3, [pc, #48]	; (7e70 <spi_init+0x18c>)
    7e40:	4798      	blx	r3
    7e42:	0003      	movs	r3, r0
}
    7e44:	0018      	movs	r0, r3
    7e46:	46bd      	mov	sp, r7
    7e48:	b00b      	add	sp, #44	; 0x2c
    7e4a:	bd90      	pop	{r4, r7, pc}
    7e4c:	0000767d 	.word	0x0000767d
    7e50:	00007939 	.word	0x00007939
    7e54:	00007921 	.word	0x00007921
    7e58:	00009a9d 	.word	0x00009a9d
    7e5c:	00009ae1 	.word	0x00009ae1
    7e60:	00007435 	.word	0x00007435
    7e64:	000080bd 	.word	0x000080bd
    7e68:	000076e1 	.word	0x000076e1
    7e6c:	2000043c 	.word	0x2000043c
    7e70:	00007ad5 	.word	0x00007ad5

00007e74 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7e74:	b580      	push	{r7, lr}
    7e76:	b086      	sub	sp, #24
    7e78:	af00      	add	r7, sp, #0
    7e7a:	60f8      	str	r0, [r7, #12]
    7e7c:	60b9      	str	r1, [r7, #8]
    7e7e:	1dfb      	adds	r3, r7, #7
    7e80:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7e82:	68fb      	ldr	r3, [r7, #12]
    7e84:	795b      	ldrb	r3, [r3, #5]
    7e86:	2b01      	cmp	r3, #1
    7e88:	d001      	beq.n	7e8e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    7e8a:	2315      	movs	r3, #21
    7e8c:	e05c      	b.n	7f48 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    7e8e:	68fb      	ldr	r3, [r7, #12]
    7e90:	7a1b      	ldrb	r3, [r3, #8]
    7e92:	2201      	movs	r2, #1
    7e94:	4053      	eors	r3, r2
    7e96:	b2db      	uxtb	r3, r3
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d054      	beq.n	7f46 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    7e9c:	1dfb      	adds	r3, r7, #7
    7e9e:	781b      	ldrb	r3, [r3, #0]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d04a      	beq.n	7f3a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    7ea4:	68bb      	ldr	r3, [r7, #8]
    7ea6:	785b      	ldrb	r3, [r3, #1]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d03f      	beq.n	7f2c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    7eac:	68fb      	ldr	r3, [r7, #12]
    7eae:	0018      	movs	r0, r3
    7eb0:	4b27      	ldr	r3, [pc, #156]	; (7f50 <spi_select_slave+0xdc>)
    7eb2:	4798      	blx	r3
    7eb4:	0003      	movs	r3, r0
    7eb6:	001a      	movs	r2, r3
    7eb8:	2301      	movs	r3, #1
    7eba:	4053      	eors	r3, r2
    7ebc:	b2db      	uxtb	r3, r3
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d007      	beq.n	7ed2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    7ec2:	68bb      	ldr	r3, [r7, #8]
    7ec4:	781b      	ldrb	r3, [r3, #0]
    7ec6:	2101      	movs	r1, #1
    7ec8:	0018      	movs	r0, r3
    7eca:	4b22      	ldr	r3, [pc, #136]	; (7f54 <spi_select_slave+0xe0>)
    7ecc:	4798      	blx	r3
					return STATUS_BUSY;
    7ece:	2305      	movs	r3, #5
    7ed0:	e03a      	b.n	7f48 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7ed2:	68bb      	ldr	r3, [r7, #8]
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	2100      	movs	r1, #0
    7ed8:	0018      	movs	r0, r3
    7eda:	4b1e      	ldr	r3, [pc, #120]	; (7f54 <spi_select_slave+0xe0>)
    7edc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    7ede:	68bb      	ldr	r3, [r7, #8]
    7ee0:	789b      	ldrb	r3, [r3, #2]
    7ee2:	b29a      	uxth	r2, r3
    7ee4:	68fb      	ldr	r3, [r7, #12]
    7ee6:	0011      	movs	r1, r2
    7ee8:	0018      	movs	r0, r3
    7eea:	4b1b      	ldr	r3, [pc, #108]	; (7f58 <spi_select_slave+0xe4>)
    7eec:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    7eee:	68fb      	ldr	r3, [r7, #12]
    7ef0:	79db      	ldrb	r3, [r3, #7]
    7ef2:	2201      	movs	r2, #1
    7ef4:	4053      	eors	r3, r2
    7ef6:	b2db      	uxtb	r3, r3
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d024      	beq.n	7f46 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    7efc:	46c0      	nop			; (mov r8, r8)
    7efe:	68fb      	ldr	r3, [r7, #12]
    7f00:	0018      	movs	r0, r3
    7f02:	4b16      	ldr	r3, [pc, #88]	; (7f5c <spi_select_slave+0xe8>)
    7f04:	4798      	blx	r3
    7f06:	0003      	movs	r3, r0
    7f08:	001a      	movs	r2, r3
    7f0a:	2301      	movs	r3, #1
    7f0c:	4053      	eors	r3, r2
    7f0e:	b2db      	uxtb	r3, r3
    7f10:	2b00      	cmp	r3, #0
    7f12:	d1f4      	bne.n	7efe <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    7f14:	2316      	movs	r3, #22
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	2200      	movs	r2, #0
    7f1a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    7f1c:	2316      	movs	r3, #22
    7f1e:	18fa      	adds	r2, r7, r3
    7f20:	68fb      	ldr	r3, [r7, #12]
    7f22:	0011      	movs	r1, r2
    7f24:	0018      	movs	r0, r3
    7f26:	4b0e      	ldr	r3, [pc, #56]	; (7f60 <spi_select_slave+0xec>)
    7f28:	4798      	blx	r3
    7f2a:	e00c      	b.n	7f46 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7f2c:	68bb      	ldr	r3, [r7, #8]
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	2100      	movs	r1, #0
    7f32:	0018      	movs	r0, r3
    7f34:	4b07      	ldr	r3, [pc, #28]	; (7f54 <spi_select_slave+0xe0>)
    7f36:	4798      	blx	r3
    7f38:	e005      	b.n	7f46 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    7f3a:	68bb      	ldr	r3, [r7, #8]
    7f3c:	781b      	ldrb	r3, [r3, #0]
    7f3e:	2101      	movs	r1, #1
    7f40:	0018      	movs	r0, r3
    7f42:	4b04      	ldr	r3, [pc, #16]	; (7f54 <spi_select_slave+0xe0>)
    7f44:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    7f46:	2300      	movs	r3, #0
}
    7f48:	0018      	movs	r0, r3
    7f4a:	46bd      	mov	sp, r7
    7f4c:	b006      	add	sp, #24
    7f4e:	bd80      	pop	{r7, pc}
    7f50:	000079b5 	.word	0x000079b5
    7f54:	000078cd 	.word	0x000078cd
    7f58:	00007a05 	.word	0x00007a05
    7f5c:	000079dd 	.word	0x000079dd
    7f60:	00007a4d 	.word	0x00007a4d

00007f64 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    7f64:	b580      	push	{r7, lr}
    7f66:	b084      	sub	sp, #16
    7f68:	af00      	add	r7, sp, #0
    7f6a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7f6c:	687b      	ldr	r3, [r7, #4]
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f76:	781b      	ldrb	r3, [r3, #0]
    7f78:	b2da      	uxtb	r2, r3
    7f7a:	230e      	movs	r3, #14
    7f7c:	18fb      	adds	r3, r7, r3
    7f7e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f84:	1c5a      	adds	r2, r3, #1
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	799b      	ldrb	r3, [r3, #6]
    7f8e:	2b01      	cmp	r3, #1
    7f90:	d113      	bne.n	7fba <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	021b      	lsls	r3, r3, #8
    7f9c:	b21a      	sxth	r2, r3
    7f9e:	230e      	movs	r3, #14
    7fa0:	18fb      	adds	r3, r7, r3
    7fa2:	2100      	movs	r1, #0
    7fa4:	5e5b      	ldrsh	r3, [r3, r1]
    7fa6:	4313      	orrs	r3, r2
    7fa8:	b21a      	sxth	r2, r3
    7faa:	230e      	movs	r3, #14
    7fac:	18fb      	adds	r3, r7, r3
    7fae:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fb4:	1c5a      	adds	r2, r3, #1
    7fb6:	687b      	ldr	r3, [r7, #4]
    7fb8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7fba:	230e      	movs	r3, #14
    7fbc:	18fb      	adds	r3, r7, r3
    7fbe:	881b      	ldrh	r3, [r3, #0]
    7fc0:	05db      	lsls	r3, r3, #23
    7fc2:	0dda      	lsrs	r2, r3, #23
    7fc4:	68bb      	ldr	r3, [r7, #8]
    7fc6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7fcc:	b29b      	uxth	r3, r3
    7fce:	3b01      	subs	r3, #1
    7fd0:	b29a      	uxth	r2, r3
    7fd2:	687b      	ldr	r3, [r7, #4]
    7fd4:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7fd6:	46c0      	nop			; (mov r8, r8)
    7fd8:	46bd      	mov	sp, r7
    7fda:	b004      	add	sp, #16
    7fdc:	bd80      	pop	{r7, pc}
	...

00007fe0 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    7fe0:	b580      	push	{r7, lr}
    7fe2:	b084      	sub	sp, #16
    7fe4:	af00      	add	r7, sp, #0
    7fe6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	681b      	ldr	r3, [r3, #0]
    7fec:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    7fee:	4b08      	ldr	r3, [pc, #32]	; (8010 <_spi_write_dummy+0x30>)
    7ff0:	881b      	ldrh	r3, [r3, #0]
    7ff2:	001a      	movs	r2, r3
    7ff4:	68fb      	ldr	r3, [r7, #12]
    7ff6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7ffc:	b29b      	uxth	r3, r3
    7ffe:	3b01      	subs	r3, #1
    8000:	b29a      	uxth	r2, r3
    8002:	687b      	ldr	r3, [r7, #4]
    8004:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8006:	46c0      	nop			; (mov r8, r8)
    8008:	46bd      	mov	sp, r7
    800a:	b004      	add	sp, #16
    800c:	bd80      	pop	{r7, pc}
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	20000454 	.word	0x20000454

00008014 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    8014:	b580      	push	{r7, lr}
    8016:	b084      	sub	sp, #16
    8018:	af00      	add	r7, sp, #0
    801a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    801c:	687b      	ldr	r3, [r7, #4]
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8022:	230a      	movs	r3, #10
    8024:	18fb      	adds	r3, r7, r3
    8026:	2200      	movs	r2, #0
    8028:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    802a:	68fb      	ldr	r3, [r7, #12]
    802c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    802e:	230a      	movs	r3, #10
    8030:	18fb      	adds	r3, r7, r3
    8032:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8038:	b29b      	uxth	r3, r3
    803a:	3b01      	subs	r3, #1
    803c:	b29a      	uxth	r2, r3
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8042:	46c0      	nop			; (mov r8, r8)
    8044:	46bd      	mov	sp, r7
    8046:	b004      	add	sp, #16
    8048:	bd80      	pop	{r7, pc}

0000804a <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    804a:	b580      	push	{r7, lr}
    804c:	b084      	sub	sp, #16
    804e:	af00      	add	r7, sp, #0
    8050:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8052:	687b      	ldr	r3, [r7, #4]
    8054:	681b      	ldr	r3, [r3, #0]
    8056:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    8058:	68fb      	ldr	r3, [r7, #12]
    805a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    805c:	b29a      	uxth	r2, r3
    805e:	230a      	movs	r3, #10
    8060:	18fb      	adds	r3, r7, r3
    8062:	05d2      	lsls	r2, r2, #23
    8064:	0dd2      	lsrs	r2, r2, #23
    8066:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    806c:	220a      	movs	r2, #10
    806e:	18ba      	adds	r2, r7, r2
    8070:	8812      	ldrh	r2, [r2, #0]
    8072:	b2d2      	uxtb	r2, r2
    8074:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    8076:	687b      	ldr	r3, [r7, #4]
    8078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    807a:	1c5a      	adds	r2, r3, #1
    807c:	687b      	ldr	r3, [r7, #4]
    807e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8080:	687b      	ldr	r3, [r7, #4]
    8082:	799b      	ldrb	r3, [r3, #6]
    8084:	2b01      	cmp	r3, #1
    8086:	d10d      	bne.n	80a4 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    8088:	687b      	ldr	r3, [r7, #4]
    808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    808c:	220a      	movs	r2, #10
    808e:	18ba      	adds	r2, r7, r2
    8090:	8812      	ldrh	r2, [r2, #0]
    8092:	0a12      	lsrs	r2, r2, #8
    8094:	b292      	uxth	r2, r2
    8096:	b2d2      	uxtb	r2, r2
    8098:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    809a:	687b      	ldr	r3, [r7, #4]
    809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    809e:	1c5a      	adds	r2, r3, #1
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    80a4:	687b      	ldr	r3, [r7, #4]
    80a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    80a8:	b29b      	uxth	r3, r3
    80aa:	3b01      	subs	r3, #1
    80ac:	b29a      	uxth	r2, r3
    80ae:	687b      	ldr	r3, [r7, #4]
    80b0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    80b2:	46c0      	nop			; (mov r8, r8)
    80b4:	46bd      	mov	sp, r7
    80b6:	b004      	add	sp, #16
    80b8:	bd80      	pop	{r7, pc}
	...

000080bc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    80bc:	b580      	push	{r7, lr}
    80be:	b086      	sub	sp, #24
    80c0:	af00      	add	r7, sp, #0
    80c2:	0002      	movs	r2, r0
    80c4:	1dfb      	adds	r3, r7, #7
    80c6:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    80c8:	1dfb      	adds	r3, r7, #7
    80ca:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    80cc:	4b96      	ldr	r3, [pc, #600]	; (8328 <_spi_interrupt_handler+0x26c>)
    80ce:	0092      	lsls	r2, r2, #2
    80d0:	58d3      	ldr	r3, [r2, r3]
    80d2:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    80d4:	697b      	ldr	r3, [r7, #20]
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    80da:	697b      	ldr	r3, [r7, #20]
    80dc:	2237      	movs	r2, #55	; 0x37
    80de:	5c9a      	ldrb	r2, [r3, r2]
    80e0:	697b      	ldr	r3, [r7, #20]
    80e2:	2136      	movs	r1, #54	; 0x36
    80e4:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    80e6:	230f      	movs	r3, #15
    80e8:	18fb      	adds	r3, r7, r3
    80ea:	400a      	ands	r2, r1
    80ec:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    80ee:	693b      	ldr	r3, [r7, #16]
    80f0:	7e1b      	ldrb	r3, [r3, #24]
    80f2:	b2da      	uxtb	r2, r3
    80f4:	230c      	movs	r3, #12
    80f6:	18fb      	adds	r3, r7, r3
    80f8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    80fa:	693b      	ldr	r3, [r7, #16]
    80fc:	7d9b      	ldrb	r3, [r3, #22]
    80fe:	b2db      	uxtb	r3, r3
    8100:	b29a      	uxth	r2, r3
    8102:	230c      	movs	r3, #12
    8104:	18fb      	adds	r3, r7, r3
    8106:	210c      	movs	r1, #12
    8108:	1879      	adds	r1, r7, r1
    810a:	8809      	ldrh	r1, [r1, #0]
    810c:	400a      	ands	r2, r1
    810e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    8110:	230c      	movs	r3, #12
    8112:	18fb      	adds	r3, r7, r3
    8114:	881b      	ldrh	r3, [r3, #0]
    8116:	2201      	movs	r2, #1
    8118:	4013      	ands	r3, r2
    811a:	d038      	beq.n	818e <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    811c:	697b      	ldr	r3, [r7, #20]
    811e:	795b      	ldrb	r3, [r3, #5]
    8120:	2b01      	cmp	r3, #1
    8122:	d110      	bne.n	8146 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    8124:	697b      	ldr	r3, [r7, #20]
    8126:	7a5b      	ldrb	r3, [r3, #9]
    8128:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    812a:	2b00      	cmp	r3, #0
    812c:	d10b      	bne.n	8146 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    812e:	697b      	ldr	r3, [r7, #20]
    8130:	0018      	movs	r0, r3
    8132:	4b7e      	ldr	r3, [pc, #504]	; (832c <_spi_interrupt_handler+0x270>)
    8134:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    8136:	697b      	ldr	r3, [r7, #20]
    8138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    813a:	b29b      	uxth	r3, r3
    813c:	2b00      	cmp	r3, #0
    813e:	d102      	bne.n	8146 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8140:	693b      	ldr	r3, [r7, #16]
    8142:	2201      	movs	r2, #1
    8144:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8146:	697b      	ldr	r3, [r7, #20]
    8148:	795b      	ldrb	r3, [r3, #5]
		if (0
    814a:	2b01      	cmp	r3, #1
    814c:	d11f      	bne.n	818e <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    814e:	697b      	ldr	r3, [r7, #20]
    8150:	7a5b      	ldrb	r3, [r3, #9]
    8152:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    8154:	2b00      	cmp	r3, #0
    8156:	d01a      	beq.n	818e <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    8158:	697b      	ldr	r3, [r7, #20]
    815a:	0018      	movs	r0, r3
    815c:	4b74      	ldr	r3, [pc, #464]	; (8330 <_spi_interrupt_handler+0x274>)
    815e:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8160:	697b      	ldr	r3, [r7, #20]
    8162:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8164:	b29b      	uxth	r3, r3
    8166:	2b00      	cmp	r3, #0
    8168:	d111      	bne.n	818e <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    816a:	693b      	ldr	r3, [r7, #16]
    816c:	2201      	movs	r2, #1
    816e:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8170:	697b      	ldr	r3, [r7, #20]
    8172:	7a5b      	ldrb	r3, [r3, #9]
    8174:	b2db      	uxtb	r3, r3
    8176:	2b01      	cmp	r3, #1
    8178:	d109      	bne.n	818e <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    817a:	697b      	ldr	r3, [r7, #20]
    817c:	79db      	ldrb	r3, [r3, #7]
    817e:	2201      	movs	r2, #1
    8180:	4053      	eors	r3, r2
    8182:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    8184:	2b00      	cmp	r3, #0
    8186:	d002      	beq.n	818e <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8188:	693b      	ldr	r3, [r7, #16]
    818a:	2202      	movs	r2, #2
    818c:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    818e:	230c      	movs	r3, #12
    8190:	18fb      	adds	r3, r7, r3
    8192:	881b      	ldrh	r3, [r3, #0]
    8194:	2204      	movs	r2, #4
    8196:	4013      	ands	r3, r2
    8198:	d100      	bne.n	819c <_spi_interrupt_handler+0xe0>
    819a:	e07e      	b.n	829a <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    819c:	693b      	ldr	r3, [r7, #16]
    819e:	8b5b      	ldrh	r3, [r3, #26]
    81a0:	b29b      	uxth	r3, r3
    81a2:	001a      	movs	r2, r3
    81a4:	2304      	movs	r3, #4
    81a6:	4013      	ands	r3, r2
    81a8:	d022      	beq.n	81f0 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    81aa:	697b      	ldr	r3, [r7, #20]
    81ac:	7a5b      	ldrb	r3, [r3, #9]
    81ae:	b2db      	uxtb	r3, r3
    81b0:	2b01      	cmp	r3, #1
    81b2:	d014      	beq.n	81de <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    81b4:	697b      	ldr	r3, [r7, #20]
    81b6:	2238      	movs	r2, #56	; 0x38
    81b8:	211e      	movs	r1, #30
    81ba:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    81bc:	697b      	ldr	r3, [r7, #20]
    81be:	2203      	movs	r2, #3
    81c0:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    81c2:	693b      	ldr	r3, [r7, #16]
    81c4:	2205      	movs	r2, #5
    81c6:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    81c8:	230f      	movs	r3, #15
    81ca:	18fb      	adds	r3, r7, r3
    81cc:	781b      	ldrb	r3, [r3, #0]
    81ce:	2208      	movs	r2, #8
    81d0:	4013      	ands	r3, r2
    81d2:	d004      	beq.n	81de <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    81d4:	697b      	ldr	r3, [r7, #20]
    81d6:	699b      	ldr	r3, [r3, #24]
    81d8:	697a      	ldr	r2, [r7, #20]
    81da:	0010      	movs	r0, r2
    81dc:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    81de:	693b      	ldr	r3, [r7, #16]
    81e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    81e2:	230a      	movs	r3, #10
    81e4:	18fb      	adds	r3, r7, r3
    81e6:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    81e8:	693b      	ldr	r3, [r7, #16]
    81ea:	2204      	movs	r2, #4
    81ec:	835a      	strh	r2, [r3, #26]
    81ee:	e054      	b.n	829a <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    81f0:	697b      	ldr	r3, [r7, #20]
    81f2:	7a5b      	ldrb	r3, [r3, #9]
    81f4:	b2db      	uxtb	r3, r3
    81f6:	2b01      	cmp	r3, #1
    81f8:	d11e      	bne.n	8238 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    81fa:	697b      	ldr	r3, [r7, #20]
    81fc:	0018      	movs	r0, r3
    81fe:	4b4d      	ldr	r3, [pc, #308]	; (8334 <_spi_interrupt_handler+0x278>)
    8200:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    8202:	697b      	ldr	r3, [r7, #20]
    8204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8206:	b29b      	uxth	r3, r3
    8208:	2b00      	cmp	r3, #0
    820a:	d146      	bne.n	829a <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    820c:	693b      	ldr	r3, [r7, #16]
    820e:	2204      	movs	r2, #4
    8210:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    8212:	697b      	ldr	r3, [r7, #20]
    8214:	2238      	movs	r2, #56	; 0x38
    8216:	2100      	movs	r1, #0
    8218:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    821a:	697b      	ldr	r3, [r7, #20]
    821c:	2203      	movs	r2, #3
    821e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    8220:	230f      	movs	r3, #15
    8222:	18fb      	adds	r3, r7, r3
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	2201      	movs	r2, #1
    8228:	4013      	ands	r3, r2
    822a:	d036      	beq.n	829a <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    822c:	697b      	ldr	r3, [r7, #20]
    822e:	68db      	ldr	r3, [r3, #12]
    8230:	697a      	ldr	r2, [r7, #20]
    8232:	0010      	movs	r0, r2
    8234:	4798      	blx	r3
    8236:	e030      	b.n	829a <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    8238:	697b      	ldr	r3, [r7, #20]
    823a:	0018      	movs	r0, r3
    823c:	4b3e      	ldr	r3, [pc, #248]	; (8338 <_spi_interrupt_handler+0x27c>)
    823e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    8240:	697b      	ldr	r3, [r7, #20]
    8242:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8244:	b29b      	uxth	r3, r3
    8246:	2b00      	cmp	r3, #0
    8248:	d127      	bne.n	829a <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    824a:	697b      	ldr	r3, [r7, #20]
    824c:	2238      	movs	r2, #56	; 0x38
    824e:	2100      	movs	r1, #0
    8250:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8252:	693b      	ldr	r3, [r7, #16]
    8254:	2204      	movs	r2, #4
    8256:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    8258:	697b      	ldr	r3, [r7, #20]
    825a:	7a5b      	ldrb	r3, [r3, #9]
    825c:	b2db      	uxtb	r3, r3
    825e:	2b02      	cmp	r3, #2
    8260:	d10b      	bne.n	827a <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8262:	230f      	movs	r3, #15
    8264:	18fb      	adds	r3, r7, r3
    8266:	781b      	ldrb	r3, [r3, #0]
    8268:	2204      	movs	r2, #4
    826a:	4013      	ands	r3, r2
    826c:	d015      	beq.n	829a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    826e:	697b      	ldr	r3, [r7, #20]
    8270:	695b      	ldr	r3, [r3, #20]
    8272:	697a      	ldr	r2, [r7, #20]
    8274:	0010      	movs	r0, r2
    8276:	4798      	blx	r3
    8278:	e00f      	b.n	829a <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    827a:	697b      	ldr	r3, [r7, #20]
    827c:	7a5b      	ldrb	r3, [r3, #9]
    827e:	b2db      	uxtb	r3, r3
    8280:	2b00      	cmp	r3, #0
    8282:	d10a      	bne.n	829a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    8284:	230f      	movs	r3, #15
    8286:	18fb      	adds	r3, r7, r3
    8288:	781b      	ldrb	r3, [r3, #0]
    828a:	2202      	movs	r2, #2
    828c:	4013      	ands	r3, r2
    828e:	d004      	beq.n	829a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8290:	697b      	ldr	r3, [r7, #20]
    8292:	691b      	ldr	r3, [r3, #16]
    8294:	697a      	ldr	r2, [r7, #20]
    8296:	0010      	movs	r0, r2
    8298:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    829a:	230c      	movs	r3, #12
    829c:	18fb      	adds	r3, r7, r3
    829e:	881b      	ldrh	r3, [r3, #0]
    82a0:	2202      	movs	r2, #2
    82a2:	4013      	ands	r3, r2
    82a4:	d024      	beq.n	82f0 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    82a6:	697b      	ldr	r3, [r7, #20]
    82a8:	795b      	ldrb	r3, [r3, #5]
    82aa:	2b01      	cmp	r3, #1
    82ac:	d120      	bne.n	82f0 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    82ae:	697b      	ldr	r3, [r7, #20]
    82b0:	7a5b      	ldrb	r3, [r3, #9]
    82b2:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    82b4:	2b01      	cmp	r3, #1
    82b6:	d11b      	bne.n	82f0 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    82b8:	697b      	ldr	r3, [r7, #20]
    82ba:	79db      	ldrb	r3, [r3, #7]
    82bc:	2201      	movs	r2, #1
    82be:	4053      	eors	r3, r2
    82c0:	b2db      	uxtb	r3, r3
    82c2:	2b00      	cmp	r3, #0
    82c4:	d014      	beq.n	82f0 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    82c6:	693b      	ldr	r3, [r7, #16]
    82c8:	2202      	movs	r2, #2
    82ca:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    82cc:	697b      	ldr	r3, [r7, #20]
    82ce:	2203      	movs	r2, #3
    82d0:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    82d2:	697b      	ldr	r3, [r7, #20]
    82d4:	2238      	movs	r2, #56	; 0x38
    82d6:	2100      	movs	r1, #0
    82d8:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    82da:	230f      	movs	r3, #15
    82dc:	18fb      	adds	r3, r7, r3
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	2201      	movs	r2, #1
    82e2:	4013      	ands	r3, r2
    82e4:	d004      	beq.n	82f0 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    82e6:	697b      	ldr	r3, [r7, #20]
    82e8:	68db      	ldr	r3, [r3, #12]
    82ea:	697a      	ldr	r2, [r7, #20]
    82ec:	0010      	movs	r0, r2
    82ee:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    82f0:	230c      	movs	r3, #12
    82f2:	18fb      	adds	r3, r7, r3
    82f4:	881b      	ldrh	r3, [r3, #0]
    82f6:	2280      	movs	r2, #128	; 0x80
    82f8:	4013      	ands	r3, r2
    82fa:	d010      	beq.n	831e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    82fc:	693b      	ldr	r3, [r7, #16]
    82fe:	2280      	movs	r2, #128	; 0x80
    8300:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8302:	693b      	ldr	r3, [r7, #16]
    8304:	2280      	movs	r2, #128	; 0x80
    8306:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    8308:	230f      	movs	r3, #15
    830a:	18fb      	adds	r3, r7, r3
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	2240      	movs	r2, #64	; 0x40
    8310:	4013      	ands	r3, r2
    8312:	d004      	beq.n	831e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8314:	697b      	ldr	r3, [r7, #20]
    8316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8318:	697a      	ldr	r2, [r7, #20]
    831a:	0010      	movs	r0, r2
    831c:	4798      	blx	r3
		}
	}
#  endif
}
    831e:	46c0      	nop			; (mov r8, r8)
    8320:	46bd      	mov	sp, r7
    8322:	b006      	add	sp, #24
    8324:	bd80      	pop	{r7, pc}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	2000043c 	.word	0x2000043c
    832c:	00007fe1 	.word	0x00007fe1
    8330:	00007f65 	.word	0x00007f65
    8334:	00008015 	.word	0x00008015
    8338:	0000804b 	.word	0x0000804b

0000833c <system_gclk_chan_get_config_defaults>:
{
    833c:	b580      	push	{r7, lr}
    833e:	b082      	sub	sp, #8
    8340:	af00      	add	r7, sp, #0
    8342:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	2200      	movs	r2, #0
    8348:	701a      	strb	r2, [r3, #0]
}
    834a:	46c0      	nop			; (mov r8, r8)
    834c:	46bd      	mov	sp, r7
    834e:	b002      	add	sp, #8
    8350:	bd80      	pop	{r7, pc}
	...

00008354 <system_apb_clock_set_mask>:
{
    8354:	b580      	push	{r7, lr}
    8356:	b082      	sub	sp, #8
    8358:	af00      	add	r7, sp, #0
    835a:	0002      	movs	r2, r0
    835c:	6039      	str	r1, [r7, #0]
    835e:	1dfb      	adds	r3, r7, #7
    8360:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8362:	1dfb      	adds	r3, r7, #7
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	2b01      	cmp	r3, #1
    8368:	d00a      	beq.n	8380 <system_apb_clock_set_mask+0x2c>
    836a:	2b02      	cmp	r3, #2
    836c:	d00f      	beq.n	838e <system_apb_clock_set_mask+0x3a>
    836e:	2b00      	cmp	r3, #0
    8370:	d114      	bne.n	839c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    8372:	4b0e      	ldr	r3, [pc, #56]	; (83ac <system_apb_clock_set_mask+0x58>)
    8374:	4a0d      	ldr	r2, [pc, #52]	; (83ac <system_apb_clock_set_mask+0x58>)
    8376:	6991      	ldr	r1, [r2, #24]
    8378:	683a      	ldr	r2, [r7, #0]
    837a:	430a      	orrs	r2, r1
    837c:	619a      	str	r2, [r3, #24]
			break;
    837e:	e00f      	b.n	83a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    8380:	4b0a      	ldr	r3, [pc, #40]	; (83ac <system_apb_clock_set_mask+0x58>)
    8382:	4a0a      	ldr	r2, [pc, #40]	; (83ac <system_apb_clock_set_mask+0x58>)
    8384:	69d1      	ldr	r1, [r2, #28]
    8386:	683a      	ldr	r2, [r7, #0]
    8388:	430a      	orrs	r2, r1
    838a:	61da      	str	r2, [r3, #28]
			break;
    838c:	e008      	b.n	83a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    838e:	4b07      	ldr	r3, [pc, #28]	; (83ac <system_apb_clock_set_mask+0x58>)
    8390:	4a06      	ldr	r2, [pc, #24]	; (83ac <system_apb_clock_set_mask+0x58>)
    8392:	6a11      	ldr	r1, [r2, #32]
    8394:	683a      	ldr	r2, [r7, #0]
    8396:	430a      	orrs	r2, r1
    8398:	621a      	str	r2, [r3, #32]
			break;
    839a:	e001      	b.n	83a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    839c:	2317      	movs	r3, #23
    839e:	e000      	b.n	83a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    83a0:	2300      	movs	r3, #0
}
    83a2:	0018      	movs	r0, r3
    83a4:	46bd      	mov	sp, r7
    83a6:	b002      	add	sp, #8
    83a8:	bd80      	pop	{r7, pc}
    83aa:	46c0      	nop			; (mov r8, r8)
    83ac:	40000400 	.word	0x40000400

000083b0 <system_pinmux_get_config_defaults>:
{
    83b0:	b580      	push	{r7, lr}
    83b2:	b082      	sub	sp, #8
    83b4:	af00      	add	r7, sp, #0
    83b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    83b8:	687b      	ldr	r3, [r7, #4]
    83ba:	2280      	movs	r2, #128	; 0x80
    83bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    83be:	687b      	ldr	r3, [r7, #4]
    83c0:	2200      	movs	r2, #0
    83c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    83c4:	687b      	ldr	r3, [r7, #4]
    83c6:	2201      	movs	r2, #1
    83c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    83ca:	687b      	ldr	r3, [r7, #4]
    83cc:	2200      	movs	r2, #0
    83ce:	70da      	strb	r2, [r3, #3]
}
    83d0:	46c0      	nop			; (mov r8, r8)
    83d2:	46bd      	mov	sp, r7
    83d4:	b002      	add	sp, #8
    83d6:	bd80      	pop	{r7, pc}

000083d8 <system_is_debugger_present>:
{
    83d8:	b580      	push	{r7, lr}
    83da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    83dc:	4b05      	ldr	r3, [pc, #20]	; (83f4 <system_is_debugger_present+0x1c>)
    83de:	789b      	ldrb	r3, [r3, #2]
    83e0:	b2db      	uxtb	r3, r3
    83e2:	001a      	movs	r2, r3
    83e4:	2302      	movs	r3, #2
    83e6:	4013      	ands	r3, r2
    83e8:	1e5a      	subs	r2, r3, #1
    83ea:	4193      	sbcs	r3, r2
    83ec:	b2db      	uxtb	r3, r3
}
    83ee:	0018      	movs	r0, r3
    83f0:	46bd      	mov	sp, r7
    83f2:	bd80      	pop	{r7, pc}
    83f4:	41002000 	.word	0x41002000

000083f8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b084      	sub	sp, #16
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	681b      	ldr	r3, [r3, #0]
    8404:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    8406:	68fb      	ldr	r3, [r7, #12]
    8408:	69db      	ldr	r3, [r3, #28]
    840a:	1e5a      	subs	r2, r3, #1
    840c:	4193      	sbcs	r3, r2
    840e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    8410:	0018      	movs	r0, r3
    8412:	46bd      	mov	sp, r7
    8414:	b004      	add	sp, #16
    8416:	bd80      	pop	{r7, pc}

00008418 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    8418:	b580      	push	{r7, lr}
    841a:	b082      	sub	sp, #8
    841c:	af00      	add	r7, sp, #0
    841e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    8420:	46c0      	nop			; (mov r8, r8)
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	0018      	movs	r0, r3
    8426:	4b04      	ldr	r3, [pc, #16]	; (8438 <_usart_wait_for_sync+0x20>)
    8428:	4798      	blx	r3
    842a:	1e03      	subs	r3, r0, #0
    842c:	d1f9      	bne.n	8422 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	46bd      	mov	sp, r7
    8432:	b002      	add	sp, #8
    8434:	bd80      	pop	{r7, pc}
    8436:	46c0      	nop			; (mov r8, r8)
    8438:	000083f9 	.word	0x000083f9

0000843c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    843c:	b5b0      	push	{r4, r5, r7, lr}
    843e:	b08c      	sub	sp, #48	; 0x30
    8440:	af02      	add	r7, sp, #8
    8442:	6078      	str	r0, [r7, #4]
    8444:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8446:	687b      	ldr	r3, [r7, #4]
    8448:	681b      	ldr	r3, [r3, #0]
    844a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    844c:	687b      	ldr	r3, [r7, #4]
    844e:	681b      	ldr	r3, [r3, #0]
    8450:	0018      	movs	r0, r3
    8452:	4bab      	ldr	r3, [pc, #684]	; (8700 <_usart_set_config+0x2c4>)
    8454:	4798      	blx	r3
    8456:	0003      	movs	r3, r0
    8458:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    845a:	697b      	ldr	r3, [r7, #20]
    845c:	3314      	adds	r3, #20
    845e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    8460:	2300      	movs	r3, #0
    8462:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    8464:	2300      	movs	r3, #0
    8466:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    8468:	230a      	movs	r3, #10
    846a:	18fb      	adds	r3, r7, r3
    846c:	2200      	movs	r2, #0
    846e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8470:	231f      	movs	r3, #31
    8472:	18fb      	adds	r3, r7, r3
    8474:	2200      	movs	r2, #0
    8476:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8478:	231e      	movs	r3, #30
    847a:	18fb      	adds	r3, r7, r3
    847c:	2210      	movs	r2, #16
    847e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    8480:	683b      	ldr	r3, [r7, #0]
    8482:	8a1b      	ldrh	r3, [r3, #16]
    8484:	2280      	movs	r2, #128	; 0x80
    8486:	01d2      	lsls	r2, r2, #7
    8488:	4293      	cmp	r3, r2
    848a:	d01c      	beq.n	84c6 <_usart_set_config+0x8a>
    848c:	2280      	movs	r2, #128	; 0x80
    848e:	01d2      	lsls	r2, r2, #7
    8490:	4293      	cmp	r3, r2
    8492:	dc06      	bgt.n	84a2 <_usart_set_config+0x66>
    8494:	2b00      	cmp	r3, #0
    8496:	d00d      	beq.n	84b4 <_usart_set_config+0x78>
    8498:	2280      	movs	r2, #128	; 0x80
    849a:	0192      	lsls	r2, r2, #6
    849c:	4293      	cmp	r3, r2
    849e:	d024      	beq.n	84ea <_usart_set_config+0xae>
    84a0:	e035      	b.n	850e <_usart_set_config+0xd2>
    84a2:	22c0      	movs	r2, #192	; 0xc0
    84a4:	01d2      	lsls	r2, r2, #7
    84a6:	4293      	cmp	r3, r2
    84a8:	d028      	beq.n	84fc <_usart_set_config+0xc0>
    84aa:	2280      	movs	r2, #128	; 0x80
    84ac:	0212      	lsls	r2, r2, #8
    84ae:	4293      	cmp	r3, r2
    84b0:	d012      	beq.n	84d8 <_usart_set_config+0x9c>
    84b2:	e02c      	b.n	850e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    84b4:	231f      	movs	r3, #31
    84b6:	18fb      	adds	r3, r7, r3
    84b8:	2200      	movs	r2, #0
    84ba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    84bc:	231e      	movs	r3, #30
    84be:	18fb      	adds	r3, r7, r3
    84c0:	2210      	movs	r2, #16
    84c2:	701a      	strb	r2, [r3, #0]
			break;
    84c4:	e023      	b.n	850e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    84c6:	231f      	movs	r3, #31
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	2200      	movs	r2, #0
    84cc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    84ce:	231e      	movs	r3, #30
    84d0:	18fb      	adds	r3, r7, r3
    84d2:	2208      	movs	r2, #8
    84d4:	701a      	strb	r2, [r3, #0]
			break;
    84d6:	e01a      	b.n	850e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    84d8:	231f      	movs	r3, #31
    84da:	18fb      	adds	r3, r7, r3
    84dc:	2200      	movs	r2, #0
    84de:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    84e0:	231e      	movs	r3, #30
    84e2:	18fb      	adds	r3, r7, r3
    84e4:	2203      	movs	r2, #3
    84e6:	701a      	strb	r2, [r3, #0]
			break;
    84e8:	e011      	b.n	850e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    84ea:	231f      	movs	r3, #31
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	2201      	movs	r2, #1
    84f0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    84f2:	231e      	movs	r3, #30
    84f4:	18fb      	adds	r3, r7, r3
    84f6:	2210      	movs	r2, #16
    84f8:	701a      	strb	r2, [r3, #0]
			break;
    84fa:	e008      	b.n	850e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    84fc:	231f      	movs	r3, #31
    84fe:	18fb      	adds	r3, r7, r3
    8500:	2201      	movs	r2, #1
    8502:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8504:	231e      	movs	r3, #30
    8506:	18fb      	adds	r3, r7, r3
    8508:	2208      	movs	r2, #8
    850a:	701a      	strb	r2, [r3, #0]
			break;
    850c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    850e:	683b      	ldr	r3, [r7, #0]
    8510:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    8512:	683b      	ldr	r3, [r7, #0]
    8514:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    8516:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    8518:	683b      	ldr	r3, [r7, #0]
    851a:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    851c:	4313      	orrs	r3, r2
		config->sample_rate |
    851e:	683a      	ldr	r2, [r7, #0]
    8520:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    8522:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    8524:	683a      	ldr	r2, [r7, #0]
    8526:	7e12      	ldrb	r2, [r2, #24]
    8528:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    852a:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    852c:	683a      	ldr	r2, [r7, #0]
    852e:	2126      	movs	r1, #38	; 0x26
    8530:	5c52      	ldrb	r2, [r2, r1]
    8532:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    8534:	4313      	orrs	r3, r2
    8536:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    8538:	231d      	movs	r3, #29
    853a:	18fb      	adds	r3, r7, r3
    853c:	2200      	movs	r2, #0
    853e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    8540:	683b      	ldr	r3, [r7, #0]
    8542:	685b      	ldr	r3, [r3, #4]
    8544:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    8546:	68fb      	ldr	r3, [r7, #12]
    8548:	2b00      	cmp	r3, #0
    854a:	d01e      	beq.n	858a <_usart_set_config+0x14e>
    854c:	2280      	movs	r2, #128	; 0x80
    854e:	0552      	lsls	r2, r2, #21
    8550:	4293      	cmp	r3, r2
    8552:	d14f      	bne.n	85f4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    8554:	683b      	ldr	r3, [r7, #0]
    8556:	2227      	movs	r2, #39	; 0x27
    8558:	5c9b      	ldrb	r3, [r3, r2]
    855a:	2201      	movs	r2, #1
    855c:	4053      	eors	r3, r2
    855e:	b2db      	uxtb	r3, r3
    8560:	2b00      	cmp	r3, #0
    8562:	d046      	beq.n	85f2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    8564:	683b      	ldr	r3, [r7, #0]
    8566:	6a1d      	ldr	r5, [r3, #32]
    8568:	693b      	ldr	r3, [r7, #16]
    856a:	b2db      	uxtb	r3, r3
    856c:	0018      	movs	r0, r3
    856e:	4b65      	ldr	r3, [pc, #404]	; (8704 <_usart_set_config+0x2c8>)
    8570:	4798      	blx	r3
    8572:	0001      	movs	r1, r0
    8574:	231d      	movs	r3, #29
    8576:	18fc      	adds	r4, r7, r3
    8578:	230a      	movs	r3, #10
    857a:	18fb      	adds	r3, r7, r3
    857c:	001a      	movs	r2, r3
    857e:	0028      	movs	r0, r5
    8580:	4b61      	ldr	r3, [pc, #388]	; (8708 <_usart_set_config+0x2cc>)
    8582:	4798      	blx	r3
    8584:	0003      	movs	r3, r0
    8586:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    8588:	e033      	b.n	85f2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    858a:	683b      	ldr	r3, [r7, #0]
    858c:	2227      	movs	r2, #39	; 0x27
    858e:	5c9b      	ldrb	r3, [r3, r2]
    8590:	2b00      	cmp	r3, #0
    8592:	d014      	beq.n	85be <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    8594:	683b      	ldr	r3, [r7, #0]
    8596:	6a18      	ldr	r0, [r3, #32]
    8598:	683b      	ldr	r3, [r7, #0]
    859a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    859c:	231d      	movs	r3, #29
    859e:	18fc      	adds	r4, r7, r3
    85a0:	231f      	movs	r3, #31
    85a2:	18fb      	adds	r3, r7, r3
    85a4:	781d      	ldrb	r5, [r3, #0]
    85a6:	230a      	movs	r3, #10
    85a8:	18fa      	adds	r2, r7, r3
    85aa:	231e      	movs	r3, #30
    85ac:	18fb      	adds	r3, r7, r3
    85ae:	781b      	ldrb	r3, [r3, #0]
    85b0:	9300      	str	r3, [sp, #0]
    85b2:	002b      	movs	r3, r5
    85b4:	4d55      	ldr	r5, [pc, #340]	; (870c <_usart_set_config+0x2d0>)
    85b6:	47a8      	blx	r5
    85b8:	0003      	movs	r3, r0
    85ba:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    85bc:	e01a      	b.n	85f4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    85be:	683b      	ldr	r3, [r7, #0]
    85c0:	6a1d      	ldr	r5, [r3, #32]
    85c2:	693b      	ldr	r3, [r7, #16]
    85c4:	b2db      	uxtb	r3, r3
    85c6:	0018      	movs	r0, r3
    85c8:	4b4e      	ldr	r3, [pc, #312]	; (8704 <_usart_set_config+0x2c8>)
    85ca:	4798      	blx	r3
				status_code =
    85cc:	231d      	movs	r3, #29
    85ce:	18fc      	adds	r4, r7, r3
    85d0:	231f      	movs	r3, #31
    85d2:	18fb      	adds	r3, r7, r3
    85d4:	7819      	ldrb	r1, [r3, #0]
    85d6:	230a      	movs	r3, #10
    85d8:	18fa      	adds	r2, r7, r3
    85da:	231e      	movs	r3, #30
    85dc:	18fb      	adds	r3, r7, r3
    85de:	781b      	ldrb	r3, [r3, #0]
    85e0:	9300      	str	r3, [sp, #0]
    85e2:	000b      	movs	r3, r1
    85e4:	0001      	movs	r1, r0
    85e6:	0028      	movs	r0, r5
    85e8:	4d48      	ldr	r5, [pc, #288]	; (870c <_usart_set_config+0x2d0>)
    85ea:	47a8      	blx	r5
    85ec:	0003      	movs	r3, r0
    85ee:	7023      	strb	r3, [r4, #0]
			break;
    85f0:	e000      	b.n	85f4 <_usart_set_config+0x1b8>
			break;
    85f2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    85f4:	231d      	movs	r3, #29
    85f6:	18fb      	adds	r3, r7, r3
    85f8:	781b      	ldrb	r3, [r3, #0]
    85fa:	2b00      	cmp	r3, #0
    85fc:	d003      	beq.n	8606 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    85fe:	231d      	movs	r3, #29
    8600:	18fb      	adds	r3, r7, r3
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	e077      	b.n	86f6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    8606:	683b      	ldr	r3, [r7, #0]
    8608:	7e5b      	ldrb	r3, [r3, #25]
    860a:	2b00      	cmp	r3, #0
    860c:	d003      	beq.n	8616 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    860e:	683b      	ldr	r3, [r7, #0]
    8610:	7e9a      	ldrb	r2, [r3, #26]
    8612:	69bb      	ldr	r3, [r7, #24]
    8614:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	0018      	movs	r0, r3
    861a:	4b3d      	ldr	r3, [pc, #244]	; (8710 <_usart_set_config+0x2d4>)
    861c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    861e:	230a      	movs	r3, #10
    8620:	18fb      	adds	r3, r7, r3
    8622:	881a      	ldrh	r2, [r3, #0]
    8624:	69bb      	ldr	r3, [r7, #24]
    8626:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    8628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	4313      	orrs	r3, r2
    862e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    8630:	683b      	ldr	r3, [r7, #0]
    8632:	2227      	movs	r2, #39	; 0x27
    8634:	5c9b      	ldrb	r3, [r3, r2]
    8636:	2201      	movs	r2, #1
    8638:	4053      	eors	r3, r2
    863a:	b2db      	uxtb	r3, r3
    863c:	2b00      	cmp	r3, #0
    863e:	d003      	beq.n	8648 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    8640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8642:	2204      	movs	r2, #4
    8644:	4313      	orrs	r3, r2
    8646:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    8648:	683b      	ldr	r3, [r7, #0]
    864a:	7e5b      	ldrb	r3, [r3, #25]
    864c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    864e:	683b      	ldr	r3, [r7, #0]
    8650:	7f1b      	ldrb	r3, [r3, #28]
    8652:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    8654:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	7f5b      	ldrb	r3, [r3, #29]
    865a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    865c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    865e:	683b      	ldr	r3, [r7, #0]
    8660:	2124      	movs	r1, #36	; 0x24
    8662:	5c5b      	ldrb	r3, [r3, r1]
    8664:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    8666:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    8668:	683b      	ldr	r3, [r7, #0]
    866a:	2125      	movs	r1, #37	; 0x25
    866c:	5c5b      	ldrb	r3, [r3, r1]
    866e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    8670:	4313      	orrs	r3, r2
	ctrlb =  
    8672:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    8674:	683b      	ldr	r3, [r7, #0]
    8676:	7a9b      	ldrb	r3, [r3, #10]
    8678:	001a      	movs	r2, r3
    867a:	6a3b      	ldr	r3, [r7, #32]
    867c:	4313      	orrs	r3, r2
    867e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    8680:	683b      	ldr	r3, [r7, #0]
    8682:	7adb      	ldrb	r3, [r3, #11]
    8684:	001a      	movs	r2, r3
    8686:	6a3b      	ldr	r3, [r7, #32]
    8688:	4313      	orrs	r3, r2
    868a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    868c:	683b      	ldr	r3, [r7, #0]
    868e:	891b      	ldrh	r3, [r3, #8]
    8690:	2bff      	cmp	r3, #255	; 0xff
    8692:	d00b      	beq.n	86ac <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    8694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8696:	2280      	movs	r2, #128	; 0x80
    8698:	0452      	lsls	r2, r2, #17
    869a:	4313      	orrs	r3, r2
    869c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    869e:	683b      	ldr	r3, [r7, #0]
    86a0:	891b      	ldrh	r3, [r3, #8]
    86a2:	001a      	movs	r2, r3
    86a4:	6a3b      	ldr	r3, [r7, #32]
    86a6:	4313      	orrs	r3, r2
    86a8:	623b      	str	r3, [r7, #32]
    86aa:	e008      	b.n	86be <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    86ac:	683b      	ldr	r3, [r7, #0]
    86ae:	7edb      	ldrb	r3, [r3, #27]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d004      	beq.n	86be <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    86b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86b6:	2280      	movs	r2, #128	; 0x80
    86b8:	04d2      	lsls	r2, r2, #19
    86ba:	4313      	orrs	r3, r2
    86bc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    86be:	683b      	ldr	r3, [r7, #0]
    86c0:	222c      	movs	r2, #44	; 0x2c
    86c2:	5c9b      	ldrb	r3, [r3, r2]
    86c4:	2b00      	cmp	r3, #0
    86c6:	d103      	bne.n	86d0 <_usart_set_config+0x294>
    86c8:	4b12      	ldr	r3, [pc, #72]	; (8714 <_usart_set_config+0x2d8>)
    86ca:	4798      	blx	r3
    86cc:	1e03      	subs	r3, r0, #0
    86ce:	d003      	beq.n	86d8 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    86d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86d2:	2280      	movs	r2, #128	; 0x80
    86d4:	4313      	orrs	r3, r2
    86d6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    86d8:	687b      	ldr	r3, [r7, #4]
    86da:	0018      	movs	r0, r3
    86dc:	4b0c      	ldr	r3, [pc, #48]	; (8710 <_usart_set_config+0x2d4>)
    86de:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    86e0:	69bb      	ldr	r3, [r7, #24]
    86e2:	6a3a      	ldr	r2, [r7, #32]
    86e4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	0018      	movs	r0, r3
    86ea:	4b09      	ldr	r3, [pc, #36]	; (8710 <_usart_set_config+0x2d4>)
    86ec:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    86ee:	69bb      	ldr	r3, [r7, #24]
    86f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    86f2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    86f4:	2300      	movs	r3, #0
}
    86f6:	0018      	movs	r0, r3
    86f8:	46bd      	mov	sp, r7
    86fa:	b00a      	add	sp, #40	; 0x28
    86fc:	bdb0      	pop	{r4, r5, r7, pc}
    86fe:	46c0      	nop			; (mov r8, r8)
    8700:	0000767d 	.word	0x0000767d
    8704:	00009bc1 	.word	0x00009bc1
    8708:	000071f7 	.word	0x000071f7
    870c:	00007275 	.word	0x00007275
    8710:	00008419 	.word	0x00008419
    8714:	000083d9 	.word	0x000083d9

00008718 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    8718:	b590      	push	{r4, r7, lr}
    871a:	b093      	sub	sp, #76	; 0x4c
    871c:	af00      	add	r7, sp, #0
    871e:	60f8      	str	r0, [r7, #12]
    8720:	60b9      	str	r1, [r7, #8]
    8722:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    8724:	233b      	movs	r3, #59	; 0x3b
    8726:	18fb      	adds	r3, r7, r3
    8728:	2200      	movs	r2, #0
    872a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    872c:	68fb      	ldr	r3, [r7, #12]
    872e:	68ba      	ldr	r2, [r7, #8]
    8730:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8732:	68fb      	ldr	r3, [r7, #12]
    8734:	681b      	ldr	r3, [r3, #0]
    8736:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8738:	68fb      	ldr	r3, [r7, #12]
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	0018      	movs	r0, r3
    873e:	4b86      	ldr	r3, [pc, #536]	; (8958 <usart_init+0x240>)
    8740:	4798      	blx	r3
    8742:	0003      	movs	r3, r0
    8744:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8748:	3302      	adds	r3, #2
    874a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    874e:	3314      	adds	r3, #20
    8750:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    8752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8754:	681b      	ldr	r3, [r3, #0]
    8756:	2201      	movs	r2, #1
    8758:	4013      	ands	r3, r2
    875a:	d001      	beq.n	8760 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    875c:	2305      	movs	r3, #5
    875e:	e0f6      	b.n	894e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    8760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8762:	681b      	ldr	r3, [r3, #0]
    8764:	2202      	movs	r2, #2
    8766:	4013      	ands	r3, r2
    8768:	d001      	beq.n	876e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    876a:	231c      	movs	r3, #28
    876c:	e0ef      	b.n	894e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    876e:	2201      	movs	r2, #1
    8770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8772:	409a      	lsls	r2, r3
    8774:	0013      	movs	r3, r2
    8776:	0019      	movs	r1, r3
    8778:	2002      	movs	r0, #2
    877a:	4b78      	ldr	r3, [pc, #480]	; (895c <usart_init+0x244>)
    877c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    877e:	2324      	movs	r3, #36	; 0x24
    8780:	18fb      	adds	r3, r7, r3
    8782:	0018      	movs	r0, r3
    8784:	4b76      	ldr	r3, [pc, #472]	; (8960 <usart_init+0x248>)
    8786:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	222d      	movs	r2, #45	; 0x2d
    878c:	5c9a      	ldrb	r2, [r3, r2]
    878e:	2324      	movs	r3, #36	; 0x24
    8790:	18fb      	adds	r3, r7, r3
    8792:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8796:	b2db      	uxtb	r3, r3
    8798:	2224      	movs	r2, #36	; 0x24
    879a:	18ba      	adds	r2, r7, r2
    879c:	0011      	movs	r1, r2
    879e:	0018      	movs	r0, r3
    87a0:	4b70      	ldr	r3, [pc, #448]	; (8964 <usart_init+0x24c>)
    87a2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    87a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    87a6:	b2db      	uxtb	r3, r3
    87a8:	0018      	movs	r0, r3
    87aa:	4b6f      	ldr	r3, [pc, #444]	; (8968 <usart_init+0x250>)
    87ac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    87ae:	687b      	ldr	r3, [r7, #4]
    87b0:	222d      	movs	r2, #45	; 0x2d
    87b2:	5c9b      	ldrb	r3, [r3, r2]
    87b4:	2100      	movs	r1, #0
    87b6:	0018      	movs	r0, r3
    87b8:	4b6c      	ldr	r3, [pc, #432]	; (896c <usart_init+0x254>)
    87ba:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	7ada      	ldrb	r2, [r3, #11]
    87c0:	68fb      	ldr	r3, [r7, #12]
    87c2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    87c4:	687b      	ldr	r3, [r7, #4]
    87c6:	2224      	movs	r2, #36	; 0x24
    87c8:	5c9a      	ldrb	r2, [r3, r2]
    87ca:	68fb      	ldr	r3, [r7, #12]
    87cc:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	2225      	movs	r2, #37	; 0x25
    87d2:	5c9a      	ldrb	r2, [r3, r2]
    87d4:	68fb      	ldr	r3, [r7, #12]
    87d6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	7eda      	ldrb	r2, [r3, #27]
    87dc:	68fb      	ldr	r3, [r7, #12]
    87de:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    87e0:	687b      	ldr	r3, [r7, #4]
    87e2:	7f1a      	ldrb	r2, [r3, #28]
    87e4:	68fb      	ldr	r3, [r7, #12]
    87e6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    87e8:	233b      	movs	r3, #59	; 0x3b
    87ea:	18fc      	adds	r4, r7, r3
    87ec:	687a      	ldr	r2, [r7, #4]
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	0011      	movs	r1, r2
    87f2:	0018      	movs	r0, r3
    87f4:	4b5e      	ldr	r3, [pc, #376]	; (8970 <usart_init+0x258>)
    87f6:	4798      	blx	r3
    87f8:	0003      	movs	r3, r0
    87fa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    87fc:	233b      	movs	r3, #59	; 0x3b
    87fe:	18fb      	adds	r3, r7, r3
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	2b00      	cmp	r3, #0
    8804:	d003      	beq.n	880e <usart_init+0xf6>
		return status_code;
    8806:	233b      	movs	r3, #59	; 0x3b
    8808:	18fb      	adds	r3, r7, r3
    880a:	781b      	ldrb	r3, [r3, #0]
    880c:	e09f      	b.n	894e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    880e:	2320      	movs	r3, #32
    8810:	18fb      	adds	r3, r7, r3
    8812:	0018      	movs	r0, r3
    8814:	4b57      	ldr	r3, [pc, #348]	; (8974 <usart_init+0x25c>)
    8816:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8818:	2320      	movs	r3, #32
    881a:	18fb      	adds	r3, r7, r3
    881c:	2200      	movs	r2, #0
    881e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8820:	2320      	movs	r3, #32
    8822:	18fb      	adds	r3, r7, r3
    8824:	2200      	movs	r2, #0
    8826:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    882c:	2310      	movs	r3, #16
    882e:	18fb      	adds	r3, r7, r3
    8830:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    8832:	687b      	ldr	r3, [r7, #4]
    8834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    8836:	2310      	movs	r3, #16
    8838:	18fb      	adds	r3, r7, r3
    883a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    8840:	2310      	movs	r3, #16
    8842:	18fb      	adds	r3, r7, r3
    8844:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    8846:	687b      	ldr	r3, [r7, #4]
    8848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    884a:	2310      	movs	r3, #16
    884c:	18fb      	adds	r3, r7, r3
    884e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    8850:	2347      	movs	r3, #71	; 0x47
    8852:	18fb      	adds	r3, r7, r3
    8854:	2200      	movs	r2, #0
    8856:	701a      	strb	r2, [r3, #0]
    8858:	e02c      	b.n	88b4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    885a:	2347      	movs	r3, #71	; 0x47
    885c:	18fb      	adds	r3, r7, r3
    885e:	781a      	ldrb	r2, [r3, #0]
    8860:	2310      	movs	r3, #16
    8862:	18fb      	adds	r3, r7, r3
    8864:	0092      	lsls	r2, r2, #2
    8866:	58d3      	ldr	r3, [r2, r3]
    8868:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    886a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    886c:	2b00      	cmp	r3, #0
    886e:	d109      	bne.n	8884 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8870:	2347      	movs	r3, #71	; 0x47
    8872:	18fb      	adds	r3, r7, r3
    8874:	781a      	ldrb	r2, [r3, #0]
    8876:	68bb      	ldr	r3, [r7, #8]
    8878:	0011      	movs	r1, r2
    887a:	0018      	movs	r0, r3
    887c:	4b3e      	ldr	r3, [pc, #248]	; (8978 <usart_init+0x260>)
    887e:	4798      	blx	r3
    8880:	0003      	movs	r3, r0
    8882:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    8884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8886:	3301      	adds	r3, #1
    8888:	d00d      	beq.n	88a6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    888a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    888c:	b2da      	uxtb	r2, r3
    888e:	2320      	movs	r3, #32
    8890:	18fb      	adds	r3, r7, r3
    8892:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8896:	0c1b      	lsrs	r3, r3, #16
    8898:	b2db      	uxtb	r3, r3
    889a:	2220      	movs	r2, #32
    889c:	18ba      	adds	r2, r7, r2
    889e:	0011      	movs	r1, r2
    88a0:	0018      	movs	r0, r3
    88a2:	4b36      	ldr	r3, [pc, #216]	; (897c <usart_init+0x264>)
    88a4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    88a6:	2347      	movs	r3, #71	; 0x47
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	781a      	ldrb	r2, [r3, #0]
    88ac:	2347      	movs	r3, #71	; 0x47
    88ae:	18fb      	adds	r3, r7, r3
    88b0:	3201      	adds	r2, #1
    88b2:	701a      	strb	r2, [r3, #0]
    88b4:	2347      	movs	r3, #71	; 0x47
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	781b      	ldrb	r3, [r3, #0]
    88ba:	2b03      	cmp	r3, #3
    88bc:	d9cd      	bls.n	885a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    88be:	2300      	movs	r3, #0
    88c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    88c2:	e00a      	b.n	88da <usart_init+0x1c2>
		module->callback[i]            = NULL;
    88c4:	68fa      	ldr	r2, [r7, #12]
    88c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88c8:	3302      	adds	r3, #2
    88ca:	009b      	lsls	r3, r3, #2
    88cc:	18d3      	adds	r3, r2, r3
    88ce:	3304      	adds	r3, #4
    88d0:	2200      	movs	r2, #0
    88d2:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    88d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88d6:	3301      	adds	r3, #1
    88d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    88da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88dc:	2b05      	cmp	r3, #5
    88de:	d9f1      	bls.n	88c4 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    88e0:	68fb      	ldr	r3, [r7, #12]
    88e2:	2200      	movs	r2, #0
    88e4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    88e6:	68fb      	ldr	r3, [r7, #12]
    88e8:	2200      	movs	r2, #0
    88ea:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    88ec:	68fb      	ldr	r3, [r7, #12]
    88ee:	2200      	movs	r2, #0
    88f0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    88f2:	68fb      	ldr	r3, [r7, #12]
    88f4:	2200      	movs	r2, #0
    88f6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    88f8:	68fb      	ldr	r3, [r7, #12]
    88fa:	2230      	movs	r2, #48	; 0x30
    88fc:	2100      	movs	r1, #0
    88fe:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    8900:	68fb      	ldr	r3, [r7, #12]
    8902:	2231      	movs	r2, #49	; 0x31
    8904:	2100      	movs	r1, #0
    8906:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    8908:	68fb      	ldr	r3, [r7, #12]
    890a:	2232      	movs	r2, #50	; 0x32
    890c:	2100      	movs	r1, #0
    890e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    8910:	68fb      	ldr	r3, [r7, #12]
    8912:	2233      	movs	r2, #51	; 0x33
    8914:	2100      	movs	r1, #0
    8916:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    8918:	68fb      	ldr	r3, [r7, #12]
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	2227      	movs	r2, #39	; 0x27
    891e:	18bc      	adds	r4, r7, r2
    8920:	0018      	movs	r0, r3
    8922:	4b0d      	ldr	r3, [pc, #52]	; (8958 <usart_init+0x240>)
    8924:	4798      	blx	r3
    8926:	0003      	movs	r3, r0
    8928:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    892a:	4a15      	ldr	r2, [pc, #84]	; (8980 <usart_init+0x268>)
    892c:	2327      	movs	r3, #39	; 0x27
    892e:	18fb      	adds	r3, r7, r3
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	0011      	movs	r1, r2
    8934:	0018      	movs	r0, r3
    8936:	4b13      	ldr	r3, [pc, #76]	; (8984 <usart_init+0x26c>)
    8938:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    893a:	2327      	movs	r3, #39	; 0x27
    893c:	18fb      	adds	r3, r7, r3
    893e:	781a      	ldrb	r2, [r3, #0]
    8940:	4b11      	ldr	r3, [pc, #68]	; (8988 <usart_init+0x270>)
    8942:	0092      	lsls	r2, r2, #2
    8944:	68f9      	ldr	r1, [r7, #12]
    8946:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    8948:	233b      	movs	r3, #59	; 0x3b
    894a:	18fb      	adds	r3, r7, r3
    894c:	781b      	ldrb	r3, [r3, #0]
}
    894e:	0018      	movs	r0, r3
    8950:	46bd      	mov	sp, r7
    8952:	b013      	add	sp, #76	; 0x4c
    8954:	bd90      	pop	{r4, r7, pc}
    8956:	46c0      	nop			; (mov r8, r8)
    8958:	0000767d 	.word	0x0000767d
    895c:	00008355 	.word	0x00008355
    8960:	0000833d 	.word	0x0000833d
    8964:	00009a9d 	.word	0x00009a9d
    8968:	00009ae1 	.word	0x00009ae1
    896c:	00007435 	.word	0x00007435
    8970:	0000843d 	.word	0x0000843d
    8974:	000083b1 	.word	0x000083b1
    8978:	000074c1 	.word	0x000074c1
    897c:	00009d89 	.word	0x00009d89
    8980:	00008b21 	.word	0x00008b21
    8984:	000076e1 	.word	0x000076e1
    8988:	2000043c 	.word	0x2000043c

0000898c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    898c:	b580      	push	{r7, lr}
    898e:	b084      	sub	sp, #16
    8990:	af00      	add	r7, sp, #0
    8992:	6078      	str	r0, [r7, #4]
    8994:	000a      	movs	r2, r1
    8996:	1cbb      	adds	r3, r7, #2
    8998:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    899a:	687b      	ldr	r3, [r7, #4]
    899c:	681b      	ldr	r3, [r3, #0]
    899e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    89a0:	687b      	ldr	r3, [r7, #4]
    89a2:	79db      	ldrb	r3, [r3, #7]
    89a4:	2201      	movs	r2, #1
    89a6:	4053      	eors	r3, r2
    89a8:	b2db      	uxtb	r3, r3
    89aa:	2b00      	cmp	r3, #0
    89ac:	d001      	beq.n	89b2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    89ae:	231c      	movs	r3, #28
    89b0:	e017      	b.n	89e2 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    89b2:	687b      	ldr	r3, [r7, #4]
    89b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    89b6:	b29b      	uxth	r3, r3
    89b8:	2b00      	cmp	r3, #0
    89ba:	d001      	beq.n	89c0 <usart_write_wait+0x34>
		return STATUS_BUSY;
    89bc:	2305      	movs	r3, #5
    89be:	e010      	b.n	89e2 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	0018      	movs	r0, r3
    89c4:	4b09      	ldr	r3, [pc, #36]	; (89ec <usart_write_wait+0x60>)
    89c6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    89c8:	68fb      	ldr	r3, [r7, #12]
    89ca:	1cba      	adds	r2, r7, #2
    89cc:	8812      	ldrh	r2, [r2, #0]
    89ce:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    89d0:	46c0      	nop			; (mov r8, r8)
    89d2:	68fb      	ldr	r3, [r7, #12]
    89d4:	7e1b      	ldrb	r3, [r3, #24]
    89d6:	b2db      	uxtb	r3, r3
    89d8:	001a      	movs	r2, r3
    89da:	2302      	movs	r3, #2
    89dc:	4013      	ands	r3, r2
    89de:	d0f8      	beq.n	89d2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    89e0:	2300      	movs	r3, #0
}
    89e2:	0018      	movs	r0, r3
    89e4:	46bd      	mov	sp, r7
    89e6:	b004      	add	sp, #16
    89e8:	bd80      	pop	{r7, pc}
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	00008419 	.word	0x00008419

000089f0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    89f0:	b580      	push	{r7, lr}
    89f2:	b084      	sub	sp, #16
    89f4:	af00      	add	r7, sp, #0
    89f6:	6078      	str	r0, [r7, #4]
    89f8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	681b      	ldr	r3, [r3, #0]
    89fe:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    8a00:	687b      	ldr	r3, [r7, #4]
    8a02:	799b      	ldrb	r3, [r3, #6]
    8a04:	2201      	movs	r2, #1
    8a06:	4053      	eors	r3, r2
    8a08:	b2db      	uxtb	r3, r3
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	d001      	beq.n	8a12 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    8a0e:	231c      	movs	r3, #28
    8a10:	e05e      	b.n	8ad0 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    8a12:	687b      	ldr	r3, [r7, #4]
    8a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8a16:	b29b      	uxth	r3, r3
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d001      	beq.n	8a20 <usart_read_wait+0x30>
		return STATUS_BUSY;
    8a1c:	2305      	movs	r3, #5
    8a1e:	e057      	b.n	8ad0 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    8a20:	68fb      	ldr	r3, [r7, #12]
    8a22:	7e1b      	ldrb	r3, [r3, #24]
    8a24:	b2db      	uxtb	r3, r3
    8a26:	001a      	movs	r2, r3
    8a28:	2304      	movs	r3, #4
    8a2a:	4013      	ands	r3, r2
    8a2c:	d101      	bne.n	8a32 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    8a2e:	2305      	movs	r3, #5
    8a30:	e04e      	b.n	8ad0 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8a32:	687b      	ldr	r3, [r7, #4]
    8a34:	0018      	movs	r0, r3
    8a36:	4b28      	ldr	r3, [pc, #160]	; (8ad8 <usart_read_wait+0xe8>)
    8a38:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8a3a:	68fb      	ldr	r3, [r7, #12]
    8a3c:	8b5b      	ldrh	r3, [r3, #26]
    8a3e:	b29b      	uxth	r3, r3
    8a40:	b2da      	uxtb	r2, r3
    8a42:	230b      	movs	r3, #11
    8a44:	18fb      	adds	r3, r7, r3
    8a46:	213f      	movs	r1, #63	; 0x3f
    8a48:	400a      	ands	r2, r1
    8a4a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    8a4c:	230b      	movs	r3, #11
    8a4e:	18fb      	adds	r3, r7, r3
    8a50:	781b      	ldrb	r3, [r3, #0]
    8a52:	2b00      	cmp	r3, #0
    8a54:	d036      	beq.n	8ac4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    8a56:	230b      	movs	r3, #11
    8a58:	18fb      	adds	r3, r7, r3
    8a5a:	781b      	ldrb	r3, [r3, #0]
    8a5c:	2202      	movs	r2, #2
    8a5e:	4013      	ands	r3, r2
    8a60:	d004      	beq.n	8a6c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8a62:	68fb      	ldr	r3, [r7, #12]
    8a64:	2202      	movs	r2, #2
    8a66:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    8a68:	231a      	movs	r3, #26
    8a6a:	e031      	b.n	8ad0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8a6c:	230b      	movs	r3, #11
    8a6e:	18fb      	adds	r3, r7, r3
    8a70:	781b      	ldrb	r3, [r3, #0]
    8a72:	2204      	movs	r2, #4
    8a74:	4013      	ands	r3, r2
    8a76:	d004      	beq.n	8a82 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8a78:	68fb      	ldr	r3, [r7, #12]
    8a7a:	2204      	movs	r2, #4
    8a7c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    8a7e:	231e      	movs	r3, #30
    8a80:	e026      	b.n	8ad0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8a82:	230b      	movs	r3, #11
    8a84:	18fb      	adds	r3, r7, r3
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	2201      	movs	r2, #1
    8a8a:	4013      	ands	r3, r2
    8a8c:	d004      	beq.n	8a98 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8a8e:	68fb      	ldr	r3, [r7, #12]
    8a90:	2201      	movs	r2, #1
    8a92:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    8a94:	2313      	movs	r3, #19
    8a96:	e01b      	b.n	8ad0 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    8a98:	230b      	movs	r3, #11
    8a9a:	18fb      	adds	r3, r7, r3
    8a9c:	781b      	ldrb	r3, [r3, #0]
    8a9e:	2210      	movs	r2, #16
    8aa0:	4013      	ands	r3, r2
    8aa2:	d004      	beq.n	8aae <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8aa4:	68fb      	ldr	r3, [r7, #12]
    8aa6:	2210      	movs	r2, #16
    8aa8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    8aaa:	2342      	movs	r3, #66	; 0x42
    8aac:	e010      	b.n	8ad0 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    8aae:	230b      	movs	r3, #11
    8ab0:	18fb      	adds	r3, r7, r3
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2220      	movs	r2, #32
    8ab6:	4013      	ands	r3, r2
    8ab8:	d004      	beq.n	8ac4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8aba:	68fb      	ldr	r3, [r7, #12]
    8abc:	2220      	movs	r2, #32
    8abe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    8ac0:	2341      	movs	r3, #65	; 0x41
    8ac2:	e005      	b.n	8ad0 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8ac8:	b29a      	uxth	r2, r3
    8aca:	683b      	ldr	r3, [r7, #0]
    8acc:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    8ace:	2300      	movs	r3, #0
}
    8ad0:	0018      	movs	r0, r3
    8ad2:	46bd      	mov	sp, r7
    8ad4:	b004      	add	sp, #16
    8ad6:	bd80      	pop	{r7, pc}
    8ad8:	00008419 	.word	0x00008419

00008adc <usart_is_syncing>:
{
    8adc:	b580      	push	{r7, lr}
    8ade:	b084      	sub	sp, #16
    8ae0:	af00      	add	r7, sp, #0
    8ae2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	681b      	ldr	r3, [r3, #0]
    8ae8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    8aea:	68fb      	ldr	r3, [r7, #12]
    8aec:	69db      	ldr	r3, [r3, #28]
    8aee:	1e5a      	subs	r2, r3, #1
    8af0:	4193      	sbcs	r3, r2
    8af2:	b2db      	uxtb	r3, r3
}
    8af4:	0018      	movs	r0, r3
    8af6:	46bd      	mov	sp, r7
    8af8:	b004      	add	sp, #16
    8afa:	bd80      	pop	{r7, pc}

00008afc <_usart_wait_for_sync>:
{
    8afc:	b580      	push	{r7, lr}
    8afe:	b082      	sub	sp, #8
    8b00:	af00      	add	r7, sp, #0
    8b02:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    8b04:	46c0      	nop			; (mov r8, r8)
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	0018      	movs	r0, r3
    8b0a:	4b04      	ldr	r3, [pc, #16]	; (8b1c <_usart_wait_for_sync+0x20>)
    8b0c:	4798      	blx	r3
    8b0e:	1e03      	subs	r3, r0, #0
    8b10:	d1f9      	bne.n	8b06 <_usart_wait_for_sync+0xa>
}
    8b12:	46c0      	nop			; (mov r8, r8)
    8b14:	46bd      	mov	sp, r7
    8b16:	b002      	add	sp, #8
    8b18:	bd80      	pop	{r7, pc}
    8b1a:	46c0      	nop			; (mov r8, r8)
    8b1c:	00008add 	.word	0x00008add

00008b20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8b20:	b580      	push	{r7, lr}
    8b22:	b088      	sub	sp, #32
    8b24:	af00      	add	r7, sp, #0
    8b26:	0002      	movs	r2, r0
    8b28:	1dfb      	adds	r3, r7, #7
    8b2a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    8b2c:	1dfb      	adds	r3, r7, #7
    8b2e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    8b30:	4ba3      	ldr	r3, [pc, #652]	; (8dc0 <_usart_interrupt_handler+0x2a0>)
    8b32:	0092      	lsls	r2, r2, #2
    8b34:	58d3      	ldr	r3, [r2, r3]
    8b36:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8b38:	69bb      	ldr	r3, [r7, #24]
    8b3a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    8b3c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    8b3e:	69bb      	ldr	r3, [r7, #24]
    8b40:	0018      	movs	r0, r3
    8b42:	4ba0      	ldr	r3, [pc, #640]	; (8dc4 <_usart_interrupt_handler+0x2a4>)
    8b44:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    8b46:	697b      	ldr	r3, [r7, #20]
    8b48:	7e1b      	ldrb	r3, [r3, #24]
    8b4a:	b2da      	uxtb	r2, r3
    8b4c:	2312      	movs	r3, #18
    8b4e:	18fb      	adds	r3, r7, r3
    8b50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    8b52:	697b      	ldr	r3, [r7, #20]
    8b54:	7d9b      	ldrb	r3, [r3, #22]
    8b56:	b2db      	uxtb	r3, r3
    8b58:	b29a      	uxth	r2, r3
    8b5a:	2312      	movs	r3, #18
    8b5c:	18fb      	adds	r3, r7, r3
    8b5e:	2112      	movs	r1, #18
    8b60:	1879      	adds	r1, r7, r1
    8b62:	8809      	ldrh	r1, [r1, #0]
    8b64:	400a      	ands	r2, r1
    8b66:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    8b68:	69bb      	ldr	r3, [r7, #24]
    8b6a:	2230      	movs	r2, #48	; 0x30
    8b6c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    8b6e:	69ba      	ldr	r2, [r7, #24]
    8b70:	2131      	movs	r1, #49	; 0x31
    8b72:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    8b74:	4013      	ands	r3, r2
    8b76:	b2da      	uxtb	r2, r3
    8b78:	2310      	movs	r3, #16
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8b7e:	2312      	movs	r3, #18
    8b80:	18fb      	adds	r3, r7, r3
    8b82:	881b      	ldrh	r3, [r3, #0]
    8b84:	2201      	movs	r2, #1
    8b86:	4013      	ands	r3, r2
    8b88:	d044      	beq.n	8c14 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    8b8a:	69bb      	ldr	r3, [r7, #24]
    8b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8b8e:	b29b      	uxth	r3, r3
    8b90:	2b00      	cmp	r3, #0
    8b92:	d03c      	beq.n	8c0e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8b94:	69bb      	ldr	r3, [r7, #24]
    8b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	b2da      	uxtb	r2, r3
    8b9c:	231c      	movs	r3, #28
    8b9e:	18fb      	adds	r3, r7, r3
    8ba0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    8ba2:	69bb      	ldr	r3, [r7, #24]
    8ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ba6:	1c5a      	adds	r2, r3, #1
    8ba8:	69bb      	ldr	r3, [r7, #24]
    8baa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8bac:	69bb      	ldr	r3, [r7, #24]
    8bae:	795b      	ldrb	r3, [r3, #5]
    8bb0:	2b01      	cmp	r3, #1
    8bb2:	d113      	bne.n	8bdc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    8bb4:	69bb      	ldr	r3, [r7, #24]
    8bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bb8:	781b      	ldrb	r3, [r3, #0]
    8bba:	b2db      	uxtb	r3, r3
    8bbc:	021b      	lsls	r3, r3, #8
    8bbe:	b21a      	sxth	r2, r3
    8bc0:	231c      	movs	r3, #28
    8bc2:	18fb      	adds	r3, r7, r3
    8bc4:	2100      	movs	r1, #0
    8bc6:	5e5b      	ldrsh	r3, [r3, r1]
    8bc8:	4313      	orrs	r3, r2
    8bca:	b21a      	sxth	r2, r3
    8bcc:	231c      	movs	r3, #28
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    8bd2:	69bb      	ldr	r3, [r7, #24]
    8bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8bd6:	1c5a      	adds	r2, r3, #1
    8bd8:	69bb      	ldr	r3, [r7, #24]
    8bda:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    8bdc:	231c      	movs	r3, #28
    8bde:	18fb      	adds	r3, r7, r3
    8be0:	881b      	ldrh	r3, [r3, #0]
    8be2:	05db      	lsls	r3, r3, #23
    8be4:	0ddb      	lsrs	r3, r3, #23
    8be6:	b29a      	uxth	r2, r3
    8be8:	697b      	ldr	r3, [r7, #20]
    8bea:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    8bec:	69bb      	ldr	r3, [r7, #24]
    8bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    8bf0:	b29b      	uxth	r3, r3
    8bf2:	3b01      	subs	r3, #1
    8bf4:	b29b      	uxth	r3, r3
    8bf6:	69ba      	ldr	r2, [r7, #24]
    8bf8:	1c19      	adds	r1, r3, #0
    8bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d109      	bne.n	8c14 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8c00:	697b      	ldr	r3, [r7, #20]
    8c02:	2201      	movs	r2, #1
    8c04:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    8c06:	697b      	ldr	r3, [r7, #20]
    8c08:	2202      	movs	r2, #2
    8c0a:	759a      	strb	r2, [r3, #22]
    8c0c:	e002      	b.n	8c14 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8c0e:	697b      	ldr	r3, [r7, #20]
    8c10:	2201      	movs	r2, #1
    8c12:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    8c14:	2312      	movs	r3, #18
    8c16:	18fb      	adds	r3, r7, r3
    8c18:	881b      	ldrh	r3, [r3, #0]
    8c1a:	2202      	movs	r2, #2
    8c1c:	4013      	ands	r3, r2
    8c1e:	d011      	beq.n	8c44 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    8c20:	697b      	ldr	r3, [r7, #20]
    8c22:	2202      	movs	r2, #2
    8c24:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    8c26:	69bb      	ldr	r3, [r7, #24]
    8c28:	2233      	movs	r2, #51	; 0x33
    8c2a:	2100      	movs	r1, #0
    8c2c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    8c2e:	2310      	movs	r3, #16
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	881b      	ldrh	r3, [r3, #0]
    8c34:	2201      	movs	r2, #1
    8c36:	4013      	ands	r3, r2
    8c38:	d004      	beq.n	8c44 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    8c3a:	69bb      	ldr	r3, [r7, #24]
    8c3c:	68db      	ldr	r3, [r3, #12]
    8c3e:	69ba      	ldr	r2, [r7, #24]
    8c40:	0010      	movs	r0, r2
    8c42:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    8c44:	2312      	movs	r3, #18
    8c46:	18fb      	adds	r3, r7, r3
    8c48:	881b      	ldrh	r3, [r3, #0]
    8c4a:	2204      	movs	r2, #4
    8c4c:	4013      	ands	r3, r2
    8c4e:	d100      	bne.n	8c52 <_usart_interrupt_handler+0x132>
    8c50:	e0bd      	b.n	8dce <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    8c52:	69bb      	ldr	r3, [r7, #24]
    8c54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8c56:	b29b      	uxth	r3, r3
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d100      	bne.n	8c5e <_usart_interrupt_handler+0x13e>
    8c5c:	e0b4      	b.n	8dc8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8c5e:	697b      	ldr	r3, [r7, #20]
    8c60:	8b5b      	ldrh	r3, [r3, #26]
    8c62:	b29b      	uxth	r3, r3
    8c64:	b2da      	uxtb	r2, r3
    8c66:	231f      	movs	r3, #31
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	213f      	movs	r1, #63	; 0x3f
    8c6c:	400a      	ands	r2, r1
    8c6e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8c70:	231f      	movs	r3, #31
    8c72:	18fb      	adds	r3, r7, r3
    8c74:	781b      	ldrb	r3, [r3, #0]
    8c76:	2208      	movs	r2, #8
    8c78:	4013      	ands	r3, r2
    8c7a:	d007      	beq.n	8c8c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8c7c:	231f      	movs	r3, #31
    8c7e:	18fb      	adds	r3, r7, r3
    8c80:	221f      	movs	r2, #31
    8c82:	18ba      	adds	r2, r7, r2
    8c84:	7812      	ldrb	r2, [r2, #0]
    8c86:	2108      	movs	r1, #8
    8c88:	438a      	bics	r2, r1
    8c8a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8c8c:	231f      	movs	r3, #31
    8c8e:	18fb      	adds	r3, r7, r3
    8c90:	781b      	ldrb	r3, [r3, #0]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d050      	beq.n	8d38 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8c96:	231f      	movs	r3, #31
    8c98:	18fb      	adds	r3, r7, r3
    8c9a:	781b      	ldrb	r3, [r3, #0]
    8c9c:	2202      	movs	r2, #2
    8c9e:	4013      	ands	r3, r2
    8ca0:	d007      	beq.n	8cb2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8ca2:	69bb      	ldr	r3, [r7, #24]
    8ca4:	2232      	movs	r2, #50	; 0x32
    8ca6:	211a      	movs	r1, #26
    8ca8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8caa:	697b      	ldr	r3, [r7, #20]
    8cac:	2202      	movs	r2, #2
    8cae:	835a      	strh	r2, [r3, #26]
    8cb0:	e036      	b.n	8d20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8cb2:	231f      	movs	r3, #31
    8cb4:	18fb      	adds	r3, r7, r3
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	2204      	movs	r2, #4
    8cba:	4013      	ands	r3, r2
    8cbc:	d007      	beq.n	8cce <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    8cbe:	69bb      	ldr	r3, [r7, #24]
    8cc0:	2232      	movs	r2, #50	; 0x32
    8cc2:	211e      	movs	r1, #30
    8cc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8cc6:	697b      	ldr	r3, [r7, #20]
    8cc8:	2204      	movs	r2, #4
    8cca:	835a      	strh	r2, [r3, #26]
    8ccc:	e028      	b.n	8d20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8cce:	231f      	movs	r3, #31
    8cd0:	18fb      	adds	r3, r7, r3
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	2201      	movs	r2, #1
    8cd6:	4013      	ands	r3, r2
    8cd8:	d007      	beq.n	8cea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    8cda:	69bb      	ldr	r3, [r7, #24]
    8cdc:	2232      	movs	r2, #50	; 0x32
    8cde:	2113      	movs	r1, #19
    8ce0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8ce2:	697b      	ldr	r3, [r7, #20]
    8ce4:	2201      	movs	r2, #1
    8ce6:	835a      	strh	r2, [r3, #26]
    8ce8:	e01a      	b.n	8d20 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8cea:	231f      	movs	r3, #31
    8cec:	18fb      	adds	r3, r7, r3
    8cee:	781b      	ldrb	r3, [r3, #0]
    8cf0:	2210      	movs	r2, #16
    8cf2:	4013      	ands	r3, r2
    8cf4:	d007      	beq.n	8d06 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    8cf6:	69bb      	ldr	r3, [r7, #24]
    8cf8:	2232      	movs	r2, #50	; 0x32
    8cfa:	2142      	movs	r1, #66	; 0x42
    8cfc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8cfe:	697b      	ldr	r3, [r7, #20]
    8d00:	2210      	movs	r2, #16
    8d02:	835a      	strh	r2, [r3, #26]
    8d04:	e00c      	b.n	8d20 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8d06:	231f      	movs	r3, #31
    8d08:	18fb      	adds	r3, r7, r3
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	2220      	movs	r2, #32
    8d0e:	4013      	ands	r3, r2
    8d10:	d006      	beq.n	8d20 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    8d12:	69bb      	ldr	r3, [r7, #24]
    8d14:	2232      	movs	r2, #50	; 0x32
    8d16:	2141      	movs	r1, #65	; 0x41
    8d18:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8d1a:	697b      	ldr	r3, [r7, #20]
    8d1c:	2220      	movs	r2, #32
    8d1e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    8d20:	2310      	movs	r3, #16
    8d22:	18fb      	adds	r3, r7, r3
    8d24:	881b      	ldrh	r3, [r3, #0]
    8d26:	2204      	movs	r2, #4
    8d28:	4013      	ands	r3, r2
				if (callback_status
    8d2a:	d050      	beq.n	8dce <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    8d2c:	69bb      	ldr	r3, [r7, #24]
    8d2e:	695b      	ldr	r3, [r3, #20]
    8d30:	69ba      	ldr	r2, [r7, #24]
    8d32:	0010      	movs	r0, r2
    8d34:	4798      	blx	r3
    8d36:	e04a      	b.n	8dce <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8d38:	697b      	ldr	r3, [r7, #20]
    8d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    8d3c:	b29a      	uxth	r2, r3
    8d3e:	230e      	movs	r3, #14
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	05d2      	lsls	r2, r2, #23
    8d44:	0dd2      	lsrs	r2, r2, #23
    8d46:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    8d48:	69bb      	ldr	r3, [r7, #24]
    8d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d4c:	220e      	movs	r2, #14
    8d4e:	18ba      	adds	r2, r7, r2
    8d50:	8812      	ldrh	r2, [r2, #0]
    8d52:	b2d2      	uxtb	r2, r2
    8d54:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    8d56:	69bb      	ldr	r3, [r7, #24]
    8d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d5a:	1c5a      	adds	r2, r3, #1
    8d5c:	69bb      	ldr	r3, [r7, #24]
    8d5e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8d60:	69bb      	ldr	r3, [r7, #24]
    8d62:	795b      	ldrb	r3, [r3, #5]
    8d64:	2b01      	cmp	r3, #1
    8d66:	d10d      	bne.n	8d84 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8d68:	69bb      	ldr	r3, [r7, #24]
    8d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d6c:	220e      	movs	r2, #14
    8d6e:	18ba      	adds	r2, r7, r2
    8d70:	8812      	ldrh	r2, [r2, #0]
    8d72:	0a12      	lsrs	r2, r2, #8
    8d74:	b292      	uxth	r2, r2
    8d76:	b2d2      	uxtb	r2, r2
    8d78:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    8d7a:	69bb      	ldr	r3, [r7, #24]
    8d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d7e:	1c5a      	adds	r2, r3, #1
    8d80:	69bb      	ldr	r3, [r7, #24]
    8d82:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    8d84:	69bb      	ldr	r3, [r7, #24]
    8d86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8d88:	b29b      	uxth	r3, r3
    8d8a:	3b01      	subs	r3, #1
    8d8c:	b29b      	uxth	r3, r3
    8d8e:	69ba      	ldr	r2, [r7, #24]
    8d90:	1c19      	adds	r1, r3, #0
    8d92:	8591      	strh	r1, [r2, #44]	; 0x2c
    8d94:	2b00      	cmp	r3, #0
    8d96:	d11a      	bne.n	8dce <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8d98:	697b      	ldr	r3, [r7, #20]
    8d9a:	2204      	movs	r2, #4
    8d9c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    8d9e:	69bb      	ldr	r3, [r7, #24]
    8da0:	2232      	movs	r2, #50	; 0x32
    8da2:	2100      	movs	r1, #0
    8da4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    8da6:	2310      	movs	r3, #16
    8da8:	18fb      	adds	r3, r7, r3
    8daa:	881b      	ldrh	r3, [r3, #0]
    8dac:	2202      	movs	r2, #2
    8dae:	4013      	ands	r3, r2
					if (callback_status
    8db0:	d00d      	beq.n	8dce <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8db2:	69bb      	ldr	r3, [r7, #24]
    8db4:	691b      	ldr	r3, [r3, #16]
    8db6:	69ba      	ldr	r2, [r7, #24]
    8db8:	0010      	movs	r0, r2
    8dba:	4798      	blx	r3
    8dbc:	e007      	b.n	8dce <_usart_interrupt_handler+0x2ae>
    8dbe:	46c0      	nop			; (mov r8, r8)
    8dc0:	2000043c 	.word	0x2000043c
    8dc4:	00008afd 	.word	0x00008afd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8dc8:	697b      	ldr	r3, [r7, #20]
    8dca:	2204      	movs	r2, #4
    8dcc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    8dce:	2312      	movs	r3, #18
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	881b      	ldrh	r3, [r3, #0]
    8dd4:	2210      	movs	r2, #16
    8dd6:	4013      	ands	r3, r2
    8dd8:	d010      	beq.n	8dfc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    8dda:	697b      	ldr	r3, [r7, #20]
    8ddc:	2210      	movs	r2, #16
    8dde:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8de0:	697b      	ldr	r3, [r7, #20]
    8de2:	2210      	movs	r2, #16
    8de4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8de6:	2310      	movs	r3, #16
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	881b      	ldrh	r3, [r3, #0]
    8dec:	2210      	movs	r2, #16
    8dee:	4013      	ands	r3, r2
    8df0:	d004      	beq.n	8dfc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8df2:	69bb      	ldr	r3, [r7, #24]
    8df4:	69db      	ldr	r3, [r3, #28]
    8df6:	69ba      	ldr	r2, [r7, #24]
    8df8:	0010      	movs	r0, r2
    8dfa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    8dfc:	2312      	movs	r3, #18
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	881b      	ldrh	r3, [r3, #0]
    8e02:	2220      	movs	r2, #32
    8e04:	4013      	ands	r3, r2
    8e06:	d010      	beq.n	8e2a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8e08:	697b      	ldr	r3, [r7, #20]
    8e0a:	2220      	movs	r2, #32
    8e0c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    8e0e:	697b      	ldr	r3, [r7, #20]
    8e10:	2220      	movs	r2, #32
    8e12:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    8e14:	2310      	movs	r3, #16
    8e16:	18fb      	adds	r3, r7, r3
    8e18:	881b      	ldrh	r3, [r3, #0]
    8e1a:	2208      	movs	r2, #8
    8e1c:	4013      	ands	r3, r2
    8e1e:	d004      	beq.n	8e2a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8e20:	69bb      	ldr	r3, [r7, #24]
    8e22:	699b      	ldr	r3, [r3, #24]
    8e24:	69ba      	ldr	r2, [r7, #24]
    8e26:	0010      	movs	r0, r2
    8e28:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    8e2a:	2312      	movs	r3, #18
    8e2c:	18fb      	adds	r3, r7, r3
    8e2e:	881b      	ldrh	r3, [r3, #0]
    8e30:	2208      	movs	r2, #8
    8e32:	4013      	ands	r3, r2
    8e34:	d010      	beq.n	8e58 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8e36:	697b      	ldr	r3, [r7, #20]
    8e38:	2208      	movs	r2, #8
    8e3a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    8e3c:	697b      	ldr	r3, [r7, #20]
    8e3e:	2208      	movs	r2, #8
    8e40:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    8e42:	2310      	movs	r3, #16
    8e44:	18fb      	adds	r3, r7, r3
    8e46:	881b      	ldrh	r3, [r3, #0]
    8e48:	2220      	movs	r2, #32
    8e4a:	4013      	ands	r3, r2
    8e4c:	d004      	beq.n	8e58 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    8e4e:	69bb      	ldr	r3, [r7, #24]
    8e50:	6a1b      	ldr	r3, [r3, #32]
    8e52:	69ba      	ldr	r2, [r7, #24]
    8e54:	0010      	movs	r0, r2
    8e56:	4798      	blx	r3
		}
	}
#endif
}
    8e58:	46c0      	nop			; (mov r8, r8)
    8e5a:	46bd      	mov	sp, r7
    8e5c:	b008      	add	sp, #32
    8e5e:	bd80      	pop	{r7, pc}

00008e60 <system_gclk_gen_get_config_defaults>:
{
    8e60:	b580      	push	{r7, lr}
    8e62:	b082      	sub	sp, #8
    8e64:	af00      	add	r7, sp, #0
    8e66:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    8e68:	687b      	ldr	r3, [r7, #4]
    8e6a:	2201      	movs	r2, #1
    8e6c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    8e6e:	687b      	ldr	r3, [r7, #4]
    8e70:	2200      	movs	r2, #0
    8e72:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	2206      	movs	r2, #6
    8e78:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	2200      	movs	r2, #0
    8e7e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	2200      	movs	r2, #0
    8e84:	725a      	strb	r2, [r3, #9]
}
    8e86:	46c0      	nop			; (mov r8, r8)
    8e88:	46bd      	mov	sp, r7
    8e8a:	b002      	add	sp, #8
    8e8c:	bd80      	pop	{r7, pc}

00008e8e <system_gclk_chan_get_config_defaults>:
{
    8e8e:	b580      	push	{r7, lr}
    8e90:	b082      	sub	sp, #8
    8e92:	af00      	add	r7, sp, #0
    8e94:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8e96:	687b      	ldr	r3, [r7, #4]
    8e98:	2200      	movs	r2, #0
    8e9a:	701a      	strb	r2, [r3, #0]
}
    8e9c:	46c0      	nop			; (mov r8, r8)
    8e9e:	46bd      	mov	sp, r7
    8ea0:	b002      	add	sp, #8
    8ea2:	bd80      	pop	{r7, pc}

00008ea4 <system_clock_source_xosc32k_get_config_defaults>:
{
    8ea4:	b580      	push	{r7, lr}
    8ea6:	b082      	sub	sp, #8
    8ea8:	af00      	add	r7, sp, #0
    8eaa:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	2200      	movs	r2, #0
    8eb0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    8eb2:	687b      	ldr	r3, [r7, #4]
    8eb4:	2204      	movs	r2, #4
    8eb6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    8eb8:	687b      	ldr	r3, [r7, #4]
    8eba:	2200      	movs	r2, #0
    8ebc:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	2280      	movs	r2, #128	; 0x80
    8ec2:	0212      	lsls	r2, r2, #8
    8ec4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    8ec6:	687b      	ldr	r3, [r7, #4]
    8ec8:	2200      	movs	r2, #0
    8eca:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    8ecc:	687b      	ldr	r3, [r7, #4]
    8ece:	2201      	movs	r2, #1
    8ed0:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	2200      	movs	r2, #0
    8ed6:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    8ed8:	687b      	ldr	r3, [r7, #4]
    8eda:	2201      	movs	r2, #1
    8edc:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	2200      	movs	r2, #0
    8ee2:	739a      	strb	r2, [r3, #14]
}
    8ee4:	46c0      	nop			; (mov r8, r8)
    8ee6:	46bd      	mov	sp, r7
    8ee8:	b002      	add	sp, #8
    8eea:	bd80      	pop	{r7, pc}

00008eec <system_clock_source_osc8m_get_config_defaults>:
{
    8eec:	b580      	push	{r7, lr}
    8eee:	b082      	sub	sp, #8
    8ef0:	af00      	add	r7, sp, #0
    8ef2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    8ef4:	687b      	ldr	r3, [r7, #4]
    8ef6:	2203      	movs	r2, #3
    8ef8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    8efa:	687b      	ldr	r3, [r7, #4]
    8efc:	2200      	movs	r2, #0
    8efe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	2201      	movs	r2, #1
    8f04:	709a      	strb	r2, [r3, #2]
}
    8f06:	46c0      	nop			; (mov r8, r8)
    8f08:	46bd      	mov	sp, r7
    8f0a:	b002      	add	sp, #8
    8f0c:	bd80      	pop	{r7, pc}

00008f0e <system_clock_source_dfll_get_config_defaults>:
{
    8f0e:	b580      	push	{r7, lr}
    8f10:	b082      	sub	sp, #8
    8f12:	af00      	add	r7, sp, #0
    8f14:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	2200      	movs	r2, #0
    8f1a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	2200      	movs	r2, #0
    8f20:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	2200      	movs	r2, #0
    8f26:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	2200      	movs	r2, #0
    8f2c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8f2e:	687b      	ldr	r3, [r7, #4]
    8f30:	2200      	movs	r2, #0
    8f32:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    8f34:	687b      	ldr	r3, [r7, #4]
    8f36:	2201      	movs	r2, #1
    8f38:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    8f3a:	687b      	ldr	r3, [r7, #4]
    8f3c:	2207      	movs	r2, #7
    8f3e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	223f      	movs	r2, #63	; 0x3f
    8f44:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	2201      	movs	r2, #1
    8f4a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    8f4c:	687b      	ldr	r3, [r7, #4]
    8f4e:	2201      	movs	r2, #1
    8f50:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    8f52:	687b      	ldr	r3, [r7, #4]
    8f54:	2206      	movs	r2, #6
    8f56:	821a      	strh	r2, [r3, #16]
}
    8f58:	46c0      	nop			; (mov r8, r8)
    8f5a:	46bd      	mov	sp, r7
    8f5c:	b002      	add	sp, #8
    8f5e:	bd80      	pop	{r7, pc}

00008f60 <system_cpu_clock_set_divider>:
{
    8f60:	b580      	push	{r7, lr}
    8f62:	b082      	sub	sp, #8
    8f64:	af00      	add	r7, sp, #0
    8f66:	0002      	movs	r2, r0
    8f68:	1dfb      	adds	r3, r7, #7
    8f6a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    8f6c:	4a03      	ldr	r2, [pc, #12]	; (8f7c <system_cpu_clock_set_divider+0x1c>)
    8f6e:	1dfb      	adds	r3, r7, #7
    8f70:	781b      	ldrb	r3, [r3, #0]
    8f72:	7213      	strb	r3, [r2, #8]
}
    8f74:	46c0      	nop			; (mov r8, r8)
    8f76:	46bd      	mov	sp, r7
    8f78:	b002      	add	sp, #8
    8f7a:	bd80      	pop	{r7, pc}
    8f7c:	40000400 	.word	0x40000400

00008f80 <system_apb_clock_set_divider>:
{
    8f80:	b580      	push	{r7, lr}
    8f82:	b082      	sub	sp, #8
    8f84:	af00      	add	r7, sp, #0
    8f86:	0002      	movs	r2, r0
    8f88:	1dfb      	adds	r3, r7, #7
    8f8a:	701a      	strb	r2, [r3, #0]
    8f8c:	1dbb      	adds	r3, r7, #6
    8f8e:	1c0a      	adds	r2, r1, #0
    8f90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8f92:	1dfb      	adds	r3, r7, #7
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	2b01      	cmp	r3, #1
    8f98:	d008      	beq.n	8fac <system_apb_clock_set_divider+0x2c>
    8f9a:	2b02      	cmp	r3, #2
    8f9c:	d00b      	beq.n	8fb6 <system_apb_clock_set_divider+0x36>
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	d10e      	bne.n	8fc0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    8fa2:	4a0b      	ldr	r2, [pc, #44]	; (8fd0 <system_apb_clock_set_divider+0x50>)
    8fa4:	1dbb      	adds	r3, r7, #6
    8fa6:	781b      	ldrb	r3, [r3, #0]
    8fa8:	7253      	strb	r3, [r2, #9]
			break;
    8faa:	e00b      	b.n	8fc4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    8fac:	4a08      	ldr	r2, [pc, #32]	; (8fd0 <system_apb_clock_set_divider+0x50>)
    8fae:	1dbb      	adds	r3, r7, #6
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	7293      	strb	r3, [r2, #10]
			break;
    8fb4:	e006      	b.n	8fc4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    8fb6:	4a06      	ldr	r2, [pc, #24]	; (8fd0 <system_apb_clock_set_divider+0x50>)
    8fb8:	1dbb      	adds	r3, r7, #6
    8fba:	781b      	ldrb	r3, [r3, #0]
    8fbc:	72d3      	strb	r3, [r2, #11]
			break;
    8fbe:	e001      	b.n	8fc4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    8fc0:	2317      	movs	r3, #23
    8fc2:	e000      	b.n	8fc6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    8fc4:	2300      	movs	r3, #0
}
    8fc6:	0018      	movs	r0, r3
    8fc8:	46bd      	mov	sp, r7
    8fca:	b002      	add	sp, #8
    8fcc:	bd80      	pop	{r7, pc}
    8fce:	46c0      	nop			; (mov r8, r8)
    8fd0:	40000400 	.word	0x40000400

00008fd4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    8fd4:	b580      	push	{r7, lr}
    8fd6:	b082      	sub	sp, #8
    8fd8:	af00      	add	r7, sp, #0
    8fda:	0002      	movs	r2, r0
    8fdc:	1dfb      	adds	r3, r7, #7
    8fde:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8fe0:	4a08      	ldr	r2, [pc, #32]	; (9004 <system_flash_set_waitstates+0x30>)
    8fe2:	1dfb      	adds	r3, r7, #7
    8fe4:	781b      	ldrb	r3, [r3, #0]
    8fe6:	210f      	movs	r1, #15
    8fe8:	400b      	ands	r3, r1
    8fea:	b2d9      	uxtb	r1, r3
    8fec:	6853      	ldr	r3, [r2, #4]
    8fee:	200f      	movs	r0, #15
    8ff0:	4001      	ands	r1, r0
    8ff2:	0049      	lsls	r1, r1, #1
    8ff4:	201e      	movs	r0, #30
    8ff6:	4383      	bics	r3, r0
    8ff8:	430b      	orrs	r3, r1
    8ffa:	6053      	str	r3, [r2, #4]
}
    8ffc:	46c0      	nop			; (mov r8, r8)
    8ffe:	46bd      	mov	sp, r7
    9000:	b002      	add	sp, #8
    9002:	bd80      	pop	{r7, pc}
    9004:	41004000 	.word	0x41004000

00009008 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    9008:	b580      	push	{r7, lr}
    900a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    900c:	46c0      	nop			; (mov r8, r8)
    900e:	4b04      	ldr	r3, [pc, #16]	; (9020 <_system_dfll_wait_for_sync+0x18>)
    9010:	68db      	ldr	r3, [r3, #12]
    9012:	2210      	movs	r2, #16
    9014:	4013      	ands	r3, r2
    9016:	d0fa      	beq.n	900e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    9018:	46c0      	nop			; (mov r8, r8)
    901a:	46bd      	mov	sp, r7
    901c:	bd80      	pop	{r7, pc}
    901e:	46c0      	nop			; (mov r8, r8)
    9020:	40000800 	.word	0x40000800

00009024 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    9024:	b580      	push	{r7, lr}
    9026:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9028:	4b0c      	ldr	r3, [pc, #48]	; (905c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    902a:	2202      	movs	r2, #2
    902c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    902e:	4b0c      	ldr	r3, [pc, #48]	; (9060 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9030:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9032:	4a0a      	ldr	r2, [pc, #40]	; (905c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9034:	4b0b      	ldr	r3, [pc, #44]	; (9064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9036:	689b      	ldr	r3, [r3, #8]
    9038:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    903a:	4a08      	ldr	r2, [pc, #32]	; (905c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    903c:	4b09      	ldr	r3, [pc, #36]	; (9064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    903e:	685b      	ldr	r3, [r3, #4]
    9040:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    9042:	4b06      	ldr	r3, [pc, #24]	; (905c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9044:	2200      	movs	r2, #0
    9046:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9048:	4b05      	ldr	r3, [pc, #20]	; (9060 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    904a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    904c:	4a03      	ldr	r2, [pc, #12]	; (905c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    904e:	4b05      	ldr	r3, [pc, #20]	; (9064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	b29b      	uxth	r3, r3
    9054:	8493      	strh	r3, [r2, #36]	; 0x24
}
    9056:	46c0      	nop			; (mov r8, r8)
    9058:	46bd      	mov	sp, r7
    905a:	bd80      	pop	{r7, pc}
    905c:	40000800 	.word	0x40000800
    9060:	00009009 	.word	0x00009009
    9064:	20000244 	.word	0x20000244

00009068 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    9068:	b580      	push	{r7, lr}
    906a:	b082      	sub	sp, #8
    906c:	af00      	add	r7, sp, #0
    906e:	0002      	movs	r2, r0
    9070:	1dfb      	adds	r3, r7, #7
    9072:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9074:	1dfb      	adds	r3, r7, #7
    9076:	781b      	ldrb	r3, [r3, #0]
    9078:	2b08      	cmp	r3, #8
    907a:	d840      	bhi.n	90fe <system_clock_source_get_hz+0x96>
    907c:	009a      	lsls	r2, r3, #2
    907e:	4b22      	ldr	r3, [pc, #136]	; (9108 <system_clock_source_get_hz+0xa0>)
    9080:	18d3      	adds	r3, r2, r3
    9082:	681b      	ldr	r3, [r3, #0]
    9084:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    9086:	4b21      	ldr	r3, [pc, #132]	; (910c <system_clock_source_get_hz+0xa4>)
    9088:	691b      	ldr	r3, [r3, #16]
    908a:	e039      	b.n	9100 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    908c:	4b20      	ldr	r3, [pc, #128]	; (9110 <system_clock_source_get_hz+0xa8>)
    908e:	6a1b      	ldr	r3, [r3, #32]
    9090:	059b      	lsls	r3, r3, #22
    9092:	0f9b      	lsrs	r3, r3, #30
    9094:	b2db      	uxtb	r3, r3
    9096:	001a      	movs	r2, r3
    9098:	4b1e      	ldr	r3, [pc, #120]	; (9114 <system_clock_source_get_hz+0xac>)
    909a:	40d3      	lsrs	r3, r2
    909c:	e030      	b.n	9100 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    909e:	2380      	movs	r3, #128	; 0x80
    90a0:	021b      	lsls	r3, r3, #8
    90a2:	e02d      	b.n	9100 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    90a4:	2380      	movs	r3, #128	; 0x80
    90a6:	021b      	lsls	r3, r3, #8
    90a8:	e02a      	b.n	9100 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    90aa:	4b18      	ldr	r3, [pc, #96]	; (910c <system_clock_source_get_hz+0xa4>)
    90ac:	695b      	ldr	r3, [r3, #20]
    90ae:	e027      	b.n	9100 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    90b0:	4b16      	ldr	r3, [pc, #88]	; (910c <system_clock_source_get_hz+0xa4>)
    90b2:	681b      	ldr	r3, [r3, #0]
    90b4:	2202      	movs	r2, #2
    90b6:	4013      	ands	r3, r2
    90b8:	d101      	bne.n	90be <system_clock_source_get_hz+0x56>
			return 0;
    90ba:	2300      	movs	r3, #0
    90bc:	e020      	b.n	9100 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    90be:	4b16      	ldr	r3, [pc, #88]	; (9118 <system_clock_source_get_hz+0xb0>)
    90c0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    90c2:	4b12      	ldr	r3, [pc, #72]	; (910c <system_clock_source_get_hz+0xa4>)
    90c4:	681b      	ldr	r3, [r3, #0]
    90c6:	2204      	movs	r2, #4
    90c8:	4013      	ands	r3, r2
    90ca:	d009      	beq.n	90e0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    90cc:	2000      	movs	r0, #0
    90ce:	4b13      	ldr	r3, [pc, #76]	; (911c <system_clock_source_get_hz+0xb4>)
    90d0:	4798      	blx	r3
    90d2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    90d4:	4b0d      	ldr	r3, [pc, #52]	; (910c <system_clock_source_get_hz+0xa4>)
    90d6:	689b      	ldr	r3, [r3, #8]
    90d8:	041b      	lsls	r3, r3, #16
    90da:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    90dc:	4353      	muls	r3, r2
    90de:	e00f      	b.n	9100 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    90e0:	4b0f      	ldr	r3, [pc, #60]	; (9120 <system_clock_source_get_hz+0xb8>)
    90e2:	e00d      	b.n	9100 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    90e4:	4a0a      	ldr	r2, [pc, #40]	; (9110 <system_clock_source_get_hz+0xa8>)
    90e6:	2350      	movs	r3, #80	; 0x50
    90e8:	5cd3      	ldrb	r3, [r2, r3]
    90ea:	b2db      	uxtb	r3, r3
    90ec:	001a      	movs	r2, r3
    90ee:	2304      	movs	r3, #4
    90f0:	4013      	ands	r3, r2
    90f2:	d101      	bne.n	90f8 <system_clock_source_get_hz+0x90>
			return 0;
    90f4:	2300      	movs	r3, #0
    90f6:	e003      	b.n	9100 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    90f8:	4b04      	ldr	r3, [pc, #16]	; (910c <system_clock_source_get_hz+0xa4>)
    90fa:	68db      	ldr	r3, [r3, #12]
    90fc:	e000      	b.n	9100 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    90fe:	2300      	movs	r3, #0
	}
}
    9100:	0018      	movs	r0, r3
    9102:	46bd      	mov	sp, r7
    9104:	b002      	add	sp, #8
    9106:	bd80      	pop	{r7, pc}
    9108:	0000f5f0 	.word	0x0000f5f0
    910c:	20000244 	.word	0x20000244
    9110:	40000800 	.word	0x40000800
    9114:	007a1200 	.word	0x007a1200
    9118:	00009009 	.word	0x00009009
    911c:	00009bc1 	.word	0x00009bc1
    9120:	02dc6c00 	.word	0x02dc6c00

00009124 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    9124:	b580      	push	{r7, lr}
    9126:	b084      	sub	sp, #16
    9128:	af00      	add	r7, sp, #0
    912a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    912c:	4b1a      	ldr	r3, [pc, #104]	; (9198 <system_clock_source_osc8m_set_config+0x74>)
    912e:	6a1b      	ldr	r3, [r3, #32]
    9130:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9132:	687b      	ldr	r3, [r7, #4]
    9134:	781b      	ldrb	r3, [r3, #0]
    9136:	1c1a      	adds	r2, r3, #0
    9138:	2303      	movs	r3, #3
    913a:	4013      	ands	r3, r2
    913c:	b2da      	uxtb	r2, r3
    913e:	230d      	movs	r3, #13
    9140:	18fb      	adds	r3, r7, r3
    9142:	2103      	movs	r1, #3
    9144:	400a      	ands	r2, r1
    9146:	0010      	movs	r0, r2
    9148:	781a      	ldrb	r2, [r3, #0]
    914a:	2103      	movs	r1, #3
    914c:	438a      	bics	r2, r1
    914e:	1c11      	adds	r1, r2, #0
    9150:	1c02      	adds	r2, r0, #0
    9152:	430a      	orrs	r2, r1
    9154:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	789a      	ldrb	r2, [r3, #2]
    915a:	230c      	movs	r3, #12
    915c:	18fb      	adds	r3, r7, r3
    915e:	01d0      	lsls	r0, r2, #7
    9160:	781a      	ldrb	r2, [r3, #0]
    9162:	217f      	movs	r1, #127	; 0x7f
    9164:	400a      	ands	r2, r1
    9166:	1c11      	adds	r1, r2, #0
    9168:	1c02      	adds	r2, r0, #0
    916a:	430a      	orrs	r2, r1
    916c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    916e:	687b      	ldr	r3, [r7, #4]
    9170:	785a      	ldrb	r2, [r3, #1]
    9172:	230c      	movs	r3, #12
    9174:	18fb      	adds	r3, r7, r3
    9176:	2101      	movs	r1, #1
    9178:	400a      	ands	r2, r1
    917a:	0190      	lsls	r0, r2, #6
    917c:	781a      	ldrb	r2, [r3, #0]
    917e:	2140      	movs	r1, #64	; 0x40
    9180:	438a      	bics	r2, r1
    9182:	1c11      	adds	r1, r2, #0
    9184:	1c02      	adds	r2, r0, #0
    9186:	430a      	orrs	r2, r1
    9188:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    918a:	4b03      	ldr	r3, [pc, #12]	; (9198 <system_clock_source_osc8m_set_config+0x74>)
    918c:	68fa      	ldr	r2, [r7, #12]
    918e:	621a      	str	r2, [r3, #32]
}
    9190:	46c0      	nop			; (mov r8, r8)
    9192:	46bd      	mov	sp, r7
    9194:	b004      	add	sp, #16
    9196:	bd80      	pop	{r7, pc}
    9198:	40000800 	.word	0x40000800

0000919c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    919c:	b580      	push	{r7, lr}
    919e:	b084      	sub	sp, #16
    91a0:	af00      	add	r7, sp, #0
    91a2:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    91a4:	4a43      	ldr	r2, [pc, #268]	; (92b4 <system_clock_source_xosc32k_set_config+0x118>)
    91a6:	230c      	movs	r3, #12
    91a8:	18fb      	adds	r3, r7, r3
    91aa:	8a92      	ldrh	r2, [r2, #20]
    91ac:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    91ae:	687b      	ldr	r3, [r7, #4]
    91b0:	785b      	ldrb	r3, [r3, #1]
    91b2:	1c1a      	adds	r2, r3, #0
    91b4:	2307      	movs	r3, #7
    91b6:	4013      	ands	r3, r2
    91b8:	b2da      	uxtb	r2, r3
    91ba:	230c      	movs	r3, #12
    91bc:	18fb      	adds	r3, r7, r3
    91be:	2107      	movs	r1, #7
    91c0:	400a      	ands	r2, r1
    91c2:	0010      	movs	r0, r2
    91c4:	785a      	ldrb	r2, [r3, #1]
    91c6:	2107      	movs	r1, #7
    91c8:	438a      	bics	r2, r1
    91ca:	1c11      	adds	r1, r2, #0
    91cc:	1c02      	adds	r2, r0, #0
    91ce:	430a      	orrs	r2, r1
    91d0:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    91d2:	687b      	ldr	r3, [r7, #4]
    91d4:	781b      	ldrb	r3, [r3, #0]
    91d6:	2b00      	cmp	r3, #0
    91d8:	d106      	bne.n	91e8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    91da:	230c      	movs	r3, #12
    91dc:	18fb      	adds	r3, r7, r3
    91de:	781a      	ldrb	r2, [r3, #0]
    91e0:	2104      	movs	r1, #4
    91e2:	430a      	orrs	r2, r1
    91e4:	701a      	strb	r2, [r3, #0]
    91e6:	e005      	b.n	91f4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    91e8:	230c      	movs	r3, #12
    91ea:	18fb      	adds	r3, r7, r3
    91ec:	781a      	ldrb	r2, [r3, #0]
    91ee:	2104      	movs	r1, #4
    91f0:	438a      	bics	r2, r1
    91f2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    91f4:	687b      	ldr	r3, [r7, #4]
    91f6:	789a      	ldrb	r2, [r3, #2]
    91f8:	230c      	movs	r3, #12
    91fa:	18fb      	adds	r3, r7, r3
    91fc:	2101      	movs	r1, #1
    91fe:	400a      	ands	r2, r1
    9200:	0150      	lsls	r0, r2, #5
    9202:	781a      	ldrb	r2, [r3, #0]
    9204:	2120      	movs	r1, #32
    9206:	438a      	bics	r2, r1
    9208:	1c11      	adds	r1, r2, #0
    920a:	1c02      	adds	r2, r0, #0
    920c:	430a      	orrs	r2, r1
    920e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    9210:	687b      	ldr	r3, [r7, #4]
    9212:	78da      	ldrb	r2, [r3, #3]
    9214:	230c      	movs	r3, #12
    9216:	18fb      	adds	r3, r7, r3
    9218:	2101      	movs	r1, #1
    921a:	400a      	ands	r2, r1
    921c:	0110      	lsls	r0, r2, #4
    921e:	781a      	ldrb	r2, [r3, #0]
    9220:	2110      	movs	r1, #16
    9222:	438a      	bics	r2, r1
    9224:	1c11      	adds	r1, r2, #0
    9226:	1c02      	adds	r2, r0, #0
    9228:	430a      	orrs	r2, r1
    922a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	791a      	ldrb	r2, [r3, #4]
    9230:	230c      	movs	r3, #12
    9232:	18fb      	adds	r3, r7, r3
    9234:	2101      	movs	r1, #1
    9236:	400a      	ands	r2, r1
    9238:	00d0      	lsls	r0, r2, #3
    923a:	781a      	ldrb	r2, [r3, #0]
    923c:	2108      	movs	r1, #8
    923e:	438a      	bics	r2, r1
    9240:	1c11      	adds	r1, r2, #0
    9242:	1c02      	adds	r2, r0, #0
    9244:	430a      	orrs	r2, r1
    9246:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    9248:	687b      	ldr	r3, [r7, #4]
    924a:	7b5a      	ldrb	r2, [r3, #13]
    924c:	230c      	movs	r3, #12
    924e:	18fb      	adds	r3, r7, r3
    9250:	01d0      	lsls	r0, r2, #7
    9252:	781a      	ldrb	r2, [r3, #0]
    9254:	217f      	movs	r1, #127	; 0x7f
    9256:	400a      	ands	r2, r1
    9258:	1c11      	adds	r1, r2, #0
    925a:	1c02      	adds	r2, r0, #0
    925c:	430a      	orrs	r2, r1
    925e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9260:	687b      	ldr	r3, [r7, #4]
    9262:	7b1a      	ldrb	r2, [r3, #12]
    9264:	230c      	movs	r3, #12
    9266:	18fb      	adds	r3, r7, r3
    9268:	2101      	movs	r1, #1
    926a:	400a      	ands	r2, r1
    926c:	0190      	lsls	r0, r2, #6
    926e:	781a      	ldrb	r2, [r3, #0]
    9270:	2140      	movs	r1, #64	; 0x40
    9272:	438a      	bics	r2, r1
    9274:	1c11      	adds	r1, r2, #0
    9276:	1c02      	adds	r2, r0, #0
    9278:	430a      	orrs	r2, r1
    927a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	7b9a      	ldrb	r2, [r3, #14]
    9280:	230c      	movs	r3, #12
    9282:	18fb      	adds	r3, r7, r3
    9284:	2101      	movs	r1, #1
    9286:	400a      	ands	r2, r1
    9288:	0110      	lsls	r0, r2, #4
    928a:	785a      	ldrb	r2, [r3, #1]
    928c:	2110      	movs	r1, #16
    928e:	438a      	bics	r2, r1
    9290:	1c11      	adds	r1, r2, #0
    9292:	1c02      	adds	r2, r0, #0
    9294:	430a      	orrs	r2, r1
    9296:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	689a      	ldr	r2, [r3, #8]
    929c:	4b06      	ldr	r3, [pc, #24]	; (92b8 <system_clock_source_xosc32k_set_config+0x11c>)
    929e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    92a0:	4a04      	ldr	r2, [pc, #16]	; (92b4 <system_clock_source_xosc32k_set_config+0x118>)
    92a2:	230c      	movs	r3, #12
    92a4:	18fb      	adds	r3, r7, r3
    92a6:	881b      	ldrh	r3, [r3, #0]
    92a8:	8293      	strh	r3, [r2, #20]
}
    92aa:	46c0      	nop			; (mov r8, r8)
    92ac:	46bd      	mov	sp, r7
    92ae:	b004      	add	sp, #16
    92b0:	bd80      	pop	{r7, pc}
    92b2:	46c0      	nop			; (mov r8, r8)
    92b4:	40000800 	.word	0x40000800
    92b8:	20000244 	.word	0x20000244

000092bc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b082      	sub	sp, #8
    92c0:	af00      	add	r7, sp, #0
    92c2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	7a1b      	ldrb	r3, [r3, #8]
    92c8:	029b      	lsls	r3, r3, #10
    92ca:	041b      	lsls	r3, r3, #16
    92cc:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    92ce:	687b      	ldr	r3, [r7, #4]
    92d0:	895b      	ldrh	r3, [r3, #10]
    92d2:	059b      	lsls	r3, r3, #22
    92d4:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    92d6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    92d8:	4b2a      	ldr	r3, [pc, #168]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    92da:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    92e0:	687b      	ldr	r3, [r7, #4]
    92e2:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    92e4:	4313      	orrs	r3, r2
    92e6:	b2db      	uxtb	r3, r3
    92e8:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    92ee:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    92f0:	687a      	ldr	r2, [r7, #4]
    92f2:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    92f4:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	785b      	ldrb	r3, [r3, #1]
    92fa:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    92fc:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    92fe:	4b21      	ldr	r3, [pc, #132]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    9300:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	781b      	ldrb	r3, [r3, #0]
    9306:	2b04      	cmp	r3, #4
    9308:	d116      	bne.n	9338 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    930a:	687b      	ldr	r3, [r7, #4]
    930c:	7b1b      	ldrb	r3, [r3, #12]
    930e:	069b      	lsls	r3, r3, #26
    9310:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	89db      	ldrh	r3, [r3, #14]
    9316:	041b      	lsls	r3, r3, #16
    9318:	0019      	movs	r1, r3
    931a:	4b1b      	ldr	r3, [pc, #108]	; (9388 <system_clock_source_dfll_set_config+0xcc>)
    931c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    931e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9320:	687a      	ldr	r2, [r7, #4]
    9322:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9324:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    9326:	4b17      	ldr	r3, [pc, #92]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    9328:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    932a:	4b16      	ldr	r3, [pc, #88]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    932c:	681b      	ldr	r3, [r3, #0]
    932e:	687a      	ldr	r2, [r7, #4]
    9330:	7812      	ldrb	r2, [r2, #0]
    9332:	431a      	orrs	r2, r3
    9334:	4b13      	ldr	r3, [pc, #76]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    9336:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	781b      	ldrb	r3, [r3, #0]
    933c:	2b20      	cmp	r3, #32
    933e:	d11c      	bne.n	937a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9340:	687b      	ldr	r3, [r7, #4]
    9342:	7b1b      	ldrb	r3, [r3, #12]
    9344:	069b      	lsls	r3, r3, #26
    9346:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9348:	687b      	ldr	r3, [r7, #4]
    934a:	89db      	ldrh	r3, [r3, #14]
    934c:	041b      	lsls	r3, r3, #16
    934e:	0019      	movs	r1, r3
    9350:	4b0d      	ldr	r3, [pc, #52]	; (9388 <system_clock_source_dfll_set_config+0xcc>)
    9352:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9354:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9356:	687a      	ldr	r2, [r7, #4]
    9358:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    935a:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    935c:	4b09      	ldr	r3, [pc, #36]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    935e:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    9360:	4b08      	ldr	r3, [pc, #32]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    9362:	681b      	ldr	r3, [r3, #0]
    9364:	687a      	ldr	r2, [r7, #4]
    9366:	7812      	ldrb	r2, [r2, #0]
    9368:	2104      	movs	r1, #4
    936a:	430a      	orrs	r2, r1
    936c:	b2d2      	uxtb	r2, r2
    936e:	4313      	orrs	r3, r2
    9370:	2280      	movs	r2, #128	; 0x80
    9372:	00d2      	lsls	r2, r2, #3
    9374:	431a      	orrs	r2, r3
    9376:	4b03      	ldr	r3, [pc, #12]	; (9384 <system_clock_source_dfll_set_config+0xc8>)
    9378:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    937a:	46c0      	nop			; (mov r8, r8)
    937c:	46bd      	mov	sp, r7
    937e:	b002      	add	sp, #8
    9380:	bd80      	pop	{r7, pc}
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	20000244 	.word	0x20000244
    9388:	03ff0000 	.word	0x03ff0000

0000938c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    938c:	b580      	push	{r7, lr}
    938e:	b082      	sub	sp, #8
    9390:	af00      	add	r7, sp, #0
    9392:	0002      	movs	r2, r0
    9394:	1dfb      	adds	r3, r7, #7
    9396:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9398:	1dfb      	adds	r3, r7, #7
    939a:	781b      	ldrb	r3, [r3, #0]
    939c:	2b08      	cmp	r3, #8
    939e:	d83b      	bhi.n	9418 <system_clock_source_enable+0x8c>
    93a0:	009a      	lsls	r2, r3, #2
    93a2:	4b21      	ldr	r3, [pc, #132]	; (9428 <system_clock_source_enable+0x9c>)
    93a4:	18d3      	adds	r3, r2, r3
    93a6:	681b      	ldr	r3, [r3, #0]
    93a8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    93aa:	4b20      	ldr	r3, [pc, #128]	; (942c <system_clock_source_enable+0xa0>)
    93ac:	4a1f      	ldr	r2, [pc, #124]	; (942c <system_clock_source_enable+0xa0>)
    93ae:	6a12      	ldr	r2, [r2, #32]
    93b0:	2102      	movs	r1, #2
    93b2:	430a      	orrs	r2, r1
    93b4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    93b6:	2300      	movs	r3, #0
    93b8:	e031      	b.n	941e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    93ba:	4b1c      	ldr	r3, [pc, #112]	; (942c <system_clock_source_enable+0xa0>)
    93bc:	4a1b      	ldr	r2, [pc, #108]	; (942c <system_clock_source_enable+0xa0>)
    93be:	6992      	ldr	r2, [r2, #24]
    93c0:	2102      	movs	r1, #2
    93c2:	430a      	orrs	r2, r1
    93c4:	619a      	str	r2, [r3, #24]
		break;
    93c6:	e029      	b.n	941c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    93c8:	4a18      	ldr	r2, [pc, #96]	; (942c <system_clock_source_enable+0xa0>)
    93ca:	4b18      	ldr	r3, [pc, #96]	; (942c <system_clock_source_enable+0xa0>)
    93cc:	8a1b      	ldrh	r3, [r3, #16]
    93ce:	b29b      	uxth	r3, r3
    93d0:	2102      	movs	r1, #2
    93d2:	430b      	orrs	r3, r1
    93d4:	b29b      	uxth	r3, r3
    93d6:	8213      	strh	r3, [r2, #16]
		break;
    93d8:	e020      	b.n	941c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    93da:	4a14      	ldr	r2, [pc, #80]	; (942c <system_clock_source_enable+0xa0>)
    93dc:	4b13      	ldr	r3, [pc, #76]	; (942c <system_clock_source_enable+0xa0>)
    93de:	8a9b      	ldrh	r3, [r3, #20]
    93e0:	b29b      	uxth	r3, r3
    93e2:	2102      	movs	r1, #2
    93e4:	430b      	orrs	r3, r1
    93e6:	b29b      	uxth	r3, r3
    93e8:	8293      	strh	r3, [r2, #20]
		break;
    93ea:	e017      	b.n	941c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    93ec:	4b10      	ldr	r3, [pc, #64]	; (9430 <system_clock_source_enable+0xa4>)
    93ee:	681b      	ldr	r3, [r3, #0]
    93f0:	2202      	movs	r2, #2
    93f2:	431a      	orrs	r2, r3
    93f4:	4b0e      	ldr	r3, [pc, #56]	; (9430 <system_clock_source_enable+0xa4>)
    93f6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    93f8:	4b0e      	ldr	r3, [pc, #56]	; (9434 <system_clock_source_enable+0xa8>)
    93fa:	4798      	blx	r3
		break;
    93fc:	e00e      	b.n	941c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    93fe:	4a0b      	ldr	r2, [pc, #44]	; (942c <system_clock_source_enable+0xa0>)
    9400:	490a      	ldr	r1, [pc, #40]	; (942c <system_clock_source_enable+0xa0>)
    9402:	2344      	movs	r3, #68	; 0x44
    9404:	5ccb      	ldrb	r3, [r1, r3]
    9406:	b2db      	uxtb	r3, r3
    9408:	2102      	movs	r1, #2
    940a:	430b      	orrs	r3, r1
    940c:	b2d9      	uxtb	r1, r3
    940e:	2344      	movs	r3, #68	; 0x44
    9410:	54d1      	strb	r1, [r2, r3]
		break;
    9412:	e003      	b.n	941c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    9414:	2300      	movs	r3, #0
    9416:	e002      	b.n	941e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9418:	2317      	movs	r3, #23
    941a:	e000      	b.n	941e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    941c:	2300      	movs	r3, #0
}
    941e:	0018      	movs	r0, r3
    9420:	46bd      	mov	sp, r7
    9422:	b002      	add	sp, #8
    9424:	bd80      	pop	{r7, pc}
    9426:	46c0      	nop			; (mov r8, r8)
    9428:	0000f614 	.word	0x0000f614
    942c:	40000800 	.word	0x40000800
    9430:	20000244 	.word	0x20000244
    9434:	00009025 	.word	0x00009025

00009438 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    9438:	b580      	push	{r7, lr}
    943a:	b084      	sub	sp, #16
    943c:	af00      	add	r7, sp, #0
    943e:	0002      	movs	r2, r0
    9440:	1dfb      	adds	r3, r7, #7
    9442:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    9444:	2300      	movs	r3, #0
    9446:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    9448:	1dfb      	adds	r3, r7, #7
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	2b08      	cmp	r3, #8
    944e:	d821      	bhi.n	9494 <system_clock_source_is_ready+0x5c>
    9450:	009a      	lsls	r2, r3, #2
    9452:	4b18      	ldr	r3, [pc, #96]	; (94b4 <system_clock_source_is_ready+0x7c>)
    9454:	18d3      	adds	r3, r2, r3
    9456:	681b      	ldr	r3, [r3, #0]
    9458:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    945a:	2308      	movs	r3, #8
    945c:	60fb      	str	r3, [r7, #12]
		break;
    945e:	e01b      	b.n	9498 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    9460:	2304      	movs	r3, #4
    9462:	60fb      	str	r3, [r7, #12]
		break;
    9464:	e018      	b.n	9498 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    9466:	2301      	movs	r3, #1
    9468:	60fb      	str	r3, [r7, #12]
		break;
    946a:	e015      	b.n	9498 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    946c:	2302      	movs	r3, #2
    946e:	60fb      	str	r3, [r7, #12]
		break;
    9470:	e012      	b.n	9498 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    9472:	23d0      	movs	r3, #208	; 0xd0
    9474:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    9476:	e00f      	b.n	9498 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    9478:	4a0f      	ldr	r2, [pc, #60]	; (94b8 <system_clock_source_is_ready+0x80>)
    947a:	2350      	movs	r3, #80	; 0x50
    947c:	5cd3      	ldrb	r3, [r2, r3]
    947e:	b2db      	uxtb	r3, r3
    9480:	001a      	movs	r2, r3
    9482:	2303      	movs	r3, #3
    9484:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    9486:	3b03      	subs	r3, #3
    9488:	425a      	negs	r2, r3
    948a:	4153      	adcs	r3, r2
    948c:	b2db      	uxtb	r3, r3
    948e:	e00c      	b.n	94aa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    9490:	2301      	movs	r3, #1
    9492:	e00a      	b.n	94aa <system_clock_source_is_ready+0x72>

	default:
		return false;
    9494:	2300      	movs	r3, #0
    9496:	e008      	b.n	94aa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9498:	4b07      	ldr	r3, [pc, #28]	; (94b8 <system_clock_source_is_ready+0x80>)
    949a:	68db      	ldr	r3, [r3, #12]
    949c:	68fa      	ldr	r2, [r7, #12]
    949e:	401a      	ands	r2, r3
    94a0:	68fb      	ldr	r3, [r7, #12]
    94a2:	1ad3      	subs	r3, r2, r3
    94a4:	425a      	negs	r2, r3
    94a6:	4153      	adcs	r3, r2
    94a8:	b2db      	uxtb	r3, r3
}
    94aa:	0018      	movs	r0, r3
    94ac:	46bd      	mov	sp, r7
    94ae:	b004      	add	sp, #16
    94b0:	bd80      	pop	{r7, pc}
    94b2:	46c0      	nop			; (mov r8, r8)
    94b4:	0000f638 	.word	0x0000f638
    94b8:	40000800 	.word	0x40000800

000094bc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    94bc:	b580      	push	{r7, lr}
    94be:	b082      	sub	sp, #8
    94c0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    94c2:	003b      	movs	r3, r7
    94c4:	2202      	movs	r2, #2
    94c6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    94c8:	2300      	movs	r3, #0
    94ca:	607b      	str	r3, [r7, #4]
    94cc:	e009      	b.n	94e2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    94ce:	687b      	ldr	r3, [r7, #4]
    94d0:	b2db      	uxtb	r3, r3
    94d2:	003a      	movs	r2, r7
    94d4:	0011      	movs	r1, r2
    94d6:	0018      	movs	r0, r3
    94d8:	4b05      	ldr	r3, [pc, #20]	; (94f0 <_switch_peripheral_gclk+0x34>)
    94da:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    94dc:	687b      	ldr	r3, [r7, #4]
    94de:	3301      	adds	r3, #1
    94e0:	607b      	str	r3, [r7, #4]
    94e2:	687b      	ldr	r3, [r7, #4]
    94e4:	2b24      	cmp	r3, #36	; 0x24
    94e6:	d9f2      	bls.n	94ce <_switch_peripheral_gclk+0x12>
	}
}
    94e8:	46c0      	nop			; (mov r8, r8)
    94ea:	46bd      	mov	sp, r7
    94ec:	b002      	add	sp, #8
    94ee:	bd80      	pop	{r7, pc}
    94f0:	00009a9d 	.word	0x00009a9d

000094f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b0aa      	sub	sp, #168	; 0xa8
    94f8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    94fa:	4b87      	ldr	r3, [pc, #540]	; (9718 <system_clock_init+0x224>)
    94fc:	22c2      	movs	r2, #194	; 0xc2
    94fe:	00d2      	lsls	r2, r2, #3
    9500:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    9502:	2002      	movs	r0, #2
    9504:	4b85      	ldr	r3, [pc, #532]	; (971c <system_clock_init+0x228>)
    9506:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    9508:	4b85      	ldr	r3, [pc, #532]	; (9720 <system_clock_init+0x22c>)
    950a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    950c:	2394      	movs	r3, #148	; 0x94
    950e:	18fb      	adds	r3, r7, r3
    9510:	0018      	movs	r0, r3
    9512:	4b84      	ldr	r3, [pc, #528]	; (9724 <system_clock_init+0x230>)
    9514:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    9516:	2394      	movs	r3, #148	; 0x94
    9518:	18fb      	adds	r3, r7, r3
    951a:	2280      	movs	r2, #128	; 0x80
    951c:	0212      	lsls	r2, r2, #8
    951e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    9520:	2394      	movs	r3, #148	; 0x94
    9522:	18fb      	adds	r3, r7, r3
    9524:	2200      	movs	r2, #0
    9526:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9528:	2394      	movs	r3, #148	; 0x94
    952a:	18fb      	adds	r3, r7, r3
    952c:	2203      	movs	r2, #3
    952e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    9530:	2394      	movs	r3, #148	; 0x94
    9532:	18fb      	adds	r3, r7, r3
    9534:	2200      	movs	r2, #0
    9536:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    9538:	2394      	movs	r3, #148	; 0x94
    953a:	18fb      	adds	r3, r7, r3
    953c:	2200      	movs	r2, #0
    953e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    9540:	2394      	movs	r3, #148	; 0x94
    9542:	18fb      	adds	r3, r7, r3
    9544:	2201      	movs	r2, #1
    9546:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    9548:	2394      	movs	r3, #148	; 0x94
    954a:	18fb      	adds	r3, r7, r3
    954c:	2200      	movs	r2, #0
    954e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    9550:	2394      	movs	r3, #148	; 0x94
    9552:	18fb      	adds	r3, r7, r3
    9554:	2200      	movs	r2, #0
    9556:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    9558:	2394      	movs	r3, #148	; 0x94
    955a:	18fb      	adds	r3, r7, r3
    955c:	0018      	movs	r0, r3
    955e:	4b72      	ldr	r3, [pc, #456]	; (9728 <system_clock_init+0x234>)
    9560:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    9562:	2005      	movs	r0, #5
    9564:	4b71      	ldr	r3, [pc, #452]	; (972c <system_clock_init+0x238>)
    9566:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    9568:	46c0      	nop			; (mov r8, r8)
    956a:	2005      	movs	r0, #5
    956c:	4b70      	ldr	r3, [pc, #448]	; (9730 <system_clock_init+0x23c>)
    956e:	4798      	blx	r3
    9570:	0003      	movs	r3, r0
    9572:	001a      	movs	r2, r3
    9574:	2301      	movs	r3, #1
    9576:	4053      	eors	r3, r2
    9578:	b2db      	uxtb	r3, r3
    957a:	2b00      	cmp	r3, #0
    957c:	d1f5      	bne.n	956a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    957e:	4a66      	ldr	r2, [pc, #408]	; (9718 <system_clock_init+0x224>)
    9580:	8a93      	ldrh	r3, [r2, #20]
    9582:	2180      	movs	r1, #128	; 0x80
    9584:	430b      	orrs	r3, r1
    9586:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    9588:	2380      	movs	r3, #128	; 0x80
    958a:	18fb      	adds	r3, r7, r3
    958c:	0018      	movs	r0, r3
    958e:	4b69      	ldr	r3, [pc, #420]	; (9734 <system_clock_init+0x240>)
    9590:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9592:	2380      	movs	r3, #128	; 0x80
    9594:	18fb      	adds	r3, r7, r3
    9596:	2204      	movs	r2, #4
    9598:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    959a:	2380      	movs	r3, #128	; 0x80
    959c:	18fb      	adds	r3, r7, r3
    959e:	2200      	movs	r2, #0
    95a0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    95a2:	4b65      	ldr	r3, [pc, #404]	; (9738 <system_clock_init+0x244>)
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	0e9b      	lsrs	r3, r3, #26
    95a8:	22a4      	movs	r2, #164	; 0xa4
    95aa:	18ba      	adds	r2, r7, r2
    95ac:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    95ae:	23a4      	movs	r3, #164	; 0xa4
    95b0:	18fb      	adds	r3, r7, r3
    95b2:	681b      	ldr	r3, [r3, #0]
    95b4:	2b3f      	cmp	r3, #63	; 0x3f
    95b6:	d103      	bne.n	95c0 <system_clock_init+0xcc>
		coarse = 0x1f;
    95b8:	231f      	movs	r3, #31
    95ba:	22a4      	movs	r2, #164	; 0xa4
    95bc:	18ba      	adds	r2, r7, r2
    95be:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    95c0:	23a4      	movs	r3, #164	; 0xa4
    95c2:	18fb      	adds	r3, r7, r3
    95c4:	681b      	ldr	r3, [r3, #0]
    95c6:	b2da      	uxtb	r2, r3
    95c8:	2380      	movs	r3, #128	; 0x80
    95ca:	18fb      	adds	r3, r7, r3
    95cc:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    95ce:	2380      	movs	r3, #128	; 0x80
    95d0:	18fb      	adds	r3, r7, r3
    95d2:	2200      	movs	r2, #0
    95d4:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    95d6:	2380      	movs	r3, #128	; 0x80
    95d8:	18fb      	adds	r3, r7, r3
    95da:	2200      	movs	r2, #0
    95dc:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    95de:	2380      	movs	r3, #128	; 0x80
    95e0:	18fb      	adds	r3, r7, r3
    95e2:	2200      	movs	r2, #0
    95e4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    95e6:	2380      	movs	r3, #128	; 0x80
    95e8:	18fb      	adds	r3, r7, r3
    95ea:	2200      	movs	r2, #0
    95ec:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    95ee:	2380      	movs	r3, #128	; 0x80
    95f0:	18fb      	adds	r3, r7, r3
    95f2:	4a52      	ldr	r2, [pc, #328]	; (973c <system_clock_init+0x248>)
    95f4:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    95f6:	2380      	movs	r3, #128	; 0x80
    95f8:	18fb      	adds	r3, r7, r3
    95fa:	2207      	movs	r2, #7
    95fc:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    95fe:	2380      	movs	r3, #128	; 0x80
    9600:	18fb      	adds	r3, r7, r3
    9602:	223f      	movs	r2, #63	; 0x3f
    9604:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    9606:	2380      	movs	r3, #128	; 0x80
    9608:	18fb      	adds	r3, r7, r3
    960a:	0018      	movs	r0, r3
    960c:	4b4c      	ldr	r3, [pc, #304]	; (9740 <system_clock_init+0x24c>)
    960e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    9610:	237c      	movs	r3, #124	; 0x7c
    9612:	18fb      	adds	r3, r7, r3
    9614:	0018      	movs	r0, r3
    9616:	4b4b      	ldr	r3, [pc, #300]	; (9744 <system_clock_init+0x250>)
    9618:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    961a:	237c      	movs	r3, #124	; 0x7c
    961c:	18fb      	adds	r3, r7, r3
    961e:	2200      	movs	r2, #0
    9620:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    9622:	237c      	movs	r3, #124	; 0x7c
    9624:	18fb      	adds	r3, r7, r3
    9626:	2201      	movs	r2, #1
    9628:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    962a:	237c      	movs	r3, #124	; 0x7c
    962c:	18fb      	adds	r3, r7, r3
    962e:	2200      	movs	r2, #0
    9630:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    9632:	237c      	movs	r3, #124	; 0x7c
    9634:	18fb      	adds	r3, r7, r3
    9636:	0018      	movs	r0, r3
    9638:	4b43      	ldr	r3, [pc, #268]	; (9748 <system_clock_init+0x254>)
    963a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    963c:	2006      	movs	r0, #6
    963e:	4b3b      	ldr	r3, [pc, #236]	; (972c <system_clock_init+0x238>)
    9640:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    9642:	4b42      	ldr	r3, [pc, #264]	; (974c <system_clock_init+0x258>)
    9644:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    9646:	2364      	movs	r3, #100	; 0x64
    9648:	18fb      	adds	r3, r7, r3
    964a:	0018      	movs	r0, r3
    964c:	4b40      	ldr	r3, [pc, #256]	; (9750 <system_clock_init+0x25c>)
    964e:	4798      	blx	r3
    9650:	2364      	movs	r3, #100	; 0x64
    9652:	18fb      	adds	r3, r7, r3
    9654:	2205      	movs	r2, #5
    9656:	701a      	strb	r2, [r3, #0]
    9658:	2364      	movs	r3, #100	; 0x64
    965a:	18fb      	adds	r3, r7, r3
    965c:	2201      	movs	r2, #1
    965e:	605a      	str	r2, [r3, #4]
    9660:	2364      	movs	r3, #100	; 0x64
    9662:	18fb      	adds	r3, r7, r3
    9664:	2200      	movs	r2, #0
    9666:	721a      	strb	r2, [r3, #8]
    9668:	2364      	movs	r3, #100	; 0x64
    966a:	18fb      	adds	r3, r7, r3
    966c:	2200      	movs	r2, #0
    966e:	725a      	strb	r2, [r3, #9]
    9670:	2364      	movs	r3, #100	; 0x64
    9672:	18fb      	adds	r3, r7, r3
    9674:	0019      	movs	r1, r3
    9676:	2001      	movs	r0, #1
    9678:	4b36      	ldr	r3, [pc, #216]	; (9754 <system_clock_init+0x260>)
    967a:	4798      	blx	r3
    967c:	2001      	movs	r0, #1
    967e:	4b36      	ldr	r3, [pc, #216]	; (9758 <system_clock_init+0x264>)
    9680:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    9682:	230c      	movs	r3, #12
    9684:	18fb      	adds	r3, r7, r3
    9686:	0018      	movs	r0, r3
    9688:	4b34      	ldr	r3, [pc, #208]	; (975c <system_clock_init+0x268>)
    968a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    968c:	230c      	movs	r3, #12
    968e:	18fb      	adds	r3, r7, r3
    9690:	2201      	movs	r2, #1
    9692:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    9694:	230c      	movs	r3, #12
    9696:	18fb      	adds	r3, r7, r3
    9698:	0019      	movs	r1, r3
    969a:	2000      	movs	r0, #0
    969c:	4b30      	ldr	r3, [pc, #192]	; (9760 <system_clock_init+0x26c>)
    969e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    96a0:	2000      	movs	r0, #0
    96a2:	4b30      	ldr	r3, [pc, #192]	; (9764 <system_clock_init+0x270>)
    96a4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    96a6:	2007      	movs	r0, #7
    96a8:	4b20      	ldr	r3, [pc, #128]	; (972c <system_clock_init+0x238>)
    96aa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    96ac:	46c0      	nop			; (mov r8, r8)
    96ae:	2007      	movs	r0, #7
    96b0:	4b1f      	ldr	r3, [pc, #124]	; (9730 <system_clock_init+0x23c>)
    96b2:	4798      	blx	r3
    96b4:	0003      	movs	r3, r0
    96b6:	001a      	movs	r2, r3
    96b8:	2301      	movs	r3, #1
    96ba:	4053      	eors	r3, r2
    96bc:	b2db      	uxtb	r3, r3
    96be:	2b00      	cmp	r3, #0
    96c0:	d1f5      	bne.n	96ae <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    96c2:	2000      	movs	r0, #0
    96c4:	4b28      	ldr	r3, [pc, #160]	; (9768 <system_clock_init+0x274>)
    96c6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    96c8:	2100      	movs	r1, #0
    96ca:	2000      	movs	r0, #0
    96cc:	4b27      	ldr	r3, [pc, #156]	; (976c <system_clock_init+0x278>)
    96ce:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    96d0:	2100      	movs	r1, #0
    96d2:	2001      	movs	r0, #1
    96d4:	4b25      	ldr	r3, [pc, #148]	; (976c <system_clock_init+0x278>)
    96d6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    96d8:	2100      	movs	r1, #0
    96da:	2002      	movs	r0, #2
    96dc:	4b23      	ldr	r3, [pc, #140]	; (976c <system_clock_init+0x278>)
    96de:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    96e0:	003b      	movs	r3, r7
    96e2:	0018      	movs	r0, r3
    96e4:	4b1a      	ldr	r3, [pc, #104]	; (9750 <system_clock_init+0x25c>)
    96e6:	4798      	blx	r3
    96e8:	003b      	movs	r3, r7
    96ea:	2207      	movs	r2, #7
    96ec:	701a      	strb	r2, [r3, #0]
    96ee:	003b      	movs	r3, r7
    96f0:	2201      	movs	r2, #1
    96f2:	605a      	str	r2, [r3, #4]
    96f4:	003b      	movs	r3, r7
    96f6:	2200      	movs	r2, #0
    96f8:	721a      	strb	r2, [r3, #8]
    96fa:	003b      	movs	r3, r7
    96fc:	2200      	movs	r2, #0
    96fe:	725a      	strb	r2, [r3, #9]
    9700:	003b      	movs	r3, r7
    9702:	0019      	movs	r1, r3
    9704:	2000      	movs	r0, #0
    9706:	4b13      	ldr	r3, [pc, #76]	; (9754 <system_clock_init+0x260>)
    9708:	4798      	blx	r3
    970a:	2000      	movs	r0, #0
    970c:	4b12      	ldr	r3, [pc, #72]	; (9758 <system_clock_init+0x264>)
    970e:	4798      	blx	r3
#endif
}
    9710:	46c0      	nop			; (mov r8, r8)
    9712:	46bd      	mov	sp, r7
    9714:	b02a      	add	sp, #168	; 0xa8
    9716:	bd80      	pop	{r7, pc}
    9718:	40000800 	.word	0x40000800
    971c:	00008fd5 	.word	0x00008fd5
    9720:	000094bd 	.word	0x000094bd
    9724:	00008ea5 	.word	0x00008ea5
    9728:	0000919d 	.word	0x0000919d
    972c:	0000938d 	.word	0x0000938d
    9730:	00009439 	.word	0x00009439
    9734:	00008f0f 	.word	0x00008f0f
    9738:	00806024 	.word	0x00806024
    973c:	000005b9 	.word	0x000005b9
    9740:	000092bd 	.word	0x000092bd
    9744:	00008eed 	.word	0x00008eed
    9748:	00009125 	.word	0x00009125
    974c:	00009815 	.word	0x00009815
    9750:	00008e61 	.word	0x00008e61
    9754:	00009845 	.word	0x00009845
    9758:	00009969 	.word	0x00009969
    975c:	00008e8f 	.word	0x00008e8f
    9760:	00009a9d 	.word	0x00009a9d
    9764:	00009ae1 	.word	0x00009ae1
    9768:	00008f61 	.word	0x00008f61
    976c:	00008f81 	.word	0x00008f81

00009770 <system_apb_clock_set_mask>:
{
    9770:	b580      	push	{r7, lr}
    9772:	b082      	sub	sp, #8
    9774:	af00      	add	r7, sp, #0
    9776:	0002      	movs	r2, r0
    9778:	6039      	str	r1, [r7, #0]
    977a:	1dfb      	adds	r3, r7, #7
    977c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    977e:	1dfb      	adds	r3, r7, #7
    9780:	781b      	ldrb	r3, [r3, #0]
    9782:	2b01      	cmp	r3, #1
    9784:	d00a      	beq.n	979c <system_apb_clock_set_mask+0x2c>
    9786:	2b02      	cmp	r3, #2
    9788:	d00f      	beq.n	97aa <system_apb_clock_set_mask+0x3a>
    978a:	2b00      	cmp	r3, #0
    978c:	d114      	bne.n	97b8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    978e:	4b0e      	ldr	r3, [pc, #56]	; (97c8 <system_apb_clock_set_mask+0x58>)
    9790:	4a0d      	ldr	r2, [pc, #52]	; (97c8 <system_apb_clock_set_mask+0x58>)
    9792:	6991      	ldr	r1, [r2, #24]
    9794:	683a      	ldr	r2, [r7, #0]
    9796:	430a      	orrs	r2, r1
    9798:	619a      	str	r2, [r3, #24]
			break;
    979a:	e00f      	b.n	97bc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    979c:	4b0a      	ldr	r3, [pc, #40]	; (97c8 <system_apb_clock_set_mask+0x58>)
    979e:	4a0a      	ldr	r2, [pc, #40]	; (97c8 <system_apb_clock_set_mask+0x58>)
    97a0:	69d1      	ldr	r1, [r2, #28]
    97a2:	683a      	ldr	r2, [r7, #0]
    97a4:	430a      	orrs	r2, r1
    97a6:	61da      	str	r2, [r3, #28]
			break;
    97a8:	e008      	b.n	97bc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    97aa:	4b07      	ldr	r3, [pc, #28]	; (97c8 <system_apb_clock_set_mask+0x58>)
    97ac:	4a06      	ldr	r2, [pc, #24]	; (97c8 <system_apb_clock_set_mask+0x58>)
    97ae:	6a11      	ldr	r1, [r2, #32]
    97b0:	683a      	ldr	r2, [r7, #0]
    97b2:	430a      	orrs	r2, r1
    97b4:	621a      	str	r2, [r3, #32]
			break;
    97b6:	e001      	b.n	97bc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    97b8:	2317      	movs	r3, #23
    97ba:	e000      	b.n	97be <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    97bc:	2300      	movs	r3, #0
}
    97be:	0018      	movs	r0, r3
    97c0:	46bd      	mov	sp, r7
    97c2:	b002      	add	sp, #8
    97c4:	bd80      	pop	{r7, pc}
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	40000400 	.word	0x40000400

000097cc <system_interrupt_enter_critical_section>:
{
    97cc:	b580      	push	{r7, lr}
    97ce:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    97d0:	4b02      	ldr	r3, [pc, #8]	; (97dc <system_interrupt_enter_critical_section+0x10>)
    97d2:	4798      	blx	r3
}
    97d4:	46c0      	nop			; (mov r8, r8)
    97d6:	46bd      	mov	sp, r7
    97d8:	bd80      	pop	{r7, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	0000706d 	.word	0x0000706d

000097e0 <system_interrupt_leave_critical_section>:
{
    97e0:	b580      	push	{r7, lr}
    97e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    97e4:	4b02      	ldr	r3, [pc, #8]	; (97f0 <system_interrupt_leave_critical_section+0x10>)
    97e6:	4798      	blx	r3
}
    97e8:	46c0      	nop			; (mov r8, r8)
    97ea:	46bd      	mov	sp, r7
    97ec:	bd80      	pop	{r7, pc}
    97ee:	46c0      	nop			; (mov r8, r8)
    97f0:	000070c1 	.word	0x000070c1

000097f4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    97f4:	b580      	push	{r7, lr}
    97f6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    97f8:	4b05      	ldr	r3, [pc, #20]	; (9810 <system_gclk_is_syncing+0x1c>)
    97fa:	785b      	ldrb	r3, [r3, #1]
    97fc:	b2db      	uxtb	r3, r3
    97fe:	b25b      	sxtb	r3, r3
    9800:	2b00      	cmp	r3, #0
    9802:	da01      	bge.n	9808 <system_gclk_is_syncing+0x14>
		return true;
    9804:	2301      	movs	r3, #1
    9806:	e000      	b.n	980a <system_gclk_is_syncing+0x16>
	}

	return false;
    9808:	2300      	movs	r3, #0
}
    980a:	0018      	movs	r0, r3
    980c:	46bd      	mov	sp, r7
    980e:	bd80      	pop	{r7, pc}
    9810:	40000c00 	.word	0x40000c00

00009814 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    9814:	b580      	push	{r7, lr}
    9816:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    9818:	2108      	movs	r1, #8
    981a:	2000      	movs	r0, #0
    981c:	4b07      	ldr	r3, [pc, #28]	; (983c <system_gclk_init+0x28>)
    981e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    9820:	4b07      	ldr	r3, [pc, #28]	; (9840 <system_gclk_init+0x2c>)
    9822:	2201      	movs	r2, #1
    9824:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    9826:	46c0      	nop			; (mov r8, r8)
    9828:	4b05      	ldr	r3, [pc, #20]	; (9840 <system_gclk_init+0x2c>)
    982a:	781b      	ldrb	r3, [r3, #0]
    982c:	b2db      	uxtb	r3, r3
    982e:	001a      	movs	r2, r3
    9830:	2301      	movs	r3, #1
    9832:	4013      	ands	r3, r2
    9834:	d1f8      	bne.n	9828 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    9836:	46c0      	nop			; (mov r8, r8)
    9838:	46bd      	mov	sp, r7
    983a:	bd80      	pop	{r7, pc}
    983c:	00009771 	.word	0x00009771
    9840:	40000c00 	.word	0x40000c00

00009844 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    9844:	b580      	push	{r7, lr}
    9846:	b086      	sub	sp, #24
    9848:	af00      	add	r7, sp, #0
    984a:	0002      	movs	r2, r0
    984c:	6039      	str	r1, [r7, #0]
    984e:	1dfb      	adds	r3, r7, #7
    9850:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    9852:	1dfb      	adds	r3, r7, #7
    9854:	781b      	ldrb	r3, [r3, #0]
    9856:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    9858:	1dfb      	adds	r3, r7, #7
    985a:	781b      	ldrb	r3, [r3, #0]
    985c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    985e:	683b      	ldr	r3, [r7, #0]
    9860:	781b      	ldrb	r3, [r3, #0]
    9862:	021b      	lsls	r3, r3, #8
    9864:	001a      	movs	r2, r3
    9866:	697b      	ldr	r3, [r7, #20]
    9868:	4313      	orrs	r3, r2
    986a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    986c:	683b      	ldr	r3, [r7, #0]
    986e:	785b      	ldrb	r3, [r3, #1]
    9870:	2b00      	cmp	r3, #0
    9872:	d004      	beq.n	987e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    9874:	697b      	ldr	r3, [r7, #20]
    9876:	2280      	movs	r2, #128	; 0x80
    9878:	02d2      	lsls	r2, r2, #11
    987a:	4313      	orrs	r3, r2
    987c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    987e:	683b      	ldr	r3, [r7, #0]
    9880:	7a5b      	ldrb	r3, [r3, #9]
    9882:	2b00      	cmp	r3, #0
    9884:	d004      	beq.n	9890 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    9886:	697b      	ldr	r3, [r7, #20]
    9888:	2280      	movs	r2, #128	; 0x80
    988a:	0312      	lsls	r2, r2, #12
    988c:	4313      	orrs	r3, r2
    988e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    9890:	683b      	ldr	r3, [r7, #0]
    9892:	685b      	ldr	r3, [r3, #4]
    9894:	2b01      	cmp	r3, #1
    9896:	d92c      	bls.n	98f2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    9898:	683b      	ldr	r3, [r7, #0]
    989a:	685a      	ldr	r2, [r3, #4]
    989c:	683b      	ldr	r3, [r7, #0]
    989e:	685b      	ldr	r3, [r3, #4]
    98a0:	3b01      	subs	r3, #1
    98a2:	4013      	ands	r3, r2
    98a4:	d11a      	bne.n	98dc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    98a6:	2300      	movs	r3, #0
    98a8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    98aa:	2302      	movs	r3, #2
    98ac:	60bb      	str	r3, [r7, #8]
    98ae:	e005      	b.n	98bc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    98b0:	68fb      	ldr	r3, [r7, #12]
    98b2:	3301      	adds	r3, #1
    98b4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    98b6:	68bb      	ldr	r3, [r7, #8]
    98b8:	005b      	lsls	r3, r3, #1
    98ba:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    98bc:	683b      	ldr	r3, [r7, #0]
    98be:	685a      	ldr	r2, [r3, #4]
    98c0:	68bb      	ldr	r3, [r7, #8]
    98c2:	429a      	cmp	r2, r3
    98c4:	d8f4      	bhi.n	98b0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    98c6:	68fb      	ldr	r3, [r7, #12]
    98c8:	021b      	lsls	r3, r3, #8
    98ca:	693a      	ldr	r2, [r7, #16]
    98cc:	4313      	orrs	r3, r2
    98ce:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    98d0:	697b      	ldr	r3, [r7, #20]
    98d2:	2280      	movs	r2, #128	; 0x80
    98d4:	0352      	lsls	r2, r2, #13
    98d6:	4313      	orrs	r3, r2
    98d8:	617b      	str	r3, [r7, #20]
    98da:	e00a      	b.n	98f2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    98dc:	683b      	ldr	r3, [r7, #0]
    98de:	685b      	ldr	r3, [r3, #4]
    98e0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    98e2:	693a      	ldr	r2, [r7, #16]
    98e4:	4313      	orrs	r3, r2
    98e6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    98e8:	697b      	ldr	r3, [r7, #20]
    98ea:	2280      	movs	r2, #128	; 0x80
    98ec:	0292      	lsls	r2, r2, #10
    98ee:	4313      	orrs	r3, r2
    98f0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    98f2:	683b      	ldr	r3, [r7, #0]
    98f4:	7a1b      	ldrb	r3, [r3, #8]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d004      	beq.n	9904 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    98fa:	697b      	ldr	r3, [r7, #20]
    98fc:	2280      	movs	r2, #128	; 0x80
    98fe:	0392      	lsls	r2, r2, #14
    9900:	4313      	orrs	r3, r2
    9902:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    9904:	46c0      	nop			; (mov r8, r8)
    9906:	4b13      	ldr	r3, [pc, #76]	; (9954 <system_gclk_gen_set_config+0x110>)
    9908:	4798      	blx	r3
    990a:	1e03      	subs	r3, r0, #0
    990c:	d1fb      	bne.n	9906 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    990e:	4b12      	ldr	r3, [pc, #72]	; (9958 <system_gclk_gen_set_config+0x114>)
    9910:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9912:	4a12      	ldr	r2, [pc, #72]	; (995c <system_gclk_gen_set_config+0x118>)
    9914:	1dfb      	adds	r3, r7, #7
    9916:	781b      	ldrb	r3, [r3, #0]
    9918:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    991a:	46c0      	nop			; (mov r8, r8)
    991c:	4b0d      	ldr	r3, [pc, #52]	; (9954 <system_gclk_gen_set_config+0x110>)
    991e:	4798      	blx	r3
    9920:	1e03      	subs	r3, r0, #0
    9922:	d1fb      	bne.n	991c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    9924:	4b0e      	ldr	r3, [pc, #56]	; (9960 <system_gclk_gen_set_config+0x11c>)
    9926:	693a      	ldr	r2, [r7, #16]
    9928:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    992a:	46c0      	nop			; (mov r8, r8)
    992c:	4b09      	ldr	r3, [pc, #36]	; (9954 <system_gclk_gen_set_config+0x110>)
    992e:	4798      	blx	r3
    9930:	1e03      	subs	r3, r0, #0
    9932:	d1fb      	bne.n	992c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    9934:	4b0a      	ldr	r3, [pc, #40]	; (9960 <system_gclk_gen_set_config+0x11c>)
    9936:	4a0a      	ldr	r2, [pc, #40]	; (9960 <system_gclk_gen_set_config+0x11c>)
    9938:	6851      	ldr	r1, [r2, #4]
    993a:	2280      	movs	r2, #128	; 0x80
    993c:	0252      	lsls	r2, r2, #9
    993e:	4011      	ands	r1, r2
    9940:	697a      	ldr	r2, [r7, #20]
    9942:	430a      	orrs	r2, r1
    9944:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    9946:	4b07      	ldr	r3, [pc, #28]	; (9964 <system_gclk_gen_set_config+0x120>)
    9948:	4798      	blx	r3
}
    994a:	46c0      	nop			; (mov r8, r8)
    994c:	46bd      	mov	sp, r7
    994e:	b006      	add	sp, #24
    9950:	bd80      	pop	{r7, pc}
    9952:	46c0      	nop			; (mov r8, r8)
    9954:	000097f5 	.word	0x000097f5
    9958:	000097cd 	.word	0x000097cd
    995c:	40000c08 	.word	0x40000c08
    9960:	40000c00 	.word	0x40000c00
    9964:	000097e1 	.word	0x000097e1

00009968 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    9968:	b580      	push	{r7, lr}
    996a:	b082      	sub	sp, #8
    996c:	af00      	add	r7, sp, #0
    996e:	0002      	movs	r2, r0
    9970:	1dfb      	adds	r3, r7, #7
    9972:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    9974:	46c0      	nop			; (mov r8, r8)
    9976:	4b0e      	ldr	r3, [pc, #56]	; (99b0 <system_gclk_gen_enable+0x48>)
    9978:	4798      	blx	r3
    997a:	1e03      	subs	r3, r0, #0
    997c:	d1fb      	bne.n	9976 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    997e:	4b0d      	ldr	r3, [pc, #52]	; (99b4 <system_gclk_gen_enable+0x4c>)
    9980:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9982:	4a0d      	ldr	r2, [pc, #52]	; (99b8 <system_gclk_gen_enable+0x50>)
    9984:	1dfb      	adds	r3, r7, #7
    9986:	781b      	ldrb	r3, [r3, #0]
    9988:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    998a:	46c0      	nop			; (mov r8, r8)
    998c:	4b08      	ldr	r3, [pc, #32]	; (99b0 <system_gclk_gen_enable+0x48>)
    998e:	4798      	blx	r3
    9990:	1e03      	subs	r3, r0, #0
    9992:	d1fb      	bne.n	998c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    9994:	4b09      	ldr	r3, [pc, #36]	; (99bc <system_gclk_gen_enable+0x54>)
    9996:	4a09      	ldr	r2, [pc, #36]	; (99bc <system_gclk_gen_enable+0x54>)
    9998:	6852      	ldr	r2, [r2, #4]
    999a:	2180      	movs	r1, #128	; 0x80
    999c:	0249      	lsls	r1, r1, #9
    999e:	430a      	orrs	r2, r1
    99a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    99a2:	4b07      	ldr	r3, [pc, #28]	; (99c0 <system_gclk_gen_enable+0x58>)
    99a4:	4798      	blx	r3
}
    99a6:	46c0      	nop			; (mov r8, r8)
    99a8:	46bd      	mov	sp, r7
    99aa:	b002      	add	sp, #8
    99ac:	bd80      	pop	{r7, pc}
    99ae:	46c0      	nop			; (mov r8, r8)
    99b0:	000097f5 	.word	0x000097f5
    99b4:	000097cd 	.word	0x000097cd
    99b8:	40000c04 	.word	0x40000c04
    99bc:	40000c00 	.word	0x40000c00
    99c0:	000097e1 	.word	0x000097e1

000099c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b086      	sub	sp, #24
    99c8:	af00      	add	r7, sp, #0
    99ca:	0002      	movs	r2, r0
    99cc:	1dfb      	adds	r3, r7, #7
    99ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    99d0:	46c0      	nop			; (mov r8, r8)
    99d2:	4b2a      	ldr	r3, [pc, #168]	; (9a7c <system_gclk_gen_get_hz+0xb8>)
    99d4:	4798      	blx	r3
    99d6:	1e03      	subs	r3, r0, #0
    99d8:	d1fb      	bne.n	99d2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    99da:	4b29      	ldr	r3, [pc, #164]	; (9a80 <system_gclk_gen_get_hz+0xbc>)
    99dc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    99de:	4a29      	ldr	r2, [pc, #164]	; (9a84 <system_gclk_gen_get_hz+0xc0>)
    99e0:	1dfb      	adds	r3, r7, #7
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    99e6:	46c0      	nop			; (mov r8, r8)
    99e8:	4b24      	ldr	r3, [pc, #144]	; (9a7c <system_gclk_gen_get_hz+0xb8>)
    99ea:	4798      	blx	r3
    99ec:	1e03      	subs	r3, r0, #0
    99ee:	d1fb      	bne.n	99e8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    99f0:	4b25      	ldr	r3, [pc, #148]	; (9a88 <system_gclk_gen_get_hz+0xc4>)
    99f2:	685b      	ldr	r3, [r3, #4]
    99f4:	04db      	lsls	r3, r3, #19
    99f6:	0edb      	lsrs	r3, r3, #27
    99f8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    99fa:	0018      	movs	r0, r3
    99fc:	4b23      	ldr	r3, [pc, #140]	; (9a8c <system_gclk_gen_get_hz+0xc8>)
    99fe:	4798      	blx	r3
    9a00:	0003      	movs	r3, r0
    9a02:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9a04:	4a1f      	ldr	r2, [pc, #124]	; (9a84 <system_gclk_gen_get_hz+0xc0>)
    9a06:	1dfb      	adds	r3, r7, #7
    9a08:	781b      	ldrb	r3, [r3, #0]
    9a0a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    9a0c:	4b1e      	ldr	r3, [pc, #120]	; (9a88 <system_gclk_gen_get_hz+0xc4>)
    9a0e:	685b      	ldr	r3, [r3, #4]
    9a10:	02db      	lsls	r3, r3, #11
    9a12:	0fdb      	lsrs	r3, r3, #31
    9a14:	b2da      	uxtb	r2, r3
    9a16:	2313      	movs	r3, #19
    9a18:	18fb      	adds	r3, r7, r3
    9a1a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9a1c:	4a1c      	ldr	r2, [pc, #112]	; (9a90 <system_gclk_gen_get_hz+0xcc>)
    9a1e:	1dfb      	adds	r3, r7, #7
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9a24:	46c0      	nop			; (mov r8, r8)
    9a26:	4b15      	ldr	r3, [pc, #84]	; (9a7c <system_gclk_gen_get_hz+0xb8>)
    9a28:	4798      	blx	r3
    9a2a:	1e03      	subs	r3, r0, #0
    9a2c:	d1fb      	bne.n	9a26 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9a2e:	4b16      	ldr	r3, [pc, #88]	; (9a88 <system_gclk_gen_get_hz+0xc4>)
    9a30:	689b      	ldr	r3, [r3, #8]
    9a32:	021b      	lsls	r3, r3, #8
    9a34:	0c1b      	lsrs	r3, r3, #16
    9a36:	b29b      	uxth	r3, r3
    9a38:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    9a3a:	4b16      	ldr	r3, [pc, #88]	; (9a94 <system_gclk_gen_get_hz+0xd0>)
    9a3c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    9a3e:	2313      	movs	r3, #19
    9a40:	18fb      	adds	r3, r7, r3
    9a42:	781b      	ldrb	r3, [r3, #0]
    9a44:	2b00      	cmp	r3, #0
    9a46:	d109      	bne.n	9a5c <system_gclk_gen_get_hz+0x98>
    9a48:	68fb      	ldr	r3, [r7, #12]
    9a4a:	2b01      	cmp	r3, #1
    9a4c:	d906      	bls.n	9a5c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    9a4e:	4b12      	ldr	r3, [pc, #72]	; (9a98 <system_gclk_gen_get_hz+0xd4>)
    9a50:	68f9      	ldr	r1, [r7, #12]
    9a52:	6978      	ldr	r0, [r7, #20]
    9a54:	4798      	blx	r3
    9a56:	0003      	movs	r3, r0
    9a58:	617b      	str	r3, [r7, #20]
    9a5a:	e00a      	b.n	9a72 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    9a5c:	2313      	movs	r3, #19
    9a5e:	18fb      	adds	r3, r7, r3
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d005      	beq.n	9a72 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    9a66:	68fb      	ldr	r3, [r7, #12]
    9a68:	3301      	adds	r3, #1
    9a6a:	697a      	ldr	r2, [r7, #20]
    9a6c:	40da      	lsrs	r2, r3
    9a6e:	0013      	movs	r3, r2
    9a70:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    9a72:	697b      	ldr	r3, [r7, #20]
}
    9a74:	0018      	movs	r0, r3
    9a76:	46bd      	mov	sp, r7
    9a78:	b006      	add	sp, #24
    9a7a:	bd80      	pop	{r7, pc}
    9a7c:	000097f5 	.word	0x000097f5
    9a80:	000097cd 	.word	0x000097cd
    9a84:	40000c04 	.word	0x40000c04
    9a88:	40000c00 	.word	0x40000c00
    9a8c:	00009069 	.word	0x00009069
    9a90:	40000c08 	.word	0x40000c08
    9a94:	000097e1 	.word	0x000097e1
    9a98:	0000c9d1 	.word	0x0000c9d1

00009a9c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b084      	sub	sp, #16
    9aa0:	af00      	add	r7, sp, #0
    9aa2:	0002      	movs	r2, r0
    9aa4:	6039      	str	r1, [r7, #0]
    9aa6:	1dfb      	adds	r3, r7, #7
    9aa8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    9aaa:	1dfb      	adds	r3, r7, #7
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9ab0:	683b      	ldr	r3, [r7, #0]
    9ab2:	781b      	ldrb	r3, [r3, #0]
    9ab4:	021b      	lsls	r3, r3, #8
    9ab6:	001a      	movs	r2, r3
    9ab8:	68fb      	ldr	r3, [r7, #12]
    9aba:	4313      	orrs	r3, r2
    9abc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    9abe:	1dfb      	adds	r3, r7, #7
    9ac0:	781b      	ldrb	r3, [r3, #0]
    9ac2:	0018      	movs	r0, r3
    9ac4:	4b04      	ldr	r3, [pc, #16]	; (9ad8 <system_gclk_chan_set_config+0x3c>)
    9ac6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9ac8:	4b04      	ldr	r3, [pc, #16]	; (9adc <system_gclk_chan_set_config+0x40>)
    9aca:	68fa      	ldr	r2, [r7, #12]
    9acc:	b292      	uxth	r2, r2
    9ace:	805a      	strh	r2, [r3, #2]
}
    9ad0:	46c0      	nop			; (mov r8, r8)
    9ad2:	46bd      	mov	sp, r7
    9ad4:	b004      	add	sp, #16
    9ad6:	bd80      	pop	{r7, pc}
    9ad8:	00009b29 	.word	0x00009b29
    9adc:	40000c00 	.word	0x40000c00

00009ae0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9ae0:	b580      	push	{r7, lr}
    9ae2:	b082      	sub	sp, #8
    9ae4:	af00      	add	r7, sp, #0
    9ae6:	0002      	movs	r2, r0
    9ae8:	1dfb      	adds	r3, r7, #7
    9aea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9aec:	4b0a      	ldr	r3, [pc, #40]	; (9b18 <system_gclk_chan_enable+0x38>)
    9aee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9af0:	4a0a      	ldr	r2, [pc, #40]	; (9b1c <system_gclk_chan_enable+0x3c>)
    9af2:	1dfb      	adds	r3, r7, #7
    9af4:	781b      	ldrb	r3, [r3, #0]
    9af6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9af8:	4909      	ldr	r1, [pc, #36]	; (9b20 <system_gclk_chan_enable+0x40>)
    9afa:	4b09      	ldr	r3, [pc, #36]	; (9b20 <system_gclk_chan_enable+0x40>)
    9afc:	885b      	ldrh	r3, [r3, #2]
    9afe:	b29b      	uxth	r3, r3
    9b00:	2280      	movs	r2, #128	; 0x80
    9b02:	01d2      	lsls	r2, r2, #7
    9b04:	4313      	orrs	r3, r2
    9b06:	b29b      	uxth	r3, r3
    9b08:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    9b0a:	4b06      	ldr	r3, [pc, #24]	; (9b24 <system_gclk_chan_enable+0x44>)
    9b0c:	4798      	blx	r3
}
    9b0e:	46c0      	nop			; (mov r8, r8)
    9b10:	46bd      	mov	sp, r7
    9b12:	b002      	add	sp, #8
    9b14:	bd80      	pop	{r7, pc}
    9b16:	46c0      	nop			; (mov r8, r8)
    9b18:	000097cd 	.word	0x000097cd
    9b1c:	40000c02 	.word	0x40000c02
    9b20:	40000c00 	.word	0x40000c00
    9b24:	000097e1 	.word	0x000097e1

00009b28 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    9b28:	b580      	push	{r7, lr}
    9b2a:	b084      	sub	sp, #16
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	0002      	movs	r2, r0
    9b30:	1dfb      	adds	r3, r7, #7
    9b32:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9b34:	4b1c      	ldr	r3, [pc, #112]	; (9ba8 <system_gclk_chan_disable+0x80>)
    9b36:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9b38:	4a1c      	ldr	r2, [pc, #112]	; (9bac <system_gclk_chan_disable+0x84>)
    9b3a:	1dfb      	adds	r3, r7, #7
    9b3c:	781b      	ldrb	r3, [r3, #0]
    9b3e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9b40:	4b1b      	ldr	r3, [pc, #108]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b42:	885b      	ldrh	r3, [r3, #2]
    9b44:	051b      	lsls	r3, r3, #20
    9b46:	0f1b      	lsrs	r3, r3, #28
    9b48:	b2db      	uxtb	r3, r3
    9b4a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    9b4c:	4a18      	ldr	r2, [pc, #96]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b4e:	8853      	ldrh	r3, [r2, #2]
    9b50:	4918      	ldr	r1, [pc, #96]	; (9bb4 <system_gclk_chan_disable+0x8c>)
    9b52:	400b      	ands	r3, r1
    9b54:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    9b56:	4a16      	ldr	r2, [pc, #88]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b58:	4b15      	ldr	r3, [pc, #84]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b5a:	885b      	ldrh	r3, [r3, #2]
    9b5c:	b29b      	uxth	r3, r3
    9b5e:	4916      	ldr	r1, [pc, #88]	; (9bb8 <system_gclk_chan_disable+0x90>)
    9b60:	400b      	ands	r3, r1
    9b62:	b29b      	uxth	r3, r3
    9b64:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    9b66:	46c0      	nop			; (mov r8, r8)
    9b68:	4b11      	ldr	r3, [pc, #68]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b6a:	885b      	ldrh	r3, [r3, #2]
    9b6c:	b29b      	uxth	r3, r3
    9b6e:	001a      	movs	r2, r3
    9b70:	2380      	movs	r3, #128	; 0x80
    9b72:	01db      	lsls	r3, r3, #7
    9b74:	4013      	ands	r3, r2
    9b76:	d1f7      	bne.n	9b68 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    9b78:	4a0d      	ldr	r2, [pc, #52]	; (9bb0 <system_gclk_chan_disable+0x88>)
    9b7a:	68fb      	ldr	r3, [r7, #12]
    9b7c:	b2db      	uxtb	r3, r3
    9b7e:	1c19      	adds	r1, r3, #0
    9b80:	230f      	movs	r3, #15
    9b82:	400b      	ands	r3, r1
    9b84:	b2d9      	uxtb	r1, r3
    9b86:	8853      	ldrh	r3, [r2, #2]
    9b88:	1c08      	adds	r0, r1, #0
    9b8a:	210f      	movs	r1, #15
    9b8c:	4001      	ands	r1, r0
    9b8e:	0208      	lsls	r0, r1, #8
    9b90:	4908      	ldr	r1, [pc, #32]	; (9bb4 <system_gclk_chan_disable+0x8c>)
    9b92:	400b      	ands	r3, r1
    9b94:	1c19      	adds	r1, r3, #0
    9b96:	1c03      	adds	r3, r0, #0
    9b98:	430b      	orrs	r3, r1
    9b9a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    9b9c:	4b07      	ldr	r3, [pc, #28]	; (9bbc <system_gclk_chan_disable+0x94>)
    9b9e:	4798      	blx	r3
}
    9ba0:	46c0      	nop			; (mov r8, r8)
    9ba2:	46bd      	mov	sp, r7
    9ba4:	b004      	add	sp, #16
    9ba6:	bd80      	pop	{r7, pc}
    9ba8:	000097cd 	.word	0x000097cd
    9bac:	40000c02 	.word	0x40000c02
    9bb0:	40000c00 	.word	0x40000c00
    9bb4:	fffff0ff 	.word	0xfffff0ff
    9bb8:	ffffbfff 	.word	0xffffbfff
    9bbc:	000097e1 	.word	0x000097e1

00009bc0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    9bc0:	b580      	push	{r7, lr}
    9bc2:	b084      	sub	sp, #16
    9bc4:	af00      	add	r7, sp, #0
    9bc6:	0002      	movs	r2, r0
    9bc8:	1dfb      	adds	r3, r7, #7
    9bca:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    9bcc:	4b0d      	ldr	r3, [pc, #52]	; (9c04 <system_gclk_chan_get_hz+0x44>)
    9bce:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9bd0:	4a0d      	ldr	r2, [pc, #52]	; (9c08 <system_gclk_chan_get_hz+0x48>)
    9bd2:	1dfb      	adds	r3, r7, #7
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    9bd8:	4b0c      	ldr	r3, [pc, #48]	; (9c0c <system_gclk_chan_get_hz+0x4c>)
    9bda:	885b      	ldrh	r3, [r3, #2]
    9bdc:	051b      	lsls	r3, r3, #20
    9bde:	0f1b      	lsrs	r3, r3, #28
    9be0:	b2da      	uxtb	r2, r3
    9be2:	230f      	movs	r3, #15
    9be4:	18fb      	adds	r3, r7, r3
    9be6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    9be8:	4b09      	ldr	r3, [pc, #36]	; (9c10 <system_gclk_chan_get_hz+0x50>)
    9bea:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9bec:	230f      	movs	r3, #15
    9bee:	18fb      	adds	r3, r7, r3
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	0018      	movs	r0, r3
    9bf4:	4b07      	ldr	r3, [pc, #28]	; (9c14 <system_gclk_chan_get_hz+0x54>)
    9bf6:	4798      	blx	r3
    9bf8:	0003      	movs	r3, r0
}
    9bfa:	0018      	movs	r0, r3
    9bfc:	46bd      	mov	sp, r7
    9bfe:	b004      	add	sp, #16
    9c00:	bd80      	pop	{r7, pc}
    9c02:	46c0      	nop			; (mov r8, r8)
    9c04:	000097cd 	.word	0x000097cd
    9c08:	40000c02 	.word	0x40000c02
    9c0c:	40000c00 	.word	0x40000c00
    9c10:	000097e1 	.word	0x000097e1
    9c14:	000099c5 	.word	0x000099c5

00009c18 <system_pinmux_get_group_from_gpio_pin>:
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	b084      	sub	sp, #16
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	0002      	movs	r2, r0
    9c20:	1dfb      	adds	r3, r7, #7
    9c22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9c24:	230f      	movs	r3, #15
    9c26:	18fb      	adds	r3, r7, r3
    9c28:	1dfa      	adds	r2, r7, #7
    9c2a:	7812      	ldrb	r2, [r2, #0]
    9c2c:	09d2      	lsrs	r2, r2, #7
    9c2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9c30:	230e      	movs	r3, #14
    9c32:	18fb      	adds	r3, r7, r3
    9c34:	1dfa      	adds	r2, r7, #7
    9c36:	7812      	ldrb	r2, [r2, #0]
    9c38:	0952      	lsrs	r2, r2, #5
    9c3a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9c3c:	4b0d      	ldr	r3, [pc, #52]	; (9c74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9c3e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    9c40:	230f      	movs	r3, #15
    9c42:	18fb      	adds	r3, r7, r3
    9c44:	781b      	ldrb	r3, [r3, #0]
    9c46:	2b00      	cmp	r3, #0
    9c48:	d10f      	bne.n	9c6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9c4a:	230f      	movs	r3, #15
    9c4c:	18fb      	adds	r3, r7, r3
    9c4e:	781b      	ldrb	r3, [r3, #0]
    9c50:	009b      	lsls	r3, r3, #2
    9c52:	2210      	movs	r2, #16
    9c54:	4694      	mov	ip, r2
    9c56:	44bc      	add	ip, r7
    9c58:	4463      	add	r3, ip
    9c5a:	3b08      	subs	r3, #8
    9c5c:	681a      	ldr	r2, [r3, #0]
    9c5e:	230e      	movs	r3, #14
    9c60:	18fb      	adds	r3, r7, r3
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	01db      	lsls	r3, r3, #7
    9c66:	18d3      	adds	r3, r2, r3
    9c68:	e000      	b.n	9c6c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    9c6a:	2300      	movs	r3, #0
}
    9c6c:	0018      	movs	r0, r3
    9c6e:	46bd      	mov	sp, r7
    9c70:	b004      	add	sp, #16
    9c72:	bd80      	pop	{r7, pc}
    9c74:	41004400 	.word	0x41004400

00009c78 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    9c78:	b580      	push	{r7, lr}
    9c7a:	b088      	sub	sp, #32
    9c7c:	af00      	add	r7, sp, #0
    9c7e:	60f8      	str	r0, [r7, #12]
    9c80:	60b9      	str	r1, [r7, #8]
    9c82:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    9c84:	2300      	movs	r3, #0
    9c86:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9c88:	687b      	ldr	r3, [r7, #4]
    9c8a:	78db      	ldrb	r3, [r3, #3]
    9c8c:	2201      	movs	r2, #1
    9c8e:	4053      	eors	r3, r2
    9c90:	b2db      	uxtb	r3, r3
    9c92:	2b00      	cmp	r3, #0
    9c94:	d035      	beq.n	9d02 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9c96:	687b      	ldr	r3, [r7, #4]
    9c98:	781b      	ldrb	r3, [r3, #0]
    9c9a:	2b80      	cmp	r3, #128	; 0x80
    9c9c:	d00b      	beq.n	9cb6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    9c9e:	69fb      	ldr	r3, [r7, #28]
    9ca0:	2280      	movs	r2, #128	; 0x80
    9ca2:	0252      	lsls	r2, r2, #9
    9ca4:	4313      	orrs	r3, r2
    9ca6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9ca8:	687b      	ldr	r3, [r7, #4]
    9caa:	781b      	ldrb	r3, [r3, #0]
    9cac:	061b      	lsls	r3, r3, #24
    9cae:	001a      	movs	r2, r3
    9cb0:	69fb      	ldr	r3, [r7, #28]
    9cb2:	4313      	orrs	r3, r2
    9cb4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9cb6:	687b      	ldr	r3, [r7, #4]
    9cb8:	785b      	ldrb	r3, [r3, #1]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d003      	beq.n	9cc6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9cbe:	687b      	ldr	r3, [r7, #4]
    9cc0:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9cc2:	2b02      	cmp	r3, #2
    9cc4:	d110      	bne.n	9ce8 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9cc6:	69fb      	ldr	r3, [r7, #28]
    9cc8:	2280      	movs	r2, #128	; 0x80
    9cca:	0292      	lsls	r2, r2, #10
    9ccc:	4313      	orrs	r3, r2
    9cce:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	789b      	ldrb	r3, [r3, #2]
    9cd4:	2b00      	cmp	r3, #0
    9cd6:	d004      	beq.n	9ce2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9cd8:	69fb      	ldr	r3, [r7, #28]
    9cda:	2280      	movs	r2, #128	; 0x80
    9cdc:	02d2      	lsls	r2, r2, #11
    9cde:	4313      	orrs	r3, r2
    9ce0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9ce2:	68fb      	ldr	r3, [r7, #12]
    9ce4:	68ba      	ldr	r2, [r7, #8]
    9ce6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9ce8:	687b      	ldr	r3, [r7, #4]
    9cea:	785b      	ldrb	r3, [r3, #1]
    9cec:	2b01      	cmp	r3, #1
    9cee:	d003      	beq.n	9cf8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9cf0:	687b      	ldr	r3, [r7, #4]
    9cf2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9cf4:	2b02      	cmp	r3, #2
    9cf6:	d107      	bne.n	9d08 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9cf8:	69fb      	ldr	r3, [r7, #28]
    9cfa:	4a22      	ldr	r2, [pc, #136]	; (9d84 <_system_pinmux_config+0x10c>)
    9cfc:	4013      	ands	r3, r2
    9cfe:	61fb      	str	r3, [r7, #28]
    9d00:	e002      	b.n	9d08 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    9d02:	68fb      	ldr	r3, [r7, #12]
    9d04:	68ba      	ldr	r2, [r7, #8]
    9d06:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9d08:	68bb      	ldr	r3, [r7, #8]
    9d0a:	041b      	lsls	r3, r3, #16
    9d0c:	0c1b      	lsrs	r3, r3, #16
    9d0e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9d10:	68bb      	ldr	r3, [r7, #8]
    9d12:	0c1b      	lsrs	r3, r3, #16
    9d14:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9d16:	69ba      	ldr	r2, [r7, #24]
    9d18:	69fb      	ldr	r3, [r7, #28]
    9d1a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9d1c:	22a0      	movs	r2, #160	; 0xa0
    9d1e:	05d2      	lsls	r2, r2, #23
    9d20:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9d22:	68fb      	ldr	r3, [r7, #12]
    9d24:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9d26:	697a      	ldr	r2, [r7, #20]
    9d28:	69fb      	ldr	r3, [r7, #28]
    9d2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9d2c:	22d0      	movs	r2, #208	; 0xd0
    9d2e:	0612      	lsls	r2, r2, #24
    9d30:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9d32:	68fb      	ldr	r3, [r7, #12]
    9d34:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	78db      	ldrb	r3, [r3, #3]
    9d3a:	2201      	movs	r2, #1
    9d3c:	4053      	eors	r3, r2
    9d3e:	b2db      	uxtb	r3, r3
    9d40:	2b00      	cmp	r3, #0
    9d42:	d01a      	beq.n	9d7a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    9d44:	69fa      	ldr	r2, [r7, #28]
    9d46:	2380      	movs	r3, #128	; 0x80
    9d48:	02db      	lsls	r3, r3, #11
    9d4a:	4013      	ands	r3, r2
    9d4c:	d00a      	beq.n	9d64 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    9d4e:	687b      	ldr	r3, [r7, #4]
    9d50:	789b      	ldrb	r3, [r3, #2]
    9d52:	2b01      	cmp	r3, #1
    9d54:	d103      	bne.n	9d5e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    9d56:	68fb      	ldr	r3, [r7, #12]
    9d58:	68ba      	ldr	r2, [r7, #8]
    9d5a:	619a      	str	r2, [r3, #24]
    9d5c:	e002      	b.n	9d64 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    9d5e:	68fb      	ldr	r3, [r7, #12]
    9d60:	68ba      	ldr	r2, [r7, #8]
    9d62:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	785b      	ldrb	r3, [r3, #1]
    9d68:	2b01      	cmp	r3, #1
    9d6a:	d003      	beq.n	9d74 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9d6c:	687b      	ldr	r3, [r7, #4]
    9d6e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9d70:	2b02      	cmp	r3, #2
    9d72:	d102      	bne.n	9d7a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    9d74:	68fb      	ldr	r3, [r7, #12]
    9d76:	68ba      	ldr	r2, [r7, #8]
    9d78:	609a      	str	r2, [r3, #8]
		}
	}
}
    9d7a:	46c0      	nop			; (mov r8, r8)
    9d7c:	46bd      	mov	sp, r7
    9d7e:	b008      	add	sp, #32
    9d80:	bd80      	pop	{r7, pc}
    9d82:	46c0      	nop			; (mov r8, r8)
    9d84:	fffbffff 	.word	0xfffbffff

00009d88 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9d88:	b580      	push	{r7, lr}
    9d8a:	b084      	sub	sp, #16
    9d8c:	af00      	add	r7, sp, #0
    9d8e:	0002      	movs	r2, r0
    9d90:	6039      	str	r1, [r7, #0]
    9d92:	1dfb      	adds	r3, r7, #7
    9d94:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9d96:	1dfb      	adds	r3, r7, #7
    9d98:	781b      	ldrb	r3, [r3, #0]
    9d9a:	0018      	movs	r0, r3
    9d9c:	4b0a      	ldr	r3, [pc, #40]	; (9dc8 <system_pinmux_pin_set_config+0x40>)
    9d9e:	4798      	blx	r3
    9da0:	0003      	movs	r3, r0
    9da2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9da4:	1dfb      	adds	r3, r7, #7
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	221f      	movs	r2, #31
    9daa:	4013      	ands	r3, r2
    9dac:	2201      	movs	r2, #1
    9dae:	409a      	lsls	r2, r3
    9db0:	0013      	movs	r3, r2
    9db2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    9db4:	683a      	ldr	r2, [r7, #0]
    9db6:	68b9      	ldr	r1, [r7, #8]
    9db8:	68fb      	ldr	r3, [r7, #12]
    9dba:	0018      	movs	r0, r3
    9dbc:	4b03      	ldr	r3, [pc, #12]	; (9dcc <system_pinmux_pin_set_config+0x44>)
    9dbe:	4798      	blx	r3
}
    9dc0:	46c0      	nop			; (mov r8, r8)
    9dc2:	46bd      	mov	sp, r7
    9dc4:	b004      	add	sp, #16
    9dc6:	bd80      	pop	{r7, pc}
    9dc8:	00009c19 	.word	0x00009c19
    9dcc:	00009c79 	.word	0x00009c79

00009dd0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9dd0:	b580      	push	{r7, lr}
    9dd2:	af00      	add	r7, sp, #0
	return;
    9dd4:	46c0      	nop			; (mov r8, r8)
}
    9dd6:	46bd      	mov	sp, r7
    9dd8:	bd80      	pop	{r7, pc}
	...

00009ddc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9de0:	4b06      	ldr	r3, [pc, #24]	; (9dfc <system_init+0x20>)
    9de2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9de4:	4b06      	ldr	r3, [pc, #24]	; (9e00 <system_init+0x24>)
    9de6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9de8:	4b06      	ldr	r3, [pc, #24]	; (9e04 <system_init+0x28>)
    9dea:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    9dec:	4b06      	ldr	r3, [pc, #24]	; (9e08 <system_init+0x2c>)
    9dee:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9df0:	4b06      	ldr	r3, [pc, #24]	; (9e0c <system_init+0x30>)
    9df2:	4798      	blx	r3
}
    9df4:	46c0      	nop			; (mov r8, r8)
    9df6:	46bd      	mov	sp, r7
    9df8:	bd80      	pop	{r7, pc}
    9dfa:	46c0      	nop			; (mov r8, r8)
    9dfc:	000094f5 	.word	0x000094f5
    9e00:	00007061 	.word	0x00007061
    9e04:	00009dd1 	.word	0x00009dd1
    9e08:	00005e9d 	.word	0x00005e9d
    9e0c:	00009dd1 	.word	0x00009dd1

00009e10 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9e10:	b580      	push	{r7, lr}
    9e12:	b082      	sub	sp, #8
    9e14:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9e16:	4b2f      	ldr	r3, [pc, #188]	; (9ed4 <Reset_Handler+0xc4>)
    9e18:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9e1a:	4b2f      	ldr	r3, [pc, #188]	; (9ed8 <Reset_Handler+0xc8>)
    9e1c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9e1e:	687a      	ldr	r2, [r7, #4]
    9e20:	683b      	ldr	r3, [r7, #0]
    9e22:	429a      	cmp	r2, r3
    9e24:	d00c      	beq.n	9e40 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9e26:	e007      	b.n	9e38 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9e28:	683b      	ldr	r3, [r7, #0]
    9e2a:	1d1a      	adds	r2, r3, #4
    9e2c:	603a      	str	r2, [r7, #0]
    9e2e:	687a      	ldr	r2, [r7, #4]
    9e30:	1d11      	adds	r1, r2, #4
    9e32:	6079      	str	r1, [r7, #4]
    9e34:	6812      	ldr	r2, [r2, #0]
    9e36:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    9e38:	683a      	ldr	r2, [r7, #0]
    9e3a:	4b28      	ldr	r3, [pc, #160]	; (9edc <Reset_Handler+0xcc>)
    9e3c:	429a      	cmp	r2, r3
    9e3e:	d3f3      	bcc.n	9e28 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9e40:	4b27      	ldr	r3, [pc, #156]	; (9ee0 <Reset_Handler+0xd0>)
    9e42:	603b      	str	r3, [r7, #0]
    9e44:	e004      	b.n	9e50 <Reset_Handler+0x40>
                *pDest++ = 0;
    9e46:	683b      	ldr	r3, [r7, #0]
    9e48:	1d1a      	adds	r2, r3, #4
    9e4a:	603a      	str	r2, [r7, #0]
    9e4c:	2200      	movs	r2, #0
    9e4e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    9e50:	683a      	ldr	r2, [r7, #0]
    9e52:	4b24      	ldr	r3, [pc, #144]	; (9ee4 <Reset_Handler+0xd4>)
    9e54:	429a      	cmp	r2, r3
    9e56:	d3f6      	bcc.n	9e46 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    9e58:	4b23      	ldr	r3, [pc, #140]	; (9ee8 <Reset_Handler+0xd8>)
    9e5a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9e5c:	4b23      	ldr	r3, [pc, #140]	; (9eec <Reset_Handler+0xdc>)
    9e5e:	687a      	ldr	r2, [r7, #4]
    9e60:	21ff      	movs	r1, #255	; 0xff
    9e62:	438a      	bics	r2, r1
    9e64:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9e66:	4a22      	ldr	r2, [pc, #136]	; (9ef0 <Reset_Handler+0xe0>)
    9e68:	2390      	movs	r3, #144	; 0x90
    9e6a:	005b      	lsls	r3, r3, #1
    9e6c:	2102      	movs	r1, #2
    9e6e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9e70:	4a20      	ldr	r2, [pc, #128]	; (9ef4 <Reset_Handler+0xe4>)
    9e72:	78d3      	ldrb	r3, [r2, #3]
    9e74:	2103      	movs	r1, #3
    9e76:	438b      	bics	r3, r1
    9e78:	1c19      	adds	r1, r3, #0
    9e7a:	2302      	movs	r3, #2
    9e7c:	430b      	orrs	r3, r1
    9e7e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9e80:	4a1c      	ldr	r2, [pc, #112]	; (9ef4 <Reset_Handler+0xe4>)
    9e82:	78d3      	ldrb	r3, [r2, #3]
    9e84:	210c      	movs	r1, #12
    9e86:	438b      	bics	r3, r1
    9e88:	1c19      	adds	r1, r3, #0
    9e8a:	2308      	movs	r3, #8
    9e8c:	430b      	orrs	r3, r1
    9e8e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9e90:	4a19      	ldr	r2, [pc, #100]	; (9ef8 <Reset_Handler+0xe8>)
    9e92:	7b93      	ldrb	r3, [r2, #14]
    9e94:	2130      	movs	r1, #48	; 0x30
    9e96:	438b      	bics	r3, r1
    9e98:	1c19      	adds	r1, r3, #0
    9e9a:	2320      	movs	r3, #32
    9e9c:	430b      	orrs	r3, r1
    9e9e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9ea0:	4a15      	ldr	r2, [pc, #84]	; (9ef8 <Reset_Handler+0xe8>)
    9ea2:	7b93      	ldrb	r3, [r2, #14]
    9ea4:	210c      	movs	r1, #12
    9ea6:	438b      	bics	r3, r1
    9ea8:	1c19      	adds	r1, r3, #0
    9eaa:	2308      	movs	r3, #8
    9eac:	430b      	orrs	r3, r1
    9eae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9eb0:	4a11      	ldr	r2, [pc, #68]	; (9ef8 <Reset_Handler+0xe8>)
    9eb2:	7b93      	ldrb	r3, [r2, #14]
    9eb4:	2103      	movs	r1, #3
    9eb6:	438b      	bics	r3, r1
    9eb8:	1c19      	adds	r1, r3, #0
    9eba:	2302      	movs	r3, #2
    9ebc:	430b      	orrs	r3, r1
    9ebe:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9ec0:	4a0e      	ldr	r2, [pc, #56]	; (9efc <Reset_Handler+0xec>)
    9ec2:	6853      	ldr	r3, [r2, #4]
    9ec4:	2180      	movs	r1, #128	; 0x80
    9ec6:	430b      	orrs	r3, r1
    9ec8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    9eca:	4b0d      	ldr	r3, [pc, #52]	; (9f00 <Reset_Handler+0xf0>)
    9ecc:	4798      	blx	r3

        /* Branch to main function */
        main();
    9ece:	4b0d      	ldr	r3, [pc, #52]	; (9f04 <Reset_Handler+0xf4>)
    9ed0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    9ed2:	e7fe      	b.n	9ed2 <Reset_Handler+0xc2>
    9ed4:	0000fe60 	.word	0x0000fe60
    9ed8:	20000000 	.word	0x20000000
    9edc:	200001e4 	.word	0x200001e4
    9ee0:	200001e4 	.word	0x200001e4
    9ee4:	200005ec 	.word	0x200005ec
    9ee8:	00000000 	.word	0x00000000
    9eec:	e000ed00 	.word	0xe000ed00
    9ef0:	41007000 	.word	0x41007000
    9ef4:	41005000 	.word	0x41005000
    9ef8:	41004800 	.word	0x41004800
    9efc:	41004000 	.word	0x41004000
    9f00:	0000cd1d 	.word	0x0000cd1d
    9f04:	0000c861 	.word	0x0000c861

00009f08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9f08:	b580      	push	{r7, lr}
    9f0a:	af00      	add	r7, sp, #0
        while (1) {
    9f0c:	e7fe      	b.n	9f0c <Dummy_Handler+0x4>
	...

00009f10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    9f10:	b580      	push	{r7, lr}
    9f12:	b086      	sub	sp, #24
    9f14:	af00      	add	r7, sp, #0
    9f16:	60f8      	str	r0, [r7, #12]
    9f18:	60b9      	str	r1, [r7, #8]
    9f1a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9f1c:	2300      	movs	r3, #0
    9f1e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    9f20:	68fb      	ldr	r3, [r7, #12]
    9f22:	2b00      	cmp	r3, #0
    9f24:	d012      	beq.n	9f4c <_read+0x3c>
		return -1;
    9f26:	2301      	movs	r3, #1
    9f28:	425b      	negs	r3, r3
    9f2a:	e013      	b.n	9f54 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    9f2c:	4b0b      	ldr	r3, [pc, #44]	; (9f5c <_read+0x4c>)
    9f2e:	681a      	ldr	r2, [r3, #0]
    9f30:	4b0b      	ldr	r3, [pc, #44]	; (9f60 <_read+0x50>)
    9f32:	681b      	ldr	r3, [r3, #0]
    9f34:	68b9      	ldr	r1, [r7, #8]
    9f36:	0018      	movs	r0, r3
    9f38:	4790      	blx	r2
		ptr++;
    9f3a:	68bb      	ldr	r3, [r7, #8]
    9f3c:	3301      	adds	r3, #1
    9f3e:	60bb      	str	r3, [r7, #8]
		nChars++;
    9f40:	697b      	ldr	r3, [r7, #20]
    9f42:	3301      	adds	r3, #1
    9f44:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    9f46:	687b      	ldr	r3, [r7, #4]
    9f48:	3b01      	subs	r3, #1
    9f4a:	607b      	str	r3, [r7, #4]
    9f4c:	687b      	ldr	r3, [r7, #4]
    9f4e:	2b00      	cmp	r3, #0
    9f50:	dcec      	bgt.n	9f2c <_read+0x1c>
	}
	return nChars;
    9f52:	697b      	ldr	r3, [r7, #20]
}
    9f54:	0018      	movs	r0, r3
    9f56:	46bd      	mov	sp, r7
    9f58:	b006      	add	sp, #24
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	20000458 	.word	0x20000458
    9f60:	20000460 	.word	0x20000460

00009f64 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	b086      	sub	sp, #24
    9f68:	af00      	add	r7, sp, #0
    9f6a:	60f8      	str	r0, [r7, #12]
    9f6c:	60b9      	str	r1, [r7, #8]
    9f6e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9f70:	2300      	movs	r3, #0
    9f72:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	2b01      	cmp	r3, #1
    9f78:	d01d      	beq.n	9fb6 <_write+0x52>
    9f7a:	68fb      	ldr	r3, [r7, #12]
    9f7c:	2b02      	cmp	r3, #2
    9f7e:	d01a      	beq.n	9fb6 <_write+0x52>
    9f80:	68fb      	ldr	r3, [r7, #12]
    9f82:	2b03      	cmp	r3, #3
    9f84:	d017      	beq.n	9fb6 <_write+0x52>
		return -1;
    9f86:	2301      	movs	r3, #1
    9f88:	425b      	negs	r3, r3
    9f8a:	e018      	b.n	9fbe <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    9f8c:	4b0e      	ldr	r3, [pc, #56]	; (9fc8 <_write+0x64>)
    9f8e:	681a      	ldr	r2, [r3, #0]
    9f90:	4b0e      	ldr	r3, [pc, #56]	; (9fcc <_write+0x68>)
    9f92:	6818      	ldr	r0, [r3, #0]
    9f94:	68bb      	ldr	r3, [r7, #8]
    9f96:	1c59      	adds	r1, r3, #1
    9f98:	60b9      	str	r1, [r7, #8]
    9f9a:	781b      	ldrb	r3, [r3, #0]
    9f9c:	0019      	movs	r1, r3
    9f9e:	4790      	blx	r2
    9fa0:	1e03      	subs	r3, r0, #0
    9fa2:	da02      	bge.n	9faa <_write+0x46>
			return -1;
    9fa4:	2301      	movs	r3, #1
    9fa6:	425b      	negs	r3, r3
    9fa8:	e009      	b.n	9fbe <_write+0x5a>
		}
		++nChars;
    9faa:	697b      	ldr	r3, [r7, #20]
    9fac:	3301      	adds	r3, #1
    9fae:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    9fb0:	687b      	ldr	r3, [r7, #4]
    9fb2:	3b01      	subs	r3, #1
    9fb4:	607b      	str	r3, [r7, #4]
    9fb6:	687b      	ldr	r3, [r7, #4]
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d1e7      	bne.n	9f8c <_write+0x28>
	}
	return nChars;
    9fbc:	697b      	ldr	r3, [r7, #20]
}
    9fbe:	0018      	movs	r0, r3
    9fc0:	46bd      	mov	sp, r7
    9fc2:	b006      	add	sp, #24
    9fc4:	bd80      	pop	{r7, pc}
    9fc6:	46c0      	nop			; (mov r8, r8)
    9fc8:	2000045c 	.word	0x2000045c
    9fcc:	20000460 	.word	0x20000460

00009fd0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    9fd0:	b580      	push	{r7, lr}
    9fd2:	b084      	sub	sp, #16
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    9fd8:	4b0a      	ldr	r3, [pc, #40]	; (a004 <_sbrk+0x34>)
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d102      	bne.n	9fe6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    9fe0:	4b08      	ldr	r3, [pc, #32]	; (a004 <_sbrk+0x34>)
    9fe2:	4a09      	ldr	r2, [pc, #36]	; (a008 <_sbrk+0x38>)
    9fe4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    9fe6:	4b07      	ldr	r3, [pc, #28]	; (a004 <_sbrk+0x34>)
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	60fb      	str	r3, [r7, #12]

	heap += incr;
    9fec:	4b05      	ldr	r3, [pc, #20]	; (a004 <_sbrk+0x34>)
    9fee:	681a      	ldr	r2, [r3, #0]
    9ff0:	687b      	ldr	r3, [r7, #4]
    9ff2:	18d2      	adds	r2, r2, r3
    9ff4:	4b03      	ldr	r3, [pc, #12]	; (a004 <_sbrk+0x34>)
    9ff6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    9ff8:	68fb      	ldr	r3, [r7, #12]
}
    9ffa:	0018      	movs	r0, r3
    9ffc:	46bd      	mov	sp, r7
    9ffe:	b004      	add	sp, #16
    a000:	bd80      	pop	{r7, pc}
    a002:	46c0      	nop			; (mov r8, r8)
    a004:	2000025c 	.word	0x2000025c
    a008:	200025f0 	.word	0x200025f0

0000a00c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    a00c:	b580      	push	{r7, lr}
    a00e:	b082      	sub	sp, #8
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
	return -1;
    a014:	2301      	movs	r3, #1
    a016:	425b      	negs	r3, r3
}
    a018:	0018      	movs	r0, r3
    a01a:	46bd      	mov	sp, r7
    a01c:	b002      	add	sp, #8
    a01e:	bd80      	pop	{r7, pc}

0000a020 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    a020:	b580      	push	{r7, lr}
    a022:	b082      	sub	sp, #8
    a024:	af00      	add	r7, sp, #0
    a026:	6078      	str	r0, [r7, #4]
    a028:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    a02a:	683b      	ldr	r3, [r7, #0]
    a02c:	2280      	movs	r2, #128	; 0x80
    a02e:	0192      	lsls	r2, r2, #6
    a030:	605a      	str	r2, [r3, #4]

	return 0;
    a032:	2300      	movs	r3, #0
}
    a034:	0018      	movs	r0, r3
    a036:	46bd      	mov	sp, r7
    a038:	b002      	add	sp, #8
    a03a:	bd80      	pop	{r7, pc}

0000a03c <_isatty>:

extern int _isatty(int file)
{
    a03c:	b580      	push	{r7, lr}
    a03e:	b082      	sub	sp, #8
    a040:	af00      	add	r7, sp, #0
    a042:	6078      	str	r0, [r7, #4]
	return 1;
    a044:	2301      	movs	r3, #1
}
    a046:	0018      	movs	r0, r3
    a048:	46bd      	mov	sp, r7
    a04a:	b002      	add	sp, #8
    a04c:	bd80      	pop	{r7, pc}

0000a04e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    a04e:	b580      	push	{r7, lr}
    a050:	b084      	sub	sp, #16
    a052:	af00      	add	r7, sp, #0
    a054:	60f8      	str	r0, [r7, #12]
    a056:	60b9      	str	r1, [r7, #8]
    a058:	607a      	str	r2, [r7, #4]
	return 0;
    a05a:	2300      	movs	r3, #0
}
    a05c:	0018      	movs	r0, r3
    a05e:	46bd      	mov	sp, r7
    a060:	b004      	add	sp, #16
    a062:	bd80      	pop	{r7, pc}

0000a064 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    a064:	b580      	push	{r7, lr}
    a066:	b082      	sub	sp, #8
    a068:	af00      	add	r7, sp, #0
    a06a:	6078      	str	r0, [r7, #4]
	config->port = 80;
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	2250      	movs	r2, #80	; 0x50
    a070:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	2200      	movs	r2, #0
    a076:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	4a0b      	ldr	r2, [pc, #44]	; (a0a8 <http_client_get_config_defaults+0x44>)
    a07c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    a07e:	687b      	ldr	r3, [r7, #4]
    a080:	2200      	movs	r2, #0
    a082:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	2200      	movs	r2, #0
    a088:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	2280      	movs	r2, #128	; 0x80
    a08e:	0052      	lsls	r2, r2, #1
    a090:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	2252      	movs	r2, #82	; 0x52
    a096:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	4a04      	ldr	r2, [pc, #16]	; (a0ac <http_client_get_config_defaults+0x48>)
    a09c:	619a      	str	r2, [r3, #24]
}
    a09e:	46c0      	nop			; (mov r8, r8)
    a0a0:	46bd      	mov	sp, r7
    a0a2:	b002      	add	sp, #8
    a0a4:	bd80      	pop	{r7, pc}
    a0a6:	46c0      	nop			; (mov r8, r8)
    a0a8:	00004e20 	.word	0x00004e20
    a0ac:	0000f65c 	.word	0x0000f65c

0000a0b0 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    a0b0:	b590      	push	{r4, r7, lr}
    a0b2:	b083      	sub	sp, #12
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	6078      	str	r0, [r7, #4]
    a0b8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    a0ba:	687b      	ldr	r3, [r7, #4]
    a0bc:	2b00      	cmp	r3, #0
    a0be:	d002      	beq.n	a0c6 <http_client_init+0x16>
    a0c0:	683b      	ldr	r3, [r7, #0]
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d102      	bne.n	a0cc <http_client_init+0x1c>
		return -EINVAL;
    a0c6:	2316      	movs	r3, #22
    a0c8:	425b      	negs	r3, r3
    a0ca:	e058      	b.n	a17e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    a0cc:	683b      	ldr	r3, [r7, #0]
    a0ce:	691b      	ldr	r3, [r3, #16]
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d102      	bne.n	a0da <http_client_init+0x2a>
		return -EINVAL;
    a0d4:	2316      	movs	r3, #22
    a0d6:	425b      	negs	r3, r3
    a0d8:	e051      	b.n	a17e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    a0da:	683b      	ldr	r3, [r7, #0]
    a0dc:	685b      	ldr	r3, [r3, #4]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d102      	bne.n	a0e8 <http_client_init+0x38>
		return -EINVAL;
    a0e2:	2316      	movs	r3, #22
    a0e4:	425b      	negs	r3, r3
    a0e6:	e04a      	b.n	a17e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    a0e8:	683b      	ldr	r3, [r7, #0]
    a0ea:	695b      	ldr	r3, [r3, #20]
    a0ec:	2b51      	cmp	r3, #81	; 0x51
    a0ee:	d802      	bhi.n	a0f6 <http_client_init+0x46>
		return -EINVAL;
    a0f0:	2316      	movs	r3, #22
    a0f2:	425b      	negs	r3, r3
    a0f4:	e043      	b.n	a17e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	22e8      	movs	r2, #232	; 0xe8
    a0fa:	2100      	movs	r1, #0
    a0fc:	0018      	movs	r0, r3
    a0fe:	4b22      	ldr	r3, [pc, #136]	; (a188 <http_client_init+0xd8>)
    a100:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    a102:	687b      	ldr	r3, [r7, #4]
    a104:	3350      	adds	r3, #80	; 0x50
    a106:	6839      	ldr	r1, [r7, #0]
    a108:	221c      	movs	r2, #28
    a10a:	0018      	movs	r0, r3
    a10c:	4b1f      	ldr	r3, [pc, #124]	; (a18c <http_client_init+0xdc>)
    a10e:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    a114:	2b00      	cmp	r3, #0
    a116:	d115      	bne.n	a144 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    a118:	683b      	ldr	r3, [r7, #0]
    a11a:	691b      	ldr	r3, [r3, #16]
    a11c:	0018      	movs	r0, r3
    a11e:	4b1c      	ldr	r3, [pc, #112]	; (a190 <http_client_init+0xe0>)
    a120:	4798      	blx	r3
    a122:	0003      	movs	r3, r0
    a124:	001a      	movs	r2, r3
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    a12e:	2b00      	cmp	r3, #0
    a130:	d102      	bne.n	a138 <http_client_init+0x88>
			return -ENOMEM;
    a132:	230c      	movs	r3, #12
    a134:	425b      	negs	r3, r3
    a136:	e022      	b.n	a17e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    a138:	687b      	ldr	r3, [r7, #4]
    a13a:	2241      	movs	r2, #65	; 0x41
    a13c:	5c99      	ldrb	r1, [r3, r2]
    a13e:	2004      	movs	r0, #4
    a140:	4301      	orrs	r1, r0
    a142:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    a144:	683b      	ldr	r3, [r7, #0]
    a146:	891b      	ldrh	r3, [r3, #8]
    a148:	2b00      	cmp	r3, #0
    a14a:	d010      	beq.n	a16e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    a14c:	683b      	ldr	r3, [r7, #0]
    a14e:	6858      	ldr	r0, [r3, #4]
    a150:	687a      	ldr	r2, [r7, #4]
    a152:	4910      	ldr	r1, [pc, #64]	; (a194 <http_client_init+0xe4>)
    a154:	2300      	movs	r3, #0
    a156:	4c10      	ldr	r4, [pc, #64]	; (a198 <http_client_init+0xe8>)
    a158:	47a0      	blx	r4
    a15a:	0002      	movs	r2, r0
    a15c:	687b      	ldr	r3, [r7, #4]
    a15e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    a164:	2b00      	cmp	r3, #0
    a166:	da02      	bge.n	a16e <http_client_init+0xbe>
			return -ENOSPC;
    a168:	231c      	movs	r3, #28
    a16a:	425b      	negs	r3, r3
    a16c:	e007      	b.n	a17e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	2200      	movs	r2, #0
    a172:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	22d8      	movs	r2, #216	; 0xd8
    a178:	2100      	movs	r1, #0
    a17a:	5099      	str	r1, [r3, r2]

	return 0;
    a17c:	2300      	movs	r3, #0
}
    a17e:	0018      	movs	r0, r3
    a180:	46bd      	mov	sp, r7
    a182:	b003      	add	sp, #12
    a184:	bd90      	pop	{r4, r7, pc}
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	0000cdc3 	.word	0x0000cdc3
    a18c:	0000cd8d 	.word	0x0000cd8d
    a190:	0000cd65 	.word	0x0000cd65
    a194:	0000a461 	.word	0x0000a461
    a198:	0000bb05 	.word	0x0000bb05

0000a19c <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    a19c:	b580      	push	{r7, lr}
    a19e:	b082      	sub	sp, #8
    a1a0:	af00      	add	r7, sp, #0
    a1a2:	6078      	str	r0, [r7, #4]
    a1a4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d102      	bne.n	a1b2 <http_client_register_callback+0x16>
		return -EINVAL;
    a1ac:	2316      	movs	r3, #22
    a1ae:	425b      	negs	r3, r3
    a1b0:	e003      	b.n	a1ba <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    a1b2:	687b      	ldr	r3, [r7, #4]
    a1b4:	683a      	ldr	r2, [r7, #0]
    a1b6:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    a1b8:	2300      	movs	r3, #0
}
    a1ba:	0018      	movs	r0, r3
    a1bc:	46bd      	mov	sp, r7
    a1be:	b002      	add	sp, #8
    a1c0:	bd80      	pop	{r7, pc}
	...

0000a1c4 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    a1c4:	b580      	push	{r7, lr}
    a1c6:	b082      	sub	sp, #8
    a1c8:	af00      	add	r7, sp, #0
    a1ca:	6078      	str	r0, [r7, #4]
	switch (err) {
    a1cc:	687b      	ldr	r3, [r7, #4]
    a1ce:	330e      	adds	r3, #14
    a1d0:	2b0e      	cmp	r3, #14
    a1d2:	d825      	bhi.n	a220 <_hwerr_to_stderr+0x5c>
    a1d4:	009a      	lsls	r2, r3, #2
    a1d6:	4b18      	ldr	r3, [pc, #96]	; (a238 <_hwerr_to_stderr+0x74>)
    a1d8:	18d3      	adds	r3, r2, r3
    a1da:	681b      	ldr	r3, [r3, #0]
    a1dc:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    a1de:	2305      	movs	r3, #5
    a1e0:	425b      	negs	r3, r3
    a1e2:	e024      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    a1e4:	2302      	movs	r3, #2
    a1e6:	425b      	negs	r3, r3
    a1e8:	e021      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    a1ea:	2370      	movs	r3, #112	; 0x70
    a1ec:	425b      	negs	r3, r3
    a1ee:	e01e      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    a1f0:	230c      	movs	r3, #12
    a1f2:	425b      	negs	r3, r3
    a1f4:	e01b      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    a1f6:	2316      	movs	r3, #22
    a1f8:	425b      	negs	r3, r3
    a1fa:	e018      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    a1fc:	230c      	movs	r3, #12
    a1fe:	425b      	negs	r3, r3
    a200:	e015      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    a202:	2305      	movs	r3, #5
    a204:	425b      	negs	r3, r3
    a206:	e012      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    a208:	2379      	movs	r3, #121	; 0x79
    a20a:	425b      	negs	r3, r3
    a20c:	e00f      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    a20e:	2368      	movs	r3, #104	; 0x68
    a210:	425b      	negs	r3, r3
    a212:	e00c      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    a214:	230b      	movs	r3, #11
    a216:	425b      	negs	r3, r3
    a218:	e009      	b.n	a22e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    a21a:	2310      	movs	r3, #16
    a21c:	425b      	negs	r3, r3
    a21e:	e006      	b.n	a22e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	2b00      	cmp	r3, #0
    a224:	da02      	bge.n	a22c <_hwerr_to_stderr+0x68>
				return -EIO;
    a226:	2305      	movs	r3, #5
    a228:	425b      	negs	r3, r3
    a22a:	e000      	b.n	a22e <_hwerr_to_stderr+0x6a>
			}
			return 0;
    a22c:	2300      	movs	r3, #0
	}
}
    a22e:	0018      	movs	r0, r3
    a230:	46bd      	mov	sp, r7
    a232:	b002      	add	sp, #8
    a234:	bd80      	pop	{r7, pc}
    a236:	46c0      	nop			; (mov r8, r8)
    a238:	0000f798 	.word	0x0000f798

0000a23c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    a23c:	b580      	push	{r7, lr}
    a23e:	b08a      	sub	sp, #40	; 0x28
    a240:	af00      	add	r7, sp, #0
    a242:	603a      	str	r2, [r7, #0]
    a244:	1dfb      	adds	r3, r7, #7
    a246:	1c02      	adds	r2, r0, #0
    a248:	701a      	strb	r2, [r3, #0]
    a24a:	1dbb      	adds	r3, r7, #6
    a24c:	1c0a      	adds	r2, r1, #0
    a24e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    a250:	1dfb      	adds	r3, r7, #7
    a252:	2200      	movs	r2, #0
    a254:	569a      	ldrsb	r2, [r3, r2]
    a256:	4b4b      	ldr	r3, [pc, #300]	; (a384 <http_client_socket_event_handler+0x148>)
    a258:	0092      	lsls	r2, r2, #2
    a25a:	58d3      	ldr	r3, [r2, r3]
    a25c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a260:	2b00      	cmp	r3, #0
    a262:	d100      	bne.n	a266 <http_client_socket_event_handler+0x2a>
    a264:	e08a      	b.n	a37c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    a266:	1dbb      	adds	r3, r7, #6
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	2b06      	cmp	r3, #6
    a26c:	d040      	beq.n	a2f0 <http_client_socket_event_handler+0xb4>
    a26e:	2b07      	cmp	r3, #7
    a270:	d060      	beq.n	a334 <http_client_socket_event_handler+0xf8>
    a272:	2b05      	cmp	r3, #5
    a274:	d000      	beq.n	a278 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    a276:	e082      	b.n	a37e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    a278:	683b      	ldr	r3, [r7, #0]
    a27a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    a27c:	6a3b      	ldr	r3, [r7, #32]
    a27e:	785b      	ldrb	r3, [r3, #1]
    a280:	b25b      	sxtb	r3, r3
    a282:	001a      	movs	r2, r3
    a284:	230c      	movs	r3, #12
    a286:	18fb      	adds	r3, r7, r3
    a288:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    a28a:	6a3b      	ldr	r3, [r7, #32]
    a28c:	785b      	ldrb	r3, [r3, #1]
    a28e:	b25b      	sxtb	r3, r3
    a290:	2b00      	cmp	r3, #0
    a292:	da0c      	bge.n	a2ae <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    a294:	6a3b      	ldr	r3, [r7, #32]
    a296:	785b      	ldrb	r3, [r3, #1]
    a298:	b25b      	sxtb	r3, r3
    a29a:	0018      	movs	r0, r3
    a29c:	4b3a      	ldr	r3, [pc, #232]	; (a388 <http_client_socket_event_handler+0x14c>)
    a29e:	4798      	blx	r3
    a2a0:	0002      	movs	r2, r0
    a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2a4:	0011      	movs	r1, r2
    a2a6:	0018      	movs	r0, r3
    a2a8:	4b38      	ldr	r3, [pc, #224]	; (a38c <http_client_socket_event_handler+0x150>)
    a2aa:	4798      	blx	r3
    	break;
    a2ac:	e067      	b.n	a37e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
    a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a2b2:	2b00      	cmp	r3, #0
    a2b4:	d006      	beq.n	a2c4 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a2ba:	220c      	movs	r2, #12
    a2bc:	18ba      	adds	r2, r7, r2
    a2be:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a2c0:	2100      	movs	r1, #0
    a2c2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2c6:	2203      	movs	r2, #3
    a2c8:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2d4:	2258      	movs	r2, #88	; 0x58
    a2d6:	5a9b      	ldrh	r3, [r3, r2]
    a2d8:	001a      	movs	r2, r3
    a2da:	4b2d      	ldr	r3, [pc, #180]	; (a390 <http_client_socket_event_handler+0x154>)
    a2dc:	4798      	blx	r3
    		_http_client_recv_packet(module);
    a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2e0:	0018      	movs	r0, r3
    a2e2:	4b2c      	ldr	r3, [pc, #176]	; (a394 <http_client_socket_event_handler+0x158>)
    a2e4:	4798      	blx	r3
			_http_client_request(module);
    a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a2e8:	0018      	movs	r0, r3
    a2ea:	4b2b      	ldr	r3, [pc, #172]	; (a398 <http_client_socket_event_handler+0x15c>)
    a2ec:	4798      	blx	r3
    	break;
    a2ee:	e046      	b.n	a37e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    a2f0:	683b      	ldr	r3, [r7, #0]
    a2f2:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
    a2f4:	69fb      	ldr	r3, [r7, #28]
    a2f6:	2204      	movs	r2, #4
    a2f8:	5e9b      	ldrsh	r3, [r3, r2]
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	dd09      	ble.n	a312 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    a2fe:	69fb      	ldr	r3, [r7, #28]
    a300:	2204      	movs	r2, #4
    a302:	5e9b      	ldrsh	r3, [r3, r2]
    a304:	001a      	movs	r2, r3
    a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a308:	0011      	movs	r1, r2
    a30a:	0018      	movs	r0, r3
    a30c:	4b23      	ldr	r3, [pc, #140]	; (a39c <http_client_socket_event_handler+0x160>)
    a30e:	4798      	blx	r3
    a310:	e00b      	b.n	a32a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    a312:	69fb      	ldr	r3, [r7, #28]
    a314:	2204      	movs	r2, #4
    a316:	5e9b      	ldrsh	r3, [r3, r2]
    a318:	0018      	movs	r0, r3
    a31a:	4b1b      	ldr	r3, [pc, #108]	; (a388 <http_client_socket_event_handler+0x14c>)
    a31c:	4798      	blx	r3
    a31e:	0002      	movs	r2, r0
    a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a322:	0011      	movs	r1, r2
    a324:	0018      	movs	r0, r3
    a326:	4b19      	ldr	r3, [pc, #100]	; (a38c <http_client_socket_event_handler+0x150>)
    a328:	4798      	blx	r3
		_http_client_recv_packet(module);
    a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a32c:	0018      	movs	r0, r3
    a32e:	4b19      	ldr	r3, [pc, #100]	; (a394 <http_client_socket_event_handler+0x158>)
    a330:	4798      	blx	r3
		break;
    a332:	e024      	b.n	a37e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
    a334:	231a      	movs	r3, #26
    a336:	18fb      	adds	r3, r7, r3
    a338:	683a      	ldr	r2, [r7, #0]
    a33a:	8812      	ldrh	r2, [r2, #0]
    a33c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    a33e:	231a      	movs	r3, #26
    a340:	18fb      	adds	r3, r7, r3
    a342:	2200      	movs	r2, #0
    a344:	5e9b      	ldrsh	r3, [r3, r2]
    a346:	2b00      	cmp	r3, #0
    a348:	da0d      	bge.n	a366 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    a34a:	231a      	movs	r3, #26
    a34c:	18fb      	adds	r3, r7, r3
    a34e:	2200      	movs	r2, #0
    a350:	5e9b      	ldrsh	r3, [r3, r2]
    a352:	0018      	movs	r0, r3
    a354:	4b0c      	ldr	r3, [pc, #48]	; (a388 <http_client_socket_event_handler+0x14c>)
    a356:	4798      	blx	r3
    a358:	0002      	movs	r2, r0
    a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a35c:	0011      	movs	r1, r2
    a35e:	0018      	movs	r0, r3
    a360:	4b0a      	ldr	r3, [pc, #40]	; (a38c <http_client_socket_event_handler+0x150>)
    a362:	4798      	blx	r3
    a364:	e003      	b.n	a36e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
    a366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a368:	0018      	movs	r0, r3
    a36a:	4b0b      	ldr	r3, [pc, #44]	; (a398 <http_client_socket_event_handler+0x15c>)
    a36c:	4798      	blx	r3
		module->sending = 0;
    a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a370:	2241      	movs	r2, #65	; 0x41
    a372:	5c99      	ldrb	r1, [r3, r2]
    a374:	2001      	movs	r0, #1
    a376:	4381      	bics	r1, r0
    a378:	5499      	strb	r1, [r3, r2]
    	break;
    a37a:	e000      	b.n	a37e <http_client_socket_event_handler+0x142>
		return;
    a37c:	46c0      	nop			; (mov r8, r8)
	}

}
    a37e:	46bd      	mov	sp, r7
    a380:	b00a      	add	sp, #40	; 0x28
    a382:	bd80      	pop	{r7, pc}
    a384:	20000260 	.word	0x20000260
    a388:	0000a1c5 	.word	0x0000a1c5
    a38c:	0000a839 	.word	0x0000a839
    a390:	0000bb95 	.word	0x0000bb95
    a394:	0000b0c5 	.word	0x0000b0c5
    a398:	0000a98d 	.word	0x0000a98d
    a39c:	0000b129 	.word	0x0000b129

0000a3a0 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b088      	sub	sp, #32
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	6078      	str	r0, [r7, #4]
    a3a8:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    a3aa:	2300      	movs	r3, #0
    a3ac:	61fb      	str	r3, [r7, #28]
    a3ae:	e048      	b.n	a442 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    a3b0:	4b27      	ldr	r3, [pc, #156]	; (a450 <http_client_socket_resolve_handler+0xb0>)
    a3b2:	69fa      	ldr	r2, [r7, #28]
    a3b4:	0092      	lsls	r2, r2, #2
    a3b6:	58d3      	ldr	r3, [r2, r3]
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d03f      	beq.n	a43c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    a3bc:	4b24      	ldr	r3, [pc, #144]	; (a450 <http_client_socket_resolve_handler+0xb0>)
    a3be:	69fa      	ldr	r2, [r7, #28]
    a3c0:	0092      	lsls	r2, r2, #2
    a3c2:	58d3      	ldr	r3, [r2, r3]
    a3c4:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    a3c6:	69bb      	ldr	r3, [r7, #24]
    a3c8:	1c5a      	adds	r2, r3, #1
    a3ca:	687b      	ldr	r3, [r7, #4]
    a3cc:	0011      	movs	r1, r2
    a3ce:	0018      	movs	r0, r3
    a3d0:	4b20      	ldr	r3, [pc, #128]	; (a454 <http_client_socket_resolve_handler+0xb4>)
    a3d2:	4798      	blx	r3
    a3d4:	1e03      	subs	r3, r0, #0
    a3d6:	d131      	bne.n	a43c <http_client_socket_resolve_handler+0x9c>
    a3d8:	69bb      	ldr	r3, [r7, #24]
    a3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    a3dc:	2b01      	cmp	r3, #1
    a3de:	d12d      	bne.n	a43c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    a3e0:	683b      	ldr	r3, [r7, #0]
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	d107      	bne.n	a3f6 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    a3e6:	2376      	movs	r3, #118	; 0x76
    a3e8:	425a      	negs	r2, r3
    a3ea:	69bb      	ldr	r3, [r7, #24]
    a3ec:	0011      	movs	r1, r2
    a3ee:	0018      	movs	r0, r3
    a3f0:	4b19      	ldr	r3, [pc, #100]	; (a458 <http_client_socket_resolve_handler+0xb8>)
    a3f2:	4798      	blx	r3
					return;
    a3f4:	e028      	b.n	a448 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    a3f6:	2308      	movs	r3, #8
    a3f8:	18fb      	adds	r3, r7, r3
    a3fa:	2202      	movs	r2, #2
    a3fc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    a3fe:	69bb      	ldr	r3, [r7, #24]
    a400:	2250      	movs	r2, #80	; 0x50
    a402:	5a9b      	ldrh	r3, [r3, r2]
    a404:	021b      	lsls	r3, r3, #8
    a406:	b21a      	sxth	r2, r3
    a408:	69bb      	ldr	r3, [r7, #24]
    a40a:	2150      	movs	r1, #80	; 0x50
    a40c:	5a5b      	ldrh	r3, [r3, r1]
    a40e:	0a1b      	lsrs	r3, r3, #8
    a410:	b29b      	uxth	r3, r3
    a412:	b21b      	sxth	r3, r3
    a414:	4313      	orrs	r3, r2
    a416:	b21b      	sxth	r3, r3
    a418:	b29a      	uxth	r2, r3
    a41a:	2308      	movs	r3, #8
    a41c:	18fb      	adds	r3, r7, r3
    a41e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    a420:	2308      	movs	r3, #8
    a422:	18fb      	adds	r3, r7, r3
    a424:	683a      	ldr	r2, [r7, #0]
    a426:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a428:	69bb      	ldr	r3, [r7, #24]
    a42a:	781b      	ldrb	r3, [r3, #0]
    a42c:	b25b      	sxtb	r3, r3
    a42e:	2208      	movs	r2, #8
    a430:	18b9      	adds	r1, r7, r2
    a432:	2210      	movs	r2, #16
    a434:	0018      	movs	r0, r3
    a436:	4b09      	ldr	r3, [pc, #36]	; (a45c <http_client_socket_resolve_handler+0xbc>)
    a438:	4798      	blx	r3
				return;
    a43a:	e005      	b.n	a448 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    a43c:	69fb      	ldr	r3, [r7, #28]
    a43e:	3301      	adds	r3, #1
    a440:	61fb      	str	r3, [r7, #28]
    a442:	69fb      	ldr	r3, [r7, #28]
    a444:	2b06      	cmp	r3, #6
    a446:	ddb3      	ble.n	a3b0 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
    a448:	46bd      	mov	sp, r7
    a44a:	b008      	add	sp, #32
    a44c:	bd80      	pop	{r7, pc}
    a44e:	46c0      	nop			; (mov r8, r8)
    a450:	20000260 	.word	0x20000260
    a454:	0000d229 	.word	0x0000d229
    a458:	0000a839 	.word	0x0000a839
    a45c:	0000529d 	.word	0x0000529d

0000a460 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    a460:	b580      	push	{r7, lr}
    a462:	b086      	sub	sp, #24
    a464:	af00      	add	r7, sp, #0
    a466:	60f8      	str	r0, [r7, #12]
    a468:	60b9      	str	r1, [r7, #8]
    a46a:	607a      	str	r2, [r7, #4]
    a46c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    a472:	697b      	ldr	r3, [r7, #20]
    a474:	2b00      	cmp	r3, #0
    a476:	d007      	beq.n	a488 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    a478:	233e      	movs	r3, #62	; 0x3e
    a47a:	425a      	negs	r2, r3
    a47c:	697b      	ldr	r3, [r7, #20]
    a47e:	0011      	movs	r1, r2
    a480:	0018      	movs	r0, r3
    a482:	4b03      	ldr	r3, [pc, #12]	; (a490 <http_client_timer_callback+0x30>)
    a484:	4798      	blx	r3
    a486:	e000      	b.n	a48a <http_client_timer_callback+0x2a>
		return;
    a488:	46c0      	nop			; (mov r8, r8)
}
    a48a:	46bd      	mov	sp, r7
    a48c:	b006      	add	sp, #24
    a48e:	bd80      	pop	{r7, pc}
    a490:	0000a839 	.word	0x0000a839

0000a494 <_is_ip>:

static int _is_ip(const char *host)
{
    a494:	b580      	push	{r7, lr}
    a496:	b084      	sub	sp, #16
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    a49c:	2300      	movs	r3, #0
    a49e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    a4a0:	e03a      	b.n	a518 <_is_ip+0x84>
		ch = *host++;
    a4a2:	687b      	ldr	r3, [r7, #4]
    a4a4:	1c5a      	adds	r2, r3, #1
    a4a6:	607a      	str	r2, [r7, #4]
    a4a8:	220b      	movs	r2, #11
    a4aa:	18ba      	adds	r2, r7, r2
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a4b0:	230b      	movs	r3, #11
    a4b2:	18fb      	adds	r3, r7, r3
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	2b60      	cmp	r3, #96	; 0x60
    a4b8:	d904      	bls.n	a4c4 <_is_ip+0x30>
    a4ba:	230b      	movs	r3, #11
    a4bc:	18fb      	adds	r3, r7, r3
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	2b66      	cmp	r3, #102	; 0x66
    a4c2:	d913      	bls.n	a4ec <_is_ip+0x58>
    a4c4:	230b      	movs	r3, #11
    a4c6:	18fb      	adds	r3, r7, r3
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	2b40      	cmp	r3, #64	; 0x40
    a4cc:	d904      	bls.n	a4d8 <_is_ip+0x44>
    a4ce:	230b      	movs	r3, #11
    a4d0:	18fb      	adds	r3, r7, r3
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	2b46      	cmp	r3, #70	; 0x46
    a4d6:	d909      	bls.n	a4ec <_is_ip+0x58>
    a4d8:	230b      	movs	r3, #11
    a4da:	18fb      	adds	r3, r7, r3
    a4dc:	781b      	ldrb	r3, [r3, #0]
    a4de:	2b3a      	cmp	r3, #58	; 0x3a
    a4e0:	d004      	beq.n	a4ec <_is_ip+0x58>
    a4e2:	230b      	movs	r3, #11
    a4e4:	18fb      	adds	r3, r7, r3
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	2b2f      	cmp	r3, #47	; 0x2f
    a4ea:	d102      	bne.n	a4f2 <_is_ip+0x5e>
			isv6 = 1;
    a4ec:	2301      	movs	r3, #1
    a4ee:	60fb      	str	r3, [r7, #12]
    a4f0:	e012      	b.n	a518 <_is_ip+0x84>
		} else if (ch == '.') {
    a4f2:	230b      	movs	r3, #11
    a4f4:	18fb      	adds	r3, r7, r3
    a4f6:	781b      	ldrb	r3, [r3, #0]
    a4f8:	2b2e      	cmp	r3, #46	; 0x2e
    a4fa:	d104      	bne.n	a506 <_is_ip+0x72>
			if (isv6) {
    a4fc:	68fb      	ldr	r3, [r7, #12]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d00a      	beq.n	a518 <_is_ip+0x84>
				return 0;
    a502:	2300      	movs	r3, #0
    a504:	e00d      	b.n	a522 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    a506:	230b      	movs	r3, #11
    a508:	18fb      	adds	r3, r7, r3
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	2230      	movs	r2, #48	; 0x30
    a50e:	4013      	ands	r3, r2
    a510:	2b30      	cmp	r3, #48	; 0x30
    a512:	d001      	beq.n	a518 <_is_ip+0x84>
			return 0;
    a514:	2300      	movs	r3, #0
    a516:	e004      	b.n	a522 <_is_ip+0x8e>
	while (*host != '\0') {
    a518:	687b      	ldr	r3, [r7, #4]
    a51a:	781b      	ldrb	r3, [r3, #0]
    a51c:	2b00      	cmp	r3, #0
    a51e:	d1c0      	bne.n	a4a2 <_is_ip+0xe>
		}
	}
	return 1;
    a520:	2301      	movs	r3, #1
}
    a522:	0018      	movs	r0, r3
    a524:	46bd      	mov	sp, r7
    a526:	b004      	add	sp, #16
    a528:	bd80      	pop	{r7, pc}
	...

0000a52c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    a52c:	b5b0      	push	{r4, r5, r7, lr}
    a52e:	b08e      	sub	sp, #56	; 0x38
    a530:	af00      	add	r7, sp, #0
    a532:	60f8      	str	r0, [r7, #12]
    a534:	60b9      	str	r1, [r7, #8]
    a536:	603b      	str	r3, [r7, #0]
    a538:	1dfb      	adds	r3, r7, #7
    a53a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    a53c:	2337      	movs	r3, #55	; 0x37
    a53e:	18fb      	adds	r3, r7, r3
    a540:	2200      	movs	r2, #0
    a542:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    a544:	2300      	movs	r3, #0
    a546:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    a548:	2300      	movs	r3, #0
    a54a:	633b      	str	r3, [r7, #48]	; 0x30
    a54c:	2300      	movs	r3, #0
    a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
    a550:	2300      	movs	r3, #0
    a552:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    a554:	68fb      	ldr	r3, [r7, #12]
    a556:	2b00      	cmp	r3, #0
    a558:	d102      	bne.n	a560 <http_client_send_request+0x34>
		return -EINVAL;
    a55a:	2316      	movs	r3, #22
    a55c:	425b      	negs	r3, r3
    a55e:	e145      	b.n	a7ec <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    a560:	68fb      	ldr	r3, [r7, #12]
    a562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    a564:	2b02      	cmp	r3, #2
    a566:	d902      	bls.n	a56e <http_client_send_request+0x42>
		return -EBUSY;
    a568:	2310      	movs	r3, #16
    a56a:	425b      	negs	r3, r3
    a56c:	e13e      	b.n	a7ec <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    a56e:	49a1      	ldr	r1, [pc, #644]	; (a7f4 <http_client_send_request+0x2c8>)
    a570:	68bb      	ldr	r3, [r7, #8]
    a572:	2207      	movs	r2, #7
    a574:	0018      	movs	r0, r3
    a576:	4ba0      	ldr	r3, [pc, #640]	; (a7f8 <http_client_send_request+0x2cc>)
    a578:	4798      	blx	r3
    a57a:	1e03      	subs	r3, r0, #0
    a57c:	d102      	bne.n	a584 <http_client_send_request+0x58>
		i = 7;
    a57e:	2307      	movs	r3, #7
    a580:	633b      	str	r3, [r7, #48]	; 0x30
    a582:	e009      	b.n	a598 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    a584:	499d      	ldr	r1, [pc, #628]	; (a7fc <http_client_send_request+0x2d0>)
    a586:	68bb      	ldr	r3, [r7, #8]
    a588:	2208      	movs	r2, #8
    a58a:	0018      	movs	r0, r3
    a58c:	4b9a      	ldr	r3, [pc, #616]	; (a7f8 <http_client_send_request+0x2cc>)
    a58e:	4798      	blx	r3
    a590:	1e03      	subs	r3, r0, #0
    a592:	d101      	bne.n	a598 <http_client_send_request+0x6c>
		i = 8;
    a594:	2308      	movs	r3, #8
    a596:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    a598:	68fb      	ldr	r3, [r7, #12]
    a59a:	1c5c      	adds	r4, r3, #1
    a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a59e:	68ba      	ldr	r2, [r7, #8]
    a5a0:	18d5      	adds	r5, r2, r3
    a5a2:	68fb      	ldr	r3, [r7, #12]
    a5a4:	3301      	adds	r3, #1
    a5a6:	0018      	movs	r0, r3
    a5a8:	4b95      	ldr	r3, [pc, #596]	; (a800 <http_client_send_request+0x2d4>)
    a5aa:	4798      	blx	r3
    a5ac:	0003      	movs	r3, r0
    a5ae:	001a      	movs	r2, r3
    a5b0:	0029      	movs	r1, r5
    a5b2:	0020      	movs	r0, r4
    a5b4:	4b90      	ldr	r3, [pc, #576]	; (a7f8 <http_client_send_request+0x2cc>)
    a5b6:	4798      	blx	r3
    a5b8:	0003      	movs	r3, r0
    a5ba:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a5bc:	e00d      	b.n	a5da <http_client_send_request+0xae>
		module->host[j++] = url[i];
    a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a5c0:	1c5a      	adds	r2, r3, #1
    a5c2:	62fa      	str	r2, [r7, #44]	; 0x2c
    a5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    a5c6:	68b9      	ldr	r1, [r7, #8]
    a5c8:	188a      	adds	r2, r1, r2
    a5ca:	7811      	ldrb	r1, [r2, #0]
    a5cc:	68fa      	ldr	r2, [r7, #12]
    a5ce:	18d3      	adds	r3, r2, r3
    a5d0:	1c0a      	adds	r2, r1, #0
    a5d2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a5d6:	3301      	adds	r3, #1
    a5d8:	633b      	str	r3, [r7, #48]	; 0x30
    a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a5dc:	68ba      	ldr	r2, [r7, #8]
    a5de:	18d3      	adds	r3, r2, r3
    a5e0:	781b      	ldrb	r3, [r3, #0]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d005      	beq.n	a5f2 <http_client_send_request+0xc6>
    a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a5e8:	68ba      	ldr	r2, [r7, #8]
    a5ea:	18d3      	adds	r3, r2, r3
    a5ec:	781b      	ldrb	r3, [r3, #0]
    a5ee:	2b2f      	cmp	r3, #47	; 0x2f
    a5f0:	d1e5      	bne.n	a5be <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
    a5f2:	68fa      	ldr	r2, [r7, #12]
    a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a5f6:	18d3      	adds	r3, r2, r3
    a5f8:	3301      	adds	r3, #1
    a5fa:	2200      	movs	r2, #0
    a5fc:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a600:	68ba      	ldr	r2, [r7, #8]
    a602:	18d3      	adds	r3, r2, r3
    a604:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    a606:	68fb      	ldr	r3, [r7, #12]
    a608:	3301      	adds	r3, #1
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	2b00      	cmp	r3, #0
    a60e:	d102      	bne.n	a616 <http_client_send_request+0xea>
		return -EINVAL;
    a610:	2316      	movs	r3, #22
    a612:	425b      	negs	r3, r3
    a614:	e0ea      	b.n	a7ec <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a618:	0018      	movs	r0, r3
    a61a:	4b79      	ldr	r3, [pc, #484]	; (a800 <http_client_send_request+0x2d4>)
    a61c:	4798      	blx	r3
    a61e:	0003      	movs	r3, r0
    a620:	2b3f      	cmp	r3, #63	; 0x3f
    a622:	d902      	bls.n	a62a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    a624:	235b      	movs	r3, #91	; 0x5b
    a626:	425b      	negs	r3, r3
    a628:	e0e0      	b.n	a7ec <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    a62a:	68fb      	ldr	r3, [r7, #12]
    a62c:	22d4      	movs	r2, #212	; 0xd4
    a62e:	589b      	ldr	r3, [r3, r2]
    a630:	2b00      	cmp	r3, #0
    a632:	d005      	beq.n	a640 <http_client_send_request+0x114>
		free(module->req.ext_header);
    a634:	68fb      	ldr	r3, [r7, #12]
    a636:	22d4      	movs	r2, #212	; 0xd4
    a638:	589b      	ldr	r3, [r3, r2]
    a63a:	0018      	movs	r0, r3
    a63c:	4b71      	ldr	r3, [pc, #452]	; (a804 <http_client_send_request+0x2d8>)
    a63e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    a640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a642:	2b00      	cmp	r3, #0
    a644:	d010      	beq.n	a668 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    a646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a648:	0018      	movs	r0, r3
    a64a:	4b6f      	ldr	r3, [pc, #444]	; (a808 <http_client_send_request+0x2dc>)
    a64c:	4798      	blx	r3
    a64e:	0003      	movs	r3, r0
    a650:	0019      	movs	r1, r3
    a652:	68fb      	ldr	r3, [r7, #12]
    a654:	22d4      	movs	r2, #212	; 0xd4
    a656:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    a658:	68fb      	ldr	r3, [r7, #12]
    a65a:	22d4      	movs	r2, #212	; 0xd4
    a65c:	589b      	ldr	r3, [r3, r2]
    a65e:	2b00      	cmp	r3, #0
    a660:	d106      	bne.n	a670 <http_client_send_request+0x144>
			return -ENOMEM;
    a662:	230c      	movs	r3, #12
    a664:	425b      	negs	r3, r3
    a666:	e0c1      	b.n	a7ec <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    a668:	68fb      	ldr	r3, [r7, #12]
    a66a:	22d4      	movs	r2, #212	; 0xd4
    a66c:	2100      	movs	r1, #0
    a66e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    a670:	68fb      	ldr	r3, [r7, #12]
    a672:	2241      	movs	r2, #65	; 0x41
    a674:	5c99      	ldrb	r1, [r3, r2]
    a676:	2001      	movs	r0, #1
    a678:	4381      	bics	r1, r0
    a67a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    a67c:	68fb      	ldr	r3, [r7, #12]
    a67e:	2200      	movs	r2, #0
    a680:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a684:	781b      	ldrb	r3, [r3, #0]
    a686:	2b2f      	cmp	r3, #47	; 0x2f
    a688:	d107      	bne.n	a69a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    a68a:	68fb      	ldr	r3, [r7, #12]
    a68c:	3370      	adds	r3, #112	; 0x70
    a68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a690:	0011      	movs	r1, r2
    a692:	0018      	movs	r0, r3
    a694:	4b5d      	ldr	r3, [pc, #372]	; (a80c <http_client_send_request+0x2e0>)
    a696:	4798      	blx	r3
    a698:	e00f      	b.n	a6ba <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    a69a:	68fb      	ldr	r3, [r7, #12]
    a69c:	2270      	movs	r2, #112	; 0x70
    a69e:	212f      	movs	r1, #47	; 0x2f
    a6a0:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a6a4:	781b      	ldrb	r3, [r3, #0]
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d007      	beq.n	a6ba <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    a6aa:	68fb      	ldr	r3, [r7, #12]
    a6ac:	3370      	adds	r3, #112	; 0x70
    a6ae:	3301      	adds	r3, #1
    a6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a6b2:	0011      	movs	r1, r2
    a6b4:	0018      	movs	r0, r3
    a6b6:	4b55      	ldr	r3, [pc, #340]	; (a80c <http_client_send_request+0x2e0>)
    a6b8:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    a6ba:	683b      	ldr	r3, [r7, #0]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d007      	beq.n	a6d0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    a6c0:	68fb      	ldr	r3, [r7, #12]
    a6c2:	33b0      	adds	r3, #176	; 0xb0
    a6c4:	6839      	ldr	r1, [r7, #0]
    a6c6:	2218      	movs	r2, #24
    a6c8:	0018      	movs	r0, r3
    a6ca:	4b51      	ldr	r3, [pc, #324]	; (a810 <http_client_send_request+0x2e4>)
    a6cc:	4798      	blx	r3
    a6ce:	e006      	b.n	a6de <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    a6d0:	68fb      	ldr	r3, [r7, #12]
    a6d2:	33b0      	adds	r3, #176	; 0xb0
    a6d4:	2218      	movs	r2, #24
    a6d6:	2100      	movs	r1, #0
    a6d8:	0018      	movs	r0, r3
    a6da:	4b4e      	ldr	r3, [pc, #312]	; (a814 <http_client_send_request+0x2e8>)
    a6dc:	4798      	blx	r3
	}

	module->req.method = method;
    a6de:	68fb      	ldr	r3, [r7, #12]
    a6e0:	1dfa      	adds	r2, r7, #7
    a6e2:	21c8      	movs	r1, #200	; 0xc8
    a6e4:	7812      	ldrb	r2, [r2, #0]
    a6e6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    a6e8:	68fb      	ldr	r3, [r7, #12]
    a6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    a6ec:	2b01      	cmp	r3, #1
    a6ee:	d003      	beq.n	a6f8 <http_client_send_request+0x1cc>
    a6f0:	d316      	bcc.n	a720 <http_client_send_request+0x1f4>
    a6f2:	2b02      	cmp	r3, #2
    a6f4:	d004      	beq.n	a700 <http_client_send_request+0x1d4>
    a6f6:	e074      	b.n	a7e2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d100      	bne.n	a700 <http_client_send_request+0x1d4>
    a6fe:	e073      	b.n	a7e8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a702:	2b00      	cmp	r3, #0
    a704:	d107      	bne.n	a716 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    a706:	68fb      	ldr	r3, [r7, #12]
    a708:	2203      	movs	r2, #3
    a70a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    a70c:	68fb      	ldr	r3, [r7, #12]
    a70e:	0018      	movs	r0, r3
    a710:	4b41      	ldr	r3, [pc, #260]	; (a818 <http_client_send_request+0x2ec>)
    a712:	4798      	blx	r3
			break;
    a714:	e069      	b.n	a7ea <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    a716:	68fb      	ldr	r3, [r7, #12]
    a718:	2100      	movs	r1, #0
    a71a:	0018      	movs	r0, r3
    a71c:	4b3f      	ldr	r3, [pc, #252]	; (a81c <http_client_send_request+0x2f0>)
    a71e:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    a720:	68fb      	ldr	r3, [r7, #12]
    a722:	2252      	movs	r2, #82	; 0x52
    a724:	5c9b      	ldrb	r3, [r3, r2]
    a726:	2b00      	cmp	r3, #0
    a728:	d007      	beq.n	a73a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    a72a:	2337      	movs	r3, #55	; 0x37
    a72c:	18fb      	adds	r3, r7, r3
    a72e:	2237      	movs	r2, #55	; 0x37
    a730:	18ba      	adds	r2, r7, r2
    a732:	7812      	ldrb	r2, [r2, #0]
    a734:	2101      	movs	r1, #1
    a736:	430a      	orrs	r2, r1
    a738:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    a73a:	2337      	movs	r3, #55	; 0x37
    a73c:	18fb      	adds	r3, r7, r3
    a73e:	781b      	ldrb	r3, [r3, #0]
    a740:	001a      	movs	r2, r3
    a742:	2101      	movs	r1, #1
    a744:	2002      	movs	r0, #2
    a746:	4b36      	ldr	r3, [pc, #216]	; (a820 <http_client_send_request+0x2f4>)
    a748:	4798      	blx	r3
    a74a:	0003      	movs	r3, r0
    a74c:	001a      	movs	r2, r3
    a74e:	68fb      	ldr	r3, [r7, #12]
    a750:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    a752:	68fb      	ldr	r3, [r7, #12]
    a754:	781b      	ldrb	r3, [r3, #0]
    a756:	b25b      	sxtb	r3, r3
    a758:	2b00      	cmp	r3, #0
    a75a:	db3f      	blt.n	a7dc <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    a75c:	68fb      	ldr	r3, [r7, #12]
    a75e:	781b      	ldrb	r3, [r3, #0]
    a760:	b25b      	sxtb	r3, r3
    a762:	001a      	movs	r2, r3
    a764:	4b2f      	ldr	r3, [pc, #188]	; (a824 <http_client_send_request+0x2f8>)
    a766:	0092      	lsls	r2, r2, #2
    a768:	68f9      	ldr	r1, [r7, #12]
    a76a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    a76c:	68fb      	ldr	r3, [r7, #12]
    a76e:	3301      	adds	r3, #1
    a770:	0018      	movs	r0, r3
    a772:	4b2d      	ldr	r3, [pc, #180]	; (a828 <http_client_send_request+0x2fc>)
    a774:	4798      	blx	r3
    a776:	1e03      	subs	r3, r0, #0
    a778:	d027      	beq.n	a7ca <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    a77a:	2314      	movs	r3, #20
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	2202      	movs	r2, #2
    a780:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    a782:	68fb      	ldr	r3, [r7, #12]
    a784:	2250      	movs	r2, #80	; 0x50
    a786:	5a9b      	ldrh	r3, [r3, r2]
    a788:	021b      	lsls	r3, r3, #8
    a78a:	b21a      	sxth	r2, r3
    a78c:	68fb      	ldr	r3, [r7, #12]
    a78e:	2150      	movs	r1, #80	; 0x50
    a790:	5a5b      	ldrh	r3, [r3, r1]
    a792:	0a1b      	lsrs	r3, r3, #8
    a794:	b29b      	uxth	r3, r3
    a796:	b21b      	sxth	r3, r3
    a798:	4313      	orrs	r3, r2
    a79a:	b21b      	sxth	r3, r3
    a79c:	b29a      	uxth	r2, r3
    a79e:	2314      	movs	r3, #20
    a7a0:	18fb      	adds	r3, r7, r3
    a7a2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a7a4:	68fb      	ldr	r3, [r7, #12]
    a7a6:	3301      	adds	r3, #1
    a7a8:	0018      	movs	r0, r3
    a7aa:	4b20      	ldr	r3, [pc, #128]	; (a82c <http_client_send_request+0x300>)
    a7ac:	4798      	blx	r3
    a7ae:	0002      	movs	r2, r0
    a7b0:	2314      	movs	r3, #20
    a7b2:	18fb      	adds	r3, r7, r3
    a7b4:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a7b6:	68fb      	ldr	r3, [r7, #12]
    a7b8:	781b      	ldrb	r3, [r3, #0]
    a7ba:	b25b      	sxtb	r3, r3
    a7bc:	2214      	movs	r2, #20
    a7be:	18b9      	adds	r1, r7, r2
    a7c0:	2210      	movs	r2, #16
    a7c2:	0018      	movs	r0, r3
    a7c4:	4b1a      	ldr	r3, [pc, #104]	; (a830 <http_client_send_request+0x304>)
    a7c6:	4798      	blx	r3
    a7c8:	e004      	b.n	a7d4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    a7ca:	68fb      	ldr	r3, [r7, #12]
    a7cc:	3301      	adds	r3, #1
    a7ce:	0018      	movs	r0, r3
    a7d0:	4b18      	ldr	r3, [pc, #96]	; (a834 <http_client_send_request+0x308>)
    a7d2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a7d4:	68fb      	ldr	r3, [r7, #12]
    a7d6:	2201      	movs	r2, #1
    a7d8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    a7da:	e006      	b.n	a7ea <http_client_send_request+0x2be>
			return -ENOSPC;
    a7dc:	231c      	movs	r3, #28
    a7de:	425b      	negs	r3, r3
    a7e0:	e004      	b.n	a7ec <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    a7e2:	230b      	movs	r3, #11
    a7e4:	425b      	negs	r3, r3
    a7e6:	e001      	b.n	a7ec <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
    a7e8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
    a7ea:	2300      	movs	r3, #0
}
    a7ec:	0018      	movs	r0, r3
    a7ee:	46bd      	mov	sp, r7
    a7f0:	b00e      	add	sp, #56	; 0x38
    a7f2:	bdb0      	pop	{r4, r5, r7, pc}
    a7f4:	0000f668 	.word	0x0000f668
    a7f8:	0000d295 	.word	0x0000d295
    a7fc:	0000f670 	.word	0x0000f670
    a800:	0000d287 	.word	0x0000d287
    a804:	0000cd79 	.word	0x0000cd79
    a808:	0000d24d 	.word	0x0000d24d
    a80c:	0000d23d 	.word	0x0000d23d
    a810:	0000cd8d 	.word	0x0000cd8d
    a814:	0000cdc3 	.word	0x0000cdc3
    a818:	0000a98d 	.word	0x0000a98d
    a81c:	0000a839 	.word	0x0000a839
    a820:	0000508d 	.word	0x0000508d
    a824:	20000260 	.word	0x20000260
    a828:	0000a495 	.word	0x0000a495
    a82c:	000057d1 	.word	0x000057d1
    a830:	0000529d 	.word	0x0000529d
    a834:	000058d9 	.word	0x000058d9

0000a838 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    a838:	b580      	push	{r7, lr}
    a83a:	b086      	sub	sp, #24
    a83c:	af00      	add	r7, sp, #0
    a83e:	6078      	str	r0, [r7, #4]
    a840:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    a842:	687b      	ldr	r3, [r7, #4]
    a844:	22c0      	movs	r2, #192	; 0xc0
    a846:	589b      	ldr	r3, [r3, r2]
    a848:	2b00      	cmp	r3, #0
    a84a:	d007      	beq.n	a85c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	22c0      	movs	r2, #192	; 0xc0
    a850:	589b      	ldr	r3, [r3, r2]
    a852:	687a      	ldr	r2, [r7, #4]
    a854:	21c4      	movs	r1, #196	; 0xc4
    a856:	5852      	ldr	r2, [r2, r1]
    a858:	0010      	movs	r0, r2
    a85a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    a85c:	687b      	ldr	r3, [r7, #4]
    a85e:	33b0      	adds	r3, #176	; 0xb0
    a860:	2218      	movs	r2, #24
    a862:	2100      	movs	r1, #0
    a864:	0018      	movs	r0, r3
    a866:	4b24      	ldr	r3, [pc, #144]	; (a8f8 <_http_client_clear_conn+0xc0>)
    a868:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    a86a:	687b      	ldr	r3, [r7, #4]
    a86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    a86e:	2b00      	cmp	r3, #0
    a870:	d005      	beq.n	a87e <_http_client_clear_conn+0x46>
		close(module->sock);
    a872:	687b      	ldr	r3, [r7, #4]
    a874:	781b      	ldrb	r3, [r3, #0]
    a876:	b25b      	sxtb	r3, r3
    a878:	0018      	movs	r0, r3
    a87a:	4b20      	ldr	r3, [pc, #128]	; (a8fc <_http_client_clear_conn+0xc4>)
    a87c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	b25b      	sxtb	r3, r3
    a884:	001a      	movs	r2, r3
    a886:	4b1e      	ldr	r3, [pc, #120]	; (a900 <_http_client_clear_conn+0xc8>)
    a888:	0092      	lsls	r2, r2, #2
    a88a:	2100      	movs	r1, #0
    a88c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	336c      	adds	r3, #108	; 0x6c
    a892:	226c      	movs	r2, #108	; 0x6c
    a894:	2100      	movs	r1, #0
    a896:	0018      	movs	r0, r3
    a898:	4b17      	ldr	r3, [pc, #92]	; (a8f8 <_http_client_clear_conn+0xc0>)
    a89a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	33d8      	adds	r3, #216	; 0xd8
    a8a0:	2210      	movs	r2, #16
    a8a2:	2100      	movs	r1, #0
    a8a4:	0018      	movs	r0, r3
    a8a6:	4b14      	ldr	r3, [pc, #80]	; (a8f8 <_http_client_clear_conn+0xc0>)
    a8a8:	4798      	blx	r3
	module->req.state = STATE_INIT;
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	2200      	movs	r2, #0
    a8ae:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    a8b0:	687b      	ldr	r3, [r7, #4]
    a8b2:	22d8      	movs	r2, #216	; 0xd8
    a8b4:	2100      	movs	r1, #0
    a8b6:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2241      	movs	r2, #65	; 0x41
    a8bc:	5c99      	ldrb	r1, [r3, r2]
    a8be:	2001      	movs	r0, #1
    a8c0:	4381      	bics	r1, r0
    a8c2:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	2241      	movs	r2, #65	; 0x41
    a8c8:	5c99      	ldrb	r1, [r3, r2]
    a8ca:	2002      	movs	r0, #2
    a8cc:	4381      	bics	r1, r0
    a8ce:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    a8d0:	230c      	movs	r3, #12
    a8d2:	18fb      	adds	r3, r7, r3
    a8d4:	683a      	ldr	r2, [r7, #0]
    a8d6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    a8d8:	687b      	ldr	r3, [r7, #4]
    a8da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d006      	beq.n	a8ee <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    a8e0:	687b      	ldr	r3, [r7, #4]
    a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a8e4:	220c      	movs	r2, #12
    a8e6:	18ba      	adds	r2, r7, r2
    a8e8:	6878      	ldr	r0, [r7, #4]
    a8ea:	2104      	movs	r1, #4
    a8ec:	4798      	blx	r3
	}
}
    a8ee:	46c0      	nop			; (mov r8, r8)
    a8f0:	46bd      	mov	sp, r7
    a8f2:	b006      	add	sp, #24
    a8f4:	bd80      	pop	{r7, pc}
    a8f6:	46c0      	nop			; (mov r8, r8)
    a8f8:	0000cdc3 	.word	0x0000cdc3
    a8fc:	00005695 	.word	0x00005695
    a900:	20000260 	.word	0x20000260

0000a904 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    a904:	b590      	push	{r4, r7, lr}
    a906:	b087      	sub	sp, #28
    a908:	af00      	add	r7, sp, #0
    a90a:	60f8      	str	r0, [r7, #12]
    a90c:	60b9      	str	r1, [r7, #8]
    a90e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    a910:	68fb      	ldr	r3, [r7, #12]
    a912:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    a914:	697b      	ldr	r3, [r7, #20]
    a916:	2241      	movs	r2, #65	; 0x41
    a918:	5c99      	ldrb	r1, [r3, r2]
    a91a:	2001      	movs	r0, #1
    a91c:	4301      	orrs	r1, r0
    a91e:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    a920:	697b      	ldr	r3, [r7, #20]
    a922:	2000      	movs	r0, #0
    a924:	5618      	ldrsb	r0, [r3, r0]
    a926:	687b      	ldr	r3, [r7, #4]
    a928:	b29a      	uxth	r2, r3
    a92a:	68b9      	ldr	r1, [r7, #8]
    a92c:	2300      	movs	r3, #0
    a92e:	4c14      	ldr	r4, [pc, #80]	; (a980 <_http_client_send_wait+0x7c>)
    a930:	47a0      	blx	r4
    a932:	0003      	movs	r3, r0
    a934:	613b      	str	r3, [r7, #16]
    a936:	693b      	ldr	r3, [r7, #16]
    a938:	2b00      	cmp	r3, #0
    a93a:	da0f      	bge.n	a95c <_http_client_send_wait+0x58>
		module->sending = 0;
    a93c:	697b      	ldr	r3, [r7, #20]
    a93e:	2241      	movs	r2, #65	; 0x41
    a940:	5c99      	ldrb	r1, [r3, r2]
    a942:	2001      	movs	r0, #1
    a944:	4381      	bics	r1, r0
    a946:	5499      	strb	r1, [r3, r2]
		return result;
    a948:	693b      	ldr	r3, [r7, #16]
    a94a:	e014      	b.n	a976 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    a94c:	2000      	movs	r0, #0
    a94e:	4b0d      	ldr	r3, [pc, #52]	; (a984 <_http_client_send_wait+0x80>)
    a950:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    a952:	697b      	ldr	r3, [r7, #20]
    a954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a956:	0018      	movs	r0, r3
    a958:	4b0b      	ldr	r3, [pc, #44]	; (a988 <_http_client_send_wait+0x84>)
    a95a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    a95c:	697b      	ldr	r3, [r7, #20]
    a95e:	2241      	movs	r2, #65	; 0x41
    a960:	5c9b      	ldrb	r3, [r3, r2]
    a962:	2201      	movs	r2, #1
    a964:	4013      	ands	r3, r2
    a966:	b2db      	uxtb	r3, r3
    a968:	2b00      	cmp	r3, #0
    a96a:	d003      	beq.n	a974 <_http_client_send_wait+0x70>
    a96c:	697b      	ldr	r3, [r7, #20]
    a96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    a970:	2b02      	cmp	r3, #2
    a972:	d8eb      	bhi.n	a94c <_http_client_send_wait+0x48>
	}

	return 0;
    a974:	2300      	movs	r3, #0
}
    a976:	0018      	movs	r0, r3
    a978:	46bd      	mov	sp, r7
    a97a:	b007      	add	sp, #28
    a97c:	bd90      	pop	{r4, r7, pc}
    a97e:	46c0      	nop			; (mov r8, r8)
    a980:	000053b1 	.word	0x000053b1
    a984:	00001ffd 	.word	0x00001ffd
    a988:	0000bc11 	.word	0x0000bc11

0000a98c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    a98c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a98e:	46c6      	mov	lr, r8
    a990:	b500      	push	{lr}
    a992:	b0a0      	sub	sp, #128	; 0x80
    a994:	af02      	add	r7, sp, #8
    a996:	61f8      	str	r0, [r7, #28]
    a998:	4668      	mov	r0, sp
    a99a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    a99c:	2318      	movs	r3, #24
    a99e:	2218      	movs	r2, #24
    a9a0:	18ba      	adds	r2, r7, r2
    a9a2:	18d0      	adds	r0, r2, r3
    a9a4:	4bbd      	ldr	r3, [pc, #756]	; (ac9c <_http_client_request+0x310>)
    a9a6:	469c      	mov	ip, r3
    a9a8:	4663      	mov	r3, ip
    a9aa:	cb16      	ldmia	r3!, {r1, r2, r4}
    a9ac:	c016      	stmia	r0!, {r1, r2, r4}
    a9ae:	469c      	mov	ip, r3
    a9b0:	4663      	mov	r3, ip
    a9b2:	681b      	ldr	r3, [r3, #0]
    a9b4:	469c      	mov	ip, r3
    a9b6:	4663      	mov	r3, ip
    a9b8:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    a9ba:	69f8      	ldr	r0, [r7, #28]
    a9bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    a9be:	4684      	mov	ip, r0
    a9c0:	2301      	movs	r3, #1
    a9c2:	425b      	negs	r3, r3
    a9c4:	4698      	mov	r8, r3
    a9c6:	44c4      	add	ip, r8
    a9c8:	4663      	mov	r3, ip
    a9ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    a9cc:	6038      	str	r0, [r7, #0]
    a9ce:	2300      	movs	r3, #0
    a9d0:	607b      	str	r3, [r7, #4]
    a9d2:	6839      	ldr	r1, [r7, #0]
    a9d4:	687a      	ldr	r2, [r7, #4]
    a9d6:	000b      	movs	r3, r1
    a9d8:	0f5b      	lsrs	r3, r3, #29
    a9da:	469c      	mov	ip, r3
    a9dc:	0013      	movs	r3, r2
    a9de:	00db      	lsls	r3, r3, #3
    a9e0:	617b      	str	r3, [r7, #20]
    a9e2:	4663      	mov	r3, ip
    a9e4:	697c      	ldr	r4, [r7, #20]
    a9e6:	431c      	orrs	r4, r3
    a9e8:	617c      	str	r4, [r7, #20]
    a9ea:	000b      	movs	r3, r1
    a9ec:	00db      	lsls	r3, r3, #3
    a9ee:	613b      	str	r3, [r7, #16]
    a9f0:	0005      	movs	r5, r0
    a9f2:	2200      	movs	r2, #0
    a9f4:	0016      	movs	r6, r2
    a9f6:	0f6a      	lsrs	r2, r5, #29
    a9f8:	00f3      	lsls	r3, r6, #3
    a9fa:	60fb      	str	r3, [r7, #12]
    a9fc:	68fb      	ldr	r3, [r7, #12]
    a9fe:	4313      	orrs	r3, r2
    aa00:	60fb      	str	r3, [r7, #12]
    aa02:	00eb      	lsls	r3, r5, #3
    aa04:	60bb      	str	r3, [r7, #8]
    aa06:	1dc3      	adds	r3, r0, #7
    aa08:	08db      	lsrs	r3, r3, #3
    aa0a:	00db      	lsls	r3, r3, #3
    aa0c:	466a      	mov	r2, sp
    aa0e:	1ad3      	subs	r3, r2, r3
    aa10:	469d      	mov	sp, r3
    aa12:	ab02      	add	r3, sp, #8
    aa14:	3300      	adds	r3, #0
    aa16:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    aa18:	69fb      	ldr	r3, [r7, #28]
    aa1a:	2b00      	cmp	r3, #0
    aa1c:	d100      	bne.n	aa20 <_http_client_request+0x94>
    aa1e:	e346      	b.n	b0ae <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
    aa20:	69fb      	ldr	r3, [r7, #28]
    aa22:	2241      	movs	r2, #65	; 0x41
    aa24:	5c9b      	ldrb	r3, [r3, r2]
    aa26:	2201      	movs	r2, #1
    aa28:	4013      	ands	r3, r2
    aa2a:	b2db      	uxtb	r3, r3
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	d000      	beq.n	aa32 <_http_client_request+0xa6>
    aa30:	e33f      	b.n	b0b2 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    aa32:	69fb      	ldr	r3, [r7, #28]
    aa34:	33b0      	adds	r3, #176	; 0xb0
    aa36:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    aa38:	69fb      	ldr	r3, [r7, #28]
    aa3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    aa3c:	2b03      	cmp	r3, #3
    aa3e:	d003      	beq.n	aa48 <_http_client_request+0xbc>
    aa40:	2b04      	cmp	r3, #4
    aa42:	d100      	bne.n	aa46 <_http_client_request+0xba>
    aa44:	e1b3      	b.n	adae <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
    aa46:	e32f      	b.n	b0a8 <_http_client_request+0x71c>
		module->req.content_length = 0;
    aa48:	69fb      	ldr	r3, [r7, #28]
    aa4a:	22cc      	movs	r2, #204	; 0xcc
    aa4c:	2100      	movs	r1, #0
    aa4e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    aa50:	69fb      	ldr	r3, [r7, #28]
    aa52:	22d0      	movs	r2, #208	; 0xd0
    aa54:	2100      	movs	r1, #0
    aa56:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    aa58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    aa5a:	69fb      	ldr	r3, [r7, #28]
    aa5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    aa5e:	4c90      	ldr	r4, [pc, #576]	; (aca0 <_http_client_request+0x314>)
    aa60:	2334      	movs	r3, #52	; 0x34
    aa62:	2018      	movs	r0, #24
    aa64:	1838      	adds	r0, r7, r0
    aa66:	18c0      	adds	r0, r0, r3
    aa68:	69fb      	ldr	r3, [r7, #28]
    aa6a:	9300      	str	r3, [sp, #0]
    aa6c:	0023      	movs	r3, r4
    aa6e:	4c8d      	ldr	r4, [pc, #564]	; (aca4 <_http_client_request+0x318>)
    aa70:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    aa72:	69fb      	ldr	r3, [r7, #28]
    aa74:	22c8      	movs	r2, #200	; 0xc8
    aa76:	5c9b      	ldrb	r3, [r3, r2]
    aa78:	2b01      	cmp	r3, #1
    aa7a:	d10a      	bne.n	aa92 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
    aa7c:	498a      	ldr	r1, [pc, #552]	; (aca8 <_http_client_request+0x31c>)
    aa7e:	2334      	movs	r3, #52	; 0x34
    aa80:	2218      	movs	r2, #24
    aa82:	4694      	mov	ip, r2
    aa84:	44bc      	add	ip, r7
    aa86:	4463      	add	r3, ip
    aa88:	2204      	movs	r2, #4
    aa8a:	0018      	movs	r0, r3
    aa8c:	4b87      	ldr	r3, [pc, #540]	; (acac <_http_client_request+0x320>)
    aa8e:	4798      	blx	r3
    aa90:	e04e      	b.n	ab30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
    aa92:	69fb      	ldr	r3, [r7, #28]
    aa94:	22c8      	movs	r2, #200	; 0xc8
    aa96:	5c9b      	ldrb	r3, [r3, r2]
    aa98:	2b02      	cmp	r3, #2
    aa9a:	d10a      	bne.n	aab2 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
    aa9c:	4984      	ldr	r1, [pc, #528]	; (acb0 <_http_client_request+0x324>)
    aa9e:	2334      	movs	r3, #52	; 0x34
    aaa0:	2218      	movs	r2, #24
    aaa2:	4694      	mov	ip, r2
    aaa4:	44bc      	add	ip, r7
    aaa6:	4463      	add	r3, ip
    aaa8:	2205      	movs	r2, #5
    aaaa:	0018      	movs	r0, r3
    aaac:	4b7f      	ldr	r3, [pc, #508]	; (acac <_http_client_request+0x320>)
    aaae:	4798      	blx	r3
    aab0:	e03e      	b.n	ab30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    aab2:	69fb      	ldr	r3, [r7, #28]
    aab4:	22c8      	movs	r2, #200	; 0xc8
    aab6:	5c9b      	ldrb	r3, [r3, r2]
    aab8:	2b03      	cmp	r3, #3
    aaba:	d10a      	bne.n	aad2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    aabc:	497d      	ldr	r1, [pc, #500]	; (acb4 <_http_client_request+0x328>)
    aabe:	2334      	movs	r3, #52	; 0x34
    aac0:	2218      	movs	r2, #24
    aac2:	4694      	mov	ip, r2
    aac4:	44bc      	add	ip, r7
    aac6:	4463      	add	r3, ip
    aac8:	2207      	movs	r2, #7
    aaca:	0018      	movs	r0, r3
    aacc:	4b77      	ldr	r3, [pc, #476]	; (acac <_http_client_request+0x320>)
    aace:	4798      	blx	r3
    aad0:	e02e      	b.n	ab30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    aad2:	69fb      	ldr	r3, [r7, #28]
    aad4:	22c8      	movs	r2, #200	; 0xc8
    aad6:	5c9b      	ldrb	r3, [r3, r2]
    aad8:	2b04      	cmp	r3, #4
    aada:	d10a      	bne.n	aaf2 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    aadc:	4976      	ldr	r1, [pc, #472]	; (acb8 <_http_client_request+0x32c>)
    aade:	2334      	movs	r3, #52	; 0x34
    aae0:	2218      	movs	r2, #24
    aae2:	4694      	mov	ip, r2
    aae4:	44bc      	add	ip, r7
    aae6:	4463      	add	r3, ip
    aae8:	2204      	movs	r2, #4
    aaea:	0018      	movs	r0, r3
    aaec:	4b6f      	ldr	r3, [pc, #444]	; (acac <_http_client_request+0x320>)
    aaee:	4798      	blx	r3
    aaf0:	e01e      	b.n	ab30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    aaf2:	69fb      	ldr	r3, [r7, #28]
    aaf4:	22c8      	movs	r2, #200	; 0xc8
    aaf6:	5c9b      	ldrb	r3, [r3, r2]
    aaf8:	2b05      	cmp	r3, #5
    aafa:	d10a      	bne.n	ab12 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    aafc:	496f      	ldr	r1, [pc, #444]	; (acbc <_http_client_request+0x330>)
    aafe:	2334      	movs	r3, #52	; 0x34
    ab00:	2218      	movs	r2, #24
    ab02:	4694      	mov	ip, r2
    ab04:	44bc      	add	ip, r7
    ab06:	4463      	add	r3, ip
    ab08:	2208      	movs	r2, #8
    ab0a:	0018      	movs	r0, r3
    ab0c:	4b67      	ldr	r3, [pc, #412]	; (acac <_http_client_request+0x320>)
    ab0e:	4798      	blx	r3
    ab10:	e00e      	b.n	ab30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    ab12:	69fb      	ldr	r3, [r7, #28]
    ab14:	22c8      	movs	r2, #200	; 0xc8
    ab16:	5c9b      	ldrb	r3, [r3, r2]
    ab18:	2b06      	cmp	r3, #6
    ab1a:	d109      	bne.n	ab30 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    ab1c:	4968      	ldr	r1, [pc, #416]	; (acc0 <_http_client_request+0x334>)
    ab1e:	2334      	movs	r3, #52	; 0x34
    ab20:	2218      	movs	r2, #24
    ab22:	4694      	mov	ip, r2
    ab24:	44bc      	add	ip, r7
    ab26:	4463      	add	r3, ip
    ab28:	2205      	movs	r2, #5
    ab2a:	0018      	movs	r0, r3
    ab2c:	4b5f      	ldr	r3, [pc, #380]	; (acac <_http_client_request+0x320>)
    ab2e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    ab30:	69fb      	ldr	r3, [r7, #28]
    ab32:	3370      	adds	r3, #112	; 0x70
    ab34:	001c      	movs	r4, r3
    ab36:	69fb      	ldr	r3, [r7, #28]
    ab38:	3370      	adds	r3, #112	; 0x70
    ab3a:	0018      	movs	r0, r3
    ab3c:	4b61      	ldr	r3, [pc, #388]	; (acc4 <_http_client_request+0x338>)
    ab3e:	4798      	blx	r3
    ab40:	0002      	movs	r2, r0
    ab42:	2334      	movs	r3, #52	; 0x34
    ab44:	2118      	movs	r1, #24
    ab46:	468c      	mov	ip, r1
    ab48:	44bc      	add	ip, r7
    ab4a:	4463      	add	r3, ip
    ab4c:	0021      	movs	r1, r4
    ab4e:	0018      	movs	r0, r3
    ab50:	4b56      	ldr	r3, [pc, #344]	; (acac <_http_client_request+0x320>)
    ab52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    ab54:	495c      	ldr	r1, [pc, #368]	; (acc8 <_http_client_request+0x33c>)
    ab56:	2334      	movs	r3, #52	; 0x34
    ab58:	2218      	movs	r2, #24
    ab5a:	4694      	mov	ip, r2
    ab5c:	44bc      	add	ip, r7
    ab5e:	4463      	add	r3, ip
    ab60:	220b      	movs	r2, #11
    ab62:	0018      	movs	r0, r3
    ab64:	4b51      	ldr	r3, [pc, #324]	; (acac <_http_client_request+0x320>)
    ab66:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    ab68:	4958      	ldr	r1, [pc, #352]	; (accc <_http_client_request+0x340>)
    ab6a:	2334      	movs	r3, #52	; 0x34
    ab6c:	2218      	movs	r2, #24
    ab6e:	4694      	mov	ip, r2
    ab70:	44bc      	add	ip, r7
    ab72:	4463      	add	r3, ip
    ab74:	220c      	movs	r2, #12
    ab76:	0018      	movs	r0, r3
    ab78:	4b4c      	ldr	r3, [pc, #304]	; (acac <_http_client_request+0x320>)
    ab7a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    ab7c:	69fb      	ldr	r3, [r7, #28]
    ab7e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    ab80:	69fb      	ldr	r3, [r7, #28]
    ab82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    ab84:	0018      	movs	r0, r3
    ab86:	4b4f      	ldr	r3, [pc, #316]	; (acc4 <_http_client_request+0x338>)
    ab88:	4798      	blx	r3
    ab8a:	0002      	movs	r2, r0
    ab8c:	2334      	movs	r3, #52	; 0x34
    ab8e:	2118      	movs	r1, #24
    ab90:	468c      	mov	ip, r1
    ab92:	44bc      	add	ip, r7
    ab94:	4463      	add	r3, ip
    ab96:	0021      	movs	r1, r4
    ab98:	0018      	movs	r0, r3
    ab9a:	4b44      	ldr	r3, [pc, #272]	; (acac <_http_client_request+0x320>)
    ab9c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    ab9e:	494c      	ldr	r1, [pc, #304]	; (acd0 <_http_client_request+0x344>)
    aba0:	2334      	movs	r3, #52	; 0x34
    aba2:	2218      	movs	r2, #24
    aba4:	4694      	mov	ip, r2
    aba6:	44bc      	add	ip, r7
    aba8:	4463      	add	r3, ip
    abaa:	2202      	movs	r2, #2
    abac:	0018      	movs	r0, r3
    abae:	4b3f      	ldr	r3, [pc, #252]	; (acac <_http_client_request+0x320>)
    abb0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    abb2:	4948      	ldr	r1, [pc, #288]	; (acd4 <_http_client_request+0x348>)
    abb4:	2334      	movs	r3, #52	; 0x34
    abb6:	2218      	movs	r2, #24
    abb8:	4694      	mov	ip, r2
    abba:	44bc      	add	ip, r7
    abbc:	4463      	add	r3, ip
    abbe:	2206      	movs	r2, #6
    abc0:	0018      	movs	r0, r3
    abc2:	4b3a      	ldr	r3, [pc, #232]	; (acac <_http_client_request+0x320>)
    abc4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    abc6:	69fb      	ldr	r3, [r7, #28]
    abc8:	1c5c      	adds	r4, r3, #1
    abca:	69fb      	ldr	r3, [r7, #28]
    abcc:	3301      	adds	r3, #1
    abce:	0018      	movs	r0, r3
    abd0:	4b3c      	ldr	r3, [pc, #240]	; (acc4 <_http_client_request+0x338>)
    abd2:	4798      	blx	r3
    abd4:	0002      	movs	r2, r0
    abd6:	2334      	movs	r3, #52	; 0x34
    abd8:	2118      	movs	r1, #24
    abda:	468c      	mov	ip, r1
    abdc:	44bc      	add	ip, r7
    abde:	4463      	add	r3, ip
    abe0:	0021      	movs	r1, r4
    abe2:	0018      	movs	r0, r3
    abe4:	4b31      	ldr	r3, [pc, #196]	; (acac <_http_client_request+0x320>)
    abe6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    abe8:	4939      	ldr	r1, [pc, #228]	; (acd0 <_http_client_request+0x344>)
    abea:	2334      	movs	r3, #52	; 0x34
    abec:	2218      	movs	r2, #24
    abee:	4694      	mov	ip, r2
    abf0:	44bc      	add	ip, r7
    abf2:	4463      	add	r3, ip
    abf4:	2202      	movs	r2, #2
    abf6:	0018      	movs	r0, r3
    abf8:	4b2c      	ldr	r3, [pc, #176]	; (acac <_http_client_request+0x320>)
    abfa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    abfc:	4936      	ldr	r1, [pc, #216]	; (acd8 <_http_client_request+0x34c>)
    abfe:	2334      	movs	r3, #52	; 0x34
    ac00:	2218      	movs	r2, #24
    ac02:	4694      	mov	ip, r2
    ac04:	44bc      	add	ip, r7
    ac06:	4463      	add	r3, ip
    ac08:	2218      	movs	r2, #24
    ac0a:	0018      	movs	r0, r3
    ac0c:	4b27      	ldr	r3, [pc, #156]	; (acac <_http_client_request+0x320>)
    ac0e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    ac10:	4932      	ldr	r1, [pc, #200]	; (acdc <_http_client_request+0x350>)
    ac12:	2334      	movs	r3, #52	; 0x34
    ac14:	2218      	movs	r2, #24
    ac16:	4694      	mov	ip, r2
    ac18:	44bc      	add	ip, r7
    ac1a:	4463      	add	r3, ip
    ac1c:	2213      	movs	r2, #19
    ac1e:	0018      	movs	r0, r3
    ac20:	4b22      	ldr	r3, [pc, #136]	; (acac <_http_client_request+0x320>)
    ac22:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    ac24:	492e      	ldr	r1, [pc, #184]	; (ace0 <_http_client_request+0x354>)
    ac26:	2334      	movs	r3, #52	; 0x34
    ac28:	2218      	movs	r2, #24
    ac2a:	4694      	mov	ip, r2
    ac2c:	44bc      	add	ip, r7
    ac2e:	4463      	add	r3, ip
    ac30:	2217      	movs	r2, #23
    ac32:	0018      	movs	r0, r3
    ac34:	4b1d      	ldr	r3, [pc, #116]	; (acac <_http_client_request+0x320>)
    ac36:	4798      	blx	r3
		if (entity->read != NULL) {
    ac38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ac3a:	68db      	ldr	r3, [r3, #12]
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d100      	bne.n	ac42 <_http_client_request+0x2b6>
    ac40:	e088      	b.n	ad54 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
    ac42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ac44:	781b      	ldrb	r3, [r3, #0]
    ac46:	2b00      	cmp	r3, #0
    ac48:	d00f      	beq.n	ac6a <_http_client_request+0x2de>
				module->req.content_length = -1;
    ac4a:	69fb      	ldr	r3, [r7, #28]
    ac4c:	21cc      	movs	r1, #204	; 0xcc
    ac4e:	2201      	movs	r2, #1
    ac50:	4252      	negs	r2, r2
    ac52:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    ac54:	4923      	ldr	r1, [pc, #140]	; (ace4 <_http_client_request+0x358>)
    ac56:	2334      	movs	r3, #52	; 0x34
    ac58:	2218      	movs	r2, #24
    ac5a:	4694      	mov	ip, r2
    ac5c:	44bc      	add	ip, r7
    ac5e:	4463      	add	r3, ip
    ac60:	221c      	movs	r2, #28
    ac62:	0018      	movs	r0, r3
    ac64:	4b11      	ldr	r3, [pc, #68]	; (acac <_http_client_request+0x320>)
    ac66:	4798      	blx	r3
    ac68:	e074      	b.n	ad54 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
    ac6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ac6c:	689b      	ldr	r3, [r3, #8]
    ac6e:	2b00      	cmp	r3, #0
    ac70:	d070      	beq.n	ad54 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    ac72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ac74:	689a      	ldr	r2, [r3, #8]
    ac76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ac78:	695b      	ldr	r3, [r3, #20]
    ac7a:	0018      	movs	r0, r3
    ac7c:	4790      	blx	r2
    ac7e:	0001      	movs	r1, r0
    ac80:	69fb      	ldr	r3, [r7, #28]
    ac82:	22cc      	movs	r2, #204	; 0xcc
    ac84:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    ac86:	69fb      	ldr	r3, [r7, #28]
    ac88:	22cc      	movs	r2, #204	; 0xcc
    ac8a:	589b      	ldr	r3, [r3, r2]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	da2b      	bge.n	ace8 <_http_client_request+0x35c>
					module->req.content_length = 0;
    ac90:	69fb      	ldr	r3, [r7, #28]
    ac92:	22cc      	movs	r2, #204	; 0xcc
    ac94:	2100      	movs	r1, #0
    ac96:	5099      	str	r1, [r3, r2]
    ac98:	e05c      	b.n	ad54 <_http_client_request+0x3c8>
    ac9a:	46c0      	nop			; (mov r8, r8)
    ac9c:	0000f758 	.word	0x0000f758
    aca0:	0000a905 	.word	0x0000a905
    aca4:	0000b86d 	.word	0x0000b86d
    aca8:	0000f67c 	.word	0x0000f67c
    acac:	0000b8ed 	.word	0x0000b8ed
    acb0:	0000f684 	.word	0x0000f684
    acb4:	0000f68c 	.word	0x0000f68c
    acb8:	0000f694 	.word	0x0000f694
    acbc:	0000f69c 	.word	0x0000f69c
    acc0:	0000f6a8 	.word	0x0000f6a8
    acc4:	0000d287 	.word	0x0000d287
    acc8:	0000f6b0 	.word	0x0000f6b0
    accc:	0000f6bc 	.word	0x0000f6bc
    acd0:	0000f6cc 	.word	0x0000f6cc
    acd4:	0000f6d0 	.word	0x0000f6d0
    acd8:	0000f6d8 	.word	0x0000f6d8
    acdc:	0000f6f4 	.word	0x0000f6f4
    ace0:	0000f708 	.word	0x0000f708
    ace4:	0000f720 	.word	0x0000f720
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    ace8:	69fb      	ldr	r3, [r7, #28]
    acea:	22cc      	movs	r2, #204	; 0xcc
    acec:	589b      	ldr	r3, [r3, r2]
    acee:	001a      	movs	r2, r3
    acf0:	49e0      	ldr	r1, [pc, #896]	; (b074 <_http_client_request+0x6e8>)
    acf2:	2328      	movs	r3, #40	; 0x28
    acf4:	2018      	movs	r0, #24
    acf6:	4684      	mov	ip, r0
    acf8:	44bc      	add	ip, r7
    acfa:	4463      	add	r3, ip
    acfc:	0018      	movs	r0, r3
    acfe:	4bde      	ldr	r3, [pc, #888]	; (b078 <_http_client_request+0x6ec>)
    ad00:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    ad02:	49de      	ldr	r1, [pc, #888]	; (b07c <_http_client_request+0x6f0>)
    ad04:	2334      	movs	r3, #52	; 0x34
    ad06:	2218      	movs	r2, #24
    ad08:	4694      	mov	ip, r2
    ad0a:	44bc      	add	ip, r7
    ad0c:	4463      	add	r3, ip
    ad0e:	2210      	movs	r2, #16
    ad10:	0018      	movs	r0, r3
    ad12:	4bdb      	ldr	r3, [pc, #876]	; (b080 <_http_client_request+0x6f4>)
    ad14:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    ad16:	2328      	movs	r3, #40	; 0x28
    ad18:	2218      	movs	r2, #24
    ad1a:	4694      	mov	ip, r2
    ad1c:	44bc      	add	ip, r7
    ad1e:	4463      	add	r3, ip
    ad20:	0018      	movs	r0, r3
    ad22:	4bd8      	ldr	r3, [pc, #864]	; (b084 <_http_client_request+0x6f8>)
    ad24:	4798      	blx	r3
    ad26:	0002      	movs	r2, r0
    ad28:	2328      	movs	r3, #40	; 0x28
    ad2a:	2118      	movs	r1, #24
    ad2c:	1879      	adds	r1, r7, r1
    ad2e:	18c9      	adds	r1, r1, r3
    ad30:	2334      	movs	r3, #52	; 0x34
    ad32:	2018      	movs	r0, #24
    ad34:	4684      	mov	ip, r0
    ad36:	44bc      	add	ip, r7
    ad38:	4463      	add	r3, ip
    ad3a:	0018      	movs	r0, r3
    ad3c:	4bd0      	ldr	r3, [pc, #832]	; (b080 <_http_client_request+0x6f4>)
    ad3e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    ad40:	49d1      	ldr	r1, [pc, #836]	; (b088 <_http_client_request+0x6fc>)
    ad42:	2334      	movs	r3, #52	; 0x34
    ad44:	2218      	movs	r2, #24
    ad46:	4694      	mov	ip, r2
    ad48:	44bc      	add	ip, r7
    ad4a:	4463      	add	r3, ip
    ad4c:	2202      	movs	r2, #2
    ad4e:	0018      	movs	r0, r3
    ad50:	4bcb      	ldr	r3, [pc, #812]	; (b080 <_http_client_request+0x6f4>)
    ad52:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    ad54:	69fb      	ldr	r3, [r7, #28]
    ad56:	22d4      	movs	r2, #212	; 0xd4
    ad58:	589b      	ldr	r3, [r3, r2]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d012      	beq.n	ad84 <_http_client_request+0x3f8>
				module->req.ext_header,
    ad5e:	69fb      	ldr	r3, [r7, #28]
    ad60:	22d4      	movs	r2, #212	; 0xd4
    ad62:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    ad64:	69fb      	ldr	r3, [r7, #28]
    ad66:	22d4      	movs	r2, #212	; 0xd4
    ad68:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    ad6a:	0018      	movs	r0, r3
    ad6c:	4bc5      	ldr	r3, [pc, #788]	; (b084 <_http_client_request+0x6f8>)
    ad6e:	4798      	blx	r3
    ad70:	0002      	movs	r2, r0
    ad72:	2334      	movs	r3, #52	; 0x34
    ad74:	2118      	movs	r1, #24
    ad76:	468c      	mov	ip, r1
    ad78:	44bc      	add	ip, r7
    ad7a:	4463      	add	r3, ip
    ad7c:	0021      	movs	r1, r4
    ad7e:	0018      	movs	r0, r3
    ad80:	4bbf      	ldr	r3, [pc, #764]	; (b080 <_http_client_request+0x6f4>)
    ad82:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    ad84:	49c0      	ldr	r1, [pc, #768]	; (b088 <_http_client_request+0x6fc>)
    ad86:	2334      	movs	r3, #52	; 0x34
    ad88:	2218      	movs	r2, #24
    ad8a:	4694      	mov	ip, r2
    ad8c:	44bc      	add	ip, r7
    ad8e:	4463      	add	r3, ip
    ad90:	2202      	movs	r2, #2
    ad92:	0018      	movs	r0, r3
    ad94:	4bba      	ldr	r3, [pc, #744]	; (b080 <_http_client_request+0x6f4>)
    ad96:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    ad98:	2334      	movs	r3, #52	; 0x34
    ad9a:	2218      	movs	r2, #24
    ad9c:	4694      	mov	ip, r2
    ad9e:	44bc      	add	ip, r7
    ada0:	4463      	add	r3, ip
    ada2:	0018      	movs	r0, r3
    ada4:	4bb9      	ldr	r3, [pc, #740]	; (b08c <_http_client_request+0x700>)
    ada6:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    ada8:	69fb      	ldr	r3, [r7, #28]
    adaa:	2204      	movs	r2, #4
    adac:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    adae:	69fb      	ldr	r3, [r7, #28]
    adb0:	22cc      	movs	r2, #204	; 0xcc
    adb2:	589b      	ldr	r3, [r3, r2]
    adb4:	2b00      	cmp	r3, #0
    adb6:	db00      	blt.n	adba <_http_client_request+0x42e>
    adb8:	e0c6      	b.n	af48 <_http_client_request+0x5bc>
    adba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    adbc:	68db      	ldr	r3, [r3, #12]
    adbe:	2b00      	cmp	r3, #0
    adc0:	d100      	bne.n	adc4 <_http_client_request+0x438>
    adc2:	e0c1      	b.n	af48 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    adc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    adc6:	68dc      	ldr	r4, [r3, #12]
    adc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    adca:	6958      	ldr	r0, [r3, #20]
    adcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    adce:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    add0:	69fb      	ldr	r3, [r7, #28]
    add2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    add4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    add6:	69fb      	ldr	r3, [r7, #28]
    add8:	22d0      	movs	r2, #208	; 0xd0
    adda:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    addc:	002a      	movs	r2, r5
    adde:	47a0      	blx	r4
    ade0:	0003      	movs	r3, r0
    ade2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    ade4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ade6:	2b00      	cmp	r3, #0
    ade8:	da01      	bge.n	adee <_http_client_request+0x462>
				size = 0;
    adea:	2300      	movs	r3, #0
    adec:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    adee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    adf0:	220a      	movs	r2, #10
    adf2:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    adf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    adf6:	220d      	movs	r2, #13
    adf8:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    adfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    adfc:	3305      	adds	r3, #5
    adfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
    ae00:	210d      	movs	r1, #13
    ae02:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    ae04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae06:	3306      	adds	r3, #6
    ae08:	6eba      	ldr	r2, [r7, #104]	; 0x68
    ae0a:	210a      	movs	r1, #10
    ae0c:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    ae0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae10:	2b00      	cmp	r3, #0
    ae12:	db14      	blt.n	ae3e <_http_client_request+0x4b2>
				ptr = buffer + 2;
    ae14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ae16:	3302      	adds	r3, #2
    ae18:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    ae1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae1c:	4a9c      	ldr	r2, [pc, #624]	; (b090 <_http_client_request+0x704>)
    ae1e:	4013      	ands	r3, r2
    ae20:	d504      	bpl.n	ae2c <_http_client_request+0x4a0>
    ae22:	3b01      	subs	r3, #1
    ae24:	2210      	movs	r2, #16
    ae26:	4252      	negs	r2, r2
    ae28:	4313      	orrs	r3, r2
    ae2a:	3301      	adds	r3, #1
    ae2c:	001a      	movs	r2, r3
    ae2e:	2318      	movs	r3, #24
    ae30:	2118      	movs	r1, #24
    ae32:	468c      	mov	ip, r1
    ae34:	44bc      	add	ip, r7
    ae36:	4463      	add	r3, ip
    ae38:	5c9a      	ldrb	r2, [r3, r2]
    ae3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ae3c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    ae3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae40:	2b0f      	cmp	r3, #15
    ae42:	dd19      	ble.n	ae78 <_http_client_request+0x4ec>
				ptr = buffer + 1;
    ae44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ae46:	3301      	adds	r3, #1
    ae48:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    ae4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	da00      	bge.n	ae52 <_http_client_request+0x4c6>
    ae50:	330f      	adds	r3, #15
    ae52:	111b      	asrs	r3, r3, #4
    ae54:	001a      	movs	r2, r3
    ae56:	4b8e      	ldr	r3, [pc, #568]	; (b090 <_http_client_request+0x704>)
    ae58:	4013      	ands	r3, r2
    ae5a:	d504      	bpl.n	ae66 <_http_client_request+0x4da>
    ae5c:	3b01      	subs	r3, #1
    ae5e:	2210      	movs	r2, #16
    ae60:	4252      	negs	r2, r2
    ae62:	4313      	orrs	r3, r2
    ae64:	3301      	adds	r3, #1
    ae66:	001a      	movs	r2, r3
    ae68:	2318      	movs	r3, #24
    ae6a:	2118      	movs	r1, #24
    ae6c:	468c      	mov	ip, r1
    ae6e:	44bc      	add	ip, r7
    ae70:	4463      	add	r3, ip
    ae72:	5c9a      	ldrb	r2, [r3, r2]
    ae74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ae76:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    ae78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae7a:	2bff      	cmp	r3, #255	; 0xff
    ae7c:	dd18      	ble.n	aeb0 <_http_client_request+0x524>
				ptr = buffer;
    ae7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ae80:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    ae82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ae84:	2b00      	cmp	r3, #0
    ae86:	da00      	bge.n	ae8a <_http_client_request+0x4fe>
    ae88:	33ff      	adds	r3, #255	; 0xff
    ae8a:	121b      	asrs	r3, r3, #8
    ae8c:	001a      	movs	r2, r3
    ae8e:	4b80      	ldr	r3, [pc, #512]	; (b090 <_http_client_request+0x704>)
    ae90:	4013      	ands	r3, r2
    ae92:	d504      	bpl.n	ae9e <_http_client_request+0x512>
    ae94:	3b01      	subs	r3, #1
    ae96:	2210      	movs	r2, #16
    ae98:	4252      	negs	r2, r2
    ae9a:	4313      	orrs	r3, r2
    ae9c:	3301      	adds	r3, #1
    ae9e:	001a      	movs	r2, r3
    aea0:	2318      	movs	r3, #24
    aea2:	2118      	movs	r1, #24
    aea4:	468c      	mov	ip, r1
    aea6:	44bc      	add	ip, r7
    aea8:	4463      	add	r3, ip
    aeaa:	5c9a      	ldrb	r2, [r3, r2]
    aeac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    aeae:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    aeb0:	69fb      	ldr	r3, [r7, #28]
    aeb2:	2000      	movs	r0, #0
    aeb4:	5618      	ldrsb	r0, [r3, r0]
    aeb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    aeb8:	3303      	adds	r3, #3
    aeba:	001a      	movs	r2, r3
    aebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    aebe:	1ad3      	subs	r3, r2, r3
    aec0:	b29a      	uxth	r2, r3
    aec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    aec4:	b29b      	uxth	r3, r3
    aec6:	18d3      	adds	r3, r2, r3
    aec8:	b29b      	uxth	r3, r3
    aeca:	3304      	adds	r3, #4
    aecc:	b29a      	uxth	r2, r3
    aece:	6f39      	ldr	r1, [r7, #112]	; 0x70
    aed0:	2300      	movs	r3, #0
    aed2:	4c70      	ldr	r4, [pc, #448]	; (b094 <_http_client_request+0x708>)
    aed4:	47a0      	blx	r4
    aed6:	0003      	movs	r3, r0
    aed8:	663b      	str	r3, [r7, #96]	; 0x60
    aeda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    aedc:	2b00      	cmp	r3, #0
    aede:	da07      	bge.n	aef0 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
    aee0:	2305      	movs	r3, #5
    aee2:	425a      	negs	r2, r3
    aee4:	69fb      	ldr	r3, [r7, #28]
    aee6:	0011      	movs	r1, r2
    aee8:	0018      	movs	r0, r3
    aeea:	4b6b      	ldr	r3, [pc, #428]	; (b098 <_http_client_request+0x70c>)
    aeec:	4798      	blx	r3
				return;
    aeee:	e0e1      	b.n	b0b4 <_http_client_request+0x728>
			module->req.sent_length += size;
    aef0:	69fb      	ldr	r3, [r7, #28]
    aef2:	22d0      	movs	r2, #208	; 0xd0
    aef4:	589a      	ldr	r2, [r3, r2]
    aef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    aef8:	18d2      	adds	r2, r2, r3
    aefa:	69fb      	ldr	r3, [r7, #28]
    aefc:	21d0      	movs	r1, #208	; 0xd0
    aefe:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    af00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    af02:	2b00      	cmp	r3, #0
    af04:	d000      	beq.n	af08 <_http_client_request+0x57c>
    af06:	e0c9      	b.n	b09c <_http_client_request+0x710>
				if (module->req.entity.close) {
    af08:	69fb      	ldr	r3, [r7, #28]
    af0a:	22c0      	movs	r2, #192	; 0xc0
    af0c:	589b      	ldr	r3, [r3, r2]
    af0e:	2b00      	cmp	r3, #0
    af10:	d007      	beq.n	af22 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
    af12:	69fb      	ldr	r3, [r7, #28]
    af14:	22c0      	movs	r2, #192	; 0xc0
    af16:	589b      	ldr	r3, [r3, r2]
    af18:	69fa      	ldr	r2, [r7, #28]
    af1a:	21c4      	movs	r1, #196	; 0xc4
    af1c:	5852      	ldr	r2, [r2, r1]
    af1e:	0010      	movs	r0, r2
    af20:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    af22:	69fb      	ldr	r3, [r7, #28]
    af24:	2202      	movs	r2, #2
    af26:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    af28:	69fb      	ldr	r3, [r7, #28]
    af2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    af2c:	2b00      	cmp	r3, #0
    af2e:	d100      	bne.n	af32 <_http_client_request+0x5a6>
    af30:	e0b5      	b.n	b09e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    af32:	69fb      	ldr	r3, [r7, #28]
    af34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    af36:	220c      	movs	r2, #12
    af38:	2118      	movs	r1, #24
    af3a:	468c      	mov	ip, r1
    af3c:	44bc      	add	ip, r7
    af3e:	4462      	add	r2, ip
    af40:	69f8      	ldr	r0, [r7, #28]
    af42:	2101      	movs	r1, #1
    af44:	4798      	blx	r3
				break;
    af46:	e0aa      	b.n	b09e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
    af48:	69fb      	ldr	r3, [r7, #28]
    af4a:	22cc      	movs	r2, #204	; 0xcc
    af4c:	589b      	ldr	r3, [r3, r2]
    af4e:	2b00      	cmp	r3, #0
    af50:	dc00      	bgt.n	af54 <_http_client_request+0x5c8>
    af52:	e07c      	b.n	b04e <_http_client_request+0x6c2>
    af54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    af56:	68db      	ldr	r3, [r3, #12]
    af58:	2b00      	cmp	r3, #0
    af5a:	d100      	bne.n	af5e <_http_client_request+0x5d2>
    af5c:	e077      	b.n	b04e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
    af5e:	69fb      	ldr	r3, [r7, #28]
    af60:	22d0      	movs	r2, #208	; 0xd0
    af62:	589a      	ldr	r2, [r3, r2]
    af64:	69fb      	ldr	r3, [r7, #28]
    af66:	21cc      	movs	r1, #204	; 0xcc
    af68:	585b      	ldr	r3, [r3, r1]
    af6a:	429a      	cmp	r2, r3
    af6c:	db1f      	blt.n	afae <_http_client_request+0x622>
				if (module->req.entity.close) {
    af6e:	69fb      	ldr	r3, [r7, #28]
    af70:	22c0      	movs	r2, #192	; 0xc0
    af72:	589b      	ldr	r3, [r3, r2]
    af74:	2b00      	cmp	r3, #0
    af76:	d007      	beq.n	af88 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
    af78:	69fb      	ldr	r3, [r7, #28]
    af7a:	22c0      	movs	r2, #192	; 0xc0
    af7c:	589b      	ldr	r3, [r3, r2]
    af7e:	69fa      	ldr	r2, [r7, #28]
    af80:	21c4      	movs	r1, #196	; 0xc4
    af82:	5852      	ldr	r2, [r2, r1]
    af84:	0010      	movs	r0, r2
    af86:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    af88:	69fb      	ldr	r3, [r7, #28]
    af8a:	2202      	movs	r2, #2
    af8c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    af8e:	69fb      	ldr	r3, [r7, #28]
    af90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    af92:	2b00      	cmp	r3, #0
    af94:	d100      	bne.n	af98 <_http_client_request+0x60c>
    af96:	e084      	b.n	b0a2 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    af98:	69fb      	ldr	r3, [r7, #28]
    af9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    af9c:	220c      	movs	r2, #12
    af9e:	2118      	movs	r1, #24
    afa0:	468c      	mov	ip, r1
    afa2:	44bc      	add	ip, r7
    afa4:	4462      	add	r2, ip
    afa6:	69f8      	ldr	r0, [r7, #28]
    afa8:	2101      	movs	r1, #1
    afaa:	4798      	blx	r3
				break;
    afac:	e079      	b.n	b0a2 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    afae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    afb0:	68dc      	ldr	r4, [r3, #12]
    afb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    afb4:	6958      	ldr	r0, [r3, #20]
    afb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    afb8:	69fb      	ldr	r3, [r7, #28]
    afba:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    afbc:	69fb      	ldr	r3, [r7, #28]
    afbe:	22d0      	movs	r2, #208	; 0xd0
    afc0:	589b      	ldr	r3, [r3, r2]
    afc2:	002a      	movs	r2, r5
    afc4:	47a0      	blx	r4
    afc6:	0003      	movs	r3, r0
    afc8:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    afca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    afcc:	2b00      	cmp	r3, #0
    afce:	da0d      	bge.n	afec <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    afd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    afd2:	2b00      	cmp	r3, #0
    afd4:	d102      	bne.n	afdc <_http_client_request+0x650>
    afd6:	234d      	movs	r3, #77	; 0x4d
    afd8:	425b      	negs	r3, r3
    afda:	e001      	b.n	afe0 <_http_client_request+0x654>
    afdc:	2305      	movs	r3, #5
    afde:	425b      	negs	r3, r3
    afe0:	69fa      	ldr	r2, [r7, #28]
    afe2:	0019      	movs	r1, r3
    afe4:	0010      	movs	r0, r2
    afe6:	4b2c      	ldr	r3, [pc, #176]	; (b098 <_http_client_request+0x70c>)
    afe8:	4798      	blx	r3
			if (size < 0) {
    afea:	e057      	b.n	b09c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
    afec:	69fb      	ldr	r3, [r7, #28]
    afee:	22cc      	movs	r2, #204	; 0xcc
    aff0:	589a      	ldr	r2, [r3, r2]
    aff2:	69fb      	ldr	r3, [r7, #28]
    aff4:	21d0      	movs	r1, #208	; 0xd0
    aff6:	585b      	ldr	r3, [r3, r1]
    aff8:	1ad2      	subs	r2, r2, r3
    affa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    affc:	429a      	cmp	r2, r3
    affe:	da07      	bge.n	b010 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
    b000:	69fb      	ldr	r3, [r7, #28]
    b002:	22cc      	movs	r2, #204	; 0xcc
    b004:	589a      	ldr	r2, [r3, r2]
    b006:	69fb      	ldr	r3, [r7, #28]
    b008:	21d0      	movs	r1, #208	; 0xd0
    b00a:	585b      	ldr	r3, [r3, r1]
    b00c:	1ad3      	subs	r3, r2, r3
    b00e:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    b010:	69fb      	ldr	r3, [r7, #28]
    b012:	2000      	movs	r0, #0
    b014:	5618      	ldrsb	r0, [r3, r0]
    b016:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    b018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    b01a:	b29a      	uxth	r2, r3
    b01c:	2300      	movs	r3, #0
    b01e:	4c1d      	ldr	r4, [pc, #116]	; (b094 <_http_client_request+0x708>)
    b020:	47a0      	blx	r4
    b022:	0003      	movs	r3, r0
    b024:	663b      	str	r3, [r7, #96]	; 0x60
    b026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b028:	2b00      	cmp	r3, #0
    b02a:	da07      	bge.n	b03c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
    b02c:	2305      	movs	r3, #5
    b02e:	425a      	negs	r2, r3
    b030:	69fb      	ldr	r3, [r7, #28]
    b032:	0011      	movs	r1, r2
    b034:	0018      	movs	r0, r3
    b036:	4b18      	ldr	r3, [pc, #96]	; (b098 <_http_client_request+0x70c>)
    b038:	4798      	blx	r3
					return;
    b03a:	e03b      	b.n	b0b4 <_http_client_request+0x728>
				module->req.sent_length += size;
    b03c:	69fb      	ldr	r3, [r7, #28]
    b03e:	22d0      	movs	r2, #208	; 0xd0
    b040:	589a      	ldr	r2, [r3, r2]
    b042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    b044:	18d2      	adds	r2, r2, r3
    b046:	69fb      	ldr	r3, [r7, #28]
    b048:	21d0      	movs	r1, #208	; 0xd0
    b04a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    b04c:	e026      	b.n	b09c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
    b04e:	69fb      	ldr	r3, [r7, #28]
    b050:	2202      	movs	r2, #2
    b052:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    b054:	69fb      	ldr	r3, [r7, #28]
    b056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b058:	2b00      	cmp	r3, #0
    b05a:	d024      	beq.n	b0a6 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    b05c:	69fb      	ldr	r3, [r7, #28]
    b05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b060:	220c      	movs	r2, #12
    b062:	2118      	movs	r1, #24
    b064:	468c      	mov	ip, r1
    b066:	44bc      	add	ip, r7
    b068:	4462      	add	r2, ip
    b06a:	69f8      	ldr	r0, [r7, #28]
    b06c:	2101      	movs	r1, #1
    b06e:	4798      	blx	r3
			break;
    b070:	e019      	b.n	b0a6 <_http_client_request+0x71a>
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	0000f740 	.word	0x0000f740
    b078:	0000d1e5 	.word	0x0000d1e5
    b07c:	0000f744 	.word	0x0000f744
    b080:	0000b8ed 	.word	0x0000b8ed
    b084:	0000d287 	.word	0x0000d287
    b088:	0000f6cc 	.word	0x0000f6cc
    b08c:	0000b929 	.word	0x0000b929
    b090:	8000000f 	.word	0x8000000f
    b094:	000053b1 	.word	0x000053b1
    b098:	0000a839 	.word	0x0000a839
		break;
    b09c:	e004      	b.n	b0a8 <_http_client_request+0x71c>
				break;
    b09e:	46c0      	nop			; (mov r8, r8)
    b0a0:	e002      	b.n	b0a8 <_http_client_request+0x71c>
				break;
    b0a2:	46c0      	nop			; (mov r8, r8)
    b0a4:	e000      	b.n	b0a8 <_http_client_request+0x71c>
			break;
    b0a6:	46c0      	nop			; (mov r8, r8)
    b0a8:	69bb      	ldr	r3, [r7, #24]
    b0aa:	469d      	mov	sp, r3
    b0ac:	e004      	b.n	b0b8 <_http_client_request+0x72c>
		return;
    b0ae:	46c0      	nop			; (mov r8, r8)
    b0b0:	e000      	b.n	b0b4 <_http_client_request+0x728>
		return;
    b0b2:	46c0      	nop			; (mov r8, r8)
    b0b4:	69bb      	ldr	r3, [r7, #24]
    b0b6:	469d      	mov	sp, r3
	}
}
    b0b8:	46bd      	mov	sp, r7
    b0ba:	b01e      	add	sp, #120	; 0x78
    b0bc:	bc04      	pop	{r2}
    b0be:	4690      	mov	r8, r2
    b0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0c2:	46c0      	nop			; (mov r8, r8)

0000b0c4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    b0c4:	b590      	push	{r4, r7, lr}
    b0c6:	b083      	sub	sp, #12
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    b0cc:	687b      	ldr	r3, [r7, #4]
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d021      	beq.n	b116 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    b0d2:	687b      	ldr	r3, [r7, #4]
    b0d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b0da:	429a      	cmp	r2, r3
    b0dc:	d307      	bcc.n	b0ee <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    b0de:	238b      	movs	r3, #139	; 0x8b
    b0e0:	425a      	negs	r2, r3
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	0011      	movs	r1, r2
    b0e6:	0018      	movs	r0, r3
    b0e8:	4b0d      	ldr	r3, [pc, #52]	; (b120 <_http_client_recv_packet+0x5c>)
    b0ea:	4798      	blx	r3
		return;
    b0ec:	e014      	b.n	b118 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    b0ee:	687b      	ldr	r3, [r7, #4]
    b0f0:	2000      	movs	r0, #0
    b0f2:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    b0f4:	687b      	ldr	r3, [r7, #4]
    b0f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b0fc:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    b0fe:	687b      	ldr	r3, [r7, #4]
    b100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    b102:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    b108:	b29b      	uxth	r3, r3
    b10a:	1ad3      	subs	r3, r2, r3
    b10c:	b29a      	uxth	r2, r3
    b10e:	2300      	movs	r3, #0
    b110:	4c04      	ldr	r4, [pc, #16]	; (b124 <_http_client_recv_packet+0x60>)
    b112:	47a0      	blx	r4
    b114:	e000      	b.n	b118 <_http_client_recv_packet+0x54>
		return;
    b116:	46c0      	nop			; (mov r8, r8)
}
    b118:	46bd      	mov	sp, r7
    b11a:	b003      	add	sp, #12
    b11c:	bd90      	pop	{r4, r7, pc}
    b11e:	46c0      	nop			; (mov r8, r8)
    b120:	0000a839 	.word	0x0000a839
    b124:	00005515 	.word	0x00005515

0000b128 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    b128:	b580      	push	{r7, lr}
    b12a:	b082      	sub	sp, #8
    b12c:	af00      	add	r7, sp, #0
    b12e:	6078      	str	r0, [r7, #4]
    b130:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    b132:	687b      	ldr	r3, [r7, #4]
    b134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    b136:	683b      	ldr	r3, [r7, #0]
    b138:	18d2      	adds	r2, r2, r3
    b13a:	687b      	ldr	r3, [r7, #4]
    b13c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    b13e:	687b      	ldr	r3, [r7, #4]
    b140:	2258      	movs	r2, #88	; 0x58
    b142:	5a9b      	ldrh	r3, [r3, r2]
    b144:	2b00      	cmp	r3, #0
    b146:	d007      	beq.n	b158 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b150:	0019      	movs	r1, r3
    b152:	0010      	movs	r0, r2
    b154:	4b06      	ldr	r3, [pc, #24]	; (b170 <_http_client_recved_packet+0x48>)
    b156:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    b158:	46c0      	nop			; (mov r8, r8)
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	0018      	movs	r0, r3
    b15e:	4b05      	ldr	r3, [pc, #20]	; (b174 <_http_client_recved_packet+0x4c>)
    b160:	4798      	blx	r3
    b162:	1e03      	subs	r3, r0, #0
    b164:	d1f9      	bne.n	b15a <_http_client_recved_packet+0x32>
}
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	46bd      	mov	sp, r7
    b16a:	b002      	add	sp, #8
    b16c:	bd80      	pop	{r7, pc}
    b16e:	46c0      	nop			; (mov r8, r8)
    b170:	0000bbe5 	.word	0x0000bbe5
    b174:	0000b179 	.word	0x0000b179

0000b178 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
    b178:	b580      	push	{r7, lr}
    b17a:	b082      	sub	sp, #8
    b17c:	af00      	add	r7, sp, #0
    b17e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	22d8      	movs	r2, #216	; 0xd8
    b184:	589b      	ldr	r3, [r3, r2]
    b186:	2b00      	cmp	r3, #0
    b188:	d002      	beq.n	b190 <_http_client_handle_response+0x18>
    b18a:	2b01      	cmp	r3, #1
    b18c:	d006      	beq.n	b19c <_http_client_handle_response+0x24>
    b18e:	e00b      	b.n	b1a8 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    b190:	687b      	ldr	r3, [r7, #4]
    b192:	0018      	movs	r0, r3
    b194:	4b07      	ldr	r3, [pc, #28]	; (b1b4 <_http_client_handle_response+0x3c>)
    b196:	4798      	blx	r3
    b198:	0003      	movs	r3, r0
    b19a:	e006      	b.n	b1aa <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	0018      	movs	r0, r3
    b1a0:	4b05      	ldr	r3, [pc, #20]	; (b1b8 <_http_client_handle_response+0x40>)
    b1a2:	4798      	blx	r3
    b1a4:	0003      	movs	r3, r0
    b1a6:	e000      	b.n	b1aa <_http_client_handle_response+0x32>
	}
	return 0;
    b1a8:	2300      	movs	r3, #0
}
    b1aa:	0018      	movs	r0, r3
    b1ac:	46bd      	mov	sp, r7
    b1ae:	b002      	add	sp, #8
    b1b0:	bd80      	pop	{r7, pc}
    b1b2:	46c0      	nop			; (mov r8, r8)
    b1b4:	0000b1bd 	.word	0x0000b1bd
    b1b8:	0000b675 	.word	0x0000b675

0000b1bc <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
    b1bc:	b590      	push	{r4, r7, lr}
    b1be:	b08b      	sub	sp, #44	; 0x2c
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b1c8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    b1ca:	4b9a      	ldr	r3, [pc, #616]	; (b434 <_http_client_handle_header+0x278>)
    b1cc:	681a      	ldr	r2, [r3, #0]
    b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b1d0:	0011      	movs	r1, r2
    b1d2:	0018      	movs	r0, r3
    b1d4:	4b98      	ldr	r3, [pc, #608]	; (b438 <_http_client_handle_header+0x27c>)
    b1d6:	4798      	blx	r3
    b1d8:	0003      	movs	r3, r0
    b1da:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    b1dc:	69bb      	ldr	r3, [r7, #24]
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d007      	beq.n	b1f2 <_http_client_handle_header+0x36>
    b1e2:	687b      	ldr	r3, [r7, #4]
    b1e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b1ea:	18d2      	adds	r2, r2, r3
    b1ec:	69bb      	ldr	r3, [r7, #24]
    b1ee:	429a      	cmp	r2, r3
    b1f0:	d807      	bhi.n	b202 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    b1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b1f4:	687b      	ldr	r3, [r7, #4]
    b1f6:	0011      	movs	r1, r2
    b1f8:	0018      	movs	r0, r3
    b1fa:	4b90      	ldr	r3, [pc, #576]	; (b43c <_http_client_handle_header+0x280>)
    b1fc:	4798      	blx	r3
			return 0;
    b1fe:	2300      	movs	r3, #0
    b200:	e114      	b.n	b42c <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    b202:	4b8c      	ldr	r3, [pc, #560]	; (b434 <_http_client_handle_header+0x278>)
    b204:	681c      	ldr	r4, [r3, #0]
    b206:	4b8b      	ldr	r3, [pc, #556]	; (b434 <_http_client_handle_header+0x278>)
    b208:	681b      	ldr	r3, [r3, #0]
    b20a:	0018      	movs	r0, r3
    b20c:	4b8c      	ldr	r3, [pc, #560]	; (b440 <_http_client_handle_header+0x284>)
    b20e:	4798      	blx	r3
    b210:	0002      	movs	r2, r0
    b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b214:	0021      	movs	r1, r4
    b216:	0018      	movs	r0, r3
    b218:	4b8a      	ldr	r3, [pc, #552]	; (b444 <_http_client_handle_header+0x288>)
    b21a:	4798      	blx	r3
    b21c:	1e03      	subs	r3, r0, #0
    b21e:	d15d      	bne.n	b2dc <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    b220:	4b84      	ldr	r3, [pc, #528]	; (b434 <_http_client_handle_header+0x278>)
    b222:	681b      	ldr	r3, [r3, #0]
    b224:	0018      	movs	r0, r3
    b226:	4b86      	ldr	r3, [pc, #536]	; (b440 <_http_client_handle_header+0x284>)
    b228:	4798      	blx	r3
    b22a:	0002      	movs	r2, r0
    b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b22e:	189a      	adds	r2, r3, r2
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	0011      	movs	r1, r2
    b234:	0018      	movs	r0, r3
    b236:	4b81      	ldr	r3, [pc, #516]	; (b43c <_http_client_handle_header+0x280>)
    b238:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    b23a:	687b      	ldr	r3, [r7, #4]
    b23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b23e:	2b00      	cmp	r3, #0
    b240:	d046      	beq.n	b2d0 <_http_client_handle_header+0x114>
    b242:	687b      	ldr	r3, [r7, #4]
    b244:	22e4      	movs	r2, #228	; 0xe4
    b246:	5a9b      	ldrh	r3, [r3, r2]
    b248:	2b00      	cmp	r3, #0
    b24a:	d041      	beq.n	b2d0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    b24c:	687b      	ldr	r3, [r7, #4]
    b24e:	22dc      	movs	r2, #220	; 0xdc
    b250:	589b      	ldr	r3, [r3, r2]
    b252:	2b00      	cmp	r3, #0
    b254:	da19      	bge.n	b28a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
    b256:	687b      	ldr	r3, [r7, #4]
    b258:	22e4      	movs	r2, #228	; 0xe4
    b25a:	5a9a      	ldrh	r2, [r3, r2]
    b25c:	230c      	movs	r3, #12
    b25e:	18fb      	adds	r3, r7, r3
    b260:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
    b262:	230c      	movs	r3, #12
    b264:	18fb      	adds	r3, r7, r3
    b266:	2201      	movs	r2, #1
    b268:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	22e0      	movs	r2, #224	; 0xe0
    b26e:	2100      	movs	r1, #0
    b270:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
    b272:	230c      	movs	r3, #12
    b274:	18fb      	adds	r3, r7, r3
    b276:	2200      	movs	r2, #0
    b278:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    b27a:	687b      	ldr	r3, [r7, #4]
    b27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b27e:	220c      	movs	r2, #12
    b280:	18ba      	adds	r2, r7, r2
    b282:	6878      	ldr	r0, [r7, #4]
    b284:	2102      	movs	r1, #2
    b286:	4798      	blx	r3
    b288:	e022      	b.n	b2d0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	22dc      	movs	r2, #220	; 0xdc
    b28e:	589a      	ldr	r2, [r3, r2]
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b294:	429a      	cmp	r2, r3
    b296:	dd1b      	ble.n	b2d0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    b298:	687b      	ldr	r3, [r7, #4]
    b29a:	22e4      	movs	r2, #228	; 0xe4
    b29c:	5a9a      	ldrh	r2, [r3, r2]
    b29e:	230c      	movs	r3, #12
    b2a0:	18fb      	adds	r3, r7, r3
    b2a2:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
    b2a4:	687b      	ldr	r3, [r7, #4]
    b2a6:	22dc      	movs	r2, #220	; 0xdc
    b2a8:	589b      	ldr	r3, [r3, r2]
    b2aa:	001a      	movs	r2, r3
    b2ac:	230c      	movs	r3, #12
    b2ae:	18fb      	adds	r3, r7, r3
    b2b0:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
    b2b2:	230c      	movs	r3, #12
    b2b4:	18fb      	adds	r3, r7, r3
    b2b6:	2200      	movs	r2, #0
    b2b8:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
    b2ba:	687b      	ldr	r3, [r7, #4]
    b2bc:	22e0      	movs	r2, #224	; 0xe0
    b2be:	2100      	movs	r1, #0
    b2c0:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    b2c2:	687b      	ldr	r3, [r7, #4]
    b2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b2c6:	220c      	movs	r2, #12
    b2c8:	18ba      	adds	r2, r7, r2
    b2ca:	6878      	ldr	r0, [r7, #4]
    b2cc:	2102      	movs	r1, #2
    b2ce:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    b2d0:	687b      	ldr	r3, [r7, #4]
    b2d2:	22d8      	movs	r2, #216	; 0xd8
    b2d4:	2101      	movs	r1, #1
    b2d6:	5099      	str	r1, [r3, r2]
			return 1;
    b2d8:	2301      	movs	r3, #1
    b2da:	e0a7      	b.n	b42c <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    b2dc:	495a      	ldr	r1, [pc, #360]	; (b448 <_http_client_handle_header+0x28c>)
    b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2e0:	2210      	movs	r2, #16
    b2e2:	0018      	movs	r0, r3
    b2e4:	4b57      	ldr	r3, [pc, #348]	; (b444 <_http_client_handle_header+0x288>)
    b2e6:	4798      	blx	r3
    b2e8:	1e03      	subs	r3, r0, #0
    b2ea:	d109      	bne.n	b300 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2ee:	3310      	adds	r3, #16
    b2f0:	0018      	movs	r0, r3
    b2f2:	4b56      	ldr	r3, [pc, #344]	; (b44c <_http_client_handle_header+0x290>)
    b2f4:	4798      	blx	r3
    b2f6:	0001      	movs	r1, r0
    b2f8:	687b      	ldr	r3, [r7, #4]
    b2fa:	22dc      	movs	r2, #220	; 0xdc
    b2fc:	5099      	str	r1, [r3, r2]
    b2fe:	e08b      	b.n	b418 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    b300:	4953      	ldr	r1, [pc, #332]	; (b450 <_http_client_handle_header+0x294>)
    b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b304:	2213      	movs	r2, #19
    b306:	0018      	movs	r0, r3
    b308:	4b4e      	ldr	r3, [pc, #312]	; (b444 <_http_client_handle_header+0x288>)
    b30a:	4798      	blx	r3
    b30c:	1e03      	subs	r3, r0, #0
    b30e:	d127      	bne.n	b360 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b312:	3313      	adds	r3, #19
    b314:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b316:	e01e      	b.n	b356 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
    b318:	6a3b      	ldr	r3, [r7, #32]
    b31a:	781b      	ldrb	r3, [r3, #0]
    b31c:	2b20      	cmp	r3, #32
    b31e:	d103      	bne.n	b328 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b320:	6a3b      	ldr	r3, [r7, #32]
    b322:	3301      	adds	r3, #1
    b324:	623b      	str	r3, [r7, #32]
    b326:	e016      	b.n	b356 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    b328:	6a3b      	ldr	r3, [r7, #32]
    b32a:	781b      	ldrb	r3, [r3, #0]
    b32c:	2b43      	cmp	r3, #67	; 0x43
    b32e:	d003      	beq.n	b338 <_http_client_handle_header+0x17c>
    b330:	6a3b      	ldr	r3, [r7, #32]
    b332:	781b      	ldrb	r3, [r3, #0]
    b334:	2b63      	cmp	r3, #99	; 0x63
    b336:	d105      	bne.n	b344 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	21cc      	movs	r1, #204	; 0xcc
    b33c:	2201      	movs	r2, #1
    b33e:	4252      	negs	r2, r2
    b340:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    b342:	e069      	b.n	b418 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
    b344:	2386      	movs	r3, #134	; 0x86
    b346:	425a      	negs	r2, r3
    b348:	687b      	ldr	r3, [r7, #4]
    b34a:	0011      	movs	r1, r2
    b34c:	0018      	movs	r0, r3
    b34e:	4b41      	ldr	r3, [pc, #260]	; (b454 <_http_client_handle_header+0x298>)
    b350:	4798      	blx	r3
					return 0;
    b352:	2300      	movs	r3, #0
    b354:	e06a      	b.n	b42c <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b356:	69ba      	ldr	r2, [r7, #24]
    b358:	6a3b      	ldr	r3, [r7, #32]
    b35a:	429a      	cmp	r2, r3
    b35c:	d8dc      	bhi.n	b318 <_http_client_handle_header+0x15c>
    b35e:	e05b      	b.n	b418 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    b360:	493d      	ldr	r1, [pc, #244]	; (b458 <_http_client_handle_header+0x29c>)
    b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b364:	220c      	movs	r2, #12
    b366:	0018      	movs	r0, r3
    b368:	4b36      	ldr	r3, [pc, #216]	; (b444 <_http_client_handle_header+0x288>)
    b36a:	4798      	blx	r3
    b36c:	1e03      	subs	r3, r0, #0
    b36e:	d126      	bne.n	b3be <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
    b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b372:	330c      	adds	r3, #12
    b374:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b376:	e01d      	b.n	b3b4 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
    b378:	69fb      	ldr	r3, [r7, #28]
    b37a:	781b      	ldrb	r3, [r3, #0]
    b37c:	2b20      	cmp	r3, #32
    b37e:	d103      	bne.n	b388 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b380:	69fb      	ldr	r3, [r7, #28]
    b382:	3301      	adds	r3, #1
    b384:	61fb      	str	r3, [r7, #28]
    b386:	e015      	b.n	b3b4 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    b388:	69fb      	ldr	r3, [r7, #28]
    b38a:	781b      	ldrb	r3, [r3, #0]
    b38c:	2b4b      	cmp	r3, #75	; 0x4b
    b38e:	d003      	beq.n	b398 <_http_client_handle_header+0x1dc>
    b390:	69fb      	ldr	r3, [r7, #28]
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	2b6b      	cmp	r3, #107	; 0x6b
    b396:	d106      	bne.n	b3a6 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
    b398:	687b      	ldr	r3, [r7, #4]
    b39a:	2241      	movs	r2, #65	; 0x41
    b39c:	5c99      	ldrb	r1, [r3, r2]
    b39e:	2002      	movs	r0, #2
    b3a0:	4301      	orrs	r1, r0
    b3a2:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
    b3a4:	e038      	b.n	b418 <_http_client_handle_header+0x25c>
					module->permanent = 0;
    b3a6:	687b      	ldr	r3, [r7, #4]
    b3a8:	2241      	movs	r2, #65	; 0x41
    b3aa:	5c99      	ldrb	r1, [r3, r2]
    b3ac:	2002      	movs	r0, #2
    b3ae:	4381      	bics	r1, r0
    b3b0:	5499      	strb	r1, [r3, r2]
				break;
    b3b2:	e031      	b.n	b418 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    b3b4:	69ba      	ldr	r2, [r7, #24]
    b3b6:	69fb      	ldr	r3, [r7, #28]
    b3b8:	429a      	cmp	r2, r3
    b3ba:	d8dd      	bhi.n	b378 <_http_client_handle_header+0x1bc>
    b3bc:	e02c      	b.n	b418 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    b3be:	4927      	ldr	r1, [pc, #156]	; (b45c <_http_client_handle_header+0x2a0>)
    b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3c2:	2205      	movs	r2, #5
    b3c4:	0018      	movs	r0, r3
    b3c6:	4b1f      	ldr	r3, [pc, #124]	; (b444 <_http_client_handle_header+0x288>)
    b3c8:	4798      	blx	r3
    b3ca:	1e03      	subs	r3, r0, #0
    b3cc:	d124      	bne.n	b418 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3d0:	3309      	adds	r3, #9
    b3d2:	0018      	movs	r0, r3
    b3d4:	4b1d      	ldr	r3, [pc, #116]	; (b44c <_http_client_handle_header+0x290>)
    b3d6:	4798      	blx	r3
    b3d8:	0003      	movs	r3, r0
    b3da:	b299      	uxth	r1, r3
    b3dc:	687b      	ldr	r3, [r7, #4]
    b3de:	22e4      	movs	r2, #228	; 0xe4
    b3e0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	22dc      	movs	r2, #220	; 0xdc
    b3e6:	2100      	movs	r1, #0
    b3e8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3ec:	3305      	adds	r3, #5
    b3ee:	781b      	ldrb	r3, [r3, #0]
    b3f0:	2b31      	cmp	r3, #49	; 0x31
    b3f2:	d804      	bhi.n	b3fe <_http_client_handle_header+0x242>
    b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3f6:	3307      	adds	r3, #7
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	2b30      	cmp	r3, #48	; 0x30
    b3fc:	d906      	bls.n	b40c <_http_client_handle_header+0x250>
				module->permanent = 1;
    b3fe:	687b      	ldr	r3, [r7, #4]
    b400:	2241      	movs	r2, #65	; 0x41
    b402:	5c99      	ldrb	r1, [r3, r2]
    b404:	2002      	movs	r0, #2
    b406:	4301      	orrs	r1, r0
    b408:	5499      	strb	r1, [r3, r2]
    b40a:	e005      	b.n	b418 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	2241      	movs	r2, #65	; 0x41
    b410:	5c99      	ldrb	r1, [r3, r2]
    b412:	2002      	movs	r0, #2
    b414:	4381      	bics	r1, r0
    b416:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    b418:	4b06      	ldr	r3, [pc, #24]	; (b434 <_http_client_handle_header+0x278>)
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	0018      	movs	r0, r3
    b41e:	4b08      	ldr	r3, [pc, #32]	; (b440 <_http_client_handle_header+0x284>)
    b420:	4798      	blx	r3
    b422:	0002      	movs	r2, r0
    b424:	69bb      	ldr	r3, [r7, #24]
    b426:	189b      	adds	r3, r3, r2
    b428:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
    b42a:	e6ce      	b.n	b1ca <_http_client_handle_header+0xe>
	}
}
    b42c:	0018      	movs	r0, r3
    b42e:	46bd      	mov	sp, r7
    b430:	b00b      	add	sp, #44	; 0x2c
    b432:	bd90      	pop	{r4, r7, pc}
    b434:	20000010 	.word	0x20000010
    b438:	0000d2b7 	.word	0x0000d2b7
    b43c:	0000b821 	.word	0x0000b821
    b440:	0000d287 	.word	0x0000d287
    b444:	0000d295 	.word	0x0000d295
    b448:	0000f744 	.word	0x0000f744
    b44c:	0000cd11 	.word	0x0000cd11
    b450:	0000f768 	.word	0x0000f768
    b454:	0000a839 	.word	0x0000a839
    b458:	0000f77c 	.word	0x0000f77c
    b45c:	0000f78c 	.word	0x0000f78c

0000b460 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
    b460:	b580      	push	{r7, lr}
    b462:	b088      	sub	sp, #32
    b464:	af00      	add	r7, sp, #0
    b466:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    b468:	687b      	ldr	r3, [r7, #4]
    b46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b46c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
    b46e:	2300      	movs	r3, #0
    b470:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
    b472:	687b      	ldr	r3, [r7, #4]
    b474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b476:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
    b478:	687b      	ldr	r3, [r7, #4]
    b47a:	22e0      	movs	r2, #224	; 0xe0
    b47c:	589b      	ldr	r3, [r3, r2]
    b47e:	2b00      	cmp	r3, #0
    b480:	db71      	blt.n	b566 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
    b482:	687b      	ldr	r3, [r7, #4]
    b484:	22e0      	movs	r2, #224	; 0xe0
    b486:	589b      	ldr	r3, [r3, r2]
    b488:	2b00      	cmp	r3, #0
    b48a:	d134      	bne.n	b4f6 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	22d8      	movs	r2, #216	; 0xd8
    b490:	2100      	movs	r1, #0
    b492:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	22e4      	movs	r2, #228	; 0xe4
    b498:	2100      	movs	r1, #0
    b49a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    b49c:	2308      	movs	r3, #8
    b49e:	18fb      	adds	r3, r7, r3
    b4a0:	2201      	movs	r2, #1
    b4a2:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
    b4a4:	2308      	movs	r3, #8
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	2200      	movs	r2, #0
    b4aa:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
    b4ac:	2308      	movs	r3, #8
    b4ae:	18fb      	adds	r3, r7, r3
    b4b0:	2200      	movs	r2, #0
    b4b2:	605a      	str	r2, [r3, #4]
				if (module->cb) {
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b4b8:	2b00      	cmp	r3, #0
    b4ba:	d006      	beq.n	b4ca <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b4c0:	2208      	movs	r2, #8
    b4c2:	18ba      	adds	r2, r7, r2
    b4c4:	6878      	ldr	r0, [r7, #4]
    b4c6:	2103      	movs	r1, #3
    b4c8:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	2241      	movs	r2, #65	; 0x41
    b4ce:	5c9b      	ldrb	r3, [r3, r2]
    b4d0:	2202      	movs	r2, #2
    b4d2:	4013      	ands	r3, r2
    b4d4:	b2db      	uxtb	r3, r3
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d105      	bne.n	b4e6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    b4da:	687b      	ldr	r3, [r7, #4]
    b4dc:	2100      	movs	r1, #0
    b4de:	0018      	movs	r0, r3
    b4e0:	4b62      	ldr	r3, [pc, #392]	; (b66c <_http_client_read_chuked_entity+0x20c>)
    b4e2:	4798      	blx	r3
					return;
    b4e4:	e0bf      	b.n	b666 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
    b4e6:	697b      	ldr	r3, [r7, #20]
    b4e8:	1c9a      	adds	r2, r3, #2
    b4ea:	687b      	ldr	r3, [r7, #4]
    b4ec:	0011      	movs	r1, r2
    b4ee:	0018      	movs	r0, r3
    b4f0:	4b5f      	ldr	r3, [pc, #380]	; (b670 <_http_client_read_chuked_entity+0x210>)
    b4f2:	4798      	blx	r3
    b4f4:	e0b2      	b.n	b65c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
    b4f6:	687b      	ldr	r3, [r7, #4]
    b4f8:	22e0      	movs	r2, #224	; 0xe0
    b4fa:	589a      	ldr	r2, [r3, r2]
    b4fc:	69fb      	ldr	r3, [r7, #28]
    b4fe:	429a      	cmp	r2, r3
    b500:	dd00      	ble.n	b504 <_http_client_read_chuked_entity+0xa4>
    b502:	e0ab      	b.n	b65c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
    b504:	687b      	ldr	r3, [r7, #4]
    b506:	22e0      	movs	r2, #224	; 0xe0
    b508:	589b      	ldr	r3, [r3, r2]
    b50a:	001a      	movs	r2, r3
    b50c:	2308      	movs	r3, #8
    b50e:	18fb      	adds	r3, r7, r3
    b510:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
    b512:	2308      	movs	r3, #8
    b514:	18fb      	adds	r3, r7, r3
    b516:	697a      	ldr	r2, [r7, #20]
    b518:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
    b51a:	2308      	movs	r3, #8
    b51c:	18fb      	adds	r3, r7, r3
    b51e:	2200      	movs	r2, #0
    b520:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b526:	2b00      	cmp	r3, #0
    b528:	d006      	beq.n	b538 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    b52a:	687b      	ldr	r3, [r7, #4]
    b52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b52e:	2208      	movs	r2, #8
    b530:	18ba      	adds	r2, r7, r2
    b532:	6878      	ldr	r0, [r7, #4]
    b534:	2103      	movs	r1, #3
    b536:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    b538:	687b      	ldr	r3, [r7, #4]
    b53a:	22e0      	movs	r2, #224	; 0xe0
    b53c:	589b      	ldr	r3, [r3, r2]
    b53e:	3302      	adds	r3, #2
    b540:	697a      	ldr	r2, [r7, #20]
    b542:	18d2      	adds	r2, r2, r3
    b544:	687b      	ldr	r3, [r7, #4]
    b546:	0011      	movs	r1, r2
    b548:	0018      	movs	r0, r3
    b54a:	4b49      	ldr	r3, [pc, #292]	; (b670 <_http_client_read_chuked_entity+0x210>)
    b54c:	4798      	blx	r3
				length = (int)module->recved_size;
    b54e:	687b      	ldr	r3, [r7, #4]
    b550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b552:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
    b554:	687b      	ldr	r3, [r7, #4]
    b556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b558:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
    b55a:	687b      	ldr	r3, [r7, #4]
    b55c:	21e0      	movs	r1, #224	; 0xe0
    b55e:	2201      	movs	r2, #1
    b560:	4252      	negs	r2, r2
    b562:	505a      	str	r2, [r3, r1]
    b564:	e07a      	b.n	b65c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	22e0      	movs	r2, #224	; 0xe0
    b56a:	2100      	movs	r1, #0
    b56c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
    b56e:	e05a      	b.n	b626 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
    b570:	697b      	ldr	r3, [r7, #20]
    b572:	781b      	ldrb	r3, [r3, #0]
    b574:	2b0a      	cmp	r3, #10
    b576:	d106      	bne.n	b586 <_http_client_read_chuked_entity+0x126>
					buffer++;
    b578:	697b      	ldr	r3, [r7, #20]
    b57a:	3301      	adds	r3, #1
    b57c:	617b      	str	r3, [r7, #20]
					length--;
    b57e:	69fb      	ldr	r3, [r7, #28]
    b580:	3b01      	subs	r3, #1
    b582:	61fb      	str	r3, [r7, #28]
					break;
    b584:	e052      	b.n	b62c <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
    b586:	69bb      	ldr	r3, [r7, #24]
    b588:	2b00      	cmp	r3, #0
    b58a:	d145      	bne.n	b618 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    b58c:	697b      	ldr	r3, [r7, #20]
    b58e:	781b      	ldrb	r3, [r3, #0]
    b590:	2b2f      	cmp	r3, #47	; 0x2f
    b592:	d910      	bls.n	b5b6 <_http_client_read_chuked_entity+0x156>
    b594:	697b      	ldr	r3, [r7, #20]
    b596:	781b      	ldrb	r3, [r3, #0]
    b598:	2b39      	cmp	r3, #57	; 0x39
    b59a:	d80c      	bhi.n	b5b6 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	22e0      	movs	r2, #224	; 0xe0
    b5a0:	589b      	ldr	r3, [r3, r2]
    b5a2:	011b      	lsls	r3, r3, #4
    b5a4:	697a      	ldr	r2, [r7, #20]
    b5a6:	7812      	ldrb	r2, [r2, #0]
    b5a8:	189b      	adds	r3, r3, r2
    b5aa:	3b30      	subs	r3, #48	; 0x30
    b5ac:	001a      	movs	r2, r3
    b5ae:	687b      	ldr	r3, [r7, #4]
    b5b0:	21e0      	movs	r1, #224	; 0xe0
    b5b2:	505a      	str	r2, [r3, r1]
    b5b4:	e031      	b.n	b61a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    b5b6:	697b      	ldr	r3, [r7, #20]
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	2b60      	cmp	r3, #96	; 0x60
    b5bc:	d910      	bls.n	b5e0 <_http_client_read_chuked_entity+0x180>
    b5be:	697b      	ldr	r3, [r7, #20]
    b5c0:	781b      	ldrb	r3, [r3, #0]
    b5c2:	2b66      	cmp	r3, #102	; 0x66
    b5c4:	d80c      	bhi.n	b5e0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    b5c6:	687b      	ldr	r3, [r7, #4]
    b5c8:	22e0      	movs	r2, #224	; 0xe0
    b5ca:	589b      	ldr	r3, [r3, r2]
    b5cc:	011b      	lsls	r3, r3, #4
    b5ce:	697a      	ldr	r2, [r7, #20]
    b5d0:	7812      	ldrb	r2, [r2, #0]
    b5d2:	189b      	adds	r3, r3, r2
    b5d4:	3b61      	subs	r3, #97	; 0x61
    b5d6:	001a      	movs	r2, r3
    b5d8:	687b      	ldr	r3, [r7, #4]
    b5da:	21e0      	movs	r1, #224	; 0xe0
    b5dc:	505a      	str	r2, [r3, r1]
    b5de:	e01c      	b.n	b61a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    b5e0:	697b      	ldr	r3, [r7, #20]
    b5e2:	781b      	ldrb	r3, [r3, #0]
    b5e4:	2b40      	cmp	r3, #64	; 0x40
    b5e6:	d910      	bls.n	b60a <_http_client_read_chuked_entity+0x1aa>
    b5e8:	697b      	ldr	r3, [r7, #20]
    b5ea:	781b      	ldrb	r3, [r3, #0]
    b5ec:	2b46      	cmp	r3, #70	; 0x46
    b5ee:	d80c      	bhi.n	b60a <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    b5f0:	687b      	ldr	r3, [r7, #4]
    b5f2:	22e0      	movs	r2, #224	; 0xe0
    b5f4:	589b      	ldr	r3, [r3, r2]
    b5f6:	011b      	lsls	r3, r3, #4
    b5f8:	697a      	ldr	r2, [r7, #20]
    b5fa:	7812      	ldrb	r2, [r2, #0]
    b5fc:	189b      	adds	r3, r3, r2
    b5fe:	3b41      	subs	r3, #65	; 0x41
    b600:	001a      	movs	r2, r3
    b602:	687b      	ldr	r3, [r7, #4]
    b604:	21e0      	movs	r1, #224	; 0xe0
    b606:	505a      	str	r2, [r3, r1]
    b608:	e007      	b.n	b61a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
    b60a:	697b      	ldr	r3, [r7, #20]
    b60c:	781b      	ldrb	r3, [r3, #0]
    b60e:	2b3b      	cmp	r3, #59	; 0x3b
    b610:	d103      	bne.n	b61a <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
    b612:	2301      	movs	r3, #1
    b614:	61bb      	str	r3, [r7, #24]
    b616:	e000      	b.n	b61a <_http_client_read_chuked_entity+0x1ba>
					continue;
    b618:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
    b61a:	697b      	ldr	r3, [r7, #20]
    b61c:	3301      	adds	r3, #1
    b61e:	617b      	str	r3, [r7, #20]
    b620:	69fb      	ldr	r3, [r7, #28]
    b622:	3b01      	subs	r3, #1
    b624:	61fb      	str	r3, [r7, #28]
    b626:	69fb      	ldr	r3, [r7, #28]
    b628:	2b00      	cmp	r3, #0
    b62a:	dca1      	bgt.n	b570 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    b62c:	687b      	ldr	r3, [r7, #4]
    b62e:	22e0      	movs	r2, #224	; 0xe0
    b630:	589a      	ldr	r2, [r3, r2]
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b636:	429a      	cmp	r2, r3
    b638:	dd07      	ble.n	b64a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    b63a:	238b      	movs	r3, #139	; 0x8b
    b63c:	425a      	negs	r2, r3
    b63e:	687b      	ldr	r3, [r7, #4]
    b640:	0011      	movs	r1, r2
    b642:	0018      	movs	r0, r3
    b644:	4b09      	ldr	r3, [pc, #36]	; (b66c <_http_client_read_chuked_entity+0x20c>)
    b646:	4798      	blx	r3
				return;
    b648:	e00d      	b.n	b666 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
    b64a:	69fb      	ldr	r3, [r7, #28]
    b64c:	2b00      	cmp	r3, #0
    b64e:	d105      	bne.n	b65c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	21e0      	movs	r1, #224	; 0xe0
    b654:	2201      	movs	r2, #1
    b656:	4252      	negs	r2, r2
    b658:	505a      	str	r2, [r3, r1]
				return;
    b65a:	e004      	b.n	b666 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b660:	2b00      	cmp	r3, #0
    b662:	d000      	beq.n	b666 <_http_client_read_chuked_entity+0x206>
    b664:	e708      	b.n	b478 <_http_client_read_chuked_entity+0x18>
}
    b666:	46bd      	mov	sp, r7
    b668:	b008      	add	sp, #32
    b66a:	bd80      	pop	{r7, pc}
    b66c:	0000a839 	.word	0x0000a839
    b670:	0000b821 	.word	0x0000b821

0000b674 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
    b674:	b580      	push	{r7, lr}
    b676:	b086      	sub	sp, #24
    b678:	af00      	add	r7, sp, #0
    b67a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    b67c:	687b      	ldr	r3, [r7, #4]
    b67e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b680:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    b682:	687b      	ldr	r3, [r7, #4]
    b684:	22dc      	movs	r2, #220	; 0xdc
    b686:	589b      	ldr	r3, [r3, r2]
    b688:	2b00      	cmp	r3, #0
    b68a:	db58      	blt.n	b73e <_http_client_handle_entity+0xca>
    b68c:	687b      	ldr	r3, [r7, #4]
    b68e:	22dc      	movs	r2, #220	; 0xdc
    b690:	589a      	ldr	r2, [r3, r2]
    b692:	687b      	ldr	r3, [r7, #4]
    b694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b696:	429a      	cmp	r2, r3
    b698:	dc51      	bgt.n	b73e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
    b69a:	687b      	ldr	r3, [r7, #4]
    b69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b69e:	0019      	movs	r1, r3
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	22dc      	movs	r2, #220	; 0xdc
    b6a4:	589b      	ldr	r3, [r3, r2]
    b6a6:	4299      	cmp	r1, r3
    b6a8:	da00      	bge.n	b6ac <_http_client_handle_entity+0x38>
    b6aa:	e0a9      	b.n	b800 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
    b6ac:	687b      	ldr	r3, [r7, #4]
    b6ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d020      	beq.n	b6f6 <_http_client_handle_entity+0x82>
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	22e4      	movs	r2, #228	; 0xe4
    b6b8:	5a9b      	ldrh	r3, [r3, r2]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d01b      	beq.n	b6f6 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
    b6be:	687b      	ldr	r3, [r7, #4]
    b6c0:	22e4      	movs	r2, #228	; 0xe4
    b6c2:	5a9a      	ldrh	r2, [r3, r2]
    b6c4:	2308      	movs	r3, #8
    b6c6:	18fb      	adds	r3, r7, r3
    b6c8:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
    b6ca:	2308      	movs	r3, #8
    b6cc:	18fb      	adds	r3, r7, r3
    b6ce:	2200      	movs	r2, #0
    b6d0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
    b6d2:	687b      	ldr	r3, [r7, #4]
    b6d4:	22dc      	movs	r2, #220	; 0xdc
    b6d6:	589b      	ldr	r3, [r3, r2]
    b6d8:	001a      	movs	r2, r3
    b6da:	2308      	movs	r3, #8
    b6dc:	18fb      	adds	r3, r7, r3
    b6de:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
    b6e0:	2308      	movs	r3, #8
    b6e2:	18fb      	adds	r3, r7, r3
    b6e4:	697a      	ldr	r2, [r7, #20]
    b6e6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    b6e8:	687b      	ldr	r3, [r7, #4]
    b6ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b6ec:	2208      	movs	r2, #8
    b6ee:	18ba      	adds	r2, r7, r2
    b6f0:	6878      	ldr	r0, [r7, #4]
    b6f2:	2102      	movs	r1, #2
    b6f4:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
    b6f6:	687b      	ldr	r3, [r7, #4]
    b6f8:	22d8      	movs	r2, #216	; 0xd8
    b6fa:	2100      	movs	r1, #0
    b6fc:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	22e4      	movs	r2, #228	; 0xe4
    b702:	2100      	movs	r1, #0
    b704:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
    b706:	687b      	ldr	r3, [r7, #4]
    b708:	2241      	movs	r2, #65	; 0x41
    b70a:	5c9b      	ldrb	r3, [r3, r2]
    b70c:	2202      	movs	r2, #2
    b70e:	4013      	ands	r3, r2
    b710:	b2db      	uxtb	r3, r3
    b712:	2b00      	cmp	r3, #0
    b714:	d105      	bne.n	b722 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    b716:	687b      	ldr	r3, [r7, #4]
    b718:	2100      	movs	r1, #0
    b71a:	0018      	movs	r0, r3
    b71c:	4b3b      	ldr	r3, [pc, #236]	; (b80c <_http_client_handle_entity+0x198>)
    b71e:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
    b720:	e06e      	b.n	b800 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    b722:	687b      	ldr	r3, [r7, #4]
    b724:	22dc      	movs	r2, #220	; 0xdc
    b726:	589b      	ldr	r3, [r3, r2]
    b728:	001a      	movs	r2, r3
    b72a:	697b      	ldr	r3, [r7, #20]
    b72c:	189a      	adds	r2, r3, r2
    b72e:	687b      	ldr	r3, [r7, #4]
    b730:	0011      	movs	r1, r2
    b732:	0018      	movs	r0, r3
    b734:	4b36      	ldr	r3, [pc, #216]	; (b810 <_http_client_handle_entity+0x19c>)
    b736:	4798      	blx	r3
				return module->recved_size;
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b73c:	e061      	b.n	b802 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
    b73e:	687b      	ldr	r3, [r7, #4]
    b740:	22dc      	movs	r2, #220	; 0xdc
    b742:	589b      	ldr	r3, [r3, r2]
    b744:	2b00      	cmp	r3, #0
    b746:	db57      	blt.n	b7f8 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
    b748:	687b      	ldr	r3, [r7, #4]
    b74a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    b74c:	2308      	movs	r3, #8
    b74e:	18fb      	adds	r3, r7, r3
    b750:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
    b752:	2308      	movs	r3, #8
    b754:	18fb      	adds	r3, r7, r3
    b756:	697a      	ldr	r2, [r7, #20]
    b758:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
    b75a:	687b      	ldr	r3, [r7, #4]
    b75c:	22e0      	movs	r2, #224	; 0xe0
    b75e:	589a      	ldr	r2, [r3, r2]
    b760:	687b      	ldr	r3, [r7, #4]
    b762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b764:	18d2      	adds	r2, r2, r3
    b766:	687b      	ldr	r3, [r7, #4]
    b768:	21e0      	movs	r1, #224	; 0xe0
    b76a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	22dc      	movs	r2, #220	; 0xdc
    b770:	589a      	ldr	r2, [r3, r2]
    b772:	687b      	ldr	r3, [r7, #4]
    b774:	21e0      	movs	r1, #224	; 0xe0
    b776:	585b      	ldr	r3, [r3, r1]
    b778:	429a      	cmp	r2, r3
    b77a:	dc0c      	bgt.n	b796 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    b77c:	687b      	ldr	r3, [r7, #4]
    b77e:	22d8      	movs	r2, #216	; 0xd8
    b780:	2100      	movs	r1, #0
    b782:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
    b784:	687b      	ldr	r3, [r7, #4]
    b786:	22e4      	movs	r2, #228	; 0xe4
    b788:	2100      	movs	r1, #0
    b78a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
    b78c:	2308      	movs	r3, #8
    b78e:	18fb      	adds	r3, r7, r3
    b790:	2201      	movs	r2, #1
    b792:	721a      	strb	r2, [r3, #8]
    b794:	e003      	b.n	b79e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
    b796:	2308      	movs	r3, #8
    b798:	18fb      	adds	r3, r7, r3
    b79a:	2200      	movs	r2, #0
    b79c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    b79e:	687b      	ldr	r3, [r7, #4]
    b7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	d006      	beq.n	b7b4 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    b7a6:	687b      	ldr	r3, [r7, #4]
    b7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b7aa:	2208      	movs	r2, #8
    b7ac:	18ba      	adds	r2, r7, r2
    b7ae:	6878      	ldr	r0, [r7, #4]
    b7b0:	2103      	movs	r1, #3
    b7b2:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    b7b4:	2308      	movs	r3, #8
    b7b6:	18fb      	adds	r3, r7, r3
    b7b8:	7a1b      	ldrb	r3, [r3, #8]
    b7ba:	2b01      	cmp	r3, #1
    b7bc:	d112      	bne.n	b7e4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
    b7be:	687b      	ldr	r3, [r7, #4]
    b7c0:	2241      	movs	r2, #65	; 0x41
    b7c2:	5c9b      	ldrb	r3, [r3, r2]
    b7c4:	2202      	movs	r2, #2
    b7c6:	4013      	ands	r3, r2
    b7c8:	b2db      	uxtb	r3, r3
    b7ca:	2b00      	cmp	r3, #0
    b7cc:	d10a      	bne.n	b7e4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    b7ce:	4b11      	ldr	r3, [pc, #68]	; (b814 <_http_client_handle_entity+0x1a0>)
    b7d0:	0018      	movs	r0, r3
    b7d2:	4b11      	ldr	r3, [pc, #68]	; (b818 <_http_client_handle_entity+0x1a4>)
    b7d4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    b7d6:	687b      	ldr	r3, [r7, #4]
    b7d8:	2100      	movs	r1, #0
    b7da:	0018      	movs	r0, r3
    b7dc:	4b0b      	ldr	r3, [pc, #44]	; (b80c <_http_client_handle_entity+0x198>)
    b7de:	4798      	blx	r3
					return 0;
    b7e0:	2300      	movs	r3, #0
    b7e2:	e00e      	b.n	b802 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    b7e4:	687b      	ldr	r3, [r7, #4]
    b7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b7e8:	697a      	ldr	r2, [r7, #20]
    b7ea:	18d2      	adds	r2, r2, r3
    b7ec:	687b      	ldr	r3, [r7, #4]
    b7ee:	0011      	movs	r1, r2
    b7f0:	0018      	movs	r0, r3
    b7f2:	4b07      	ldr	r3, [pc, #28]	; (b810 <_http_client_handle_entity+0x19c>)
    b7f4:	4798      	blx	r3
    b7f6:	e003      	b.n	b800 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
    b7f8:	687b      	ldr	r3, [r7, #4]
    b7fa:	0018      	movs	r0, r3
    b7fc:	4b07      	ldr	r3, [pc, #28]	; (b81c <_http_client_handle_entity+0x1a8>)
    b7fe:	4798      	blx	r3
		}
	}

	return 0;
    b800:	2300      	movs	r3, #0
}
    b802:	0018      	movs	r0, r3
    b804:	46bd      	mov	sp, r7
    b806:	b006      	add	sp, #24
    b808:	bd80      	pop	{r7, pc}
    b80a:	46c0      	nop			; (mov r8, r8)
    b80c:	0000a839 	.word	0x0000a839
    b810:	0000b821 	.word	0x0000b821
    b814:	0000f794 	.word	0x0000f794
    b818:	0000d041 	.word	0x0000d041
    b81c:	0000b461 	.word	0x0000b461

0000b820 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    b820:	b580      	push	{r7, lr}
    b822:	b084      	sub	sp, #16
    b824:	af00      	add	r7, sp, #0
    b826:	6078      	str	r0, [r7, #4]
    b828:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
    b82a:	687b      	ldr	r3, [r7, #4]
    b82c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b82e:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    b830:	687b      	ldr	r3, [r7, #4]
    b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b834:	001a      	movs	r2, r3
    b836:	683b      	ldr	r3, [r7, #0]
    b838:	1ad2      	subs	r2, r2, r3
    b83a:	68fb      	ldr	r3, [r7, #12]
    b83c:	18d3      	adds	r3, r2, r3
    b83e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
    b840:	68bb      	ldr	r3, [r7, #8]
    b842:	2b00      	cmp	r3, #0
    b844:	dd09      	ble.n	b85a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
    b846:	68ba      	ldr	r2, [r7, #8]
    b848:	6839      	ldr	r1, [r7, #0]
    b84a:	68fb      	ldr	r3, [r7, #12]
    b84c:	0018      	movs	r0, r3
    b84e:	4b06      	ldr	r3, [pc, #24]	; (b868 <_http_client_move_buffer+0x48>)
    b850:	4798      	blx	r3
		module->recved_size = remain;
    b852:	68ba      	ldr	r2, [r7, #8]
    b854:	687b      	ldr	r3, [r7, #4]
    b856:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
    b858:	e002      	b.n	b860 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
    b85a:	687b      	ldr	r3, [r7, #4]
    b85c:	2200      	movs	r2, #0
    b85e:	645a      	str	r2, [r3, #68]	; 0x44
}
    b860:	46c0      	nop			; (mov r8, r8)
    b862:	46bd      	mov	sp, r7
    b864:	b004      	add	sp, #16
    b866:	bd80      	pop	{r7, pc}
    b868:	0000cd9f 	.word	0x0000cd9f

0000b86c <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    b86c:	b580      	push	{r7, lr}
    b86e:	b084      	sub	sp, #16
    b870:	af00      	add	r7, sp, #0
    b872:	60f8      	str	r0, [r7, #12]
    b874:	60b9      	str	r1, [r7, #8]
    b876:	607a      	str	r2, [r7, #4]
    b878:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    b87a:	68fb      	ldr	r3, [r7, #12]
    b87c:	687a      	ldr	r2, [r7, #4]
    b87e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    b880:	68fb      	ldr	r3, [r7, #12]
    b882:	68ba      	ldr	r2, [r7, #8]
    b884:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    b886:	68fb      	ldr	r3, [r7, #12]
    b888:	2200      	movs	r2, #0
    b88a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    b88c:	68fb      	ldr	r3, [r7, #12]
    b88e:	683a      	ldr	r2, [r7, #0]
    b890:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    b892:	68fb      	ldr	r3, [r7, #12]
    b894:	69ba      	ldr	r2, [r7, #24]
    b896:	60da      	str	r2, [r3, #12]
}
    b898:	46c0      	nop			; (mov r8, r8)
    b89a:	46bd      	mov	sp, r7
    b89c:	b004      	add	sp, #16
    b89e:	bd80      	pop	{r7, pc}

0000b8a0 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b084      	sub	sp, #16
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	6078      	str	r0, [r7, #4]
    b8a8:	000a      	movs	r2, r1
    b8aa:	1cfb      	adds	r3, r7, #3
    b8ac:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    b8ae:	687b      	ldr	r3, [r7, #4]
    b8b0:	681a      	ldr	r2, [r3, #0]
    b8b2:	687b      	ldr	r3, [r7, #4]
    b8b4:	685b      	ldr	r3, [r3, #4]
    b8b6:	1ad3      	subs	r3, r2, r3
    b8b8:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
    b8ba:	68fb      	ldr	r3, [r7, #12]
    b8bc:	2b00      	cmp	r3, #0
    b8be:	dc03      	bgt.n	b8c8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    b8c0:	687b      	ldr	r3, [r7, #4]
    b8c2:	0018      	movs	r0, r3
    b8c4:	4b08      	ldr	r3, [pc, #32]	; (b8e8 <stream_writer_send_8+0x48>)
    b8c6:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	6919      	ldr	r1, [r3, #16]
    b8cc:	687b      	ldr	r3, [r7, #4]
    b8ce:	685b      	ldr	r3, [r3, #4]
    b8d0:	1c58      	adds	r0, r3, #1
    b8d2:	687a      	ldr	r2, [r7, #4]
    b8d4:	6050      	str	r0, [r2, #4]
    b8d6:	18cb      	adds	r3, r1, r3
    b8d8:	1cfa      	adds	r2, r7, #3
    b8da:	7812      	ldrb	r2, [r2, #0]
    b8dc:	701a      	strb	r2, [r3, #0]
}
    b8de:	46c0      	nop			; (mov r8, r8)
    b8e0:	46bd      	mov	sp, r7
    b8e2:	b004      	add	sp, #16
    b8e4:	bd80      	pop	{r7, pc}
    b8e6:	46c0      	nop			; (mov r8, r8)
    b8e8:	0000b929 	.word	0x0000b929

0000b8ec <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
    b8ec:	b580      	push	{r7, lr}
    b8ee:	b084      	sub	sp, #16
    b8f0:	af00      	add	r7, sp, #0
    b8f2:	60f8      	str	r0, [r7, #12]
    b8f4:	60b9      	str	r1, [r7, #8]
    b8f6:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    b8f8:	e00d      	b.n	b916 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    b8fa:	68bb      	ldr	r3, [r7, #8]
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	b25a      	sxtb	r2, r3
    b900:	68fb      	ldr	r3, [r7, #12]
    b902:	0011      	movs	r1, r2
    b904:	0018      	movs	r0, r3
    b906:	4b07      	ldr	r3, [pc, #28]	; (b924 <stream_writer_send_buffer+0x38>)
    b908:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    b90a:	687b      	ldr	r3, [r7, #4]
    b90c:	3b01      	subs	r3, #1
    b90e:	607b      	str	r3, [r7, #4]
    b910:	68bb      	ldr	r3, [r7, #8]
    b912:	3301      	adds	r3, #1
    b914:	60bb      	str	r3, [r7, #8]
    b916:	687b      	ldr	r3, [r7, #4]
    b918:	2b00      	cmp	r3, #0
    b91a:	d1ee      	bne.n	b8fa <stream_writer_send_buffer+0xe>
	}
}
    b91c:	46c0      	nop			; (mov r8, r8)
    b91e:	46bd      	mov	sp, r7
    b920:	b004      	add	sp, #16
    b922:	bd80      	pop	{r7, pc}
    b924:	0000b8a1 	.word	0x0000b8a1

0000b928 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    b928:	b590      	push	{r4, r7, lr}
    b92a:	b083      	sub	sp, #12
    b92c:	af00      	add	r7, sp, #0
    b92e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    b930:	687b      	ldr	r3, [r7, #4]
    b932:	685b      	ldr	r3, [r3, #4]
    b934:	2b00      	cmp	r3, #0
    b936:	d00c      	beq.n	b952 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	689c      	ldr	r4, [r3, #8]
    b93c:	687b      	ldr	r3, [r7, #4]
    b93e:	68d8      	ldr	r0, [r3, #12]
    b940:	687b      	ldr	r3, [r7, #4]
    b942:	6919      	ldr	r1, [r3, #16]
    b944:	687b      	ldr	r3, [r7, #4]
    b946:	685b      	ldr	r3, [r3, #4]
    b948:	001a      	movs	r2, r3
    b94a:	47a0      	blx	r4
		writer->written = 0;
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	2200      	movs	r2, #0
    b950:	605a      	str	r2, [r3, #4]
	}
}
    b952:	46c0      	nop			; (mov r8, r8)
    b954:	46bd      	mov	sp, r7
    b956:	b003      	add	sp, #12
    b958:	bd90      	pop	{r4, r7, pc}
	...

0000b95c <system_cpu_clock_get_hz>:
{
    b95c:	b580      	push	{r7, lr}
    b95e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    b960:	2000      	movs	r0, #0
    b962:	4b05      	ldr	r3, [pc, #20]	; (b978 <system_cpu_clock_get_hz+0x1c>)
    b964:	4798      	blx	r3
    b966:	0002      	movs	r2, r0
    b968:	4b04      	ldr	r3, [pc, #16]	; (b97c <system_cpu_clock_get_hz+0x20>)
    b96a:	7a1b      	ldrb	r3, [r3, #8]
    b96c:	b2db      	uxtb	r3, r3
    b96e:	40da      	lsrs	r2, r3
    b970:	0013      	movs	r3, r2
}
    b972:	0018      	movs	r0, r3
    b974:	46bd      	mov	sp, r7
    b976:	bd80      	pop	{r7, pc}
    b978:	000099c5 	.word	0x000099c5
    b97c:	40000400 	.word	0x40000400

0000b980 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    b980:	b580      	push	{r7, lr}
    b982:	b084      	sub	sp, #16
    b984:	af00      	add	r7, sp, #0
    b986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    b988:	687b      	ldr	r3, [r7, #4]
    b98a:	681b      	ldr	r3, [r3, #0]
    b98c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    b98e:	46c0      	nop			; (mov r8, r8)
    b990:	68fb      	ldr	r3, [r7, #12]
    b992:	689b      	ldr	r3, [r3, #8]
    b994:	2202      	movs	r2, #2
    b996:	4013      	ands	r3, r2
    b998:	d1fa      	bne.n	b990 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    b99a:	68fb      	ldr	r3, [r7, #12]
    b99c:	681b      	ldr	r3, [r3, #0]
    b99e:	2202      	movs	r2, #2
    b9a0:	431a      	orrs	r2, r3
    b9a2:	68fb      	ldr	r3, [r7, #12]
    b9a4:	601a      	str	r2, [r3, #0]
}
    b9a6:	46c0      	nop			; (mov r8, r8)
    b9a8:	46bd      	mov	sp, r7
    b9aa:	b004      	add	sp, #16
    b9ac:	bd80      	pop	{r7, pc}
	...

0000b9b0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b082      	sub	sp, #8
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    b9b8:	4b04      	ldr	r3, [pc, #16]	; (b9cc <sw_timer_tcc_callback+0x1c>)
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	1c5a      	adds	r2, r3, #1
    b9be:	4b03      	ldr	r3, [pc, #12]	; (b9cc <sw_timer_tcc_callback+0x1c>)
    b9c0:	601a      	str	r2, [r3, #0]
}
    b9c2:	46c0      	nop			; (mov r8, r8)
    b9c4:	46bd      	mov	sp, r7
    b9c6:	b002      	add	sp, #8
    b9c8:	bd80      	pop	{r7, pc}
    b9ca:	46c0      	nop			; (mov r8, r8)
    b9cc:	2000027c 	.word	0x2000027c

0000b9d0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    b9d0:	b580      	push	{r7, lr}
    b9d2:	b082      	sub	sp, #8
    b9d4:	af00      	add	r7, sp, #0
    b9d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    b9d8:	687b      	ldr	r3, [r7, #4]
    b9da:	2264      	movs	r2, #100	; 0x64
    b9dc:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	2200      	movs	r2, #0
    b9e2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	2200      	movs	r2, #0
    b9e8:	705a      	strb	r2, [r3, #1]
}
    b9ea:	46c0      	nop			; (mov r8, r8)
    b9ec:	46bd      	mov	sp, r7
    b9ee:	b002      	add	sp, #8
    b9f0:	bd80      	pop	{r7, pc}
	...

0000b9f4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    b9f4:	b590      	push	{r4, r7, lr}
    b9f6:	b0b1      	sub	sp, #196	; 0xc4
    b9f8:	af00      	add	r7, sp, #0
    b9fa:	6078      	str	r0, [r7, #4]
    b9fc:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    b9fe:	230c      	movs	r3, #12
    ba00:	18fb      	adds	r3, r7, r3
    ba02:	4a2e      	ldr	r2, [pc, #184]	; (babc <sw_timer_init+0xc8>)
    ba04:	ca13      	ldmia	r2!, {r0, r1, r4}
    ba06:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    ba08:	683b      	ldr	r3, [r7, #0]
    ba0a:	885b      	ldrh	r3, [r3, #2]
    ba0c:	001a      	movs	r2, r3
    ba0e:	687b      	ldr	r3, [r7, #4]
    ba10:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    ba12:	687b      	ldr	r3, [r7, #4]
    ba14:	3314      	adds	r3, #20
    ba16:	22bc      	movs	r2, #188	; 0xbc
    ba18:	18ba      	adds	r2, r7, r2
    ba1a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    ba1c:	683b      	ldr	r3, [r7, #0]
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	001a      	movs	r2, r3
    ba22:	230c      	movs	r3, #12
    ba24:	18fb      	adds	r3, r7, r3
    ba26:	0092      	lsls	r2, r2, #2
    ba28:	58d2      	ldr	r2, [r2, r3]
    ba2a:	2318      	movs	r3, #24
    ba2c:	18fb      	adds	r3, r7, r3
    ba2e:	0011      	movs	r1, r2
    ba30:	0018      	movs	r0, r3
    ba32:	4b23      	ldr	r3, [pc, #140]	; (bac0 <sw_timer_init+0xcc>)
    ba34:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    ba36:	4b23      	ldr	r3, [pc, #140]	; (bac4 <sw_timer_init+0xd0>)
    ba38:	4798      	blx	r3
    ba3a:	0004      	movs	r4, r0
    ba3c:	683b      	ldr	r3, [r7, #0]
    ba3e:	885b      	ldrh	r3, [r3, #2]
    ba40:	001a      	movs	r2, r3
    ba42:	4b21      	ldr	r3, [pc, #132]	; (bac8 <sw_timer_init+0xd4>)
    ba44:	0011      	movs	r1, r2
    ba46:	22fa      	movs	r2, #250	; 0xfa
    ba48:	0210      	lsls	r0, r2, #8
    ba4a:	4798      	blx	r3
    ba4c:	0003      	movs	r3, r0
    ba4e:	001a      	movs	r2, r3
    ba50:	4b1e      	ldr	r3, [pc, #120]	; (bacc <sw_timer_init+0xd8>)
    ba52:	0011      	movs	r1, r2
    ba54:	0020      	movs	r0, r4
    ba56:	4798      	blx	r3
    ba58:	0003      	movs	r3, r0
    ba5a:	001a      	movs	r2, r3
    ba5c:	2318      	movs	r3, #24
    ba5e:	18fb      	adds	r3, r7, r3
    ba60:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    ba62:	2318      	movs	r3, #24
    ba64:	18fb      	adds	r3, r7, r3
    ba66:	2205      	movs	r2, #5
    ba68:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    ba6a:	683b      	ldr	r3, [r7, #0]
    ba6c:	781b      	ldrb	r3, [r3, #0]
    ba6e:	001a      	movs	r2, r3
    ba70:	230c      	movs	r3, #12
    ba72:	18fb      	adds	r3, r7, r3
    ba74:	0092      	lsls	r2, r2, #2
    ba76:	58d1      	ldr	r1, [r2, r3]
    ba78:	2318      	movs	r3, #24
    ba7a:	18fa      	adds	r2, r7, r3
    ba7c:	23bc      	movs	r3, #188	; 0xbc
    ba7e:	18fb      	adds	r3, r7, r3
    ba80:	681b      	ldr	r3, [r3, #0]
    ba82:	0018      	movs	r0, r3
    ba84:	4b12      	ldr	r3, [pc, #72]	; (bad0 <sw_timer_init+0xdc>)
    ba86:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ba88:	683b      	ldr	r3, [r7, #0]
    ba8a:	785b      	ldrb	r3, [r3, #1]
    ba8c:	3308      	adds	r3, #8
    ba8e:	b2da      	uxtb	r2, r3
    ba90:	4910      	ldr	r1, [pc, #64]	; (bad4 <sw_timer_init+0xe0>)
    ba92:	23bc      	movs	r3, #188	; 0xbc
    ba94:	18fb      	adds	r3, r7, r3
    ba96:	681b      	ldr	r3, [r3, #0]
    ba98:	0018      	movs	r0, r3
    ba9a:	4b0f      	ldr	r3, [pc, #60]	; (bad8 <sw_timer_init+0xe4>)
    ba9c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ba9e:	683b      	ldr	r3, [r7, #0]
    baa0:	785b      	ldrb	r3, [r3, #1]
    baa2:	3308      	adds	r3, #8
    baa4:	b2da      	uxtb	r2, r3
    baa6:	23bc      	movs	r3, #188	; 0xbc
    baa8:	18fb      	adds	r3, r7, r3
    baaa:	681b      	ldr	r3, [r3, #0]
    baac:	0011      	movs	r1, r2
    baae:	0018      	movs	r0, r3
    bab0:	4b0a      	ldr	r3, [pc, #40]	; (badc <sw_timer_init+0xe8>)
    bab2:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    bab4:	46c0      	nop			; (mov r8, r8)
    bab6:	46bd      	mov	sp, r7
    bab8:	b031      	add	sp, #196	; 0xc4
    baba:	bd90      	pop	{r4, r7, pc}
    babc:	0000f7d4 	.word	0x0000f7d4
    bac0:	000062ad 	.word	0x000062ad
    bac4:	0000b95d 	.word	0x0000b95d
    bac8:	0000cae5 	.word	0x0000cae5
    bacc:	0000c9d1 	.word	0x0000c9d1
    bad0:	00006909 	.word	0x00006909
    bad4:	0000b9b1 	.word	0x0000b9b1
    bad8:	00006d21 	.word	0x00006d21
    badc:	00006d61 	.word	0x00006d61

0000bae0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    bae0:	b580      	push	{r7, lr}
    bae2:	b084      	sub	sp, #16
    bae4:	af00      	add	r7, sp, #0
    bae6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	3314      	adds	r3, #20
    baec:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    baee:	68fb      	ldr	r3, [r7, #12]
    baf0:	0018      	movs	r0, r3
    baf2:	4b03      	ldr	r3, [pc, #12]	; (bb00 <sw_timer_enable+0x20>)
    baf4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    baf6:	46c0      	nop			; (mov r8, r8)
    baf8:	46bd      	mov	sp, r7
    bafa:	b004      	add	sp, #16
    bafc:	bd80      	pop	{r7, pc}
    bafe:	46c0      	nop			; (mov r8, r8)
    bb00:	0000b981 	.word	0x0000b981

0000bb04 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    bb04:	b580      	push	{r7, lr}
    bb06:	b086      	sub	sp, #24
    bb08:	af00      	add	r7, sp, #0
    bb0a:	60f8      	str	r0, [r7, #12]
    bb0c:	60b9      	str	r1, [r7, #8]
    bb0e:	607a      	str	r2, [r7, #4]
    bb10:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    bb12:	2300      	movs	r3, #0
    bb14:	617b      	str	r3, [r7, #20]
    bb16:	e032      	b.n	bb7e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    bb18:	68f9      	ldr	r1, [r7, #12]
    bb1a:	697a      	ldr	r2, [r7, #20]
    bb1c:	0013      	movs	r3, r2
    bb1e:	009b      	lsls	r3, r3, #2
    bb20:	189b      	adds	r3, r3, r2
    bb22:	009b      	lsls	r3, r3, #2
    bb24:	5c5b      	ldrb	r3, [r3, r1]
    bb26:	07db      	lsls	r3, r3, #31
    bb28:	0fdb      	lsrs	r3, r3, #31
    bb2a:	b2db      	uxtb	r3, r3
    bb2c:	2b00      	cmp	r3, #0
    bb2e:	d123      	bne.n	bb78 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    bb30:	697a      	ldr	r2, [r7, #20]
    bb32:	0013      	movs	r3, r2
    bb34:	009b      	lsls	r3, r3, #2
    bb36:	189b      	adds	r3, r3, r2
    bb38:	009b      	lsls	r3, r3, #2
    bb3a:	68fa      	ldr	r2, [r7, #12]
    bb3c:	18d3      	adds	r3, r2, r3
    bb3e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    bb40:	693b      	ldr	r3, [r7, #16]
    bb42:	68ba      	ldr	r2, [r7, #8]
    bb44:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    bb46:	693b      	ldr	r3, [r7, #16]
    bb48:	781a      	ldrb	r2, [r3, #0]
    bb4a:	2102      	movs	r1, #2
    bb4c:	438a      	bics	r2, r1
    bb4e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    bb50:	693b      	ldr	r3, [r7, #16]
    bb52:	687a      	ldr	r2, [r7, #4]
    bb54:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    bb56:	68fb      	ldr	r3, [r7, #12]
    bb58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    bb5a:	4b0d      	ldr	r3, [pc, #52]	; (bb90 <sw_timer_register_callback+0x8c>)
    bb5c:	0011      	movs	r1, r2
    bb5e:	6838      	ldr	r0, [r7, #0]
    bb60:	4798      	blx	r3
    bb62:	0003      	movs	r3, r0
    bb64:	001a      	movs	r2, r3
    bb66:	693b      	ldr	r3, [r7, #16]
    bb68:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    bb6a:	693b      	ldr	r3, [r7, #16]
    bb6c:	781a      	ldrb	r2, [r3, #0]
    bb6e:	2101      	movs	r1, #1
    bb70:	430a      	orrs	r2, r1
    bb72:	701a      	strb	r2, [r3, #0]
			return index;
    bb74:	697b      	ldr	r3, [r7, #20]
    bb76:	e007      	b.n	bb88 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    bb78:	697b      	ldr	r3, [r7, #20]
    bb7a:	3301      	adds	r3, #1
    bb7c:	617b      	str	r3, [r7, #20]
    bb7e:	697b      	ldr	r3, [r7, #20]
    bb80:	2b00      	cmp	r3, #0
    bb82:	ddc9      	ble.n	bb18 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
    bb84:	2301      	movs	r3, #1
    bb86:	425b      	negs	r3, r3
}
    bb88:	0018      	movs	r0, r3
    bb8a:	46bd      	mov	sp, r7
    bb8c:	b006      	add	sp, #24
    bb8e:	bd80      	pop	{r7, pc}
    bb90:	0000c9d1 	.word	0x0000c9d1

0000bb94 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    bb94:	b580      	push	{r7, lr}
    bb96:	b086      	sub	sp, #24
    bb98:	af00      	add	r7, sp, #0
    bb9a:	60f8      	str	r0, [r7, #12]
    bb9c:	60b9      	str	r1, [r7, #8]
    bb9e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    bba0:	68ba      	ldr	r2, [r7, #8]
    bba2:	0013      	movs	r3, r2
    bba4:	009b      	lsls	r3, r3, #2
    bba6:	189b      	adds	r3, r3, r2
    bba8:	009b      	lsls	r3, r3, #2
    bbaa:	68fa      	ldr	r2, [r7, #12]
    bbac:	18d3      	adds	r3, r2, r3
    bbae:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    bbb0:	697b      	ldr	r3, [r7, #20]
    bbb2:	781a      	ldrb	r2, [r3, #0]
    bbb4:	2102      	movs	r1, #2
    bbb6:	430a      	orrs	r2, r1
    bbb8:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    bbba:	68fb      	ldr	r3, [r7, #12]
    bbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    bbbe:	4b07      	ldr	r3, [pc, #28]	; (bbdc <sw_timer_enable_callback+0x48>)
    bbc0:	0011      	movs	r1, r2
    bbc2:	6878      	ldr	r0, [r7, #4]
    bbc4:	4798      	blx	r3
    bbc6:	0003      	movs	r3, r0
    bbc8:	001a      	movs	r2, r3
    bbca:	4b05      	ldr	r3, [pc, #20]	; (bbe0 <sw_timer_enable_callback+0x4c>)
    bbcc:	681b      	ldr	r3, [r3, #0]
    bbce:	18d2      	adds	r2, r2, r3
    bbd0:	697b      	ldr	r3, [r7, #20]
    bbd2:	611a      	str	r2, [r3, #16]
}
    bbd4:	46c0      	nop			; (mov r8, r8)
    bbd6:	46bd      	mov	sp, r7
    bbd8:	b006      	add	sp, #24
    bbda:	bd80      	pop	{r7, pc}
    bbdc:	0000c9d1 	.word	0x0000c9d1
    bbe0:	2000027c 	.word	0x2000027c

0000bbe4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    bbe4:	b580      	push	{r7, lr}
    bbe6:	b084      	sub	sp, #16
    bbe8:	af00      	add	r7, sp, #0
    bbea:	6078      	str	r0, [r7, #4]
    bbec:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    bbee:	683a      	ldr	r2, [r7, #0]
    bbf0:	0013      	movs	r3, r2
    bbf2:	009b      	lsls	r3, r3, #2
    bbf4:	189b      	adds	r3, r3, r2
    bbf6:	009b      	lsls	r3, r3, #2
    bbf8:	687a      	ldr	r2, [r7, #4]
    bbfa:	18d3      	adds	r3, r2, r3
    bbfc:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    bbfe:	68fb      	ldr	r3, [r7, #12]
    bc00:	781a      	ldrb	r2, [r3, #0]
    bc02:	2102      	movs	r1, #2
    bc04:	438a      	bics	r2, r1
    bc06:	701a      	strb	r2, [r3, #0]
}
    bc08:	46c0      	nop			; (mov r8, r8)
    bc0a:	46bd      	mov	sp, r7
    bc0c:	b004      	add	sp, #16
    bc0e:	bd80      	pop	{r7, pc}

0000bc10 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    bc10:	b590      	push	{r4, r7, lr}
    bc12:	b085      	sub	sp, #20
    bc14:	af00      	add	r7, sp, #0
    bc16:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    bc18:	2300      	movs	r3, #0
    bc1a:	60fb      	str	r3, [r7, #12]
    bc1c:	e053      	b.n	bcc6 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    bc1e:	6879      	ldr	r1, [r7, #4]
    bc20:	68fa      	ldr	r2, [r7, #12]
    bc22:	0013      	movs	r3, r2
    bc24:	009b      	lsls	r3, r3, #2
    bc26:	189b      	adds	r3, r3, r2
    bc28:	009b      	lsls	r3, r3, #2
    bc2a:	5c5b      	ldrb	r3, [r3, r1]
    bc2c:	07db      	lsls	r3, r3, #31
    bc2e:	0fdb      	lsrs	r3, r3, #31
    bc30:	b2db      	uxtb	r3, r3
    bc32:	2b00      	cmp	r3, #0
    bc34:	d044      	beq.n	bcc0 <sw_timer_task+0xb0>
    bc36:	6879      	ldr	r1, [r7, #4]
    bc38:	68fa      	ldr	r2, [r7, #12]
    bc3a:	0013      	movs	r3, r2
    bc3c:	009b      	lsls	r3, r3, #2
    bc3e:	189b      	adds	r3, r3, r2
    bc40:	009b      	lsls	r3, r3, #2
    bc42:	5c5b      	ldrb	r3, [r3, r1]
    bc44:	079b      	lsls	r3, r3, #30
    bc46:	0fdb      	lsrs	r3, r3, #31
    bc48:	b2db      	uxtb	r3, r3
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d038      	beq.n	bcc0 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    bc4e:	68fa      	ldr	r2, [r7, #12]
    bc50:	0013      	movs	r3, r2
    bc52:	009b      	lsls	r3, r3, #2
    bc54:	189b      	adds	r3, r3, r2
    bc56:	009b      	lsls	r3, r3, #2
    bc58:	687a      	ldr	r2, [r7, #4]
    bc5a:	18d3      	adds	r3, r2, r3
    bc5c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    bc5e:	68bb      	ldr	r3, [r7, #8]
    bc60:	691a      	ldr	r2, [r3, #16]
    bc62:	4b1c      	ldr	r3, [pc, #112]	; (bcd4 <sw_timer_task+0xc4>)
    bc64:	681b      	ldr	r3, [r3, #0]
    bc66:	1ad3      	subs	r3, r2, r3
    bc68:	d52a      	bpl.n	bcc0 <sw_timer_task+0xb0>
    bc6a:	68bb      	ldr	r3, [r7, #8]
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	2204      	movs	r2, #4
    bc70:	4013      	ands	r3, r2
    bc72:	b2db      	uxtb	r3, r3
    bc74:	2b00      	cmp	r3, #0
    bc76:	d123      	bne.n	bcc0 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    bc78:	68bb      	ldr	r3, [r7, #8]
    bc7a:	781a      	ldrb	r2, [r3, #0]
    bc7c:	2104      	movs	r1, #4
    bc7e:	430a      	orrs	r2, r1
    bc80:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
    bc82:	68bb      	ldr	r3, [r7, #8]
    bc84:	68db      	ldr	r3, [r3, #12]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d007      	beq.n	bc9a <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
    bc8a:	68bb      	ldr	r3, [r7, #8]
    bc8c:	68da      	ldr	r2, [r3, #12]
    bc8e:	4b11      	ldr	r3, [pc, #68]	; (bcd4 <sw_timer_task+0xc4>)
    bc90:	681b      	ldr	r3, [r3, #0]
    bc92:	18d2      	adds	r2, r2, r3
    bc94:	68bb      	ldr	r3, [r7, #8]
    bc96:	611a      	str	r2, [r3, #16]
    bc98:	e004      	b.n	bca4 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    bc9a:	68bb      	ldr	r3, [r7, #8]
    bc9c:	781a      	ldrb	r2, [r3, #0]
    bc9e:	2102      	movs	r1, #2
    bca0:	438a      	bics	r2, r1
    bca2:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    bca4:	68bb      	ldr	r3, [r7, #8]
    bca6:	685c      	ldr	r4, [r3, #4]
    bca8:	68bb      	ldr	r3, [r7, #8]
    bcaa:	689a      	ldr	r2, [r3, #8]
    bcac:	68bb      	ldr	r3, [r7, #8]
    bcae:	68db      	ldr	r3, [r3, #12]
    bcb0:	68f9      	ldr	r1, [r7, #12]
    bcb2:	6878      	ldr	r0, [r7, #4]
    bcb4:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
    bcb6:	68bb      	ldr	r3, [r7, #8]
    bcb8:	781a      	ldrb	r2, [r3, #0]
    bcba:	2104      	movs	r1, #4
    bcbc:	438a      	bics	r2, r1
    bcbe:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    bcc0:	68fb      	ldr	r3, [r7, #12]
    bcc2:	3301      	adds	r3, #1
    bcc4:	60fb      	str	r3, [r7, #12]
    bcc6:	68fb      	ldr	r3, [r7, #12]
    bcc8:	2b00      	cmp	r3, #0
    bcca:	dda8      	ble.n	bc1e <sw_timer_task+0xe>
			}
		}
	}
}
    bccc:	46c0      	nop			; (mov r8, r8)
    bcce:	46bd      	mov	sp, r7
    bcd0:	b005      	add	sp, #20
    bcd2:	bd90      	pop	{r4, r7, pc}
    bcd4:	2000027c 	.word	0x2000027c

0000bcd8 <system_apb_clock_set_mask>:
{
    bcd8:	b580      	push	{r7, lr}
    bcda:	b082      	sub	sp, #8
    bcdc:	af00      	add	r7, sp, #0
    bcde:	0002      	movs	r2, r0
    bce0:	6039      	str	r1, [r7, #0]
    bce2:	1dfb      	adds	r3, r7, #7
    bce4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bce6:	1dfb      	adds	r3, r7, #7
    bce8:	781b      	ldrb	r3, [r3, #0]
    bcea:	2b01      	cmp	r3, #1
    bcec:	d00a      	beq.n	bd04 <system_apb_clock_set_mask+0x2c>
    bcee:	2b02      	cmp	r3, #2
    bcf0:	d00f      	beq.n	bd12 <system_apb_clock_set_mask+0x3a>
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	d114      	bne.n	bd20 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    bcf6:	4b0e      	ldr	r3, [pc, #56]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bcf8:	4a0d      	ldr	r2, [pc, #52]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bcfa:	6991      	ldr	r1, [r2, #24]
    bcfc:	683a      	ldr	r2, [r7, #0]
    bcfe:	430a      	orrs	r2, r1
    bd00:	619a      	str	r2, [r3, #24]
			break;
    bd02:	e00f      	b.n	bd24 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    bd04:	4b0a      	ldr	r3, [pc, #40]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bd06:	4a0a      	ldr	r2, [pc, #40]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bd08:	69d1      	ldr	r1, [r2, #28]
    bd0a:	683a      	ldr	r2, [r7, #0]
    bd0c:	430a      	orrs	r2, r1
    bd0e:	61da      	str	r2, [r3, #28]
			break;
    bd10:	e008      	b.n	bd24 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    bd12:	4b07      	ldr	r3, [pc, #28]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bd14:	4a06      	ldr	r2, [pc, #24]	; (bd30 <system_apb_clock_set_mask+0x58>)
    bd16:	6a11      	ldr	r1, [r2, #32]
    bd18:	683a      	ldr	r2, [r7, #0]
    bd1a:	430a      	orrs	r2, r1
    bd1c:	621a      	str	r2, [r3, #32]
			break;
    bd1e:	e001      	b.n	bd24 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    bd20:	2317      	movs	r3, #23
    bd22:	e000      	b.n	bd26 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    bd24:	2300      	movs	r3, #0
}
    bd26:	0018      	movs	r0, r3
    bd28:	46bd      	mov	sp, r7
    bd2a:	b002      	add	sp, #8
    bd2c:	bd80      	pop	{r7, pc}
    bd2e:	46c0      	nop			; (mov r8, r8)
    bd30:	40000400 	.word	0x40000400

0000bd34 <system_pinmux_get_group_from_gpio_pin>:
{
    bd34:	b580      	push	{r7, lr}
    bd36:	b084      	sub	sp, #16
    bd38:	af00      	add	r7, sp, #0
    bd3a:	0002      	movs	r2, r0
    bd3c:	1dfb      	adds	r3, r7, #7
    bd3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bd40:	230f      	movs	r3, #15
    bd42:	18fb      	adds	r3, r7, r3
    bd44:	1dfa      	adds	r2, r7, #7
    bd46:	7812      	ldrb	r2, [r2, #0]
    bd48:	09d2      	lsrs	r2, r2, #7
    bd4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bd4c:	230e      	movs	r3, #14
    bd4e:	18fb      	adds	r3, r7, r3
    bd50:	1dfa      	adds	r2, r7, #7
    bd52:	7812      	ldrb	r2, [r2, #0]
    bd54:	0952      	lsrs	r2, r2, #5
    bd56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bd58:	4b0d      	ldr	r3, [pc, #52]	; (bd90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bd5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    bd5c:	230f      	movs	r3, #15
    bd5e:	18fb      	adds	r3, r7, r3
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	2b00      	cmp	r3, #0
    bd64:	d10f      	bne.n	bd86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bd66:	230f      	movs	r3, #15
    bd68:	18fb      	adds	r3, r7, r3
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	009b      	lsls	r3, r3, #2
    bd6e:	2210      	movs	r2, #16
    bd70:	4694      	mov	ip, r2
    bd72:	44bc      	add	ip, r7
    bd74:	4463      	add	r3, ip
    bd76:	3b08      	subs	r3, #8
    bd78:	681a      	ldr	r2, [r3, #0]
    bd7a:	230e      	movs	r3, #14
    bd7c:	18fb      	adds	r3, r7, r3
    bd7e:	781b      	ldrb	r3, [r3, #0]
    bd80:	01db      	lsls	r3, r3, #7
    bd82:	18d3      	adds	r3, r2, r3
    bd84:	e000      	b.n	bd88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    bd86:	2300      	movs	r3, #0
}
    bd88:	0018      	movs	r0, r3
    bd8a:	46bd      	mov	sp, r7
    bd8c:	b004      	add	sp, #16
    bd8e:	bd80      	pop	{r7, pc}
    bd90:	41004400 	.word	0x41004400

0000bd94 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    bd94:	b580      	push	{r7, lr}
    bd96:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    bd98:	2102      	movs	r1, #2
    bd9a:	2001      	movs	r0, #1
    bd9c:	4b02      	ldr	r3, [pc, #8]	; (bda8 <dsu_crc32_init+0x14>)
    bd9e:	4798      	blx	r3
#endif

}
    bda0:	46c0      	nop			; (mov r8, r8)
    bda2:	46bd      	mov	sp, r7
    bda4:	bd80      	pop	{r7, pc}
    bda6:	46c0      	nop			; (mov r8, r8)
    bda8:	0000bcd9 	.word	0x0000bcd9

0000bdac <port_get_group_from_gpio_pin>:
{
    bdac:	b580      	push	{r7, lr}
    bdae:	b082      	sub	sp, #8
    bdb0:	af00      	add	r7, sp, #0
    bdb2:	0002      	movs	r2, r0
    bdb4:	1dfb      	adds	r3, r7, #7
    bdb6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    bdb8:	1dfb      	adds	r3, r7, #7
    bdba:	781b      	ldrb	r3, [r3, #0]
    bdbc:	0018      	movs	r0, r3
    bdbe:	4b03      	ldr	r3, [pc, #12]	; (bdcc <port_get_group_from_gpio_pin+0x20>)
    bdc0:	4798      	blx	r3
    bdc2:	0003      	movs	r3, r0
}
    bdc4:	0018      	movs	r0, r3
    bdc6:	46bd      	mov	sp, r7
    bdc8:	b002      	add	sp, #8
    bdca:	bd80      	pop	{r7, pc}
    bdcc:	0000bd35 	.word	0x0000bd35

0000bdd0 <port_get_config_defaults>:
{
    bdd0:	b580      	push	{r7, lr}
    bdd2:	b082      	sub	sp, #8
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    bdd8:	687b      	ldr	r3, [r7, #4]
    bdda:	2200      	movs	r2, #0
    bddc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    bdde:	687b      	ldr	r3, [r7, #4]
    bde0:	2201      	movs	r2, #1
    bde2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    bde4:	687b      	ldr	r3, [r7, #4]
    bde6:	2200      	movs	r2, #0
    bde8:	709a      	strb	r2, [r3, #2]
}
    bdea:	46c0      	nop			; (mov r8, r8)
    bdec:	46bd      	mov	sp, r7
    bdee:	b002      	add	sp, #8
    bdf0:	bd80      	pop	{r7, pc}
	...

0000bdf4 <port_pin_set_output_level>:
{
    bdf4:	b580      	push	{r7, lr}
    bdf6:	b084      	sub	sp, #16
    bdf8:	af00      	add	r7, sp, #0
    bdfa:	0002      	movs	r2, r0
    bdfc:	1dfb      	adds	r3, r7, #7
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	1dbb      	adds	r3, r7, #6
    be02:	1c0a      	adds	r2, r1, #0
    be04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    be06:	1dfb      	adds	r3, r7, #7
    be08:	781b      	ldrb	r3, [r3, #0]
    be0a:	0018      	movs	r0, r3
    be0c:	4b0d      	ldr	r3, [pc, #52]	; (be44 <port_pin_set_output_level+0x50>)
    be0e:	4798      	blx	r3
    be10:	0003      	movs	r3, r0
    be12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    be14:	1dfb      	adds	r3, r7, #7
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	221f      	movs	r2, #31
    be1a:	4013      	ands	r3, r2
    be1c:	2201      	movs	r2, #1
    be1e:	409a      	lsls	r2, r3
    be20:	0013      	movs	r3, r2
    be22:	60bb      	str	r3, [r7, #8]
	if (level) {
    be24:	1dbb      	adds	r3, r7, #6
    be26:	781b      	ldrb	r3, [r3, #0]
    be28:	2b00      	cmp	r3, #0
    be2a:	d003      	beq.n	be34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    be2c:	68fb      	ldr	r3, [r7, #12]
    be2e:	68ba      	ldr	r2, [r7, #8]
    be30:	619a      	str	r2, [r3, #24]
}
    be32:	e002      	b.n	be3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    be34:	68fb      	ldr	r3, [r7, #12]
    be36:	68ba      	ldr	r2, [r7, #8]
    be38:	615a      	str	r2, [r3, #20]
}
    be3a:	46c0      	nop			; (mov r8, r8)
    be3c:	46bd      	mov	sp, r7
    be3e:	b004      	add	sp, #16
    be40:	bd80      	pop	{r7, pc}
    be42:	46c0      	nop			; (mov r8, r8)
    be44:	0000bdad 	.word	0x0000bdad

0000be48 <system_interrupt_enable>:
{
    be48:	b580      	push	{r7, lr}
    be4a:	b082      	sub	sp, #8
    be4c:	af00      	add	r7, sp, #0
    be4e:	0002      	movs	r2, r0
    be50:	1dfb      	adds	r3, r7, #7
    be52:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    be54:	4b06      	ldr	r3, [pc, #24]	; (be70 <system_interrupt_enable+0x28>)
    be56:	1dfa      	adds	r2, r7, #7
    be58:	7812      	ldrb	r2, [r2, #0]
    be5a:	0011      	movs	r1, r2
    be5c:	221f      	movs	r2, #31
    be5e:	400a      	ands	r2, r1
    be60:	2101      	movs	r1, #1
    be62:	4091      	lsls	r1, r2
    be64:	000a      	movs	r2, r1
    be66:	601a      	str	r2, [r3, #0]
}
    be68:	46c0      	nop			; (mov r8, r8)
    be6a:	46bd      	mov	sp, r7
    be6c:	b002      	add	sp, #8
    be6e:	bd80      	pop	{r7, pc}
    be70:	e000e100 	.word	0xe000e100

0000be74 <spi_is_syncing>:
{
    be74:	b580      	push	{r7, lr}
    be76:	b084      	sub	sp, #16
    be78:	af00      	add	r7, sp, #0
    be7a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    be7c:	687b      	ldr	r3, [r7, #4]
    be7e:	681b      	ldr	r3, [r3, #0]
    be80:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    be82:	68fb      	ldr	r3, [r7, #12]
    be84:	69db      	ldr	r3, [r3, #28]
    be86:	1e5a      	subs	r2, r3, #1
    be88:	4193      	sbcs	r3, r2
    be8a:	b2db      	uxtb	r3, r3
}
    be8c:	0018      	movs	r0, r3
    be8e:	46bd      	mov	sp, r7
    be90:	b004      	add	sp, #16
    be92:	bd80      	pop	{r7, pc}

0000be94 <spi_get_config_defaults>:
{
    be94:	b580      	push	{r7, lr}
    be96:	b082      	sub	sp, #8
    be98:	af00      	add	r7, sp, #0
    be9a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    be9c:	687b      	ldr	r3, [r7, #4]
    be9e:	2201      	movs	r2, #1
    bea0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    bea2:	687b      	ldr	r3, [r7, #4]
    bea4:	2200      	movs	r2, #0
    bea6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    bea8:	687b      	ldr	r3, [r7, #4]
    beaa:	2200      	movs	r2, #0
    beac:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	22c0      	movs	r2, #192	; 0xc0
    beb2:	0392      	lsls	r2, r2, #14
    beb4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    beb6:	687b      	ldr	r3, [r7, #4]
    beb8:	2200      	movs	r2, #0
    beba:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    bebc:	687b      	ldr	r3, [r7, #4]
    bebe:	2200      	movs	r2, #0
    bec0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    bec2:	687b      	ldr	r3, [r7, #4]
    bec4:	2201      	movs	r2, #1
    bec6:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    bec8:	687b      	ldr	r3, [r7, #4]
    beca:	2201      	movs	r2, #1
    becc:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    bece:	687b      	ldr	r3, [r7, #4]
    bed0:	2200      	movs	r2, #0
    bed2:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    bed4:	687b      	ldr	r3, [r7, #4]
    bed6:	2224      	movs	r2, #36	; 0x24
    bed8:	2100      	movs	r1, #0
    beda:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    bedc:	687b      	ldr	r3, [r7, #4]
    bede:	3318      	adds	r3, #24
    bee0:	220c      	movs	r2, #12
    bee2:	2100      	movs	r1, #0
    bee4:	0018      	movs	r0, r3
    bee6:	4b0a      	ldr	r3, [pc, #40]	; (bf10 <spi_get_config_defaults+0x7c>)
    bee8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    beea:	687b      	ldr	r3, [r7, #4]
    beec:	4a09      	ldr	r2, [pc, #36]	; (bf14 <spi_get_config_defaults+0x80>)
    beee:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    bef0:	687b      	ldr	r3, [r7, #4]
    bef2:	2200      	movs	r2, #0
    bef4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    bef6:	687b      	ldr	r3, [r7, #4]
    bef8:	2200      	movs	r2, #0
    befa:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    befc:	687b      	ldr	r3, [r7, #4]
    befe:	2200      	movs	r2, #0
    bf00:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    bf02:	687b      	ldr	r3, [r7, #4]
    bf04:	2200      	movs	r2, #0
    bf06:	635a      	str	r2, [r3, #52]	; 0x34
};
    bf08:	46c0      	nop			; (mov r8, r8)
    bf0a:	46bd      	mov	sp, r7
    bf0c:	b002      	add	sp, #8
    bf0e:	bd80      	pop	{r7, pc}
    bf10:	0000cdc3 	.word	0x0000cdc3
    bf14:	000186a0 	.word	0x000186a0

0000bf18 <spi_enable>:
{
    bf18:	b580      	push	{r7, lr}
    bf1a:	b084      	sub	sp, #16
    bf1c:	af00      	add	r7, sp, #0
    bf1e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    bf20:	687b      	ldr	r3, [r7, #4]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    bf26:	687b      	ldr	r3, [r7, #4]
    bf28:	681b      	ldr	r3, [r3, #0]
    bf2a:	0018      	movs	r0, r3
    bf2c:	4b0b      	ldr	r3, [pc, #44]	; (bf5c <spi_enable+0x44>)
    bf2e:	4798      	blx	r3
    bf30:	0003      	movs	r3, r0
    bf32:	0018      	movs	r0, r3
    bf34:	4b0a      	ldr	r3, [pc, #40]	; (bf60 <spi_enable+0x48>)
    bf36:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    bf38:	46c0      	nop			; (mov r8, r8)
    bf3a:	687b      	ldr	r3, [r7, #4]
    bf3c:	0018      	movs	r0, r3
    bf3e:	4b09      	ldr	r3, [pc, #36]	; (bf64 <spi_enable+0x4c>)
    bf40:	4798      	blx	r3
    bf42:	1e03      	subs	r3, r0, #0
    bf44:	d1f9      	bne.n	bf3a <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    bf46:	68fb      	ldr	r3, [r7, #12]
    bf48:	681b      	ldr	r3, [r3, #0]
    bf4a:	2202      	movs	r2, #2
    bf4c:	431a      	orrs	r2, r3
    bf4e:	68fb      	ldr	r3, [r7, #12]
    bf50:	601a      	str	r2, [r3, #0]
}
    bf52:	46c0      	nop			; (mov r8, r8)
    bf54:	46bd      	mov	sp, r7
    bf56:	b004      	add	sp, #16
    bf58:	bd80      	pop	{r7, pc}
    bf5a:	46c0      	nop			; (mov r8, r8)
    bf5c:	0000774d 	.word	0x0000774d
    bf60:	0000be49 	.word	0x0000be49
    bf64:	0000be75 	.word	0x0000be75

0000bf68 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    bf68:	b580      	push	{r7, lr}
    bf6a:	b086      	sub	sp, #24
    bf6c:	af00      	add	r7, sp, #0
    bf6e:	60f8      	str	r0, [r7, #12]
    bf70:	60b9      	str	r1, [r7, #8]
    bf72:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    bf74:	687b      	ldr	r3, [r7, #4]
    bf76:	781a      	ldrb	r2, [r3, #0]
    bf78:	68fb      	ldr	r3, [r7, #12]
    bf7a:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    bf7c:	687b      	ldr	r3, [r7, #4]
    bf7e:	785a      	ldrb	r2, [r3, #1]
    bf80:	68fb      	ldr	r3, [r7, #12]
    bf82:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    bf84:	68fb      	ldr	r3, [r7, #12]
    bf86:	68ba      	ldr	r2, [r7, #8]
    bf88:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    bf8a:	2314      	movs	r3, #20
    bf8c:	18fb      	adds	r3, r7, r3
    bf8e:	0018      	movs	r0, r3
    bf90:	4b0c      	ldr	r3, [pc, #48]	; (bfc4 <at25dfx_chip_init+0x5c>)
    bf92:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    bf94:	2314      	movs	r3, #20
    bf96:	18fb      	adds	r3, r7, r3
    bf98:	2201      	movs	r2, #1
    bf9a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    bf9c:	68fb      	ldr	r3, [r7, #12]
    bf9e:	795b      	ldrb	r3, [r3, #5]
    bfa0:	2214      	movs	r2, #20
    bfa2:	18ba      	adds	r2, r7, r2
    bfa4:	0011      	movs	r1, r2
    bfa6:	0018      	movs	r0, r3
    bfa8:	4b07      	ldr	r3, [pc, #28]	; (bfc8 <at25dfx_chip_init+0x60>)
    bfaa:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    bfac:	68fb      	ldr	r3, [r7, #12]
    bfae:	795b      	ldrb	r3, [r3, #5]
    bfb0:	2101      	movs	r1, #1
    bfb2:	0018      	movs	r0, r3
    bfb4:	4b05      	ldr	r3, [pc, #20]	; (bfcc <at25dfx_chip_init+0x64>)
    bfb6:	4798      	blx	r3

	return STATUS_OK;
    bfb8:	2300      	movs	r3, #0
}
    bfba:	0018      	movs	r0, r3
    bfbc:	46bd      	mov	sp, r7
    bfbe:	b006      	add	sp, #24
    bfc0:	bd80      	pop	{r7, pc}
    bfc2:	46c0      	nop			; (mov r8, r8)
    bfc4:	0000bdd1 	.word	0x0000bdd1
    bfc8:	00007001 	.word	0x00007001
    bfcc:	0000bdf5 	.word	0x0000bdf5

0000bfd0 <nvm_get_config_defaults>:
{
    bfd0:	b580      	push	{r7, lr}
    bfd2:	b082      	sub	sp, #8
    bfd4:	af00      	add	r7, sp, #0
    bfd6:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    bfd8:	687b      	ldr	r3, [r7, #4]
    bfda:	2200      	movs	r2, #0
    bfdc:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    bfde:	687b      	ldr	r3, [r7, #4]
    bfe0:	2201      	movs	r2, #1
    bfe2:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    bfe4:	4b08      	ldr	r3, [pc, #32]	; (c008 <nvm_get_config_defaults+0x38>)
    bfe6:	685b      	ldr	r3, [r3, #4]
    bfe8:	06db      	lsls	r3, r3, #27
    bfea:	0f1b      	lsrs	r3, r3, #28
    bfec:	b2db      	uxtb	r3, r3
    bfee:	001a      	movs	r2, r3
    bff0:	687b      	ldr	r3, [r7, #4]
    bff2:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    bff4:	687b      	ldr	r3, [r7, #4]
    bff6:	2200      	movs	r2, #0
    bff8:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    bffa:	687b      	ldr	r3, [r7, #4]
    bffc:	2200      	movs	r2, #0
    bffe:	711a      	strb	r2, [r3, #4]
}
    c000:	46c0      	nop			; (mov r8, r8)
    c002:	46bd      	mov	sp, r7
    c004:	b002      	add	sp, #8
    c006:	bd80      	pop	{r7, pc}
    c008:	41004000 	.word	0x41004000

0000c00c <usart_is_syncing>:
{
    c00c:	b580      	push	{r7, lr}
    c00e:	b084      	sub	sp, #16
    c010:	af00      	add	r7, sp, #0
    c012:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c014:	687b      	ldr	r3, [r7, #4]
    c016:	681b      	ldr	r3, [r3, #0]
    c018:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    c01a:	68fb      	ldr	r3, [r7, #12]
    c01c:	69db      	ldr	r3, [r3, #28]
    c01e:	1e5a      	subs	r2, r3, #1
    c020:	4193      	sbcs	r3, r2
    c022:	b2db      	uxtb	r3, r3
}
    c024:	0018      	movs	r0, r3
    c026:	46bd      	mov	sp, r7
    c028:	b004      	add	sp, #16
    c02a:	bd80      	pop	{r7, pc}

0000c02c <_usart_wait_for_sync>:
{
    c02c:	b580      	push	{r7, lr}
    c02e:	b082      	sub	sp, #8
    c030:	af00      	add	r7, sp, #0
    c032:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    c034:	46c0      	nop			; (mov r8, r8)
    c036:	687b      	ldr	r3, [r7, #4]
    c038:	0018      	movs	r0, r3
    c03a:	4b04      	ldr	r3, [pc, #16]	; (c04c <_usart_wait_for_sync+0x20>)
    c03c:	4798      	blx	r3
    c03e:	1e03      	subs	r3, r0, #0
    c040:	d1f9      	bne.n	c036 <_usart_wait_for_sync+0xa>
}
    c042:	46c0      	nop			; (mov r8, r8)
    c044:	46bd      	mov	sp, r7
    c046:	b002      	add	sp, #8
    c048:	bd80      	pop	{r7, pc}
    c04a:	46c0      	nop			; (mov r8, r8)
    c04c:	0000c00d 	.word	0x0000c00d

0000c050 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    c050:	b580      	push	{r7, lr}
    c052:	b082      	sub	sp, #8
    c054:	af00      	add	r7, sp, #0
    c056:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c058:	687b      	ldr	r3, [r7, #4]
    c05a:	2280      	movs	r2, #128	; 0x80
    c05c:	05d2      	lsls	r2, r2, #23
    c05e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c060:	687b      	ldr	r3, [r7, #4]
    c062:	2200      	movs	r2, #0
    c064:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    c066:	687b      	ldr	r3, [r7, #4]
    c068:	22ff      	movs	r2, #255	; 0xff
    c06a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    c06c:	687b      	ldr	r3, [r7, #4]
    c06e:	2200      	movs	r2, #0
    c070:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c072:	687b      	ldr	r3, [r7, #4]
    c074:	2200      	movs	r2, #0
    c076:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    c078:	687b      	ldr	r3, [r7, #4]
    c07a:	2296      	movs	r2, #150	; 0x96
    c07c:	0192      	lsls	r2, r2, #6
    c07e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    c080:	687b      	ldr	r3, [r7, #4]
    c082:	2224      	movs	r2, #36	; 0x24
    c084:	2101      	movs	r1, #1
    c086:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    c088:	687b      	ldr	r3, [r7, #4]
    c08a:	2225      	movs	r2, #37	; 0x25
    c08c:	2101      	movs	r1, #1
    c08e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    c090:	687b      	ldr	r3, [r7, #4]
    c092:	2226      	movs	r2, #38	; 0x26
    c094:	2100      	movs	r1, #0
    c096:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    c098:	687b      	ldr	r3, [r7, #4]
    c09a:	2227      	movs	r2, #39	; 0x27
    c09c:	2100      	movs	r1, #0
    c09e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	2200      	movs	r2, #0
    c0a4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    c0a6:	687b      	ldr	r3, [r7, #4]
    c0a8:	2288      	movs	r2, #136	; 0x88
    c0aa:	0352      	lsls	r2, r2, #13
    c0ac:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    c0ae:	687b      	ldr	r3, [r7, #4]
    c0b0:	222c      	movs	r2, #44	; 0x2c
    c0b2:	2100      	movs	r1, #0
    c0b4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	222d      	movs	r2, #45	; 0x2d
    c0ba:	2100      	movs	r1, #0
    c0bc:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    c0be:	687b      	ldr	r3, [r7, #4]
    c0c0:	2200      	movs	r2, #0
    c0c2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    c0c4:	687b      	ldr	r3, [r7, #4]
    c0c6:	2200      	movs	r2, #0
    c0c8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    c0ca:	687b      	ldr	r3, [r7, #4]
    c0cc:	2200      	movs	r2, #0
    c0ce:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    c0d0:	687b      	ldr	r3, [r7, #4]
    c0d2:	2200      	movs	r2, #0
    c0d4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	2200      	movs	r2, #0
    c0da:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c0dc:	687b      	ldr	r3, [r7, #4]
    c0de:	2200      	movs	r2, #0
    c0e0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c0e2:	687b      	ldr	r3, [r7, #4]
    c0e4:	2200      	movs	r2, #0
    c0e6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c0e8:	687b      	ldr	r3, [r7, #4]
    c0ea:	2200      	movs	r2, #0
    c0ec:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c0ee:	687b      	ldr	r3, [r7, #4]
    c0f0:	2200      	movs	r2, #0
    c0f2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c0f4:	687b      	ldr	r3, [r7, #4]
    c0f6:	2200      	movs	r2, #0
    c0f8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    c0fa:	687b      	ldr	r3, [r7, #4]
    c0fc:	2213      	movs	r2, #19
    c0fe:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c100:	687b      	ldr	r3, [r7, #4]
    c102:	2200      	movs	r2, #0
    c104:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    c106:	46c0      	nop			; (mov r8, r8)
    c108:	46bd      	mov	sp, r7
    c10a:	b002      	add	sp, #8
    c10c:	bd80      	pop	{r7, pc}
	...

0000c110 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    c110:	b580      	push	{r7, lr}
    c112:	b084      	sub	sp, #16
    c114:	af00      	add	r7, sp, #0
    c116:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c118:	687b      	ldr	r3, [r7, #4]
    c11a:	681b      	ldr	r3, [r3, #0]
    c11c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c11e:	687b      	ldr	r3, [r7, #4]
    c120:	681b      	ldr	r3, [r3, #0]
    c122:	0018      	movs	r0, r3
    c124:	4b09      	ldr	r3, [pc, #36]	; (c14c <usart_enable+0x3c>)
    c126:	4798      	blx	r3
    c128:	0003      	movs	r3, r0
    c12a:	0018      	movs	r0, r3
    c12c:	4b08      	ldr	r3, [pc, #32]	; (c150 <usart_enable+0x40>)
    c12e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    c130:	687b      	ldr	r3, [r7, #4]
    c132:	0018      	movs	r0, r3
    c134:	4b07      	ldr	r3, [pc, #28]	; (c154 <usart_enable+0x44>)
    c136:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c138:	68fb      	ldr	r3, [r7, #12]
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	2202      	movs	r2, #2
    c13e:	431a      	orrs	r2, r3
    c140:	68fb      	ldr	r3, [r7, #12]
    c142:	601a      	str	r2, [r3, #0]
}
    c144:	46c0      	nop			; (mov r8, r8)
    c146:	46bd      	mov	sp, r7
    c148:	b004      	add	sp, #16
    c14a:	bd80      	pop	{r7, pc}
    c14c:	0000774d 	.word	0x0000774d
    c150:	0000be49 	.word	0x0000be49
    c154:	0000c02d 	.word	0x0000c02d

0000c158 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    c158:	b580      	push	{r7, lr}
    c15a:	b084      	sub	sp, #16
    c15c:	af00      	add	r7, sp, #0
    c15e:	60f8      	str	r0, [r7, #12]
    c160:	60b9      	str	r1, [r7, #8]
    c162:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c164:	687a      	ldr	r2, [r7, #4]
    c166:	68b9      	ldr	r1, [r7, #8]
    c168:	68fb      	ldr	r3, [r7, #12]
    c16a:	0018      	movs	r0, r3
    c16c:	4b05      	ldr	r3, [pc, #20]	; (c184 <usart_serial_init+0x2c>)
    c16e:	4798      	blx	r3
    c170:	1e03      	subs	r3, r0, #0
    c172:	d101      	bne.n	c178 <usart_serial_init+0x20>
		return true;
    c174:	2301      	movs	r3, #1
    c176:	e000      	b.n	c17a <usart_serial_init+0x22>
	}
	else {
		return false;
    c178:	2300      	movs	r3, #0
	}
}
    c17a:	0018      	movs	r0, r3
    c17c:	46bd      	mov	sp, r7
    c17e:	b004      	add	sp, #16
    c180:	bd80      	pop	{r7, pc}
    c182:	46c0      	nop			; (mov r8, r8)
    c184:	00008719 	.word	0x00008719

0000c188 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    c188:	b580      	push	{r7, lr}
    c18a:	b082      	sub	sp, #8
    c18c:	af00      	add	r7, sp, #0
    c18e:	6078      	str	r0, [r7, #4]
    c190:	000a      	movs	r2, r1
    c192:	1cfb      	adds	r3, r7, #3
    c194:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    c196:	46c0      	nop			; (mov r8, r8)
    c198:	1cfb      	adds	r3, r7, #3
    c19a:	781b      	ldrb	r3, [r3, #0]
    c19c:	b29a      	uxth	r2, r3
    c19e:	687b      	ldr	r3, [r7, #4]
    c1a0:	0011      	movs	r1, r2
    c1a2:	0018      	movs	r0, r3
    c1a4:	4b04      	ldr	r3, [pc, #16]	; (c1b8 <usart_serial_putchar+0x30>)
    c1a6:	4798      	blx	r3
    c1a8:	1e03      	subs	r3, r0, #0
    c1aa:	d1f5      	bne.n	c198 <usart_serial_putchar+0x10>

	return STATUS_OK;
    c1ac:	2300      	movs	r3, #0
}
    c1ae:	0018      	movs	r0, r3
    c1b0:	46bd      	mov	sp, r7
    c1b2:	b002      	add	sp, #8
    c1b4:	bd80      	pop	{r7, pc}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	0000898d 	.word	0x0000898d

0000c1bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c1bc:	b580      	push	{r7, lr}
    c1be:	b084      	sub	sp, #16
    c1c0:	af00      	add	r7, sp, #0
    c1c2:	6078      	str	r0, [r7, #4]
    c1c4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    c1c6:	230e      	movs	r3, #14
    c1c8:	18fb      	adds	r3, r7, r3
    c1ca:	2200      	movs	r2, #0
    c1cc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c1ce:	46c0      	nop			; (mov r8, r8)
    c1d0:	230e      	movs	r3, #14
    c1d2:	18fa      	adds	r2, r7, r3
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	0011      	movs	r1, r2
    c1d8:	0018      	movs	r0, r3
    c1da:	4b07      	ldr	r3, [pc, #28]	; (c1f8 <usart_serial_getchar+0x3c>)
    c1dc:	4798      	blx	r3
    c1de:	1e03      	subs	r3, r0, #0
    c1e0:	d1f6      	bne.n	c1d0 <usart_serial_getchar+0x14>

	*c = temp;
    c1e2:	230e      	movs	r3, #14
    c1e4:	18fb      	adds	r3, r7, r3
    c1e6:	881b      	ldrh	r3, [r3, #0]
    c1e8:	b2da      	uxtb	r2, r3
    c1ea:	683b      	ldr	r3, [r7, #0]
    c1ec:	701a      	strb	r2, [r3, #0]
}
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	46bd      	mov	sp, r7
    c1f2:	b004      	add	sp, #16
    c1f4:	bd80      	pop	{r7, pc}
    c1f6:	46c0      	nop			; (mov r8, r8)
    c1f8:	000089f1 	.word	0x000089f1

0000c1fc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    c1fc:	b580      	push	{r7, lr}
    c1fe:	b084      	sub	sp, #16
    c200:	af00      	add	r7, sp, #0
    c202:	60f8      	str	r0, [r7, #12]
    c204:	60b9      	str	r1, [r7, #8]
    c206:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    c208:	4b10      	ldr	r3, [pc, #64]	; (c24c <stdio_serial_init+0x50>)
    c20a:	68fa      	ldr	r2, [r7, #12]
    c20c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c20e:	4b10      	ldr	r3, [pc, #64]	; (c250 <stdio_serial_init+0x54>)
    c210:	4a10      	ldr	r2, [pc, #64]	; (c254 <stdio_serial_init+0x58>)
    c212:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c214:	4b10      	ldr	r3, [pc, #64]	; (c258 <stdio_serial_init+0x5c>)
    c216:	4a11      	ldr	r2, [pc, #68]	; (c25c <stdio_serial_init+0x60>)
    c218:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    c21a:	687a      	ldr	r2, [r7, #4]
    c21c:	68b9      	ldr	r1, [r7, #8]
    c21e:	68fb      	ldr	r3, [r7, #12]
    c220:	0018      	movs	r0, r3
    c222:	4b0f      	ldr	r3, [pc, #60]	; (c260 <stdio_serial_init+0x64>)
    c224:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c226:	4b0f      	ldr	r3, [pc, #60]	; (c264 <stdio_serial_init+0x68>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	689b      	ldr	r3, [r3, #8]
    c22c:	2100      	movs	r1, #0
    c22e:	0018      	movs	r0, r3
    c230:	4b0d      	ldr	r3, [pc, #52]	; (c268 <stdio_serial_init+0x6c>)
    c232:	4798      	blx	r3
	setbuf(stdin, NULL);
    c234:	4b0b      	ldr	r3, [pc, #44]	; (c264 <stdio_serial_init+0x68>)
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	685b      	ldr	r3, [r3, #4]
    c23a:	2100      	movs	r1, #0
    c23c:	0018      	movs	r0, r3
    c23e:	4b0a      	ldr	r3, [pc, #40]	; (c268 <stdio_serial_init+0x6c>)
    c240:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	46bd      	mov	sp, r7
    c246:	b004      	add	sp, #16
    c248:	bd80      	pop	{r7, pc}
    c24a:	46c0      	nop			; (mov r8, r8)
    c24c:	20000460 	.word	0x20000460
    c250:	2000045c 	.word	0x2000045c
    c254:	0000c189 	.word	0x0000c189
    c258:	20000458 	.word	0x20000458
    c25c:	0000c1bd 	.word	0x0000c1bd
    c260:	0000c159 	.word	0x0000c159
    c264:	20000014 	.word	0x20000014
    c268:	0000d079 	.word	0x0000d079

0000c26c <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = { 0 };
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    c26c:	b590      	push	{r4, r7, lr}
    c26e:	b091      	sub	sp, #68	; 0x44
    c270:	af00      	add	r7, sp, #0
	enum status_code status;
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    c272:	1d3b      	adds	r3, r7, #4
    c274:	0018      	movs	r0, r3
    c276:	4b1d      	ldr	r3, [pc, #116]	; (c2ec <at25dfx_init+0x80>)
    c278:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = 120000; // 120kHz - AT25DFX_CLOCK_SPEED;
    c27a:	1d3b      	adds	r3, r7, #4
    c27c:	4a1c      	ldr	r2, [pc, #112]	; (c2f0 <at25dfx_init+0x84>)
    c27e:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E; // AT25DFX_SPI_PINMUX_SETTING;
    c280:	1d3b      	adds	r3, r7, #4
    c282:	2280      	movs	r2, #128	; 0x80
    c284:	0252      	lsls	r2, r2, #9
    c286:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0; // MISO - AT25DFX_SPI_PINMUX_PAD0;
    c288:	1d3b      	adds	r3, r7, #4
    c28a:	4a1a      	ldr	r2, [pc, #104]	; (c2f4 <at25dfx_init+0x88>)
    c28c:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED; // CS - AT25DFX_SPI_PINMUX_PAD1;
    c28e:	1d3b      	adds	r3, r7, #4
    c290:	2201      	movs	r2, #1
    c292:	4252      	negs	r2, r2
    c294:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2; // MOSI - AT25DFX_SPI_PINMUX_PAD2;
    c296:	1d3b      	adds	r3, r7, #4
    c298:	4a17      	ldr	r2, [pc, #92]	; (c2f8 <at25dfx_init+0x8c>)
    c29a:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3; // SCK - AT25DFX_SPI_PINMUX_PAD3;
    c29c:	1d3b      	adds	r3, r7, #4
    c29e:	4a17      	ldr	r2, [pc, #92]	; (c2fc <at25dfx_init+0x90>)
    c2a0:	635a      	str	r2, [r3, #52]	; 0x34
	status = spi_init(&at25dfx_spi, SERCOM1 /*AT25DFX_SPI*/, &at25dfx_spi_config);
    c2a2:	233f      	movs	r3, #63	; 0x3f
    c2a4:	18fc      	adds	r4, r7, r3
    c2a6:	1d3a      	adds	r2, r7, #4
    c2a8:	4915      	ldr	r1, [pc, #84]	; (c300 <at25dfx_init+0x94>)
    c2aa:	4b16      	ldr	r3, [pc, #88]	; (c304 <at25dfx_init+0x98>)
    c2ac:	0018      	movs	r0, r3
    c2ae:	4b16      	ldr	r3, [pc, #88]	; (c308 <at25dfx_init+0x9c>)
    c2b0:	4798      	blx	r3
    c2b2:	0003      	movs	r3, r0
    c2b4:	7023      	strb	r3, [r4, #0]
	spi_enable(&at25dfx_spi);
    c2b6:	4b13      	ldr	r3, [pc, #76]	; (c304 <at25dfx_init+0x98>)
    c2b8:	0018      	movs	r0, r3
    c2ba:	4b14      	ldr	r3, [pc, #80]	; (c30c <at25dfx_init+0xa0>)
    c2bc:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_081A; // AT25DFX_MEM_TYPE;
    c2be:	233c      	movs	r3, #60	; 0x3c
    c2c0:	18fb      	adds	r3, r7, r3
    c2c2:	2204      	movs	r2, #4
    c2c4:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = PIN_PA07; // AT25DFX_CS;
    c2c6:	233c      	movs	r3, #60	; 0x3c
    c2c8:	18fb      	adds	r3, r7, r3
    c2ca:	2207      	movs	r2, #7
    c2cc:	705a      	strb	r2, [r3, #1]
	status = at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    c2ce:	233f      	movs	r3, #63	; 0x3f
    c2d0:	18fc      	adds	r4, r7, r3
    c2d2:	233c      	movs	r3, #60	; 0x3c
    c2d4:	18fa      	adds	r2, r7, r3
    c2d6:	490b      	ldr	r1, [pc, #44]	; (c304 <at25dfx_init+0x98>)
    c2d8:	4b0d      	ldr	r3, [pc, #52]	; (c310 <at25dfx_init+0xa4>)
    c2da:	0018      	movs	r0, r3
    c2dc:	4b0d      	ldr	r3, [pc, #52]	; (c314 <at25dfx_init+0xa8>)
    c2de:	4798      	blx	r3
    c2e0:	0003      	movs	r3, r0
    c2e2:	7023      	strb	r3, [r4, #0]
}
    c2e4:	46c0      	nop			; (mov r8, r8)
    c2e6:	46bd      	mov	sp, r7
    c2e8:	b011      	add	sp, #68	; 0x44
    c2ea:	bd90      	pop	{r4, r7, pc}
    c2ec:	0000be95 	.word	0x0000be95
    c2f0:	0001d4c0 	.word	0x0001d4c0
    c2f4:	00100002 	.word	0x00100002
    c2f8:	00120002 	.word	0x00120002
    c2fc:	00130002 	.word	0x00130002
    c300:	42000c00 	.word	0x42000c00
    c304:	200005ac 	.word	0x200005ac
    c308:	00007ce5 	.word	0x00007ce5
    c30c:	0000bf19 	.word	0x0000bf19
    c310:	20000464 	.word	0x20000464
    c314:	0000bf69 	.word	0x0000bf69

0000c318 <nvm_init>:

void nvm_init(void)
{
    c318:	b580      	push	{r7, lr}
    c31a:	b082      	sub	sp, #8
    c31c:	af00      	add	r7, sp, #0
	struct nvm_config config_nvm;
	nvm_get_config_defaults(&config_nvm);
    c31e:	003b      	movs	r3, r7
    c320:	0018      	movs	r0, r3
    c322:	4b06      	ldr	r3, [pc, #24]	; (c33c <nvm_init+0x24>)
    c324:	4798      	blx	r3
	config_nvm.manual_page_write = false;
    c326:	003b      	movs	r3, r7
    c328:	2200      	movs	r2, #0
    c32a:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config_nvm);
    c32c:	003b      	movs	r3, r7
    c32e:	0018      	movs	r0, r3
    c330:	4b03      	ldr	r3, [pc, #12]	; (c340 <nvm_init+0x28>)
    c332:	4798      	blx	r3
}
    c334:	46c0      	nop			; (mov r8, r8)
    c336:	46bd      	mov	sp, r7
    c338:	b002      	add	sp, #8
    c33a:	bd80      	pop	{r7, pc}
    c33c:	0000bfd1 	.word	0x0000bfd1
    c340:	00006f01 	.word	0x00006f01

0000c344 <serial_init>:
#define EDBG_CDC_SERCOM_PINMUX_PAD0  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD1  PINMUX_UNUSED
#define EDBG_CDC_SERCOM_PINMUX_PAD2  PINMUX_PB10D_SERCOM4_PAD2
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
static void serial_init(void)
{
    c344:	b580      	push	{r7, lr}
    c346:	b090      	sub	sp, #64	; 0x40
    c348:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    c34a:	003b      	movs	r3, r7
    c34c:	0018      	movs	r0, r3
    c34e:	4b13      	ldr	r3, [pc, #76]	; (c39c <serial_init+0x58>)
    c350:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    c352:	003b      	movs	r3, r7
    c354:	22c4      	movs	r2, #196	; 0xc4
    c356:	0392      	lsls	r2, r2, #14
    c358:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    c35a:	003b      	movs	r3, r7
    c35c:	2201      	movs	r2, #1
    c35e:	4252      	negs	r2, r2
    c360:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    c362:	003b      	movs	r3, r7
    c364:	2201      	movs	r2, #1
    c366:	4252      	negs	r2, r2
    c368:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    c36a:	003b      	movs	r3, r7
    c36c:	4a0c      	ldr	r2, [pc, #48]	; (c3a0 <serial_init+0x5c>)
    c36e:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    c370:	003b      	movs	r3, r7
    c372:	4a0c      	ldr	r2, [pc, #48]	; (c3a4 <serial_init+0x60>)
    c374:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    c376:	003b      	movs	r3, r7
    c378:	22e1      	movs	r2, #225	; 0xe1
    c37a:	0252      	lsls	r2, r2, #9
    c37c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    c37e:	003a      	movs	r2, r7
    c380:	4909      	ldr	r1, [pc, #36]	; (c3a8 <serial_init+0x64>)
    c382:	4b0a      	ldr	r3, [pc, #40]	; (c3ac <serial_init+0x68>)
    c384:	0018      	movs	r0, r3
    c386:	4b0a      	ldr	r3, [pc, #40]	; (c3b0 <serial_init+0x6c>)
    c388:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    c38a:	4b08      	ldr	r3, [pc, #32]	; (c3ac <serial_init+0x68>)
    c38c:	0018      	movs	r0, r3
    c38e:	4b09      	ldr	r3, [pc, #36]	; (c3b4 <serial_init+0x70>)
    c390:	4798      	blx	r3
}
    c392:	46c0      	nop			; (mov r8, r8)
    c394:	46bd      	mov	sp, r7
    c396:	b010      	add	sp, #64	; 0x40
    c398:	bd80      	pop	{r7, pc}
    c39a:	46c0      	nop			; (mov r8, r8)
    c39c:	0000c051 	.word	0x0000c051
    c3a0:	002a0003 	.word	0x002a0003
    c3a4:	002b0003 	.word	0x002b0003
    c3a8:	42001800 	.word	0x42001800
    c3ac:	20000280 	.word	0x20000280
    c3b0:	0000c1fd 	.word	0x0000c1fd
    c3b4:	0000c111 	.word	0x0000c111

0000c3b8 <init_state>:

/**
	* \brief Initialize download state to not ready.
	*/
static void init_state(void)
{
    c3b8:	b580      	push	{r7, lr}
    c3ba:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
    c3bc:	4b02      	ldr	r3, [pc, #8]	; (c3c8 <init_state+0x10>)
    c3be:	2200      	movs	r2, #0
    c3c0:	701a      	strb	r2, [r3, #0]
}
    c3c2:	46c0      	nop			; (mov r8, r8)
    c3c4:	46bd      	mov	sp, r7
    c3c6:	bd80      	pop	{r7, pc}
    c3c8:	200002b4 	.word	0x200002b4

0000c3cc <clear_state>:
/**
	* \brief Clear state parameter at download processing state.
	* \param[in] mask Check download_state.
	*/
static void clear_state(download_state mask)
{
    c3cc:	b580      	push	{r7, lr}
    c3ce:	b082      	sub	sp, #8
    c3d0:	af00      	add	r7, sp, #0
    c3d2:	0002      	movs	r2, r0
    c3d4:	1dfb      	adds	r3, r7, #7
    c3d6:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
    c3d8:	1dfb      	adds	r3, r7, #7
    c3da:	781b      	ldrb	r3, [r3, #0]
    c3dc:	b25b      	sxtb	r3, r3
    c3de:	43db      	mvns	r3, r3
    c3e0:	b25b      	sxtb	r3, r3
    c3e2:	4a06      	ldr	r2, [pc, #24]	; (c3fc <clear_state+0x30>)
    c3e4:	7812      	ldrb	r2, [r2, #0]
    c3e6:	b252      	sxtb	r2, r2
    c3e8:	4013      	ands	r3, r2
    c3ea:	b25b      	sxtb	r3, r3
    c3ec:	b2da      	uxtb	r2, r3
    c3ee:	4b03      	ldr	r3, [pc, #12]	; (c3fc <clear_state+0x30>)
    c3f0:	701a      	strb	r2, [r3, #0]
}
    c3f2:	46c0      	nop			; (mov r8, r8)
    c3f4:	46bd      	mov	sp, r7
    c3f6:	b002      	add	sp, #8
    c3f8:	bd80      	pop	{r7, pc}
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	200002b4 	.word	0x200002b4

0000c400 <add_state>:
/**
	* \brief Add state parameter at download processing state.
	* \param[in] mask Check download_state.
	*/
static void add_state(download_state mask)
{
    c400:	b580      	push	{r7, lr}
    c402:	b082      	sub	sp, #8
    c404:	af00      	add	r7, sp, #0
    c406:	0002      	movs	r2, r0
    c408:	1dfb      	adds	r3, r7, #7
    c40a:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
    c40c:	4b05      	ldr	r3, [pc, #20]	; (c424 <add_state+0x24>)
    c40e:	781a      	ldrb	r2, [r3, #0]
    c410:	1dfb      	adds	r3, r7, #7
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	4313      	orrs	r3, r2
    c416:	b2da      	uxtb	r2, r3
    c418:	4b02      	ldr	r3, [pc, #8]	; (c424 <add_state+0x24>)
    c41a:	701a      	strb	r2, [r3, #0]
}
    c41c:	46c0      	nop			; (mov r8, r8)
    c41e:	46bd      	mov	sp, r7
    c420:	b002      	add	sp, #8
    c422:	bd80      	pop	{r7, pc}
    c424:	200002b4 	.word	0x200002b4

0000c428 <is_state_set>:
	* \param[in] mask Check download_state.
	* \return true if this state is set, false otherwise.
	*/

static inline bool is_state_set(download_state mask)
{
    c428:	b580      	push	{r7, lr}
    c42a:	b082      	sub	sp, #8
    c42c:	af00      	add	r7, sp, #0
    c42e:	0002      	movs	r2, r0
    c430:	1dfb      	adds	r3, r7, #7
    c432:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
    c434:	4b06      	ldr	r3, [pc, #24]	; (c450 <is_state_set+0x28>)
    c436:	781b      	ldrb	r3, [r3, #0]
    c438:	1dfa      	adds	r2, r7, #7
    c43a:	7812      	ldrb	r2, [r2, #0]
    c43c:	4013      	ands	r3, r2
    c43e:	b2db      	uxtb	r3, r3
    c440:	1e5a      	subs	r2, r3, #1
    c442:	4193      	sbcs	r3, r2
    c444:	b2db      	uxtb	r3, r3
}
    c446:	0018      	movs	r0, r3
    c448:	46bd      	mov	sp, r7
    c44a:	b002      	add	sp, #8
    c44c:	bd80      	pop	{r7, pc}
    c44e:	46c0      	nop			; (mov r8, r8)
    c450:	200002b4 	.word	0x200002b4

0000c454 <start_download>:

/**
	* \brief Start file download via HTTP connection.
	*/
static void start_download(void)
{
    c454:	b590      	push	{r4, r7, lr}
    c456:	b083      	sub	sp, #12
    c458:	af02      	add	r7, sp, #8
		printf("start_download: MMC storage not ready.\r\n");
		return;
	}
	*/

	if (!is_state_set(WIFI_CONNECTED)) {
    c45a:	2002      	movs	r0, #2
    c45c:	4b18      	ldr	r3, [pc, #96]	; (c4c0 <start_download+0x6c>)
    c45e:	4798      	blx	r3
    c460:	0003      	movs	r3, r0
    c462:	001a      	movs	r2, r3
    c464:	2301      	movs	r3, #1
    c466:	4053      	eors	r3, r2
    c468:	b2db      	uxtb	r3, r3
    c46a:	2b00      	cmp	r3, #0
    c46c:	d004      	beq.n	c478 <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
    c46e:	4b15      	ldr	r3, [pc, #84]	; (c4c4 <start_download+0x70>)
    c470:	0018      	movs	r0, r3
    c472:	4b15      	ldr	r3, [pc, #84]	; (c4c8 <start_download+0x74>)
    c474:	4798      	blx	r3
		return;
    c476:	e01f      	b.n	c4b8 <start_download+0x64>
	}

	if (is_state_set(GET_REQUESTED)) {
    c478:	2004      	movs	r0, #4
    c47a:	4b11      	ldr	r3, [pc, #68]	; (c4c0 <start_download+0x6c>)
    c47c:	4798      	blx	r3
    c47e:	1e03      	subs	r3, r0, #0
    c480:	d004      	beq.n	c48c <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
    c482:	4b12      	ldr	r3, [pc, #72]	; (c4cc <start_download+0x78>)
    c484:	0018      	movs	r0, r3
    c486:	4b10      	ldr	r3, [pc, #64]	; (c4c8 <start_download+0x74>)
    c488:	4798      	blx	r3
		return;
    c48a:	e015      	b.n	c4b8 <start_download+0x64>
	}

	if (is_state_set(DOWNLOADING)) {
    c48c:	2008      	movs	r0, #8
    c48e:	4b0c      	ldr	r3, [pc, #48]	; (c4c0 <start_download+0x6c>)
    c490:	4798      	blx	r3
    c492:	1e03      	subs	r3, r0, #0
    c494:	d004      	beq.n	c4a0 <start_download+0x4c>
		printf("start_download: running download already.\r\n");
    c496:	4b0e      	ldr	r3, [pc, #56]	; (c4d0 <start_download+0x7c>)
    c498:	0018      	movs	r0, r3
    c49a:	4b0b      	ldr	r3, [pc, #44]	; (c4c8 <start_download+0x74>)
    c49c:	4798      	blx	r3
		return;
    c49e:	e00b      	b.n	c4b8 <start_download+0x64>
	}

	/* Send the HTTP request. */
	printf("start_download: sending HTTP request...\r\n");
    c4a0:	4b0c      	ldr	r3, [pc, #48]	; (c4d4 <start_download+0x80>)
    c4a2:	0018      	movs	r0, r3
    c4a4:	4b08      	ldr	r3, [pc, #32]	; (c4c8 <start_download+0x74>)
    c4a6:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    c4a8:	490b      	ldr	r1, [pc, #44]	; (c4d8 <start_download+0x84>)
    c4aa:	480c      	ldr	r0, [pc, #48]	; (c4dc <start_download+0x88>)
    c4ac:	2300      	movs	r3, #0
    c4ae:	9300      	str	r3, [sp, #0]
    c4b0:	2300      	movs	r3, #0
    c4b2:	2201      	movs	r2, #1
    c4b4:	4c0a      	ldr	r4, [pc, #40]	; (c4e0 <start_download+0x8c>)
    c4b6:	47a0      	blx	r4
}
    c4b8:	46bd      	mov	sp, r7
    c4ba:	b001      	add	sp, #4
    c4bc:	bd90      	pop	{r4, r7, pc}
    c4be:	46c0      	nop			; (mov r8, r8)
    c4c0:	0000c429 	.word	0x0000c429
    c4c4:	0000f8a4 	.word	0x0000f8a4
    c4c8:	0000d041 	.word	0x0000d041
    c4cc:	0000f8d0 	.word	0x0000f8d0
    c4d0:	0000f8fc 	.word	0x0000f8fc
    c4d4:	0000f928 	.word	0x0000f928
    c4d8:	0000f954 	.word	0x0000f954
    c4dc:	200004c4 	.word	0x200004c4
    c4e0:	0000a52d 	.word	0x0000a52d

0000c4e4 <store_file_packet>:
	* \brief Store received packet to file.
	* \param[in] data Packet data.
	* \param[in] length Packet data length.
	*/
static void store_file_packet(char *data, uint32_t length)
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b082      	sub	sp, #8
    c4e8:	af00      	add	r7, sp, #0
    c4ea:	6078      	str	r0, [r7, #4]
    c4ec:	6039      	str	r1, [r7, #0]
	printf("Data!");
    c4ee:	4b04      	ldr	r3, [pc, #16]	; (c500 <store_file_packet+0x1c>)
    c4f0:	0018      	movs	r0, r3
    c4f2:	4b04      	ldr	r3, [pc, #16]	; (c504 <store_file_packet+0x20>)
    c4f4:	4798      	blx	r3
}
    c4f6:	46c0      	nop			; (mov r8, r8)
    c4f8:	46bd      	mov	sp, r7
    c4fa:	b002      	add	sp, #8
    c4fc:	bd80      	pop	{r7, pc}
    c4fe:	46c0      	nop			; (mov r8, r8)
    c500:	0000f98c 	.word	0x0000f98c
    c504:	0000cf25 	.word	0x0000cf25

0000c508 <http_client_callback>:
	* \param[in]  module_inst     Module instance of HTTP client module.
	* \param[in]  type            Type of event.
	* \param[in]  data            Data structure of the event. \refer http_client_data
	*/
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    c508:	b580      	push	{r7, lr}
    c50a:	b084      	sub	sp, #16
    c50c:	af00      	add	r7, sp, #0
    c50e:	60f8      	str	r0, [r7, #12]
    c510:	60b9      	str	r1, [r7, #8]
    c512:	607a      	str	r2, [r7, #4]
	switch (type) {
    c514:	68bb      	ldr	r3, [r7, #8]
    c516:	2b04      	cmp	r3, #4
    c518:	d900      	bls.n	c51c <http_client_callback+0x14>
    c51a:	e068      	b.n	c5ee <http_client_callback+0xe6>
    c51c:	68bb      	ldr	r3, [r7, #8]
    c51e:	009a      	lsls	r2, r3, #2
    c520:	4b34      	ldr	r3, [pc, #208]	; (c5f4 <http_client_callback+0xec>)
    c522:	18d3      	adds	r3, r2, r3
    c524:	681b      	ldr	r3, [r3, #0]
    c526:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
    c528:	4b33      	ldr	r3, [pc, #204]	; (c5f8 <http_client_callback+0xf0>)
    c52a:	0018      	movs	r0, r3
    c52c:	4b33      	ldr	r3, [pc, #204]	; (c5fc <http_client_callback+0xf4>)
    c52e:	4798      	blx	r3
		break;
    c530:	e05d      	b.n	c5ee <http_client_callback+0xe6>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
    c532:	4b33      	ldr	r3, [pc, #204]	; (c600 <http_client_callback+0xf8>)
    c534:	0018      	movs	r0, r3
    c536:	4b31      	ldr	r3, [pc, #196]	; (c5fc <http_client_callback+0xf4>)
    c538:	4798      	blx	r3
		add_state(GET_REQUESTED);
    c53a:	2004      	movs	r0, #4
    c53c:	4b31      	ldr	r3, [pc, #196]	; (c604 <http_client_callback+0xfc>)
    c53e:	4798      	blx	r3
		break;
    c540:	e055      	b.n	c5ee <http_client_callback+0xe6>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
    c546:	0019      	movs	r1, r3
				(unsigned int)data->recv_response.content_length);
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: received response %u data size %u\r\n",
    c54c:	4b2e      	ldr	r3, [pc, #184]	; (c608 <http_client_callback+0x100>)
    c54e:	0018      	movs	r0, r3
    c550:	4b2e      	ldr	r3, [pc, #184]	; (c60c <http_client_callback+0x104>)
    c552:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    c554:	687b      	ldr	r3, [r7, #4]
    c556:	881b      	ldrh	r3, [r3, #0]
    c558:	2bc8      	cmp	r3, #200	; 0xc8
    c55a:	d003      	beq.n	c564 <http_client_callback+0x5c>
			//http_file_size = data->recv_response.content_length;
			//received_file_size = 0;
		} 
		else {
			add_state(CANCELED);
    c55c:	2020      	movs	r0, #32
    c55e:	4b29      	ldr	r3, [pc, #164]	; (c604 <http_client_callback+0xfc>)
    c560:	4798      	blx	r3
			return;
    c562:	e044      	b.n	c5ee <http_client_callback+0xe6>
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	685b      	ldr	r3, [r3, #4]
    c568:	4a29      	ldr	r2, [pc, #164]	; (c610 <http_client_callback+0x108>)
    c56a:	4293      	cmp	r3, r2
    c56c:	d83a      	bhi.n	c5e4 <http_client_callback+0xdc>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    c56e:	687b      	ldr	r3, [r7, #4]
    c570:	689a      	ldr	r2, [r3, #8]
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	685b      	ldr	r3, [r3, #4]
    c576:	0019      	movs	r1, r3
    c578:	0010      	movs	r0, r2
    c57a:	4b26      	ldr	r3, [pc, #152]	; (c614 <http_client_callback+0x10c>)
    c57c:	4798      	blx	r3
			add_state(COMPLETED);
    c57e:	2010      	movs	r0, #16
    c580:	4b20      	ldr	r3, [pc, #128]	; (c604 <http_client_callback+0xfc>)
    c582:	4798      	blx	r3
		}
		break;
    c584:	e02e      	b.n	c5e4 <http_client_callback+0xdc>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    c586:	687b      	ldr	r3, [r7, #4]
    c588:	685a      	ldr	r2, [r3, #4]
    c58a:	687b      	ldr	r3, [r7, #4]
    c58c:	681b      	ldr	r3, [r3, #0]
    c58e:	0019      	movs	r1, r3
    c590:	0010      	movs	r0, r2
    c592:	4b20      	ldr	r3, [pc, #128]	; (c614 <http_client_callback+0x10c>)
    c594:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    c596:	687b      	ldr	r3, [r7, #4]
    c598:	7a1b      	ldrb	r3, [r3, #8]
    c59a:	2b00      	cmp	r3, #0
    c59c:	d024      	beq.n	c5e8 <http_client_callback+0xe0>
			add_state(COMPLETED);
    c59e:	2010      	movs	r0, #16
    c5a0:	4b18      	ldr	r3, [pc, #96]	; (c604 <http_client_callback+0xfc>)
    c5a2:	4798      	blx	r3
		}

		break;
    c5a4:	e020      	b.n	c5e8 <http_client_callback+0xe0>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    c5a6:	687b      	ldr	r3, [r7, #4]
    c5a8:	681a      	ldr	r2, [r3, #0]
    c5aa:	4b1b      	ldr	r3, [pc, #108]	; (c618 <http_client_callback+0x110>)
    c5ac:	0011      	movs	r1, r2
    c5ae:	0018      	movs	r0, r3
    c5b0:	4b16      	ldr	r3, [pc, #88]	; (c60c <http_client_callback+0x104>)
    c5b2:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
			* It means the server has closed the connection (timeout).
			* This is normal operation.
			*/
		if (data->disconnected.reason == -EAGAIN) {
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	681b      	ldr	r3, [r3, #0]
    c5b8:	330b      	adds	r3, #11
    c5ba:	d117      	bne.n	c5ec <http_client_callback+0xe4>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
    c5bc:	2008      	movs	r0, #8
    c5be:	4b17      	ldr	r3, [pc, #92]	; (c61c <http_client_callback+0x114>)
    c5c0:	4798      	blx	r3
    c5c2:	1e03      	subs	r3, r0, #0
    c5c4:	d002      	beq.n	c5cc <http_client_callback+0xc4>
				//f_close(&file_object);
				clear_state(DOWNLOADING);
    c5c6:	2008      	movs	r0, #8
    c5c8:	4b15      	ldr	r3, [pc, #84]	; (c620 <http_client_callback+0x118>)
    c5ca:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
    c5cc:	2004      	movs	r0, #4
    c5ce:	4b13      	ldr	r3, [pc, #76]	; (c61c <http_client_callback+0x114>)
    c5d0:	4798      	blx	r3
    c5d2:	1e03      	subs	r3, r0, #0
    c5d4:	d002      	beq.n	c5dc <http_client_callback+0xd4>
				clear_state(GET_REQUESTED);
    c5d6:	2004      	movs	r0, #4
    c5d8:	4b11      	ldr	r3, [pc, #68]	; (c620 <http_client_callback+0x118>)
    c5da:	4798      	blx	r3
			}

			start_download();
    c5dc:	4b11      	ldr	r3, [pc, #68]	; (c624 <http_client_callback+0x11c>)
    c5de:	4798      	blx	r3
		}

		break;
    c5e0:	46c0      	nop			; (mov r8, r8)
    c5e2:	e003      	b.n	c5ec <http_client_callback+0xe4>
		break;
    c5e4:	46c0      	nop			; (mov r8, r8)
    c5e6:	e002      	b.n	c5ee <http_client_callback+0xe6>
		break;
    c5e8:	46c0      	nop			; (mov r8, r8)
    c5ea:	e000      	b.n	c5ee <http_client_callback+0xe6>
		break;
    c5ec:	46c0      	nop			; (mov r8, r8)
	}
}
    c5ee:	46bd      	mov	sp, r7
    c5f0:	b004      	add	sp, #16
    c5f2:	bd80      	pop	{r7, pc}
    c5f4:	0000fc88 	.word	0x0000fc88
    c5f8:	0000f994 	.word	0x0000f994
    c5fc:	0000d041 	.word	0x0000d041
    c600:	0000f9cc 	.word	0x0000f9cc
    c604:	0000c401 	.word	0x0000c401
    c608:	0000f9f8 	.word	0x0000f9f8
    c60c:	0000cf25 	.word	0x0000cf25
    c610:	000005a6 	.word	0x000005a6
    c614:	0000c4e5 	.word	0x0000c4e5
    c618:	0000fa34 	.word	0x0000fa34
    c61c:	0000c429 	.word	0x0000c429
    c620:	0000c3cd 	.word	0x0000c3cd
    c624:	0000c455 	.word	0x0000c455

0000c628 <socket_cb>:
	*  - tstrSocketAcceptMsg
	*  - tstrSocketConnectMsg
	*  - tstrSocketRecvMsg
	*/
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    c628:	b580      	push	{r7, lr}
    c62a:	b082      	sub	sp, #8
    c62c:	af00      	add	r7, sp, #0
    c62e:	603a      	str	r2, [r7, #0]
    c630:	1dfb      	adds	r3, r7, #7
    c632:	1c02      	adds	r2, r0, #0
    c634:	701a      	strb	r2, [r3, #0]
    c636:	1dbb      	adds	r3, r7, #6
    c638:	1c0a      	adds	r2, r1, #0
    c63a:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    c63c:	683a      	ldr	r2, [r7, #0]
    c63e:	1dbb      	adds	r3, r7, #6
    c640:	7819      	ldrb	r1, [r3, #0]
    c642:	1dfb      	adds	r3, r7, #7
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	b25b      	sxtb	r3, r3
    c648:	0018      	movs	r0, r3
    c64a:	4b03      	ldr	r3, [pc, #12]	; (c658 <socket_cb+0x30>)
    c64c:	4798      	blx	r3
}
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	46bd      	mov	sp, r7
    c652:	b002      	add	sp, #8
    c654:	bd80      	pop	{r7, pc}
    c656:	46c0      	nop			; (mov r8, r8)
    c658:	0000a23d 	.word	0x0000a23d

0000c65c <resolve_cb>:
	* \brief Callback for the gethostbyname function (DNS Resolution callback).
	* \param[in] pu8DomainName Domain name of the host.
	* \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
	*/
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    c65c:	b5b0      	push	{r4, r5, r7, lr}
    c65e:	b084      	sub	sp, #16
    c660:	af02      	add	r7, sp, #8
    c662:	6078      	str	r0, [r7, #4]
    c664:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    c666:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    c668:	22ff      	movs	r2, #255	; 0xff
    c66a:	4013      	ands	r3, r2
    c66c:	001c      	movs	r4, r3
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    c66e:	683b      	ldr	r3, [r7, #0]
    c670:	0a1b      	lsrs	r3, r3, #8
    c672:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    c674:	23ff      	movs	r3, #255	; 0xff
    c676:	401a      	ands	r2, r3
    c678:	0015      	movs	r5, r2
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    c67a:	683b      	ldr	r3, [r7, #0]
    c67c:	0c1b      	lsrs	r3, r3, #16
    c67e:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    c680:	23ff      	movs	r3, #255	; 0xff
    c682:	4013      	ands	r3, r2
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    c684:	683a      	ldr	r2, [r7, #0]
    c686:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    c688:	6879      	ldr	r1, [r7, #4]
    c68a:	4808      	ldr	r0, [pc, #32]	; (c6ac <resolve_cb+0x50>)
    c68c:	9201      	str	r2, [sp, #4]
    c68e:	9300      	str	r3, [sp, #0]
    c690:	002b      	movs	r3, r5
    c692:	0022      	movs	r2, r4
    c694:	4c06      	ldr	r4, [pc, #24]	; (c6b0 <resolve_cb+0x54>)
    c696:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    c698:	683a      	ldr	r2, [r7, #0]
    c69a:	687b      	ldr	r3, [r7, #4]
    c69c:	0011      	movs	r1, r2
    c69e:	0018      	movs	r0, r3
    c6a0:	4b04      	ldr	r3, [pc, #16]	; (c6b4 <resolve_cb+0x58>)
    c6a2:	4798      	blx	r3
}
    c6a4:	46c0      	nop			; (mov r8, r8)
    c6a6:	46bd      	mov	sp, r7
    c6a8:	b002      	add	sp, #8
    c6aa:	bdb0      	pop	{r4, r5, r7, pc}
    c6ac:	0000fa64 	.word	0x0000fa64
    c6b0:	0000cf25 	.word	0x0000cf25
    c6b4:	0000a3a1 	.word	0x0000a3a1

0000c6b8 <wifi_cb>:
	*  - tstrM2MAPResp
	*  - tstrM2mScanDone
	*  - tstrM2mWifiscanResult
	*/
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    c6b8:	b590      	push	{r4, r7, lr}
    c6ba:	b087      	sub	sp, #28
    c6bc:	af02      	add	r7, sp, #8
    c6be:	0002      	movs	r2, r0
    c6c0:	6039      	str	r1, [r7, #0]
    c6c2:	1dfb      	adds	r3, r7, #7
    c6c4:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    c6c6:	1dfb      	adds	r3, r7, #7
    c6c8:	781b      	ldrb	r3, [r3, #0]
    c6ca:	2b2c      	cmp	r3, #44	; 0x2c
    c6cc:	d002      	beq.n	c6d4 <wifi_cb+0x1c>
    c6ce:	2b32      	cmp	r3, #50	; 0x32
    c6d0:	d032      	beq.n	c738 <wifi_cb+0x80>
		start_download();
		break;
	}

	default:
		break;
    c6d2:	e04d      	b.n	c770 <wifi_cb+0xb8>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    c6d4:	683b      	ldr	r3, [r7, #0]
    c6d6:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	781b      	ldrb	r3, [r3, #0]
    c6dc:	2b01      	cmp	r3, #1
    c6de:	d106      	bne.n	c6ee <wifi_cb+0x36>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    c6e0:	4b25      	ldr	r3, [pc, #148]	; (c778 <wifi_cb+0xc0>)
    c6e2:	0018      	movs	r0, r3
    c6e4:	4b25      	ldr	r3, [pc, #148]	; (c77c <wifi_cb+0xc4>)
    c6e6:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    c6e8:	4b25      	ldr	r3, [pc, #148]	; (c780 <wifi_cb+0xc8>)
    c6ea:	4798      	blx	r3
		break;
    c6ec:	e03f      	b.n	c76e <wifi_cb+0xb6>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    c6ee:	68fb      	ldr	r3, [r7, #12]
    c6f0:	781b      	ldrb	r3, [r3, #0]
    c6f2:	2b01      	cmp	r3, #1
    c6f4:	d13b      	bne.n	c76e <wifi_cb+0xb6>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    c6f6:	4b23      	ldr	r3, [pc, #140]	; (c784 <wifi_cb+0xcc>)
    c6f8:	0018      	movs	r0, r3
    c6fa:	4b20      	ldr	r3, [pc, #128]	; (c77c <wifi_cb+0xc4>)
    c6fc:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    c6fe:	2002      	movs	r0, #2
    c700:	4b21      	ldr	r3, [pc, #132]	; (c788 <wifi_cb+0xd0>)
    c702:	4798      	blx	r3
			if (is_state_set(DOWNLOADING)) {
    c704:	2008      	movs	r0, #8
    c706:	4b21      	ldr	r3, [pc, #132]	; (c78c <wifi_cb+0xd4>)
    c708:	4798      	blx	r3
    c70a:	1e03      	subs	r3, r0, #0
    c70c:	d002      	beq.n	c714 <wifi_cb+0x5c>
				clear_state(DOWNLOADING);
    c70e:	2008      	movs	r0, #8
    c710:	4b1d      	ldr	r3, [pc, #116]	; (c788 <wifi_cb+0xd0>)
    c712:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED)) {
    c714:	2004      	movs	r0, #4
    c716:	4b1d      	ldr	r3, [pc, #116]	; (c78c <wifi_cb+0xd4>)
    c718:	4798      	blx	r3
    c71a:	1e03      	subs	r3, r0, #0
    c71c:	d002      	beq.n	c724 <wifi_cb+0x6c>
				clear_state(GET_REQUESTED);
    c71e:	2004      	movs	r0, #4
    c720:	4b19      	ldr	r3, [pc, #100]	; (c788 <wifi_cb+0xd0>)
    c722:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    c724:	4a1a      	ldr	r2, [pc, #104]	; (c790 <wifi_cb+0xd8>)
    c726:	481b      	ldr	r0, [pc, #108]	; (c794 <wifi_cb+0xdc>)
    c728:	23ff      	movs	r3, #255	; 0xff
    c72a:	9300      	str	r3, [sp, #0]
    c72c:	0013      	movs	r3, r2
    c72e:	2202      	movs	r2, #2
    c730:	2112      	movs	r1, #18
    c732:	4c19      	ldr	r4, [pc, #100]	; (c798 <wifi_cb+0xe0>)
    c734:	47a0      	blx	r4
		break;
    c736:	e01a      	b.n	c76e <wifi_cb+0xb6>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    c738:	683b      	ldr	r3, [r7, #0]
    c73a:	60bb      	str	r3, [r7, #8]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    c73c:	68bb      	ldr	r3, [r7, #8]
    c73e:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    c740:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    c742:	68bb      	ldr	r3, [r7, #8]
    c744:	3301      	adds	r3, #1
    c746:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    c748:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    c74a:	68bb      	ldr	r3, [r7, #8]
    c74c:	3302      	adds	r3, #2
    c74e:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    c750:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    c752:	68bb      	ldr	r3, [r7, #8]
    c754:	3303      	adds	r3, #3
    c756:	781b      	ldrb	r3, [r3, #0]
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    c758:	4810      	ldr	r0, [pc, #64]	; (c79c <wifi_cb+0xe4>)
    c75a:	9300      	str	r3, [sp, #0]
    c75c:	0023      	movs	r3, r4
    c75e:	4c10      	ldr	r4, [pc, #64]	; (c7a0 <wifi_cb+0xe8>)
    c760:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    c762:	2002      	movs	r0, #2
    c764:	4b0f      	ldr	r3, [pc, #60]	; (c7a4 <wifi_cb+0xec>)
    c766:	4798      	blx	r3
		start_download();
    c768:	4b0f      	ldr	r3, [pc, #60]	; (c7a8 <wifi_cb+0xf0>)
    c76a:	4798      	blx	r3
		break;
    c76c:	e000      	b.n	c770 <wifi_cb+0xb8>
		break;
    c76e:	46c0      	nop			; (mov r8, r8)
	}
}
    c770:	46c0      	nop			; (mov r8, r8)
    c772:	46bd      	mov	sp, r7
    c774:	b005      	add	sp, #20
    c776:	bd90      	pop	{r4, r7, pc}
    c778:	0000fa94 	.word	0x0000fa94
    c77c:	0000d041 	.word	0x0000d041
    c780:	000024e1 	.word	0x000024e1
    c784:	0000fab4 	.word	0x0000fab4
    c788:	0000c3cd 	.word	0x0000c3cd
    c78c:	0000c429 	.word	0x0000c429
    c790:	0000fad4 	.word	0x0000fad4
    c794:	0000fae4 	.word	0x0000fae4
    c798:	00002019 	.word	0x00002019
    c79c:	0000faf8 	.word	0x0000faf8
    c7a0:	0000cf25 	.word	0x0000cf25
    c7a4:	0000c401 	.word	0x0000c401
    c7a8:	0000c455 	.word	0x0000c455

0000c7ac <configure_timer>:

/**
	* \brief Configure Timer module.
	*/
static void configure_timer(void)
{
    c7ac:	b580      	push	{r7, lr}
    c7ae:	b082      	sub	sp, #8
    c7b0:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    c7b2:	1d3b      	adds	r3, r7, #4
    c7b4:	0018      	movs	r0, r3
    c7b6:	4b08      	ldr	r3, [pc, #32]	; (c7d8 <configure_timer+0x2c>)
    c7b8:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    c7ba:	1d3a      	adds	r2, r7, #4
    c7bc:	4b07      	ldr	r3, [pc, #28]	; (c7dc <configure_timer+0x30>)
    c7be:	0011      	movs	r1, r2
    c7c0:	0018      	movs	r0, r3
    c7c2:	4b07      	ldr	r3, [pc, #28]	; (c7e0 <configure_timer+0x34>)
    c7c4:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    c7c6:	4b05      	ldr	r3, [pc, #20]	; (c7dc <configure_timer+0x30>)
    c7c8:	0018      	movs	r0, r3
    c7ca:	4b06      	ldr	r3, [pc, #24]	; (c7e4 <configure_timer+0x38>)
    c7cc:	4798      	blx	r3
}
    c7ce:	46c0      	nop			; (mov r8, r8)
    c7d0:	46bd      	mov	sp, r7
    c7d2:	b002      	add	sp, #8
    c7d4:	bd80      	pop	{r7, pc}
    c7d6:	46c0      	nop			; (mov r8, r8)
    c7d8:	0000b9d1 	.word	0x0000b9d1
    c7dc:	2000046c 	.word	0x2000046c
    c7e0:	0000b9f5 	.word	0x0000b9f5
    c7e4:	0000bae1 	.word	0x0000bae1

0000c7e8 <configure_http_client>:

/**
	* \brief Configure HTTP client module.
	*/
static void configure_http_client(void)
{
    c7e8:	b580      	push	{r7, lr}
    c7ea:	b088      	sub	sp, #32
    c7ec:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    c7ee:	003b      	movs	r3, r7
    c7f0:	0018      	movs	r0, r3
    c7f2:	4b12      	ldr	r3, [pc, #72]	; (c83c <configure_http_client+0x54>)
    c7f4:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    c7f6:	003b      	movs	r3, r7
    c7f8:	4a11      	ldr	r2, [pc, #68]	; (c840 <configure_http_client+0x58>)
    c7fa:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    c7fc:	003b      	movs	r3, r7
    c7fe:	4a11      	ldr	r2, [pc, #68]	; (c844 <configure_http_client+0x5c>)
    c800:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    c802:	003a      	movs	r2, r7
    c804:	4b10      	ldr	r3, [pc, #64]	; (c848 <configure_http_client+0x60>)
    c806:	0011      	movs	r1, r2
    c808:	0018      	movs	r0, r3
    c80a:	4b10      	ldr	r3, [pc, #64]	; (c84c <configure_http_client+0x64>)
    c80c:	4798      	blx	r3
    c80e:	0003      	movs	r3, r0
    c810:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
    c812:	69fb      	ldr	r3, [r7, #28]
    c814:	2b00      	cmp	r3, #0
    c816:	da06      	bge.n	c826 <configure_http_client+0x3e>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    c818:	69fa      	ldr	r2, [r7, #28]
    c81a:	4b0d      	ldr	r3, [pc, #52]	; (c850 <configure_http_client+0x68>)
    c81c:	0011      	movs	r1, r2
    c81e:	0018      	movs	r0, r3
    c820:	4b0c      	ldr	r3, [pc, #48]	; (c854 <configure_http_client+0x6c>)
    c822:	4798      	blx	r3
		while (1) {
    c824:	e7fe      	b.n	c824 <configure_http_client+0x3c>
		} /* Loop forever. */
	}
		
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    c826:	4a0c      	ldr	r2, [pc, #48]	; (c858 <configure_http_client+0x70>)
    c828:	4b07      	ldr	r3, [pc, #28]	; (c848 <configure_http_client+0x60>)
    c82a:	0011      	movs	r1, r2
    c82c:	0018      	movs	r0, r3
    c82e:	4b0b      	ldr	r3, [pc, #44]	; (c85c <configure_http_client+0x74>)
    c830:	4798      	blx	r3
}
    c832:	46c0      	nop			; (mov r8, r8)
    c834:	46bd      	mov	sp, r7
    c836:	b008      	add	sp, #32
    c838:	bd80      	pop	{r7, pc}
    c83a:	46c0      	nop			; (mov r8, r8)
    c83c:	0000a065 	.word	0x0000a065
    c840:	000005a6 	.word	0x000005a6
    c844:	2000046c 	.word	0x2000046c
    c848:	200004c4 	.word	0x200004c4
    c84c:	0000a0b1 	.word	0x0000a0b1
    c850:	0000fb20 	.word	0x0000fb20
    c854:	0000cf25 	.word	0x0000cf25
    c858:	0000c509 	.word	0x0000c509
    c85c:	0000a19d 	.word	0x0000a19d

0000c860 <main>:
	
int main (void) {
    c860:	b590      	push	{r4, r7, lr}
    c862:	b08b      	sub	sp, #44	; 0x2c
    c864:	af02      	add	r7, sp, #8
	/* Initialize the board. */
	system_init();
    c866:	4b3b      	ldr	r3, [pc, #236]	; (c954 <main+0xf4>)
    c868:	4798      	blx	r3
	at25dfx_init();
    c86a:	4b3b      	ldr	r3, [pc, #236]	; (c958 <main+0xf8>)
    c86c:	4798      	blx	r3
	dsu_crc32_init();
    c86e:	4b3b      	ldr	r3, [pc, #236]	; (c95c <main+0xfc>)
    c870:	4798      	blx	r3
	nvm_init();
    c872:	4b3b      	ldr	r3, [pc, #236]	; (c960 <main+0x100>)
    c874:	4798      	blx	r3
		
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
    c876:	4b3b      	ldr	r3, [pc, #236]	; (c964 <main+0x104>)
    c878:	4798      	blx	r3

	/* Initialize the UART console. */
	serial_init();
    c87a:	4b3b      	ldr	r3, [pc, #236]	; (c968 <main+0x108>)
    c87c:	4798      	blx	r3
	printf(STRING_HEADER);
    c87e:	4b3b      	ldr	r3, [pc, #236]	; (c96c <main+0x10c>)
    c880:	0018      	movs	r0, r3
    c882:	4b3b      	ldr	r3, [pc, #236]	; (c970 <main+0x110>)
    c884:	4798      	blx	r3
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
    c886:	4b3b      	ldr	r3, [pc, #236]	; (c974 <main+0x114>)
    c888:	0018      	movs	r0, r3
    c88a:	4b39      	ldr	r3, [pc, #228]	; (c970 <main+0x110>)
    c88c:	4798      	blx	r3

	/* Initialize the Timer. */
	configure_timer();
    c88e:	4b3a      	ldr	r3, [pc, #232]	; (c978 <main+0x118>)
    c890:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();
    c892:	4b3a      	ldr	r3, [pc, #232]	; (c97c <main+0x11c>)
    c894:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    c896:	4b3a      	ldr	r3, [pc, #232]	; (c980 <main+0x120>)
    c898:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    c89a:	1d3b      	adds	r3, r7, #4
    c89c:	2218      	movs	r2, #24
    c89e:	2100      	movs	r1, #0
    c8a0:	0018      	movs	r0, r3
    c8a2:	4b38      	ldr	r3, [pc, #224]	; (c984 <main+0x124>)
    c8a4:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    c8a6:	1d3b      	adds	r3, r7, #4
    c8a8:	4a37      	ldr	r2, [pc, #220]	; (c988 <main+0x128>)
    c8aa:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    c8ac:	231f      	movs	r3, #31
    c8ae:	18fc      	adds	r4, r7, r3
    c8b0:	1d3b      	adds	r3, r7, #4
    c8b2:	0018      	movs	r0, r3
    c8b4:	4b35      	ldr	r3, [pc, #212]	; (c98c <main+0x12c>)
    c8b6:	4798      	blx	r3
    c8b8:	0003      	movs	r3, r0
    c8ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    c8bc:	231f      	movs	r3, #31
    c8be:	18fb      	adds	r3, r7, r3
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	b25b      	sxtb	r3, r3
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	d009      	beq.n	c8dc <main+0x7c>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    c8c8:	231f      	movs	r3, #31
    c8ca:	18fb      	adds	r3, r7, r3
    c8cc:	2200      	movs	r2, #0
    c8ce:	569a      	ldrsb	r2, [r3, r2]
    c8d0:	4b2f      	ldr	r3, [pc, #188]	; (c990 <main+0x130>)
    c8d2:	0011      	movs	r1, r2
    c8d4:	0018      	movs	r0, r3
    c8d6:	4b2f      	ldr	r3, [pc, #188]	; (c994 <main+0x134>)
    c8d8:	4798      	blx	r3
		while (1) {
    c8da:	e7fe      	b.n	c8da <main+0x7a>
		}
	}

	/* Initialize socket module. */
	socketInit();
    c8dc:	4b2e      	ldr	r3, [pc, #184]	; (c998 <main+0x138>)
    c8de:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    c8e0:	4a2e      	ldr	r2, [pc, #184]	; (c99c <main+0x13c>)
    c8e2:	4b2f      	ldr	r3, [pc, #188]	; (c9a0 <main+0x140>)
    c8e4:	0011      	movs	r1, r2
    c8e6:	0018      	movs	r0, r3
    c8e8:	4b2e      	ldr	r3, [pc, #184]	; (c9a4 <main+0x144>)
    c8ea:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    c8ec:	4a2e      	ldr	r2, [pc, #184]	; (c9a8 <main+0x148>)
    c8ee:	4b2f      	ldr	r3, [pc, #188]	; (c9ac <main+0x14c>)
    c8f0:	0011      	movs	r1, r2
    c8f2:	0018      	movs	r0, r3
    c8f4:	4b27      	ldr	r3, [pc, #156]	; (c994 <main+0x134>)
    c8f6:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    c8f8:	4a2d      	ldr	r2, [pc, #180]	; (c9b0 <main+0x150>)
    c8fa:	482b      	ldr	r0, [pc, #172]	; (c9a8 <main+0x148>)
    c8fc:	23ff      	movs	r3, #255	; 0xff
    c8fe:	9300      	str	r3, [sp, #0]
    c900:	0013      	movs	r3, r2
    c902:	2202      	movs	r2, #2
    c904:	2112      	movs	r1, #18
    c906:	4c2b      	ldr	r4, [pc, #172]	; (c9b4 <main+0x154>)
    c908:	47a0      	blx	r4

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    c90a:	e006      	b.n	c91a <main+0xba>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    c90c:	2000      	movs	r0, #0
    c90e:	4b2a      	ldr	r3, [pc, #168]	; (c9b8 <main+0x158>)
    c910:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    c912:	4b2a      	ldr	r3, [pc, #168]	; (c9bc <main+0x15c>)
    c914:	0018      	movs	r0, r3
    c916:	4b2a      	ldr	r3, [pc, #168]	; (c9c0 <main+0x160>)
    c918:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    c91a:	2010      	movs	r0, #16
    c91c:	4b29      	ldr	r3, [pc, #164]	; (c9c4 <main+0x164>)
    c91e:	4798      	blx	r3
    c920:	0003      	movs	r3, r0
    c922:	001a      	movs	r2, r3
    c924:	2301      	movs	r3, #1
    c926:	4053      	eors	r3, r2
    c928:	b2db      	uxtb	r3, r3
    c92a:	2b00      	cmp	r3, #0
    c92c:	d009      	beq.n	c942 <main+0xe2>
    c92e:	2020      	movs	r0, #32
    c930:	4b24      	ldr	r3, [pc, #144]	; (c9c4 <main+0x164>)
    c932:	4798      	blx	r3
    c934:	0003      	movs	r3, r0
    c936:	001a      	movs	r2, r3
    c938:	2301      	movs	r3, #1
    c93a:	4053      	eors	r3, r2
    c93c:	b2db      	uxtb	r3, r3
    c93e:	2b00      	cmp	r3, #0
    c940:	d1e4      	bne.n	c90c <main+0xac>
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    c942:	4b21      	ldr	r3, [pc, #132]	; (c9c8 <main+0x168>)
    c944:	0018      	movs	r0, r3
    c946:	4b0a      	ldr	r3, [pc, #40]	; (c970 <main+0x110>)
    c948:	4798      	blx	r3
	printf("main: done.\r\n");
    c94a:	4b20      	ldr	r3, [pc, #128]	; (c9cc <main+0x16c>)
    c94c:	0018      	movs	r0, r3
    c94e:	4b08      	ldr	r3, [pc, #32]	; (c970 <main+0x110>)
    c950:	4798      	blx	r3

	while (1) {
    c952:	e7fe      	b.n	c952 <main+0xf2>
    c954:	00009ddd 	.word	0x00009ddd
    c958:	0000c26d 	.word	0x0000c26d
    c95c:	0000bd95 	.word	0x0000bd95
    c960:	0000c319 	.word	0x0000c319
    c964:	0000c3b9 	.word	0x0000c3b9
    c968:	0000c345 	.word	0x0000c345
    c96c:	0000fb68 	.word	0x0000fb68
    c970:	0000d041 	.word	0x0000d041
    c974:	0000fbc4 	.word	0x0000fbc4
    c978:	0000c7ad 	.word	0x0000c7ad
    c97c:	0000c7e9 	.word	0x0000c7e9
    c980:	0000035d 	.word	0x0000035d
    c984:	0000cdc3 	.word	0x0000cdc3
    c988:	0000c6b9 	.word	0x0000c6b9
    c98c:	00001e11 	.word	0x00001e11
    c990:	0000fc00 	.word	0x0000fc00
    c994:	0000cf25 	.word	0x0000cf25
    c998:	00005015 	.word	0x00005015
    c99c:	0000c65d 	.word	0x0000c65d
    c9a0:	0000c629 	.word	0x0000c629
    c9a4:	00005065 	.word	0x00005065
    c9a8:	0000fae4 	.word	0x0000fae4
    c9ac:	0000fc2c 	.word	0x0000fc2c
    c9b0:	0000fad4 	.word	0x0000fad4
    c9b4:	00002019 	.word	0x00002019
    c9b8:	00001ffd 	.word	0x00001ffd
    c9bc:	2000046c 	.word	0x2000046c
    c9c0:	0000bc11 	.word	0x0000bc11
    c9c4:	0000c429 	.word	0x0000c429
    c9c8:	0000fc50 	.word	0x0000fc50
    c9cc:	0000fc78 	.word	0x0000fc78

0000c9d0 <__udivsi3>:
    c9d0:	2200      	movs	r2, #0
    c9d2:	0843      	lsrs	r3, r0, #1
    c9d4:	428b      	cmp	r3, r1
    c9d6:	d374      	bcc.n	cac2 <__udivsi3+0xf2>
    c9d8:	0903      	lsrs	r3, r0, #4
    c9da:	428b      	cmp	r3, r1
    c9dc:	d35f      	bcc.n	ca9e <__udivsi3+0xce>
    c9de:	0a03      	lsrs	r3, r0, #8
    c9e0:	428b      	cmp	r3, r1
    c9e2:	d344      	bcc.n	ca6e <__udivsi3+0x9e>
    c9e4:	0b03      	lsrs	r3, r0, #12
    c9e6:	428b      	cmp	r3, r1
    c9e8:	d328      	bcc.n	ca3c <__udivsi3+0x6c>
    c9ea:	0c03      	lsrs	r3, r0, #16
    c9ec:	428b      	cmp	r3, r1
    c9ee:	d30d      	bcc.n	ca0c <__udivsi3+0x3c>
    c9f0:	22ff      	movs	r2, #255	; 0xff
    c9f2:	0209      	lsls	r1, r1, #8
    c9f4:	ba12      	rev	r2, r2
    c9f6:	0c03      	lsrs	r3, r0, #16
    c9f8:	428b      	cmp	r3, r1
    c9fa:	d302      	bcc.n	ca02 <__udivsi3+0x32>
    c9fc:	1212      	asrs	r2, r2, #8
    c9fe:	0209      	lsls	r1, r1, #8
    ca00:	d065      	beq.n	cace <__udivsi3+0xfe>
    ca02:	0b03      	lsrs	r3, r0, #12
    ca04:	428b      	cmp	r3, r1
    ca06:	d319      	bcc.n	ca3c <__udivsi3+0x6c>
    ca08:	e000      	b.n	ca0c <__udivsi3+0x3c>
    ca0a:	0a09      	lsrs	r1, r1, #8
    ca0c:	0bc3      	lsrs	r3, r0, #15
    ca0e:	428b      	cmp	r3, r1
    ca10:	d301      	bcc.n	ca16 <__udivsi3+0x46>
    ca12:	03cb      	lsls	r3, r1, #15
    ca14:	1ac0      	subs	r0, r0, r3
    ca16:	4152      	adcs	r2, r2
    ca18:	0b83      	lsrs	r3, r0, #14
    ca1a:	428b      	cmp	r3, r1
    ca1c:	d301      	bcc.n	ca22 <__udivsi3+0x52>
    ca1e:	038b      	lsls	r3, r1, #14
    ca20:	1ac0      	subs	r0, r0, r3
    ca22:	4152      	adcs	r2, r2
    ca24:	0b43      	lsrs	r3, r0, #13
    ca26:	428b      	cmp	r3, r1
    ca28:	d301      	bcc.n	ca2e <__udivsi3+0x5e>
    ca2a:	034b      	lsls	r3, r1, #13
    ca2c:	1ac0      	subs	r0, r0, r3
    ca2e:	4152      	adcs	r2, r2
    ca30:	0b03      	lsrs	r3, r0, #12
    ca32:	428b      	cmp	r3, r1
    ca34:	d301      	bcc.n	ca3a <__udivsi3+0x6a>
    ca36:	030b      	lsls	r3, r1, #12
    ca38:	1ac0      	subs	r0, r0, r3
    ca3a:	4152      	adcs	r2, r2
    ca3c:	0ac3      	lsrs	r3, r0, #11
    ca3e:	428b      	cmp	r3, r1
    ca40:	d301      	bcc.n	ca46 <__udivsi3+0x76>
    ca42:	02cb      	lsls	r3, r1, #11
    ca44:	1ac0      	subs	r0, r0, r3
    ca46:	4152      	adcs	r2, r2
    ca48:	0a83      	lsrs	r3, r0, #10
    ca4a:	428b      	cmp	r3, r1
    ca4c:	d301      	bcc.n	ca52 <__udivsi3+0x82>
    ca4e:	028b      	lsls	r3, r1, #10
    ca50:	1ac0      	subs	r0, r0, r3
    ca52:	4152      	adcs	r2, r2
    ca54:	0a43      	lsrs	r3, r0, #9
    ca56:	428b      	cmp	r3, r1
    ca58:	d301      	bcc.n	ca5e <__udivsi3+0x8e>
    ca5a:	024b      	lsls	r3, r1, #9
    ca5c:	1ac0      	subs	r0, r0, r3
    ca5e:	4152      	adcs	r2, r2
    ca60:	0a03      	lsrs	r3, r0, #8
    ca62:	428b      	cmp	r3, r1
    ca64:	d301      	bcc.n	ca6a <__udivsi3+0x9a>
    ca66:	020b      	lsls	r3, r1, #8
    ca68:	1ac0      	subs	r0, r0, r3
    ca6a:	4152      	adcs	r2, r2
    ca6c:	d2cd      	bcs.n	ca0a <__udivsi3+0x3a>
    ca6e:	09c3      	lsrs	r3, r0, #7
    ca70:	428b      	cmp	r3, r1
    ca72:	d301      	bcc.n	ca78 <__udivsi3+0xa8>
    ca74:	01cb      	lsls	r3, r1, #7
    ca76:	1ac0      	subs	r0, r0, r3
    ca78:	4152      	adcs	r2, r2
    ca7a:	0983      	lsrs	r3, r0, #6
    ca7c:	428b      	cmp	r3, r1
    ca7e:	d301      	bcc.n	ca84 <__udivsi3+0xb4>
    ca80:	018b      	lsls	r3, r1, #6
    ca82:	1ac0      	subs	r0, r0, r3
    ca84:	4152      	adcs	r2, r2
    ca86:	0943      	lsrs	r3, r0, #5
    ca88:	428b      	cmp	r3, r1
    ca8a:	d301      	bcc.n	ca90 <__udivsi3+0xc0>
    ca8c:	014b      	lsls	r3, r1, #5
    ca8e:	1ac0      	subs	r0, r0, r3
    ca90:	4152      	adcs	r2, r2
    ca92:	0903      	lsrs	r3, r0, #4
    ca94:	428b      	cmp	r3, r1
    ca96:	d301      	bcc.n	ca9c <__udivsi3+0xcc>
    ca98:	010b      	lsls	r3, r1, #4
    ca9a:	1ac0      	subs	r0, r0, r3
    ca9c:	4152      	adcs	r2, r2
    ca9e:	08c3      	lsrs	r3, r0, #3
    caa0:	428b      	cmp	r3, r1
    caa2:	d301      	bcc.n	caa8 <__udivsi3+0xd8>
    caa4:	00cb      	lsls	r3, r1, #3
    caa6:	1ac0      	subs	r0, r0, r3
    caa8:	4152      	adcs	r2, r2
    caaa:	0883      	lsrs	r3, r0, #2
    caac:	428b      	cmp	r3, r1
    caae:	d301      	bcc.n	cab4 <__udivsi3+0xe4>
    cab0:	008b      	lsls	r3, r1, #2
    cab2:	1ac0      	subs	r0, r0, r3
    cab4:	4152      	adcs	r2, r2
    cab6:	0843      	lsrs	r3, r0, #1
    cab8:	428b      	cmp	r3, r1
    caba:	d301      	bcc.n	cac0 <__udivsi3+0xf0>
    cabc:	004b      	lsls	r3, r1, #1
    cabe:	1ac0      	subs	r0, r0, r3
    cac0:	4152      	adcs	r2, r2
    cac2:	1a41      	subs	r1, r0, r1
    cac4:	d200      	bcs.n	cac8 <__udivsi3+0xf8>
    cac6:	4601      	mov	r1, r0
    cac8:	4152      	adcs	r2, r2
    caca:	4610      	mov	r0, r2
    cacc:	4770      	bx	lr
    cace:	e7ff      	b.n	cad0 <__udivsi3+0x100>
    cad0:	b501      	push	{r0, lr}
    cad2:	2000      	movs	r0, #0
    cad4:	f000 f8f0 	bl	ccb8 <__aeabi_idiv0>
    cad8:	bd02      	pop	{r1, pc}
    cada:	46c0      	nop			; (mov r8, r8)

0000cadc <__aeabi_uidivmod>:
    cadc:	2900      	cmp	r1, #0
    cade:	d0f7      	beq.n	cad0 <__udivsi3+0x100>
    cae0:	e776      	b.n	c9d0 <__udivsi3>
    cae2:	4770      	bx	lr

0000cae4 <__divsi3>:
    cae4:	4603      	mov	r3, r0
    cae6:	430b      	orrs	r3, r1
    cae8:	d47f      	bmi.n	cbea <__divsi3+0x106>
    caea:	2200      	movs	r2, #0
    caec:	0843      	lsrs	r3, r0, #1
    caee:	428b      	cmp	r3, r1
    caf0:	d374      	bcc.n	cbdc <__divsi3+0xf8>
    caf2:	0903      	lsrs	r3, r0, #4
    caf4:	428b      	cmp	r3, r1
    caf6:	d35f      	bcc.n	cbb8 <__divsi3+0xd4>
    caf8:	0a03      	lsrs	r3, r0, #8
    cafa:	428b      	cmp	r3, r1
    cafc:	d344      	bcc.n	cb88 <__divsi3+0xa4>
    cafe:	0b03      	lsrs	r3, r0, #12
    cb00:	428b      	cmp	r3, r1
    cb02:	d328      	bcc.n	cb56 <__divsi3+0x72>
    cb04:	0c03      	lsrs	r3, r0, #16
    cb06:	428b      	cmp	r3, r1
    cb08:	d30d      	bcc.n	cb26 <__divsi3+0x42>
    cb0a:	22ff      	movs	r2, #255	; 0xff
    cb0c:	0209      	lsls	r1, r1, #8
    cb0e:	ba12      	rev	r2, r2
    cb10:	0c03      	lsrs	r3, r0, #16
    cb12:	428b      	cmp	r3, r1
    cb14:	d302      	bcc.n	cb1c <__divsi3+0x38>
    cb16:	1212      	asrs	r2, r2, #8
    cb18:	0209      	lsls	r1, r1, #8
    cb1a:	d065      	beq.n	cbe8 <__divsi3+0x104>
    cb1c:	0b03      	lsrs	r3, r0, #12
    cb1e:	428b      	cmp	r3, r1
    cb20:	d319      	bcc.n	cb56 <__divsi3+0x72>
    cb22:	e000      	b.n	cb26 <__divsi3+0x42>
    cb24:	0a09      	lsrs	r1, r1, #8
    cb26:	0bc3      	lsrs	r3, r0, #15
    cb28:	428b      	cmp	r3, r1
    cb2a:	d301      	bcc.n	cb30 <__divsi3+0x4c>
    cb2c:	03cb      	lsls	r3, r1, #15
    cb2e:	1ac0      	subs	r0, r0, r3
    cb30:	4152      	adcs	r2, r2
    cb32:	0b83      	lsrs	r3, r0, #14
    cb34:	428b      	cmp	r3, r1
    cb36:	d301      	bcc.n	cb3c <__divsi3+0x58>
    cb38:	038b      	lsls	r3, r1, #14
    cb3a:	1ac0      	subs	r0, r0, r3
    cb3c:	4152      	adcs	r2, r2
    cb3e:	0b43      	lsrs	r3, r0, #13
    cb40:	428b      	cmp	r3, r1
    cb42:	d301      	bcc.n	cb48 <__divsi3+0x64>
    cb44:	034b      	lsls	r3, r1, #13
    cb46:	1ac0      	subs	r0, r0, r3
    cb48:	4152      	adcs	r2, r2
    cb4a:	0b03      	lsrs	r3, r0, #12
    cb4c:	428b      	cmp	r3, r1
    cb4e:	d301      	bcc.n	cb54 <__divsi3+0x70>
    cb50:	030b      	lsls	r3, r1, #12
    cb52:	1ac0      	subs	r0, r0, r3
    cb54:	4152      	adcs	r2, r2
    cb56:	0ac3      	lsrs	r3, r0, #11
    cb58:	428b      	cmp	r3, r1
    cb5a:	d301      	bcc.n	cb60 <__divsi3+0x7c>
    cb5c:	02cb      	lsls	r3, r1, #11
    cb5e:	1ac0      	subs	r0, r0, r3
    cb60:	4152      	adcs	r2, r2
    cb62:	0a83      	lsrs	r3, r0, #10
    cb64:	428b      	cmp	r3, r1
    cb66:	d301      	bcc.n	cb6c <__divsi3+0x88>
    cb68:	028b      	lsls	r3, r1, #10
    cb6a:	1ac0      	subs	r0, r0, r3
    cb6c:	4152      	adcs	r2, r2
    cb6e:	0a43      	lsrs	r3, r0, #9
    cb70:	428b      	cmp	r3, r1
    cb72:	d301      	bcc.n	cb78 <__divsi3+0x94>
    cb74:	024b      	lsls	r3, r1, #9
    cb76:	1ac0      	subs	r0, r0, r3
    cb78:	4152      	adcs	r2, r2
    cb7a:	0a03      	lsrs	r3, r0, #8
    cb7c:	428b      	cmp	r3, r1
    cb7e:	d301      	bcc.n	cb84 <__divsi3+0xa0>
    cb80:	020b      	lsls	r3, r1, #8
    cb82:	1ac0      	subs	r0, r0, r3
    cb84:	4152      	adcs	r2, r2
    cb86:	d2cd      	bcs.n	cb24 <__divsi3+0x40>
    cb88:	09c3      	lsrs	r3, r0, #7
    cb8a:	428b      	cmp	r3, r1
    cb8c:	d301      	bcc.n	cb92 <__divsi3+0xae>
    cb8e:	01cb      	lsls	r3, r1, #7
    cb90:	1ac0      	subs	r0, r0, r3
    cb92:	4152      	adcs	r2, r2
    cb94:	0983      	lsrs	r3, r0, #6
    cb96:	428b      	cmp	r3, r1
    cb98:	d301      	bcc.n	cb9e <__divsi3+0xba>
    cb9a:	018b      	lsls	r3, r1, #6
    cb9c:	1ac0      	subs	r0, r0, r3
    cb9e:	4152      	adcs	r2, r2
    cba0:	0943      	lsrs	r3, r0, #5
    cba2:	428b      	cmp	r3, r1
    cba4:	d301      	bcc.n	cbaa <__divsi3+0xc6>
    cba6:	014b      	lsls	r3, r1, #5
    cba8:	1ac0      	subs	r0, r0, r3
    cbaa:	4152      	adcs	r2, r2
    cbac:	0903      	lsrs	r3, r0, #4
    cbae:	428b      	cmp	r3, r1
    cbb0:	d301      	bcc.n	cbb6 <__divsi3+0xd2>
    cbb2:	010b      	lsls	r3, r1, #4
    cbb4:	1ac0      	subs	r0, r0, r3
    cbb6:	4152      	adcs	r2, r2
    cbb8:	08c3      	lsrs	r3, r0, #3
    cbba:	428b      	cmp	r3, r1
    cbbc:	d301      	bcc.n	cbc2 <__divsi3+0xde>
    cbbe:	00cb      	lsls	r3, r1, #3
    cbc0:	1ac0      	subs	r0, r0, r3
    cbc2:	4152      	adcs	r2, r2
    cbc4:	0883      	lsrs	r3, r0, #2
    cbc6:	428b      	cmp	r3, r1
    cbc8:	d301      	bcc.n	cbce <__divsi3+0xea>
    cbca:	008b      	lsls	r3, r1, #2
    cbcc:	1ac0      	subs	r0, r0, r3
    cbce:	4152      	adcs	r2, r2
    cbd0:	0843      	lsrs	r3, r0, #1
    cbd2:	428b      	cmp	r3, r1
    cbd4:	d301      	bcc.n	cbda <__divsi3+0xf6>
    cbd6:	004b      	lsls	r3, r1, #1
    cbd8:	1ac0      	subs	r0, r0, r3
    cbda:	4152      	adcs	r2, r2
    cbdc:	1a41      	subs	r1, r0, r1
    cbde:	d200      	bcs.n	cbe2 <__divsi3+0xfe>
    cbe0:	4601      	mov	r1, r0
    cbe2:	4152      	adcs	r2, r2
    cbe4:	4610      	mov	r0, r2
    cbe6:	4770      	bx	lr
    cbe8:	e05d      	b.n	cca6 <__divsi3+0x1c2>
    cbea:	0fca      	lsrs	r2, r1, #31
    cbec:	d000      	beq.n	cbf0 <__divsi3+0x10c>
    cbee:	4249      	negs	r1, r1
    cbf0:	1003      	asrs	r3, r0, #32
    cbf2:	d300      	bcc.n	cbf6 <__divsi3+0x112>
    cbf4:	4240      	negs	r0, r0
    cbf6:	4053      	eors	r3, r2
    cbf8:	2200      	movs	r2, #0
    cbfa:	469c      	mov	ip, r3
    cbfc:	0903      	lsrs	r3, r0, #4
    cbfe:	428b      	cmp	r3, r1
    cc00:	d32d      	bcc.n	cc5e <__divsi3+0x17a>
    cc02:	0a03      	lsrs	r3, r0, #8
    cc04:	428b      	cmp	r3, r1
    cc06:	d312      	bcc.n	cc2e <__divsi3+0x14a>
    cc08:	22fc      	movs	r2, #252	; 0xfc
    cc0a:	0189      	lsls	r1, r1, #6
    cc0c:	ba12      	rev	r2, r2
    cc0e:	0a03      	lsrs	r3, r0, #8
    cc10:	428b      	cmp	r3, r1
    cc12:	d30c      	bcc.n	cc2e <__divsi3+0x14a>
    cc14:	0189      	lsls	r1, r1, #6
    cc16:	1192      	asrs	r2, r2, #6
    cc18:	428b      	cmp	r3, r1
    cc1a:	d308      	bcc.n	cc2e <__divsi3+0x14a>
    cc1c:	0189      	lsls	r1, r1, #6
    cc1e:	1192      	asrs	r2, r2, #6
    cc20:	428b      	cmp	r3, r1
    cc22:	d304      	bcc.n	cc2e <__divsi3+0x14a>
    cc24:	0189      	lsls	r1, r1, #6
    cc26:	d03a      	beq.n	cc9e <__divsi3+0x1ba>
    cc28:	1192      	asrs	r2, r2, #6
    cc2a:	e000      	b.n	cc2e <__divsi3+0x14a>
    cc2c:	0989      	lsrs	r1, r1, #6
    cc2e:	09c3      	lsrs	r3, r0, #7
    cc30:	428b      	cmp	r3, r1
    cc32:	d301      	bcc.n	cc38 <__divsi3+0x154>
    cc34:	01cb      	lsls	r3, r1, #7
    cc36:	1ac0      	subs	r0, r0, r3
    cc38:	4152      	adcs	r2, r2
    cc3a:	0983      	lsrs	r3, r0, #6
    cc3c:	428b      	cmp	r3, r1
    cc3e:	d301      	bcc.n	cc44 <__divsi3+0x160>
    cc40:	018b      	lsls	r3, r1, #6
    cc42:	1ac0      	subs	r0, r0, r3
    cc44:	4152      	adcs	r2, r2
    cc46:	0943      	lsrs	r3, r0, #5
    cc48:	428b      	cmp	r3, r1
    cc4a:	d301      	bcc.n	cc50 <__divsi3+0x16c>
    cc4c:	014b      	lsls	r3, r1, #5
    cc4e:	1ac0      	subs	r0, r0, r3
    cc50:	4152      	adcs	r2, r2
    cc52:	0903      	lsrs	r3, r0, #4
    cc54:	428b      	cmp	r3, r1
    cc56:	d301      	bcc.n	cc5c <__divsi3+0x178>
    cc58:	010b      	lsls	r3, r1, #4
    cc5a:	1ac0      	subs	r0, r0, r3
    cc5c:	4152      	adcs	r2, r2
    cc5e:	08c3      	lsrs	r3, r0, #3
    cc60:	428b      	cmp	r3, r1
    cc62:	d301      	bcc.n	cc68 <__divsi3+0x184>
    cc64:	00cb      	lsls	r3, r1, #3
    cc66:	1ac0      	subs	r0, r0, r3
    cc68:	4152      	adcs	r2, r2
    cc6a:	0883      	lsrs	r3, r0, #2
    cc6c:	428b      	cmp	r3, r1
    cc6e:	d301      	bcc.n	cc74 <__divsi3+0x190>
    cc70:	008b      	lsls	r3, r1, #2
    cc72:	1ac0      	subs	r0, r0, r3
    cc74:	4152      	adcs	r2, r2
    cc76:	d2d9      	bcs.n	cc2c <__divsi3+0x148>
    cc78:	0843      	lsrs	r3, r0, #1
    cc7a:	428b      	cmp	r3, r1
    cc7c:	d301      	bcc.n	cc82 <__divsi3+0x19e>
    cc7e:	004b      	lsls	r3, r1, #1
    cc80:	1ac0      	subs	r0, r0, r3
    cc82:	4152      	adcs	r2, r2
    cc84:	1a41      	subs	r1, r0, r1
    cc86:	d200      	bcs.n	cc8a <__divsi3+0x1a6>
    cc88:	4601      	mov	r1, r0
    cc8a:	4663      	mov	r3, ip
    cc8c:	4152      	adcs	r2, r2
    cc8e:	105b      	asrs	r3, r3, #1
    cc90:	4610      	mov	r0, r2
    cc92:	d301      	bcc.n	cc98 <__divsi3+0x1b4>
    cc94:	4240      	negs	r0, r0
    cc96:	2b00      	cmp	r3, #0
    cc98:	d500      	bpl.n	cc9c <__divsi3+0x1b8>
    cc9a:	4249      	negs	r1, r1
    cc9c:	4770      	bx	lr
    cc9e:	4663      	mov	r3, ip
    cca0:	105b      	asrs	r3, r3, #1
    cca2:	d300      	bcc.n	cca6 <__divsi3+0x1c2>
    cca4:	4240      	negs	r0, r0
    cca6:	b501      	push	{r0, lr}
    cca8:	2000      	movs	r0, #0
    ccaa:	f000 f805 	bl	ccb8 <__aeabi_idiv0>
    ccae:	bd02      	pop	{r1, pc}

0000ccb0 <__aeabi_idivmod>:
    ccb0:	2900      	cmp	r1, #0
    ccb2:	d0f8      	beq.n	cca6 <__divsi3+0x1c2>
    ccb4:	e716      	b.n	cae4 <__divsi3>
    ccb6:	4770      	bx	lr

0000ccb8 <__aeabi_idiv0>:
    ccb8:	4770      	bx	lr
    ccba:	46c0      	nop			; (mov r8, r8)

0000ccbc <__aeabi_lmul>:
    ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccbe:	46ce      	mov	lr, r9
    ccc0:	4647      	mov	r7, r8
    ccc2:	0415      	lsls	r5, r2, #16
    ccc4:	0c2d      	lsrs	r5, r5, #16
    ccc6:	002e      	movs	r6, r5
    ccc8:	b580      	push	{r7, lr}
    ccca:	0407      	lsls	r7, r0, #16
    cccc:	0c14      	lsrs	r4, r2, #16
    ccce:	0c3f      	lsrs	r7, r7, #16
    ccd0:	4699      	mov	r9, r3
    ccd2:	0c03      	lsrs	r3, r0, #16
    ccd4:	437e      	muls	r6, r7
    ccd6:	435d      	muls	r5, r3
    ccd8:	4367      	muls	r7, r4
    ccda:	4363      	muls	r3, r4
    ccdc:	197f      	adds	r7, r7, r5
    ccde:	0c34      	lsrs	r4, r6, #16
    cce0:	19e4      	adds	r4, r4, r7
    cce2:	469c      	mov	ip, r3
    cce4:	42a5      	cmp	r5, r4
    cce6:	d903      	bls.n	ccf0 <__aeabi_lmul+0x34>
    cce8:	2380      	movs	r3, #128	; 0x80
    ccea:	025b      	lsls	r3, r3, #9
    ccec:	4698      	mov	r8, r3
    ccee:	44c4      	add	ip, r8
    ccf0:	464b      	mov	r3, r9
    ccf2:	4351      	muls	r1, r2
    ccf4:	4343      	muls	r3, r0
    ccf6:	0436      	lsls	r6, r6, #16
    ccf8:	0c36      	lsrs	r6, r6, #16
    ccfa:	0c25      	lsrs	r5, r4, #16
    ccfc:	0424      	lsls	r4, r4, #16
    ccfe:	4465      	add	r5, ip
    cd00:	19a4      	adds	r4, r4, r6
    cd02:	1859      	adds	r1, r3, r1
    cd04:	1949      	adds	r1, r1, r5
    cd06:	0020      	movs	r0, r4
    cd08:	bc0c      	pop	{r2, r3}
    cd0a:	4690      	mov	r8, r2
    cd0c:	4699      	mov	r9, r3
    cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cd10 <atoi>:
    cd10:	b510      	push	{r4, lr}
    cd12:	220a      	movs	r2, #10
    cd14:	2100      	movs	r1, #0
    cd16:	f000 fb6d 	bl	d3f4 <strtol>
    cd1a:	bd10      	pop	{r4, pc}

0000cd1c <__libc_init_array>:
    cd1c:	b570      	push	{r4, r5, r6, lr}
    cd1e:	2600      	movs	r6, #0
    cd20:	4d0c      	ldr	r5, [pc, #48]	; (cd54 <__libc_init_array+0x38>)
    cd22:	4c0d      	ldr	r4, [pc, #52]	; (cd58 <__libc_init_array+0x3c>)
    cd24:	1b64      	subs	r4, r4, r5
    cd26:	10a4      	asrs	r4, r4, #2
    cd28:	42a6      	cmp	r6, r4
    cd2a:	d109      	bne.n	cd40 <__libc_init_array+0x24>
    cd2c:	2600      	movs	r6, #0
    cd2e:	f003 f887 	bl	fe40 <_init>
    cd32:	4d0a      	ldr	r5, [pc, #40]	; (cd5c <__libc_init_array+0x40>)
    cd34:	4c0a      	ldr	r4, [pc, #40]	; (cd60 <__libc_init_array+0x44>)
    cd36:	1b64      	subs	r4, r4, r5
    cd38:	10a4      	asrs	r4, r4, #2
    cd3a:	42a6      	cmp	r6, r4
    cd3c:	d105      	bne.n	cd4a <__libc_init_array+0x2e>
    cd3e:	bd70      	pop	{r4, r5, r6, pc}
    cd40:	00b3      	lsls	r3, r6, #2
    cd42:	58eb      	ldr	r3, [r5, r3]
    cd44:	4798      	blx	r3
    cd46:	3601      	adds	r6, #1
    cd48:	e7ee      	b.n	cd28 <__libc_init_array+0xc>
    cd4a:	00b3      	lsls	r3, r6, #2
    cd4c:	58eb      	ldr	r3, [r5, r3]
    cd4e:	4798      	blx	r3
    cd50:	3601      	adds	r6, #1
    cd52:	e7f2      	b.n	cd3a <__libc_init_array+0x1e>
    cd54:	0000fe4c 	.word	0x0000fe4c
    cd58:	0000fe4c 	.word	0x0000fe4c
    cd5c:	0000fe4c 	.word	0x0000fe4c
    cd60:	0000fe50 	.word	0x0000fe50

0000cd64 <malloc>:
    cd64:	b510      	push	{r4, lr}
    cd66:	4b03      	ldr	r3, [pc, #12]	; (cd74 <malloc+0x10>)
    cd68:	0001      	movs	r1, r0
    cd6a:	6818      	ldr	r0, [r3, #0]
    cd6c:	f000 f87c 	bl	ce68 <_malloc_r>
    cd70:	bd10      	pop	{r4, pc}
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	20000014 	.word	0x20000014

0000cd78 <free>:
    cd78:	b510      	push	{r4, lr}
    cd7a:	4b03      	ldr	r3, [pc, #12]	; (cd88 <free+0x10>)
    cd7c:	0001      	movs	r1, r0
    cd7e:	6818      	ldr	r0, [r3, #0]
    cd80:	f000 f828 	bl	cdd4 <_free_r>
    cd84:	bd10      	pop	{r4, pc}
    cd86:	46c0      	nop			; (mov r8, r8)
    cd88:	20000014 	.word	0x20000014

0000cd8c <memcpy>:
    cd8c:	2300      	movs	r3, #0
    cd8e:	b510      	push	{r4, lr}
    cd90:	429a      	cmp	r2, r3
    cd92:	d100      	bne.n	cd96 <memcpy+0xa>
    cd94:	bd10      	pop	{r4, pc}
    cd96:	5ccc      	ldrb	r4, [r1, r3]
    cd98:	54c4      	strb	r4, [r0, r3]
    cd9a:	3301      	adds	r3, #1
    cd9c:	e7f8      	b.n	cd90 <memcpy+0x4>

0000cd9e <memmove>:
    cd9e:	b510      	push	{r4, lr}
    cda0:	4288      	cmp	r0, r1
    cda2:	d902      	bls.n	cdaa <memmove+0xc>
    cda4:	188b      	adds	r3, r1, r2
    cda6:	4298      	cmp	r0, r3
    cda8:	d308      	bcc.n	cdbc <memmove+0x1e>
    cdaa:	2300      	movs	r3, #0
    cdac:	429a      	cmp	r2, r3
    cdae:	d007      	beq.n	cdc0 <memmove+0x22>
    cdb0:	5ccc      	ldrb	r4, [r1, r3]
    cdb2:	54c4      	strb	r4, [r0, r3]
    cdb4:	3301      	adds	r3, #1
    cdb6:	e7f9      	b.n	cdac <memmove+0xe>
    cdb8:	5c8b      	ldrb	r3, [r1, r2]
    cdba:	5483      	strb	r3, [r0, r2]
    cdbc:	3a01      	subs	r2, #1
    cdbe:	d2fb      	bcs.n	cdb8 <memmove+0x1a>
    cdc0:	bd10      	pop	{r4, pc}

0000cdc2 <memset>:
    cdc2:	0003      	movs	r3, r0
    cdc4:	1882      	adds	r2, r0, r2
    cdc6:	4293      	cmp	r3, r2
    cdc8:	d100      	bne.n	cdcc <memset+0xa>
    cdca:	4770      	bx	lr
    cdcc:	7019      	strb	r1, [r3, #0]
    cdce:	3301      	adds	r3, #1
    cdd0:	e7f9      	b.n	cdc6 <memset+0x4>
	...

0000cdd4 <_free_r>:
    cdd4:	b570      	push	{r4, r5, r6, lr}
    cdd6:	0005      	movs	r5, r0
    cdd8:	2900      	cmp	r1, #0
    cdda:	d010      	beq.n	cdfe <_free_r+0x2a>
    cddc:	1f0c      	subs	r4, r1, #4
    cdde:	6823      	ldr	r3, [r4, #0]
    cde0:	2b00      	cmp	r3, #0
    cde2:	da00      	bge.n	cde6 <_free_r+0x12>
    cde4:	18e4      	adds	r4, r4, r3
    cde6:	0028      	movs	r0, r5
    cde8:	f000 fdf2 	bl	d9d0 <__malloc_lock>
    cdec:	4a1d      	ldr	r2, [pc, #116]	; (ce64 <_free_r+0x90>)
    cdee:	6813      	ldr	r3, [r2, #0]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	d105      	bne.n	ce00 <_free_r+0x2c>
    cdf4:	6063      	str	r3, [r4, #4]
    cdf6:	6014      	str	r4, [r2, #0]
    cdf8:	0028      	movs	r0, r5
    cdfa:	f000 fdea 	bl	d9d2 <__malloc_unlock>
    cdfe:	bd70      	pop	{r4, r5, r6, pc}
    ce00:	42a3      	cmp	r3, r4
    ce02:	d909      	bls.n	ce18 <_free_r+0x44>
    ce04:	6821      	ldr	r1, [r4, #0]
    ce06:	1860      	adds	r0, r4, r1
    ce08:	4283      	cmp	r3, r0
    ce0a:	d1f3      	bne.n	cdf4 <_free_r+0x20>
    ce0c:	6818      	ldr	r0, [r3, #0]
    ce0e:	685b      	ldr	r3, [r3, #4]
    ce10:	1841      	adds	r1, r0, r1
    ce12:	6021      	str	r1, [r4, #0]
    ce14:	e7ee      	b.n	cdf4 <_free_r+0x20>
    ce16:	0013      	movs	r3, r2
    ce18:	685a      	ldr	r2, [r3, #4]
    ce1a:	2a00      	cmp	r2, #0
    ce1c:	d001      	beq.n	ce22 <_free_r+0x4e>
    ce1e:	42a2      	cmp	r2, r4
    ce20:	d9f9      	bls.n	ce16 <_free_r+0x42>
    ce22:	6819      	ldr	r1, [r3, #0]
    ce24:	1858      	adds	r0, r3, r1
    ce26:	42a0      	cmp	r0, r4
    ce28:	d10b      	bne.n	ce42 <_free_r+0x6e>
    ce2a:	6820      	ldr	r0, [r4, #0]
    ce2c:	1809      	adds	r1, r1, r0
    ce2e:	1858      	adds	r0, r3, r1
    ce30:	6019      	str	r1, [r3, #0]
    ce32:	4282      	cmp	r2, r0
    ce34:	d1e0      	bne.n	cdf8 <_free_r+0x24>
    ce36:	6810      	ldr	r0, [r2, #0]
    ce38:	6852      	ldr	r2, [r2, #4]
    ce3a:	1841      	adds	r1, r0, r1
    ce3c:	6019      	str	r1, [r3, #0]
    ce3e:	605a      	str	r2, [r3, #4]
    ce40:	e7da      	b.n	cdf8 <_free_r+0x24>
    ce42:	42a0      	cmp	r0, r4
    ce44:	d902      	bls.n	ce4c <_free_r+0x78>
    ce46:	230c      	movs	r3, #12
    ce48:	602b      	str	r3, [r5, #0]
    ce4a:	e7d5      	b.n	cdf8 <_free_r+0x24>
    ce4c:	6821      	ldr	r1, [r4, #0]
    ce4e:	1860      	adds	r0, r4, r1
    ce50:	4282      	cmp	r2, r0
    ce52:	d103      	bne.n	ce5c <_free_r+0x88>
    ce54:	6810      	ldr	r0, [r2, #0]
    ce56:	6852      	ldr	r2, [r2, #4]
    ce58:	1841      	adds	r1, r0, r1
    ce5a:	6021      	str	r1, [r4, #0]
    ce5c:	6062      	str	r2, [r4, #4]
    ce5e:	605c      	str	r4, [r3, #4]
    ce60:	e7ca      	b.n	cdf8 <_free_r+0x24>
    ce62:	46c0      	nop			; (mov r8, r8)
    ce64:	200002b8 	.word	0x200002b8

0000ce68 <_malloc_r>:
    ce68:	2303      	movs	r3, #3
    ce6a:	b570      	push	{r4, r5, r6, lr}
    ce6c:	1ccd      	adds	r5, r1, #3
    ce6e:	439d      	bics	r5, r3
    ce70:	3508      	adds	r5, #8
    ce72:	0006      	movs	r6, r0
    ce74:	2d0c      	cmp	r5, #12
    ce76:	d21e      	bcs.n	ceb6 <_malloc_r+0x4e>
    ce78:	250c      	movs	r5, #12
    ce7a:	42a9      	cmp	r1, r5
    ce7c:	d81d      	bhi.n	ceba <_malloc_r+0x52>
    ce7e:	0030      	movs	r0, r6
    ce80:	f000 fda6 	bl	d9d0 <__malloc_lock>
    ce84:	4a25      	ldr	r2, [pc, #148]	; (cf1c <_malloc_r+0xb4>)
    ce86:	6814      	ldr	r4, [r2, #0]
    ce88:	0021      	movs	r1, r4
    ce8a:	2900      	cmp	r1, #0
    ce8c:	d119      	bne.n	cec2 <_malloc_r+0x5a>
    ce8e:	4c24      	ldr	r4, [pc, #144]	; (cf20 <_malloc_r+0xb8>)
    ce90:	6823      	ldr	r3, [r4, #0]
    ce92:	2b00      	cmp	r3, #0
    ce94:	d103      	bne.n	ce9e <_malloc_r+0x36>
    ce96:	0030      	movs	r0, r6
    ce98:	f000 f8dc 	bl	d054 <_sbrk_r>
    ce9c:	6020      	str	r0, [r4, #0]
    ce9e:	0029      	movs	r1, r5
    cea0:	0030      	movs	r0, r6
    cea2:	f000 f8d7 	bl	d054 <_sbrk_r>
    cea6:	1c43      	adds	r3, r0, #1
    cea8:	d12c      	bne.n	cf04 <_malloc_r+0x9c>
    ceaa:	230c      	movs	r3, #12
    ceac:	0030      	movs	r0, r6
    ceae:	6033      	str	r3, [r6, #0]
    ceb0:	f000 fd8f 	bl	d9d2 <__malloc_unlock>
    ceb4:	e003      	b.n	cebe <_malloc_r+0x56>
    ceb6:	2d00      	cmp	r5, #0
    ceb8:	dadf      	bge.n	ce7a <_malloc_r+0x12>
    ceba:	230c      	movs	r3, #12
    cebc:	6033      	str	r3, [r6, #0]
    cebe:	2000      	movs	r0, #0
    cec0:	bd70      	pop	{r4, r5, r6, pc}
    cec2:	680b      	ldr	r3, [r1, #0]
    cec4:	1b5b      	subs	r3, r3, r5
    cec6:	d41a      	bmi.n	cefe <_malloc_r+0x96>
    cec8:	2b0b      	cmp	r3, #11
    ceca:	d903      	bls.n	ced4 <_malloc_r+0x6c>
    cecc:	600b      	str	r3, [r1, #0]
    cece:	18cc      	adds	r4, r1, r3
    ced0:	6025      	str	r5, [r4, #0]
    ced2:	e003      	b.n	cedc <_malloc_r+0x74>
    ced4:	428c      	cmp	r4, r1
    ced6:	d10e      	bne.n	cef6 <_malloc_r+0x8e>
    ced8:	6863      	ldr	r3, [r4, #4]
    ceda:	6013      	str	r3, [r2, #0]
    cedc:	0030      	movs	r0, r6
    cede:	f000 fd78 	bl	d9d2 <__malloc_unlock>
    cee2:	0020      	movs	r0, r4
    cee4:	2207      	movs	r2, #7
    cee6:	300b      	adds	r0, #11
    cee8:	1d23      	adds	r3, r4, #4
    ceea:	4390      	bics	r0, r2
    ceec:	1ac3      	subs	r3, r0, r3
    ceee:	d0e7      	beq.n	cec0 <_malloc_r+0x58>
    cef0:	425a      	negs	r2, r3
    cef2:	50e2      	str	r2, [r4, r3]
    cef4:	e7e4      	b.n	cec0 <_malloc_r+0x58>
    cef6:	684b      	ldr	r3, [r1, #4]
    cef8:	6063      	str	r3, [r4, #4]
    cefa:	000c      	movs	r4, r1
    cefc:	e7ee      	b.n	cedc <_malloc_r+0x74>
    cefe:	000c      	movs	r4, r1
    cf00:	6849      	ldr	r1, [r1, #4]
    cf02:	e7c2      	b.n	ce8a <_malloc_r+0x22>
    cf04:	2303      	movs	r3, #3
    cf06:	1cc4      	adds	r4, r0, #3
    cf08:	439c      	bics	r4, r3
    cf0a:	42a0      	cmp	r0, r4
    cf0c:	d0e0      	beq.n	ced0 <_malloc_r+0x68>
    cf0e:	1a21      	subs	r1, r4, r0
    cf10:	0030      	movs	r0, r6
    cf12:	f000 f89f 	bl	d054 <_sbrk_r>
    cf16:	1c43      	adds	r3, r0, #1
    cf18:	d1da      	bne.n	ced0 <_malloc_r+0x68>
    cf1a:	e7c6      	b.n	ceaa <_malloc_r+0x42>
    cf1c:	200002b8 	.word	0x200002b8
    cf20:	200002bc 	.word	0x200002bc

0000cf24 <iprintf>:
    cf24:	b40f      	push	{r0, r1, r2, r3}
    cf26:	4b0b      	ldr	r3, [pc, #44]	; (cf54 <iprintf+0x30>)
    cf28:	b513      	push	{r0, r1, r4, lr}
    cf2a:	681c      	ldr	r4, [r3, #0]
    cf2c:	2c00      	cmp	r4, #0
    cf2e:	d005      	beq.n	cf3c <iprintf+0x18>
    cf30:	69a3      	ldr	r3, [r4, #24]
    cf32:	2b00      	cmp	r3, #0
    cf34:	d102      	bne.n	cf3c <iprintf+0x18>
    cf36:	0020      	movs	r0, r4
    cf38:	f000 fc34 	bl	d7a4 <__sinit>
    cf3c:	ab05      	add	r3, sp, #20
    cf3e:	9a04      	ldr	r2, [sp, #16]
    cf40:	68a1      	ldr	r1, [r4, #8]
    cf42:	0020      	movs	r0, r4
    cf44:	9301      	str	r3, [sp, #4]
    cf46:	f000 fed3 	bl	dcf0 <_vfiprintf_r>
    cf4a:	bc16      	pop	{r1, r2, r4}
    cf4c:	bc08      	pop	{r3}
    cf4e:	b004      	add	sp, #16
    cf50:	4718      	bx	r3
    cf52:	46c0      	nop			; (mov r8, r8)
    cf54:	20000014 	.word	0x20000014

0000cf58 <putchar>:
    cf58:	4b08      	ldr	r3, [pc, #32]	; (cf7c <putchar+0x24>)
    cf5a:	b570      	push	{r4, r5, r6, lr}
    cf5c:	681c      	ldr	r4, [r3, #0]
    cf5e:	0005      	movs	r5, r0
    cf60:	2c00      	cmp	r4, #0
    cf62:	d005      	beq.n	cf70 <putchar+0x18>
    cf64:	69a3      	ldr	r3, [r4, #24]
    cf66:	2b00      	cmp	r3, #0
    cf68:	d102      	bne.n	cf70 <putchar+0x18>
    cf6a:	0020      	movs	r0, r4
    cf6c:	f000 fc1a 	bl	d7a4 <__sinit>
    cf70:	0029      	movs	r1, r5
    cf72:	68a2      	ldr	r2, [r4, #8]
    cf74:	0020      	movs	r0, r4
    cf76:	f001 f95f 	bl	e238 <_putc_r>
    cf7a:	bd70      	pop	{r4, r5, r6, pc}
    cf7c:	20000014 	.word	0x20000014

0000cf80 <_puts_r>:
    cf80:	b570      	push	{r4, r5, r6, lr}
    cf82:	0005      	movs	r5, r0
    cf84:	000e      	movs	r6, r1
    cf86:	2800      	cmp	r0, #0
    cf88:	d004      	beq.n	cf94 <_puts_r+0x14>
    cf8a:	6983      	ldr	r3, [r0, #24]
    cf8c:	2b00      	cmp	r3, #0
    cf8e:	d101      	bne.n	cf94 <_puts_r+0x14>
    cf90:	f000 fc08 	bl	d7a4 <__sinit>
    cf94:	69ab      	ldr	r3, [r5, #24]
    cf96:	68ac      	ldr	r4, [r5, #8]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d102      	bne.n	cfa2 <_puts_r+0x22>
    cf9c:	0028      	movs	r0, r5
    cf9e:	f000 fc01 	bl	d7a4 <__sinit>
    cfa2:	4b24      	ldr	r3, [pc, #144]	; (d034 <_puts_r+0xb4>)
    cfa4:	429c      	cmp	r4, r3
    cfa6:	d10f      	bne.n	cfc8 <_puts_r+0x48>
    cfa8:	686c      	ldr	r4, [r5, #4]
    cfaa:	89a3      	ldrh	r3, [r4, #12]
    cfac:	071b      	lsls	r3, r3, #28
    cfae:	d502      	bpl.n	cfb6 <_puts_r+0x36>
    cfb0:	6923      	ldr	r3, [r4, #16]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d120      	bne.n	cff8 <_puts_r+0x78>
    cfb6:	0021      	movs	r1, r4
    cfb8:	0028      	movs	r0, r5
    cfba:	f000 fa85 	bl	d4c8 <__swsetup_r>
    cfbe:	2800      	cmp	r0, #0
    cfc0:	d01a      	beq.n	cff8 <_puts_r+0x78>
    cfc2:	2001      	movs	r0, #1
    cfc4:	4240      	negs	r0, r0
    cfc6:	bd70      	pop	{r4, r5, r6, pc}
    cfc8:	4b1b      	ldr	r3, [pc, #108]	; (d038 <_puts_r+0xb8>)
    cfca:	429c      	cmp	r4, r3
    cfcc:	d101      	bne.n	cfd2 <_puts_r+0x52>
    cfce:	68ac      	ldr	r4, [r5, #8]
    cfd0:	e7eb      	b.n	cfaa <_puts_r+0x2a>
    cfd2:	4b1a      	ldr	r3, [pc, #104]	; (d03c <_puts_r+0xbc>)
    cfd4:	429c      	cmp	r4, r3
    cfd6:	d1e8      	bne.n	cfaa <_puts_r+0x2a>
    cfd8:	68ec      	ldr	r4, [r5, #12]
    cfda:	e7e6      	b.n	cfaa <_puts_r+0x2a>
    cfdc:	3b01      	subs	r3, #1
    cfde:	3601      	adds	r6, #1
    cfe0:	60a3      	str	r3, [r4, #8]
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	da04      	bge.n	cff0 <_puts_r+0x70>
    cfe6:	69a2      	ldr	r2, [r4, #24]
    cfe8:	4293      	cmp	r3, r2
    cfea:	db16      	blt.n	d01a <_puts_r+0x9a>
    cfec:	290a      	cmp	r1, #10
    cfee:	d014      	beq.n	d01a <_puts_r+0x9a>
    cff0:	6823      	ldr	r3, [r4, #0]
    cff2:	1c5a      	adds	r2, r3, #1
    cff4:	6022      	str	r2, [r4, #0]
    cff6:	7019      	strb	r1, [r3, #0]
    cff8:	7831      	ldrb	r1, [r6, #0]
    cffa:	68a3      	ldr	r3, [r4, #8]
    cffc:	2900      	cmp	r1, #0
    cffe:	d1ed      	bne.n	cfdc <_puts_r+0x5c>
    d000:	3b01      	subs	r3, #1
    d002:	60a3      	str	r3, [r4, #8]
    d004:	2b00      	cmp	r3, #0
    d006:	da0f      	bge.n	d028 <_puts_r+0xa8>
    d008:	0022      	movs	r2, r4
    d00a:	310a      	adds	r1, #10
    d00c:	0028      	movs	r0, r5
    d00e:	f000 fa05 	bl	d41c <__swbuf_r>
    d012:	1c43      	adds	r3, r0, #1
    d014:	d0d5      	beq.n	cfc2 <_puts_r+0x42>
    d016:	200a      	movs	r0, #10
    d018:	e7d5      	b.n	cfc6 <_puts_r+0x46>
    d01a:	0022      	movs	r2, r4
    d01c:	0028      	movs	r0, r5
    d01e:	f000 f9fd 	bl	d41c <__swbuf_r>
    d022:	1c43      	adds	r3, r0, #1
    d024:	d1e8      	bne.n	cff8 <_puts_r+0x78>
    d026:	e7cc      	b.n	cfc2 <_puts_r+0x42>
    d028:	200a      	movs	r0, #10
    d02a:	6823      	ldr	r3, [r4, #0]
    d02c:	1c5a      	adds	r2, r3, #1
    d02e:	6022      	str	r2, [r4, #0]
    d030:	7018      	strb	r0, [r3, #0]
    d032:	e7c8      	b.n	cfc6 <_puts_r+0x46>
    d034:	0000fcc0 	.word	0x0000fcc0
    d038:	0000fce0 	.word	0x0000fce0
    d03c:	0000fca0 	.word	0x0000fca0

0000d040 <puts>:
    d040:	b510      	push	{r4, lr}
    d042:	4b03      	ldr	r3, [pc, #12]	; (d050 <puts+0x10>)
    d044:	0001      	movs	r1, r0
    d046:	6818      	ldr	r0, [r3, #0]
    d048:	f7ff ff9a 	bl	cf80 <_puts_r>
    d04c:	bd10      	pop	{r4, pc}
    d04e:	46c0      	nop			; (mov r8, r8)
    d050:	20000014 	.word	0x20000014

0000d054 <_sbrk_r>:
    d054:	2300      	movs	r3, #0
    d056:	b570      	push	{r4, r5, r6, lr}
    d058:	4c06      	ldr	r4, [pc, #24]	; (d074 <_sbrk_r+0x20>)
    d05a:	0005      	movs	r5, r0
    d05c:	0008      	movs	r0, r1
    d05e:	6023      	str	r3, [r4, #0]
    d060:	f7fc ffb6 	bl	9fd0 <_sbrk>
    d064:	1c43      	adds	r3, r0, #1
    d066:	d103      	bne.n	d070 <_sbrk_r+0x1c>
    d068:	6823      	ldr	r3, [r4, #0]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d000      	beq.n	d070 <_sbrk_r+0x1c>
    d06e:	602b      	str	r3, [r5, #0]
    d070:	bd70      	pop	{r4, r5, r6, pc}
    d072:	46c0      	nop			; (mov r8, r8)
    d074:	200005e8 	.word	0x200005e8

0000d078 <setbuf>:
    d078:	424a      	negs	r2, r1
    d07a:	414a      	adcs	r2, r1
    d07c:	2380      	movs	r3, #128	; 0x80
    d07e:	b510      	push	{r4, lr}
    d080:	0052      	lsls	r2, r2, #1
    d082:	00db      	lsls	r3, r3, #3
    d084:	f000 f802 	bl	d08c <setvbuf>
    d088:	bd10      	pop	{r4, pc}
	...

0000d08c <setvbuf>:
    d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d08e:	001d      	movs	r5, r3
    d090:	4b4f      	ldr	r3, [pc, #316]	; (d1d0 <setvbuf+0x144>)
    d092:	b085      	sub	sp, #20
    d094:	681e      	ldr	r6, [r3, #0]
    d096:	0004      	movs	r4, r0
    d098:	000f      	movs	r7, r1
    d09a:	9200      	str	r2, [sp, #0]
    d09c:	2e00      	cmp	r6, #0
    d09e:	d005      	beq.n	d0ac <setvbuf+0x20>
    d0a0:	69b3      	ldr	r3, [r6, #24]
    d0a2:	2b00      	cmp	r3, #0
    d0a4:	d102      	bne.n	d0ac <setvbuf+0x20>
    d0a6:	0030      	movs	r0, r6
    d0a8:	f000 fb7c 	bl	d7a4 <__sinit>
    d0ac:	4b49      	ldr	r3, [pc, #292]	; (d1d4 <setvbuf+0x148>)
    d0ae:	429c      	cmp	r4, r3
    d0b0:	d150      	bne.n	d154 <setvbuf+0xc8>
    d0b2:	6874      	ldr	r4, [r6, #4]
    d0b4:	9b00      	ldr	r3, [sp, #0]
    d0b6:	2b02      	cmp	r3, #2
    d0b8:	d005      	beq.n	d0c6 <setvbuf+0x3a>
    d0ba:	2b01      	cmp	r3, #1
    d0bc:	d900      	bls.n	d0c0 <setvbuf+0x34>
    d0be:	e084      	b.n	d1ca <setvbuf+0x13e>
    d0c0:	2d00      	cmp	r5, #0
    d0c2:	da00      	bge.n	d0c6 <setvbuf+0x3a>
    d0c4:	e081      	b.n	d1ca <setvbuf+0x13e>
    d0c6:	0021      	movs	r1, r4
    d0c8:	0030      	movs	r0, r6
    d0ca:	f000 fafd 	bl	d6c8 <_fflush_r>
    d0ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d0d0:	2900      	cmp	r1, #0
    d0d2:	d008      	beq.n	d0e6 <setvbuf+0x5a>
    d0d4:	0023      	movs	r3, r4
    d0d6:	3344      	adds	r3, #68	; 0x44
    d0d8:	4299      	cmp	r1, r3
    d0da:	d002      	beq.n	d0e2 <setvbuf+0x56>
    d0dc:	0030      	movs	r0, r6
    d0de:	f7ff fe79 	bl	cdd4 <_free_r>
    d0e2:	2300      	movs	r3, #0
    d0e4:	6363      	str	r3, [r4, #52]	; 0x34
    d0e6:	2300      	movs	r3, #0
    d0e8:	61a3      	str	r3, [r4, #24]
    d0ea:	6063      	str	r3, [r4, #4]
    d0ec:	89a3      	ldrh	r3, [r4, #12]
    d0ee:	061b      	lsls	r3, r3, #24
    d0f0:	d503      	bpl.n	d0fa <setvbuf+0x6e>
    d0f2:	6921      	ldr	r1, [r4, #16]
    d0f4:	0030      	movs	r0, r6
    d0f6:	f7ff fe6d 	bl	cdd4 <_free_r>
    d0fa:	89a3      	ldrh	r3, [r4, #12]
    d0fc:	4a36      	ldr	r2, [pc, #216]	; (d1d8 <setvbuf+0x14c>)
    d0fe:	4013      	ands	r3, r2
    d100:	81a3      	strh	r3, [r4, #12]
    d102:	9b00      	ldr	r3, [sp, #0]
    d104:	2b02      	cmp	r3, #2
    d106:	d05a      	beq.n	d1be <setvbuf+0x132>
    d108:	ab03      	add	r3, sp, #12
    d10a:	aa02      	add	r2, sp, #8
    d10c:	0021      	movs	r1, r4
    d10e:	0030      	movs	r0, r6
    d110:	f000 fbe0 	bl	d8d4 <__swhatbuf_r>
    d114:	89a3      	ldrh	r3, [r4, #12]
    d116:	4318      	orrs	r0, r3
    d118:	81a0      	strh	r0, [r4, #12]
    d11a:	2d00      	cmp	r5, #0
    d11c:	d124      	bne.n	d168 <setvbuf+0xdc>
    d11e:	9d02      	ldr	r5, [sp, #8]
    d120:	0028      	movs	r0, r5
    d122:	f7ff fe1f 	bl	cd64 <malloc>
    d126:	9501      	str	r5, [sp, #4]
    d128:	1e07      	subs	r7, r0, #0
    d12a:	d142      	bne.n	d1b2 <setvbuf+0x126>
    d12c:	9b02      	ldr	r3, [sp, #8]
    d12e:	9301      	str	r3, [sp, #4]
    d130:	42ab      	cmp	r3, r5
    d132:	d139      	bne.n	d1a8 <setvbuf+0x11c>
    d134:	2001      	movs	r0, #1
    d136:	4240      	negs	r0, r0
    d138:	2302      	movs	r3, #2
    d13a:	89a2      	ldrh	r2, [r4, #12]
    d13c:	4313      	orrs	r3, r2
    d13e:	81a3      	strh	r3, [r4, #12]
    d140:	2300      	movs	r3, #0
    d142:	60a3      	str	r3, [r4, #8]
    d144:	0023      	movs	r3, r4
    d146:	3347      	adds	r3, #71	; 0x47
    d148:	6023      	str	r3, [r4, #0]
    d14a:	6123      	str	r3, [r4, #16]
    d14c:	2301      	movs	r3, #1
    d14e:	6163      	str	r3, [r4, #20]
    d150:	b005      	add	sp, #20
    d152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d154:	4b21      	ldr	r3, [pc, #132]	; (d1dc <setvbuf+0x150>)
    d156:	429c      	cmp	r4, r3
    d158:	d101      	bne.n	d15e <setvbuf+0xd2>
    d15a:	68b4      	ldr	r4, [r6, #8]
    d15c:	e7aa      	b.n	d0b4 <setvbuf+0x28>
    d15e:	4b20      	ldr	r3, [pc, #128]	; (d1e0 <setvbuf+0x154>)
    d160:	429c      	cmp	r4, r3
    d162:	d1a7      	bne.n	d0b4 <setvbuf+0x28>
    d164:	68f4      	ldr	r4, [r6, #12]
    d166:	e7a5      	b.n	d0b4 <setvbuf+0x28>
    d168:	2f00      	cmp	r7, #0
    d16a:	d0d9      	beq.n	d120 <setvbuf+0x94>
    d16c:	69b3      	ldr	r3, [r6, #24]
    d16e:	2b00      	cmp	r3, #0
    d170:	d102      	bne.n	d178 <setvbuf+0xec>
    d172:	0030      	movs	r0, r6
    d174:	f000 fb16 	bl	d7a4 <__sinit>
    d178:	9b00      	ldr	r3, [sp, #0]
    d17a:	2b01      	cmp	r3, #1
    d17c:	d103      	bne.n	d186 <setvbuf+0xfa>
    d17e:	89a3      	ldrh	r3, [r4, #12]
    d180:	9a00      	ldr	r2, [sp, #0]
    d182:	431a      	orrs	r2, r3
    d184:	81a2      	strh	r2, [r4, #12]
    d186:	2008      	movs	r0, #8
    d188:	89a3      	ldrh	r3, [r4, #12]
    d18a:	6027      	str	r7, [r4, #0]
    d18c:	6127      	str	r7, [r4, #16]
    d18e:	6165      	str	r5, [r4, #20]
    d190:	4018      	ands	r0, r3
    d192:	d018      	beq.n	d1c6 <setvbuf+0x13a>
    d194:	2001      	movs	r0, #1
    d196:	4018      	ands	r0, r3
    d198:	2300      	movs	r3, #0
    d19a:	4298      	cmp	r0, r3
    d19c:	d011      	beq.n	d1c2 <setvbuf+0x136>
    d19e:	426d      	negs	r5, r5
    d1a0:	60a3      	str	r3, [r4, #8]
    d1a2:	61a5      	str	r5, [r4, #24]
    d1a4:	0018      	movs	r0, r3
    d1a6:	e7d3      	b.n	d150 <setvbuf+0xc4>
    d1a8:	9801      	ldr	r0, [sp, #4]
    d1aa:	f7ff fddb 	bl	cd64 <malloc>
    d1ae:	1e07      	subs	r7, r0, #0
    d1b0:	d0c0      	beq.n	d134 <setvbuf+0xa8>
    d1b2:	2380      	movs	r3, #128	; 0x80
    d1b4:	89a2      	ldrh	r2, [r4, #12]
    d1b6:	9d01      	ldr	r5, [sp, #4]
    d1b8:	4313      	orrs	r3, r2
    d1ba:	81a3      	strh	r3, [r4, #12]
    d1bc:	e7d6      	b.n	d16c <setvbuf+0xe0>
    d1be:	2000      	movs	r0, #0
    d1c0:	e7ba      	b.n	d138 <setvbuf+0xac>
    d1c2:	60a5      	str	r5, [r4, #8]
    d1c4:	e7c4      	b.n	d150 <setvbuf+0xc4>
    d1c6:	60a0      	str	r0, [r4, #8]
    d1c8:	e7c2      	b.n	d150 <setvbuf+0xc4>
    d1ca:	2001      	movs	r0, #1
    d1cc:	4240      	negs	r0, r0
    d1ce:	e7bf      	b.n	d150 <setvbuf+0xc4>
    d1d0:	20000014 	.word	0x20000014
    d1d4:	0000fcc0 	.word	0x0000fcc0
    d1d8:	fffff35c 	.word	0xfffff35c
    d1dc:	0000fce0 	.word	0x0000fce0
    d1e0:	0000fca0 	.word	0x0000fca0

0000d1e4 <siprintf>:
    d1e4:	b40e      	push	{r1, r2, r3}
    d1e6:	b510      	push	{r4, lr}
    d1e8:	b09d      	sub	sp, #116	; 0x74
    d1ea:	a902      	add	r1, sp, #8
    d1ec:	9002      	str	r0, [sp, #8]
    d1ee:	6108      	str	r0, [r1, #16]
    d1f0:	480b      	ldr	r0, [pc, #44]	; (d220 <siprintf+0x3c>)
    d1f2:	2482      	movs	r4, #130	; 0x82
    d1f4:	6088      	str	r0, [r1, #8]
    d1f6:	6148      	str	r0, [r1, #20]
    d1f8:	2001      	movs	r0, #1
    d1fa:	4240      	negs	r0, r0
    d1fc:	ab1f      	add	r3, sp, #124	; 0x7c
    d1fe:	81c8      	strh	r0, [r1, #14]
    d200:	4808      	ldr	r0, [pc, #32]	; (d224 <siprintf+0x40>)
    d202:	cb04      	ldmia	r3!, {r2}
    d204:	00a4      	lsls	r4, r4, #2
    d206:	6800      	ldr	r0, [r0, #0]
    d208:	9301      	str	r3, [sp, #4]
    d20a:	818c      	strh	r4, [r1, #12]
    d20c:	f000 fc44 	bl	da98 <_svfiprintf_r>
    d210:	2300      	movs	r3, #0
    d212:	9a02      	ldr	r2, [sp, #8]
    d214:	7013      	strb	r3, [r2, #0]
    d216:	b01d      	add	sp, #116	; 0x74
    d218:	bc10      	pop	{r4}
    d21a:	bc08      	pop	{r3}
    d21c:	b003      	add	sp, #12
    d21e:	4718      	bx	r3
    d220:	7fffffff 	.word	0x7fffffff
    d224:	20000014 	.word	0x20000014

0000d228 <strcmp>:
    d228:	7802      	ldrb	r2, [r0, #0]
    d22a:	780b      	ldrb	r3, [r1, #0]
    d22c:	2a00      	cmp	r2, #0
    d22e:	d003      	beq.n	d238 <strcmp+0x10>
    d230:	3001      	adds	r0, #1
    d232:	3101      	adds	r1, #1
    d234:	429a      	cmp	r2, r3
    d236:	d0f7      	beq.n	d228 <strcmp>
    d238:	1ad0      	subs	r0, r2, r3
    d23a:	4770      	bx	lr

0000d23c <strcpy>:
    d23c:	1c03      	adds	r3, r0, #0
    d23e:	780a      	ldrb	r2, [r1, #0]
    d240:	3101      	adds	r1, #1
    d242:	701a      	strb	r2, [r3, #0]
    d244:	3301      	adds	r3, #1
    d246:	2a00      	cmp	r2, #0
    d248:	d1f9      	bne.n	d23e <strcpy+0x2>
    d24a:	4770      	bx	lr

0000d24c <strdup>:
    d24c:	b510      	push	{r4, lr}
    d24e:	4b03      	ldr	r3, [pc, #12]	; (d25c <strdup+0x10>)
    d250:	0001      	movs	r1, r0
    d252:	6818      	ldr	r0, [r3, #0]
    d254:	f000 f804 	bl	d260 <_strdup_r>
    d258:	bd10      	pop	{r4, pc}
    d25a:	46c0      	nop			; (mov r8, r8)
    d25c:	20000014 	.word	0x20000014

0000d260 <_strdup_r>:
    d260:	b570      	push	{r4, r5, r6, lr}
    d262:	0005      	movs	r5, r0
    d264:	0008      	movs	r0, r1
    d266:	000e      	movs	r6, r1
    d268:	f000 f80d 	bl	d286 <strlen>
    d26c:	1c44      	adds	r4, r0, #1
    d26e:	0021      	movs	r1, r4
    d270:	0028      	movs	r0, r5
    d272:	f7ff fdf9 	bl	ce68 <_malloc_r>
    d276:	1e05      	subs	r5, r0, #0
    d278:	d003      	beq.n	d282 <_strdup_r+0x22>
    d27a:	0022      	movs	r2, r4
    d27c:	0031      	movs	r1, r6
    d27e:	f7ff fd85 	bl	cd8c <memcpy>
    d282:	0028      	movs	r0, r5
    d284:	bd70      	pop	{r4, r5, r6, pc}

0000d286 <strlen>:
    d286:	2300      	movs	r3, #0
    d288:	5cc2      	ldrb	r2, [r0, r3]
    d28a:	3301      	adds	r3, #1
    d28c:	2a00      	cmp	r2, #0
    d28e:	d1fb      	bne.n	d288 <strlen+0x2>
    d290:	1e58      	subs	r0, r3, #1
    d292:	4770      	bx	lr

0000d294 <strncmp>:
    d294:	2300      	movs	r3, #0
    d296:	b530      	push	{r4, r5, lr}
    d298:	429a      	cmp	r2, r3
    d29a:	d00a      	beq.n	d2b2 <strncmp+0x1e>
    d29c:	3a01      	subs	r2, #1
    d29e:	5cc4      	ldrb	r4, [r0, r3]
    d2a0:	5ccd      	ldrb	r5, [r1, r3]
    d2a2:	42ac      	cmp	r4, r5
    d2a4:	d104      	bne.n	d2b0 <strncmp+0x1c>
    d2a6:	429a      	cmp	r2, r3
    d2a8:	d002      	beq.n	d2b0 <strncmp+0x1c>
    d2aa:	3301      	adds	r3, #1
    d2ac:	2c00      	cmp	r4, #0
    d2ae:	d1f6      	bne.n	d29e <strncmp+0xa>
    d2b0:	1b63      	subs	r3, r4, r5
    d2b2:	0018      	movs	r0, r3
    d2b4:	bd30      	pop	{r4, r5, pc}

0000d2b6 <strstr>:
    d2b6:	b510      	push	{r4, lr}
    d2b8:	0002      	movs	r2, r0
    d2ba:	7800      	ldrb	r0, [r0, #0]
    d2bc:	2800      	cmp	r0, #0
    d2be:	d104      	bne.n	d2ca <strstr+0x14>
    d2c0:	7809      	ldrb	r1, [r1, #0]
    d2c2:	2900      	cmp	r1, #0
    d2c4:	d00d      	beq.n	d2e2 <strstr+0x2c>
    d2c6:	bd10      	pop	{r4, pc}
    d2c8:	3201      	adds	r2, #1
    d2ca:	7810      	ldrb	r0, [r2, #0]
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d0fa      	beq.n	d2c6 <strstr+0x10>
    d2d0:	2300      	movs	r3, #0
    d2d2:	5cc8      	ldrb	r0, [r1, r3]
    d2d4:	2800      	cmp	r0, #0
    d2d6:	d004      	beq.n	d2e2 <strstr+0x2c>
    d2d8:	5cd4      	ldrb	r4, [r2, r3]
    d2da:	4284      	cmp	r4, r0
    d2dc:	d1f4      	bne.n	d2c8 <strstr+0x12>
    d2de:	3301      	adds	r3, #1
    d2e0:	e7f7      	b.n	d2d2 <strstr+0x1c>
    d2e2:	0010      	movs	r0, r2
    d2e4:	e7ef      	b.n	d2c6 <strstr+0x10>
	...

0000d2e8 <_strtol_l.isra.0>:
    d2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ea:	001f      	movs	r7, r3
    d2ec:	000e      	movs	r6, r1
    d2ee:	b087      	sub	sp, #28
    d2f0:	9005      	str	r0, [sp, #20]
    d2f2:	9103      	str	r1, [sp, #12]
    d2f4:	9202      	str	r2, [sp, #8]
    d2f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    d2f8:	7834      	ldrb	r4, [r6, #0]
    d2fa:	f000 fae8 	bl	d8ce <__locale_ctype_ptr_l>
    d2fe:	2208      	movs	r2, #8
    d300:	1900      	adds	r0, r0, r4
    d302:	7843      	ldrb	r3, [r0, #1]
    d304:	1c75      	adds	r5, r6, #1
    d306:	4013      	ands	r3, r2
    d308:	d10c      	bne.n	d324 <_strtol_l.isra.0+0x3c>
    d30a:	2c2d      	cmp	r4, #45	; 0x2d
    d30c:	d10c      	bne.n	d328 <_strtol_l.isra.0+0x40>
    d30e:	3301      	adds	r3, #1
    d310:	782c      	ldrb	r4, [r5, #0]
    d312:	9301      	str	r3, [sp, #4]
    d314:	1cb5      	adds	r5, r6, #2
    d316:	2f00      	cmp	r7, #0
    d318:	d00c      	beq.n	d334 <_strtol_l.isra.0+0x4c>
    d31a:	2f10      	cmp	r7, #16
    d31c:	d114      	bne.n	d348 <_strtol_l.isra.0+0x60>
    d31e:	2c30      	cmp	r4, #48	; 0x30
    d320:	d00a      	beq.n	d338 <_strtol_l.isra.0+0x50>
    d322:	e011      	b.n	d348 <_strtol_l.isra.0+0x60>
    d324:	002e      	movs	r6, r5
    d326:	e7e6      	b.n	d2f6 <_strtol_l.isra.0+0xe>
    d328:	9301      	str	r3, [sp, #4]
    d32a:	2c2b      	cmp	r4, #43	; 0x2b
    d32c:	d1f3      	bne.n	d316 <_strtol_l.isra.0+0x2e>
    d32e:	782c      	ldrb	r4, [r5, #0]
    d330:	1cb5      	adds	r5, r6, #2
    d332:	e7f0      	b.n	d316 <_strtol_l.isra.0+0x2e>
    d334:	2c30      	cmp	r4, #48	; 0x30
    d336:	d12f      	bne.n	d398 <_strtol_l.isra.0+0xb0>
    d338:	2220      	movs	r2, #32
    d33a:	782b      	ldrb	r3, [r5, #0]
    d33c:	4393      	bics	r3, r2
    d33e:	2b58      	cmp	r3, #88	; 0x58
    d340:	d151      	bne.n	d3e6 <_strtol_l.isra.0+0xfe>
    d342:	2710      	movs	r7, #16
    d344:	786c      	ldrb	r4, [r5, #1]
    d346:	3502      	adds	r5, #2
    d348:	9b01      	ldr	r3, [sp, #4]
    d34a:	4a29      	ldr	r2, [pc, #164]	; (d3f0 <_strtol_l.isra.0+0x108>)
    d34c:	0039      	movs	r1, r7
    d34e:	189e      	adds	r6, r3, r2
    d350:	0030      	movs	r0, r6
    d352:	f7ff fbc3 	bl	cadc <__aeabi_uidivmod>
    d356:	0030      	movs	r0, r6
    d358:	9104      	str	r1, [sp, #16]
    d35a:	0039      	movs	r1, r7
    d35c:	f7ff fb38 	bl	c9d0 <__udivsi3>
    d360:	2101      	movs	r1, #1
    d362:	2300      	movs	r3, #0
    d364:	4249      	negs	r1, r1
    d366:	0002      	movs	r2, r0
    d368:	468c      	mov	ip, r1
    d36a:	0018      	movs	r0, r3
    d36c:	0021      	movs	r1, r4
    d36e:	3930      	subs	r1, #48	; 0x30
    d370:	2909      	cmp	r1, #9
    d372:	d813      	bhi.n	d39c <_strtol_l.isra.0+0xb4>
    d374:	000c      	movs	r4, r1
    d376:	42a7      	cmp	r7, r4
    d378:	dd1c      	ble.n	d3b4 <_strtol_l.isra.0+0xcc>
    d37a:	1c59      	adds	r1, r3, #1
    d37c:	d009      	beq.n	d392 <_strtol_l.isra.0+0xaa>
    d37e:	4663      	mov	r3, ip
    d380:	4282      	cmp	r2, r0
    d382:	d306      	bcc.n	d392 <_strtol_l.isra.0+0xaa>
    d384:	d102      	bne.n	d38c <_strtol_l.isra.0+0xa4>
    d386:	9904      	ldr	r1, [sp, #16]
    d388:	42a1      	cmp	r1, r4
    d38a:	db02      	blt.n	d392 <_strtol_l.isra.0+0xaa>
    d38c:	2301      	movs	r3, #1
    d38e:	4378      	muls	r0, r7
    d390:	1820      	adds	r0, r4, r0
    d392:	782c      	ldrb	r4, [r5, #0]
    d394:	3501      	adds	r5, #1
    d396:	e7e9      	b.n	d36c <_strtol_l.isra.0+0x84>
    d398:	270a      	movs	r7, #10
    d39a:	e7d5      	b.n	d348 <_strtol_l.isra.0+0x60>
    d39c:	0021      	movs	r1, r4
    d39e:	3941      	subs	r1, #65	; 0x41
    d3a0:	2919      	cmp	r1, #25
    d3a2:	d801      	bhi.n	d3a8 <_strtol_l.isra.0+0xc0>
    d3a4:	3c37      	subs	r4, #55	; 0x37
    d3a6:	e7e6      	b.n	d376 <_strtol_l.isra.0+0x8e>
    d3a8:	0021      	movs	r1, r4
    d3aa:	3961      	subs	r1, #97	; 0x61
    d3ac:	2919      	cmp	r1, #25
    d3ae:	d801      	bhi.n	d3b4 <_strtol_l.isra.0+0xcc>
    d3b0:	3c57      	subs	r4, #87	; 0x57
    d3b2:	e7e0      	b.n	d376 <_strtol_l.isra.0+0x8e>
    d3b4:	1c5a      	adds	r2, r3, #1
    d3b6:	d108      	bne.n	d3ca <_strtol_l.isra.0+0xe2>
    d3b8:	9a05      	ldr	r2, [sp, #20]
    d3ba:	3323      	adds	r3, #35	; 0x23
    d3bc:	6013      	str	r3, [r2, #0]
    d3be:	9b02      	ldr	r3, [sp, #8]
    d3c0:	0030      	movs	r0, r6
    d3c2:	2b00      	cmp	r3, #0
    d3c4:	d10b      	bne.n	d3de <_strtol_l.isra.0+0xf6>
    d3c6:	b007      	add	sp, #28
    d3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3ca:	9a01      	ldr	r2, [sp, #4]
    d3cc:	2a00      	cmp	r2, #0
    d3ce:	d000      	beq.n	d3d2 <_strtol_l.isra.0+0xea>
    d3d0:	4240      	negs	r0, r0
    d3d2:	9a02      	ldr	r2, [sp, #8]
    d3d4:	2a00      	cmp	r2, #0
    d3d6:	d0f6      	beq.n	d3c6 <_strtol_l.isra.0+0xde>
    d3d8:	9a03      	ldr	r2, [sp, #12]
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d000      	beq.n	d3e0 <_strtol_l.isra.0+0xf8>
    d3de:	1e6a      	subs	r2, r5, #1
    d3e0:	9b02      	ldr	r3, [sp, #8]
    d3e2:	601a      	str	r2, [r3, #0]
    d3e4:	e7ef      	b.n	d3c6 <_strtol_l.isra.0+0xde>
    d3e6:	2430      	movs	r4, #48	; 0x30
    d3e8:	2f00      	cmp	r7, #0
    d3ea:	d1ad      	bne.n	d348 <_strtol_l.isra.0+0x60>
    d3ec:	3708      	adds	r7, #8
    d3ee:	e7ab      	b.n	d348 <_strtol_l.isra.0+0x60>
    d3f0:	7fffffff 	.word	0x7fffffff

0000d3f4 <strtol>:
    d3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d3f6:	0013      	movs	r3, r2
    d3f8:	4a06      	ldr	r2, [pc, #24]	; (d414 <strtol+0x20>)
    d3fa:	0005      	movs	r5, r0
    d3fc:	6810      	ldr	r0, [r2, #0]
    d3fe:	6a04      	ldr	r4, [r0, #32]
    d400:	2c00      	cmp	r4, #0
    d402:	d100      	bne.n	d406 <strtol+0x12>
    d404:	4c04      	ldr	r4, [pc, #16]	; (d418 <strtol+0x24>)
    d406:	000a      	movs	r2, r1
    d408:	9400      	str	r4, [sp, #0]
    d40a:	0029      	movs	r1, r5
    d40c:	f7ff ff6c 	bl	d2e8 <_strtol_l.isra.0>
    d410:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d412:	46c0      	nop			; (mov r8, r8)
    d414:	20000014 	.word	0x20000014
    d418:	20000078 	.word	0x20000078

0000d41c <__swbuf_r>:
    d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d41e:	0005      	movs	r5, r0
    d420:	000e      	movs	r6, r1
    d422:	0014      	movs	r4, r2
    d424:	2800      	cmp	r0, #0
    d426:	d004      	beq.n	d432 <__swbuf_r+0x16>
    d428:	6983      	ldr	r3, [r0, #24]
    d42a:	2b00      	cmp	r3, #0
    d42c:	d101      	bne.n	d432 <__swbuf_r+0x16>
    d42e:	f000 f9b9 	bl	d7a4 <__sinit>
    d432:	4b22      	ldr	r3, [pc, #136]	; (d4bc <__swbuf_r+0xa0>)
    d434:	429c      	cmp	r4, r3
    d436:	d12d      	bne.n	d494 <__swbuf_r+0x78>
    d438:	686c      	ldr	r4, [r5, #4]
    d43a:	69a3      	ldr	r3, [r4, #24]
    d43c:	60a3      	str	r3, [r4, #8]
    d43e:	89a3      	ldrh	r3, [r4, #12]
    d440:	071b      	lsls	r3, r3, #28
    d442:	d531      	bpl.n	d4a8 <__swbuf_r+0x8c>
    d444:	6923      	ldr	r3, [r4, #16]
    d446:	2b00      	cmp	r3, #0
    d448:	d02e      	beq.n	d4a8 <__swbuf_r+0x8c>
    d44a:	6823      	ldr	r3, [r4, #0]
    d44c:	6922      	ldr	r2, [r4, #16]
    d44e:	b2f7      	uxtb	r7, r6
    d450:	1a98      	subs	r0, r3, r2
    d452:	6963      	ldr	r3, [r4, #20]
    d454:	b2f6      	uxtb	r6, r6
    d456:	4298      	cmp	r0, r3
    d458:	db05      	blt.n	d466 <__swbuf_r+0x4a>
    d45a:	0021      	movs	r1, r4
    d45c:	0028      	movs	r0, r5
    d45e:	f000 f933 	bl	d6c8 <_fflush_r>
    d462:	2800      	cmp	r0, #0
    d464:	d126      	bne.n	d4b4 <__swbuf_r+0x98>
    d466:	68a3      	ldr	r3, [r4, #8]
    d468:	3001      	adds	r0, #1
    d46a:	3b01      	subs	r3, #1
    d46c:	60a3      	str	r3, [r4, #8]
    d46e:	6823      	ldr	r3, [r4, #0]
    d470:	1c5a      	adds	r2, r3, #1
    d472:	6022      	str	r2, [r4, #0]
    d474:	701f      	strb	r7, [r3, #0]
    d476:	6963      	ldr	r3, [r4, #20]
    d478:	4298      	cmp	r0, r3
    d47a:	d004      	beq.n	d486 <__swbuf_r+0x6a>
    d47c:	89a3      	ldrh	r3, [r4, #12]
    d47e:	07db      	lsls	r3, r3, #31
    d480:	d51a      	bpl.n	d4b8 <__swbuf_r+0x9c>
    d482:	2e0a      	cmp	r6, #10
    d484:	d118      	bne.n	d4b8 <__swbuf_r+0x9c>
    d486:	0021      	movs	r1, r4
    d488:	0028      	movs	r0, r5
    d48a:	f000 f91d 	bl	d6c8 <_fflush_r>
    d48e:	2800      	cmp	r0, #0
    d490:	d012      	beq.n	d4b8 <__swbuf_r+0x9c>
    d492:	e00f      	b.n	d4b4 <__swbuf_r+0x98>
    d494:	4b0a      	ldr	r3, [pc, #40]	; (d4c0 <__swbuf_r+0xa4>)
    d496:	429c      	cmp	r4, r3
    d498:	d101      	bne.n	d49e <__swbuf_r+0x82>
    d49a:	68ac      	ldr	r4, [r5, #8]
    d49c:	e7cd      	b.n	d43a <__swbuf_r+0x1e>
    d49e:	4b09      	ldr	r3, [pc, #36]	; (d4c4 <__swbuf_r+0xa8>)
    d4a0:	429c      	cmp	r4, r3
    d4a2:	d1ca      	bne.n	d43a <__swbuf_r+0x1e>
    d4a4:	68ec      	ldr	r4, [r5, #12]
    d4a6:	e7c8      	b.n	d43a <__swbuf_r+0x1e>
    d4a8:	0021      	movs	r1, r4
    d4aa:	0028      	movs	r0, r5
    d4ac:	f000 f80c 	bl	d4c8 <__swsetup_r>
    d4b0:	2800      	cmp	r0, #0
    d4b2:	d0ca      	beq.n	d44a <__swbuf_r+0x2e>
    d4b4:	2601      	movs	r6, #1
    d4b6:	4276      	negs	r6, r6
    d4b8:	0030      	movs	r0, r6
    d4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d4bc:	0000fcc0 	.word	0x0000fcc0
    d4c0:	0000fce0 	.word	0x0000fce0
    d4c4:	0000fca0 	.word	0x0000fca0

0000d4c8 <__swsetup_r>:
    d4c8:	4b36      	ldr	r3, [pc, #216]	; (d5a4 <__swsetup_r+0xdc>)
    d4ca:	b570      	push	{r4, r5, r6, lr}
    d4cc:	681d      	ldr	r5, [r3, #0]
    d4ce:	0006      	movs	r6, r0
    d4d0:	000c      	movs	r4, r1
    d4d2:	2d00      	cmp	r5, #0
    d4d4:	d005      	beq.n	d4e2 <__swsetup_r+0x1a>
    d4d6:	69ab      	ldr	r3, [r5, #24]
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d102      	bne.n	d4e2 <__swsetup_r+0x1a>
    d4dc:	0028      	movs	r0, r5
    d4de:	f000 f961 	bl	d7a4 <__sinit>
    d4e2:	4b31      	ldr	r3, [pc, #196]	; (d5a8 <__swsetup_r+0xe0>)
    d4e4:	429c      	cmp	r4, r3
    d4e6:	d10f      	bne.n	d508 <__swsetup_r+0x40>
    d4e8:	686c      	ldr	r4, [r5, #4]
    d4ea:	230c      	movs	r3, #12
    d4ec:	5ee2      	ldrsh	r2, [r4, r3]
    d4ee:	b293      	uxth	r3, r2
    d4f0:	0719      	lsls	r1, r3, #28
    d4f2:	d42d      	bmi.n	d550 <__swsetup_r+0x88>
    d4f4:	06d9      	lsls	r1, r3, #27
    d4f6:	d411      	bmi.n	d51c <__swsetup_r+0x54>
    d4f8:	2309      	movs	r3, #9
    d4fa:	2001      	movs	r0, #1
    d4fc:	6033      	str	r3, [r6, #0]
    d4fe:	3337      	adds	r3, #55	; 0x37
    d500:	4313      	orrs	r3, r2
    d502:	81a3      	strh	r3, [r4, #12]
    d504:	4240      	negs	r0, r0
    d506:	bd70      	pop	{r4, r5, r6, pc}
    d508:	4b28      	ldr	r3, [pc, #160]	; (d5ac <__swsetup_r+0xe4>)
    d50a:	429c      	cmp	r4, r3
    d50c:	d101      	bne.n	d512 <__swsetup_r+0x4a>
    d50e:	68ac      	ldr	r4, [r5, #8]
    d510:	e7eb      	b.n	d4ea <__swsetup_r+0x22>
    d512:	4b27      	ldr	r3, [pc, #156]	; (d5b0 <__swsetup_r+0xe8>)
    d514:	429c      	cmp	r4, r3
    d516:	d1e8      	bne.n	d4ea <__swsetup_r+0x22>
    d518:	68ec      	ldr	r4, [r5, #12]
    d51a:	e7e6      	b.n	d4ea <__swsetup_r+0x22>
    d51c:	075b      	lsls	r3, r3, #29
    d51e:	d513      	bpl.n	d548 <__swsetup_r+0x80>
    d520:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d522:	2900      	cmp	r1, #0
    d524:	d008      	beq.n	d538 <__swsetup_r+0x70>
    d526:	0023      	movs	r3, r4
    d528:	3344      	adds	r3, #68	; 0x44
    d52a:	4299      	cmp	r1, r3
    d52c:	d002      	beq.n	d534 <__swsetup_r+0x6c>
    d52e:	0030      	movs	r0, r6
    d530:	f7ff fc50 	bl	cdd4 <_free_r>
    d534:	2300      	movs	r3, #0
    d536:	6363      	str	r3, [r4, #52]	; 0x34
    d538:	2224      	movs	r2, #36	; 0x24
    d53a:	89a3      	ldrh	r3, [r4, #12]
    d53c:	4393      	bics	r3, r2
    d53e:	81a3      	strh	r3, [r4, #12]
    d540:	2300      	movs	r3, #0
    d542:	6063      	str	r3, [r4, #4]
    d544:	6923      	ldr	r3, [r4, #16]
    d546:	6023      	str	r3, [r4, #0]
    d548:	2308      	movs	r3, #8
    d54a:	89a2      	ldrh	r2, [r4, #12]
    d54c:	4313      	orrs	r3, r2
    d54e:	81a3      	strh	r3, [r4, #12]
    d550:	6923      	ldr	r3, [r4, #16]
    d552:	2b00      	cmp	r3, #0
    d554:	d10b      	bne.n	d56e <__swsetup_r+0xa6>
    d556:	21a0      	movs	r1, #160	; 0xa0
    d558:	2280      	movs	r2, #128	; 0x80
    d55a:	89a3      	ldrh	r3, [r4, #12]
    d55c:	0089      	lsls	r1, r1, #2
    d55e:	0092      	lsls	r2, r2, #2
    d560:	400b      	ands	r3, r1
    d562:	4293      	cmp	r3, r2
    d564:	d003      	beq.n	d56e <__swsetup_r+0xa6>
    d566:	0021      	movs	r1, r4
    d568:	0030      	movs	r0, r6
    d56a:	f000 f9db 	bl	d924 <__smakebuf_r>
    d56e:	2301      	movs	r3, #1
    d570:	89a2      	ldrh	r2, [r4, #12]
    d572:	4013      	ands	r3, r2
    d574:	d011      	beq.n	d59a <__swsetup_r+0xd2>
    d576:	2300      	movs	r3, #0
    d578:	60a3      	str	r3, [r4, #8]
    d57a:	6963      	ldr	r3, [r4, #20]
    d57c:	425b      	negs	r3, r3
    d57e:	61a3      	str	r3, [r4, #24]
    d580:	2000      	movs	r0, #0
    d582:	6923      	ldr	r3, [r4, #16]
    d584:	4283      	cmp	r3, r0
    d586:	d1be      	bne.n	d506 <__swsetup_r+0x3e>
    d588:	230c      	movs	r3, #12
    d58a:	5ee2      	ldrsh	r2, [r4, r3]
    d58c:	0613      	lsls	r3, r2, #24
    d58e:	d5ba      	bpl.n	d506 <__swsetup_r+0x3e>
    d590:	2340      	movs	r3, #64	; 0x40
    d592:	4313      	orrs	r3, r2
    d594:	81a3      	strh	r3, [r4, #12]
    d596:	3801      	subs	r0, #1
    d598:	e7b5      	b.n	d506 <__swsetup_r+0x3e>
    d59a:	0792      	lsls	r2, r2, #30
    d59c:	d400      	bmi.n	d5a0 <__swsetup_r+0xd8>
    d59e:	6963      	ldr	r3, [r4, #20]
    d5a0:	60a3      	str	r3, [r4, #8]
    d5a2:	e7ed      	b.n	d580 <__swsetup_r+0xb8>
    d5a4:	20000014 	.word	0x20000014
    d5a8:	0000fcc0 	.word	0x0000fcc0
    d5ac:	0000fce0 	.word	0x0000fce0
    d5b0:	0000fca0 	.word	0x0000fca0

0000d5b4 <__sflush_r>:
    d5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d5b6:	898a      	ldrh	r2, [r1, #12]
    d5b8:	0005      	movs	r5, r0
    d5ba:	000c      	movs	r4, r1
    d5bc:	0713      	lsls	r3, r2, #28
    d5be:	d460      	bmi.n	d682 <__sflush_r+0xce>
    d5c0:	684b      	ldr	r3, [r1, #4]
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	dc04      	bgt.n	d5d0 <__sflush_r+0x1c>
    d5c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	dc01      	bgt.n	d5d0 <__sflush_r+0x1c>
    d5cc:	2000      	movs	r0, #0
    d5ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d5d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d5d2:	2f00      	cmp	r7, #0
    d5d4:	d0fa      	beq.n	d5cc <__sflush_r+0x18>
    d5d6:	2300      	movs	r3, #0
    d5d8:	682e      	ldr	r6, [r5, #0]
    d5da:	602b      	str	r3, [r5, #0]
    d5dc:	2380      	movs	r3, #128	; 0x80
    d5de:	015b      	lsls	r3, r3, #5
    d5e0:	401a      	ands	r2, r3
    d5e2:	d034      	beq.n	d64e <__sflush_r+0x9a>
    d5e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d5e6:	89a3      	ldrh	r3, [r4, #12]
    d5e8:	075b      	lsls	r3, r3, #29
    d5ea:	d506      	bpl.n	d5fa <__sflush_r+0x46>
    d5ec:	6863      	ldr	r3, [r4, #4]
    d5ee:	1ac0      	subs	r0, r0, r3
    d5f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d5f2:	2b00      	cmp	r3, #0
    d5f4:	d001      	beq.n	d5fa <__sflush_r+0x46>
    d5f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d5f8:	1ac0      	subs	r0, r0, r3
    d5fa:	0002      	movs	r2, r0
    d5fc:	6a21      	ldr	r1, [r4, #32]
    d5fe:	2300      	movs	r3, #0
    d600:	0028      	movs	r0, r5
    d602:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d604:	47b8      	blx	r7
    d606:	89a1      	ldrh	r1, [r4, #12]
    d608:	1c43      	adds	r3, r0, #1
    d60a:	d106      	bne.n	d61a <__sflush_r+0x66>
    d60c:	682b      	ldr	r3, [r5, #0]
    d60e:	2b1d      	cmp	r3, #29
    d610:	d831      	bhi.n	d676 <__sflush_r+0xc2>
    d612:	4a2c      	ldr	r2, [pc, #176]	; (d6c4 <__sflush_r+0x110>)
    d614:	40da      	lsrs	r2, r3
    d616:	07d3      	lsls	r3, r2, #31
    d618:	d52d      	bpl.n	d676 <__sflush_r+0xc2>
    d61a:	2300      	movs	r3, #0
    d61c:	6063      	str	r3, [r4, #4]
    d61e:	6923      	ldr	r3, [r4, #16]
    d620:	6023      	str	r3, [r4, #0]
    d622:	04cb      	lsls	r3, r1, #19
    d624:	d505      	bpl.n	d632 <__sflush_r+0x7e>
    d626:	1c43      	adds	r3, r0, #1
    d628:	d102      	bne.n	d630 <__sflush_r+0x7c>
    d62a:	682b      	ldr	r3, [r5, #0]
    d62c:	2b00      	cmp	r3, #0
    d62e:	d100      	bne.n	d632 <__sflush_r+0x7e>
    d630:	6560      	str	r0, [r4, #84]	; 0x54
    d632:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d634:	602e      	str	r6, [r5, #0]
    d636:	2900      	cmp	r1, #0
    d638:	d0c8      	beq.n	d5cc <__sflush_r+0x18>
    d63a:	0023      	movs	r3, r4
    d63c:	3344      	adds	r3, #68	; 0x44
    d63e:	4299      	cmp	r1, r3
    d640:	d002      	beq.n	d648 <__sflush_r+0x94>
    d642:	0028      	movs	r0, r5
    d644:	f7ff fbc6 	bl	cdd4 <_free_r>
    d648:	2000      	movs	r0, #0
    d64a:	6360      	str	r0, [r4, #52]	; 0x34
    d64c:	e7bf      	b.n	d5ce <__sflush_r+0x1a>
    d64e:	2301      	movs	r3, #1
    d650:	6a21      	ldr	r1, [r4, #32]
    d652:	0028      	movs	r0, r5
    d654:	47b8      	blx	r7
    d656:	1c43      	adds	r3, r0, #1
    d658:	d1c5      	bne.n	d5e6 <__sflush_r+0x32>
    d65a:	682b      	ldr	r3, [r5, #0]
    d65c:	2b00      	cmp	r3, #0
    d65e:	d0c2      	beq.n	d5e6 <__sflush_r+0x32>
    d660:	2b1d      	cmp	r3, #29
    d662:	d001      	beq.n	d668 <__sflush_r+0xb4>
    d664:	2b16      	cmp	r3, #22
    d666:	d101      	bne.n	d66c <__sflush_r+0xb8>
    d668:	602e      	str	r6, [r5, #0]
    d66a:	e7af      	b.n	d5cc <__sflush_r+0x18>
    d66c:	2340      	movs	r3, #64	; 0x40
    d66e:	89a2      	ldrh	r2, [r4, #12]
    d670:	4313      	orrs	r3, r2
    d672:	81a3      	strh	r3, [r4, #12]
    d674:	e7ab      	b.n	d5ce <__sflush_r+0x1a>
    d676:	2340      	movs	r3, #64	; 0x40
    d678:	430b      	orrs	r3, r1
    d67a:	2001      	movs	r0, #1
    d67c:	81a3      	strh	r3, [r4, #12]
    d67e:	4240      	negs	r0, r0
    d680:	e7a5      	b.n	d5ce <__sflush_r+0x1a>
    d682:	690f      	ldr	r7, [r1, #16]
    d684:	2f00      	cmp	r7, #0
    d686:	d0a1      	beq.n	d5cc <__sflush_r+0x18>
    d688:	680b      	ldr	r3, [r1, #0]
    d68a:	600f      	str	r7, [r1, #0]
    d68c:	1bdb      	subs	r3, r3, r7
    d68e:	9301      	str	r3, [sp, #4]
    d690:	2300      	movs	r3, #0
    d692:	0792      	lsls	r2, r2, #30
    d694:	d100      	bne.n	d698 <__sflush_r+0xe4>
    d696:	694b      	ldr	r3, [r1, #20]
    d698:	60a3      	str	r3, [r4, #8]
    d69a:	9b01      	ldr	r3, [sp, #4]
    d69c:	2b00      	cmp	r3, #0
    d69e:	dc00      	bgt.n	d6a2 <__sflush_r+0xee>
    d6a0:	e794      	b.n	d5cc <__sflush_r+0x18>
    d6a2:	9b01      	ldr	r3, [sp, #4]
    d6a4:	003a      	movs	r2, r7
    d6a6:	6a21      	ldr	r1, [r4, #32]
    d6a8:	0028      	movs	r0, r5
    d6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d6ac:	47b0      	blx	r6
    d6ae:	2800      	cmp	r0, #0
    d6b0:	dc03      	bgt.n	d6ba <__sflush_r+0x106>
    d6b2:	2340      	movs	r3, #64	; 0x40
    d6b4:	89a2      	ldrh	r2, [r4, #12]
    d6b6:	4313      	orrs	r3, r2
    d6b8:	e7df      	b.n	d67a <__sflush_r+0xc6>
    d6ba:	9b01      	ldr	r3, [sp, #4]
    d6bc:	183f      	adds	r7, r7, r0
    d6be:	1a1b      	subs	r3, r3, r0
    d6c0:	9301      	str	r3, [sp, #4]
    d6c2:	e7ea      	b.n	d69a <__sflush_r+0xe6>
    d6c4:	20400001 	.word	0x20400001

0000d6c8 <_fflush_r>:
    d6c8:	690b      	ldr	r3, [r1, #16]
    d6ca:	b570      	push	{r4, r5, r6, lr}
    d6cc:	0005      	movs	r5, r0
    d6ce:	000c      	movs	r4, r1
    d6d0:	2b00      	cmp	r3, #0
    d6d2:	d101      	bne.n	d6d8 <_fflush_r+0x10>
    d6d4:	2000      	movs	r0, #0
    d6d6:	bd70      	pop	{r4, r5, r6, pc}
    d6d8:	2800      	cmp	r0, #0
    d6da:	d004      	beq.n	d6e6 <_fflush_r+0x1e>
    d6dc:	6983      	ldr	r3, [r0, #24]
    d6de:	2b00      	cmp	r3, #0
    d6e0:	d101      	bne.n	d6e6 <_fflush_r+0x1e>
    d6e2:	f000 f85f 	bl	d7a4 <__sinit>
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <_fflush_r+0x4c>)
    d6e8:	429c      	cmp	r4, r3
    d6ea:	d109      	bne.n	d700 <_fflush_r+0x38>
    d6ec:	686c      	ldr	r4, [r5, #4]
    d6ee:	220c      	movs	r2, #12
    d6f0:	5ea3      	ldrsh	r3, [r4, r2]
    d6f2:	2b00      	cmp	r3, #0
    d6f4:	d0ee      	beq.n	d6d4 <_fflush_r+0xc>
    d6f6:	0021      	movs	r1, r4
    d6f8:	0028      	movs	r0, r5
    d6fa:	f7ff ff5b 	bl	d5b4 <__sflush_r>
    d6fe:	e7ea      	b.n	d6d6 <_fflush_r+0xe>
    d700:	4b05      	ldr	r3, [pc, #20]	; (d718 <_fflush_r+0x50>)
    d702:	429c      	cmp	r4, r3
    d704:	d101      	bne.n	d70a <_fflush_r+0x42>
    d706:	68ac      	ldr	r4, [r5, #8]
    d708:	e7f1      	b.n	d6ee <_fflush_r+0x26>
    d70a:	4b04      	ldr	r3, [pc, #16]	; (d71c <_fflush_r+0x54>)
    d70c:	429c      	cmp	r4, r3
    d70e:	d1ee      	bne.n	d6ee <_fflush_r+0x26>
    d710:	68ec      	ldr	r4, [r5, #12]
    d712:	e7ec      	b.n	d6ee <_fflush_r+0x26>
    d714:	0000fcc0 	.word	0x0000fcc0
    d718:	0000fce0 	.word	0x0000fce0
    d71c:	0000fca0 	.word	0x0000fca0

0000d720 <_cleanup_r>:
    d720:	b510      	push	{r4, lr}
    d722:	4902      	ldr	r1, [pc, #8]	; (d72c <_cleanup_r+0xc>)
    d724:	f000 f8b2 	bl	d88c <_fwalk_reent>
    d728:	bd10      	pop	{r4, pc}
    d72a:	46c0      	nop			; (mov r8, r8)
    d72c:	0000d6c9 	.word	0x0000d6c9

0000d730 <std.isra.0>:
    d730:	2300      	movs	r3, #0
    d732:	b510      	push	{r4, lr}
    d734:	0004      	movs	r4, r0
    d736:	6003      	str	r3, [r0, #0]
    d738:	6043      	str	r3, [r0, #4]
    d73a:	6083      	str	r3, [r0, #8]
    d73c:	8181      	strh	r1, [r0, #12]
    d73e:	6643      	str	r3, [r0, #100]	; 0x64
    d740:	81c2      	strh	r2, [r0, #14]
    d742:	6103      	str	r3, [r0, #16]
    d744:	6143      	str	r3, [r0, #20]
    d746:	6183      	str	r3, [r0, #24]
    d748:	0019      	movs	r1, r3
    d74a:	2208      	movs	r2, #8
    d74c:	305c      	adds	r0, #92	; 0x5c
    d74e:	f7ff fb38 	bl	cdc2 <memset>
    d752:	4b05      	ldr	r3, [pc, #20]	; (d768 <std.isra.0+0x38>)
    d754:	6224      	str	r4, [r4, #32]
    d756:	6263      	str	r3, [r4, #36]	; 0x24
    d758:	4b04      	ldr	r3, [pc, #16]	; (d76c <std.isra.0+0x3c>)
    d75a:	62a3      	str	r3, [r4, #40]	; 0x28
    d75c:	4b04      	ldr	r3, [pc, #16]	; (d770 <std.isra.0+0x40>)
    d75e:	62e3      	str	r3, [r4, #44]	; 0x2c
    d760:	4b04      	ldr	r3, [pc, #16]	; (d774 <std.isra.0+0x44>)
    d762:	6323      	str	r3, [r4, #48]	; 0x30
    d764:	bd10      	pop	{r4, pc}
    d766:	46c0      	nop			; (mov r8, r8)
    d768:	0000e2a5 	.word	0x0000e2a5
    d76c:	0000e2cd 	.word	0x0000e2cd
    d770:	0000e305 	.word	0x0000e305
    d774:	0000e331 	.word	0x0000e331

0000d778 <__sfmoreglue>:
    d778:	b570      	push	{r4, r5, r6, lr}
    d77a:	2568      	movs	r5, #104	; 0x68
    d77c:	1e4a      	subs	r2, r1, #1
    d77e:	4355      	muls	r5, r2
    d780:	000e      	movs	r6, r1
    d782:	0029      	movs	r1, r5
    d784:	3174      	adds	r1, #116	; 0x74
    d786:	f7ff fb6f 	bl	ce68 <_malloc_r>
    d78a:	1e04      	subs	r4, r0, #0
    d78c:	d008      	beq.n	d7a0 <__sfmoreglue+0x28>
    d78e:	2100      	movs	r1, #0
    d790:	002a      	movs	r2, r5
    d792:	6001      	str	r1, [r0, #0]
    d794:	6046      	str	r6, [r0, #4]
    d796:	300c      	adds	r0, #12
    d798:	60a0      	str	r0, [r4, #8]
    d79a:	3268      	adds	r2, #104	; 0x68
    d79c:	f7ff fb11 	bl	cdc2 <memset>
    d7a0:	0020      	movs	r0, r4
    d7a2:	bd70      	pop	{r4, r5, r6, pc}

0000d7a4 <__sinit>:
    d7a4:	6983      	ldr	r3, [r0, #24]
    d7a6:	b513      	push	{r0, r1, r4, lr}
    d7a8:	0004      	movs	r4, r0
    d7aa:	2b00      	cmp	r3, #0
    d7ac:	d128      	bne.n	d800 <__sinit+0x5c>
    d7ae:	6483      	str	r3, [r0, #72]	; 0x48
    d7b0:	64c3      	str	r3, [r0, #76]	; 0x4c
    d7b2:	6503      	str	r3, [r0, #80]	; 0x50
    d7b4:	4b13      	ldr	r3, [pc, #76]	; (d804 <__sinit+0x60>)
    d7b6:	4a14      	ldr	r2, [pc, #80]	; (d808 <__sinit+0x64>)
    d7b8:	681b      	ldr	r3, [r3, #0]
    d7ba:	6282      	str	r2, [r0, #40]	; 0x28
    d7bc:	9301      	str	r3, [sp, #4]
    d7be:	4298      	cmp	r0, r3
    d7c0:	d101      	bne.n	d7c6 <__sinit+0x22>
    d7c2:	2301      	movs	r3, #1
    d7c4:	6183      	str	r3, [r0, #24]
    d7c6:	0020      	movs	r0, r4
    d7c8:	f000 f820 	bl	d80c <__sfp>
    d7cc:	6060      	str	r0, [r4, #4]
    d7ce:	0020      	movs	r0, r4
    d7d0:	f000 f81c 	bl	d80c <__sfp>
    d7d4:	60a0      	str	r0, [r4, #8]
    d7d6:	0020      	movs	r0, r4
    d7d8:	f000 f818 	bl	d80c <__sfp>
    d7dc:	2200      	movs	r2, #0
    d7de:	60e0      	str	r0, [r4, #12]
    d7e0:	2104      	movs	r1, #4
    d7e2:	6860      	ldr	r0, [r4, #4]
    d7e4:	f7ff ffa4 	bl	d730 <std.isra.0>
    d7e8:	2201      	movs	r2, #1
    d7ea:	2109      	movs	r1, #9
    d7ec:	68a0      	ldr	r0, [r4, #8]
    d7ee:	f7ff ff9f 	bl	d730 <std.isra.0>
    d7f2:	2202      	movs	r2, #2
    d7f4:	2112      	movs	r1, #18
    d7f6:	68e0      	ldr	r0, [r4, #12]
    d7f8:	f7ff ff9a 	bl	d730 <std.isra.0>
    d7fc:	2301      	movs	r3, #1
    d7fe:	61a3      	str	r3, [r4, #24]
    d800:	bd13      	pop	{r0, r1, r4, pc}
    d802:	46c0      	nop			; (mov r8, r8)
    d804:	0000fc9c 	.word	0x0000fc9c
    d808:	0000d721 	.word	0x0000d721

0000d80c <__sfp>:
    d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d80e:	4b1e      	ldr	r3, [pc, #120]	; (d888 <__sfp+0x7c>)
    d810:	0007      	movs	r7, r0
    d812:	681e      	ldr	r6, [r3, #0]
    d814:	69b3      	ldr	r3, [r6, #24]
    d816:	2b00      	cmp	r3, #0
    d818:	d102      	bne.n	d820 <__sfp+0x14>
    d81a:	0030      	movs	r0, r6
    d81c:	f7ff ffc2 	bl	d7a4 <__sinit>
    d820:	3648      	adds	r6, #72	; 0x48
    d822:	68b4      	ldr	r4, [r6, #8]
    d824:	6873      	ldr	r3, [r6, #4]
    d826:	3b01      	subs	r3, #1
    d828:	d504      	bpl.n	d834 <__sfp+0x28>
    d82a:	6833      	ldr	r3, [r6, #0]
    d82c:	2b00      	cmp	r3, #0
    d82e:	d007      	beq.n	d840 <__sfp+0x34>
    d830:	6836      	ldr	r6, [r6, #0]
    d832:	e7f6      	b.n	d822 <__sfp+0x16>
    d834:	220c      	movs	r2, #12
    d836:	5ea5      	ldrsh	r5, [r4, r2]
    d838:	2d00      	cmp	r5, #0
    d83a:	d00d      	beq.n	d858 <__sfp+0x4c>
    d83c:	3468      	adds	r4, #104	; 0x68
    d83e:	e7f2      	b.n	d826 <__sfp+0x1a>
    d840:	2104      	movs	r1, #4
    d842:	0038      	movs	r0, r7
    d844:	f7ff ff98 	bl	d778 <__sfmoreglue>
    d848:	6030      	str	r0, [r6, #0]
    d84a:	2800      	cmp	r0, #0
    d84c:	d1f0      	bne.n	d830 <__sfp+0x24>
    d84e:	230c      	movs	r3, #12
    d850:	0004      	movs	r4, r0
    d852:	603b      	str	r3, [r7, #0]
    d854:	0020      	movs	r0, r4
    d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d858:	2301      	movs	r3, #1
    d85a:	0020      	movs	r0, r4
    d85c:	425b      	negs	r3, r3
    d85e:	81e3      	strh	r3, [r4, #14]
    d860:	3302      	adds	r3, #2
    d862:	81a3      	strh	r3, [r4, #12]
    d864:	6665      	str	r5, [r4, #100]	; 0x64
    d866:	6025      	str	r5, [r4, #0]
    d868:	60a5      	str	r5, [r4, #8]
    d86a:	6065      	str	r5, [r4, #4]
    d86c:	6125      	str	r5, [r4, #16]
    d86e:	6165      	str	r5, [r4, #20]
    d870:	61a5      	str	r5, [r4, #24]
    d872:	2208      	movs	r2, #8
    d874:	0029      	movs	r1, r5
    d876:	305c      	adds	r0, #92	; 0x5c
    d878:	f7ff faa3 	bl	cdc2 <memset>
    d87c:	6365      	str	r5, [r4, #52]	; 0x34
    d87e:	63a5      	str	r5, [r4, #56]	; 0x38
    d880:	64a5      	str	r5, [r4, #72]	; 0x48
    d882:	64e5      	str	r5, [r4, #76]	; 0x4c
    d884:	e7e6      	b.n	d854 <__sfp+0x48>
    d886:	46c0      	nop			; (mov r8, r8)
    d888:	0000fc9c 	.word	0x0000fc9c

0000d88c <_fwalk_reent>:
    d88c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d88e:	0004      	movs	r4, r0
    d890:	0007      	movs	r7, r0
    d892:	2600      	movs	r6, #0
    d894:	9101      	str	r1, [sp, #4]
    d896:	3448      	adds	r4, #72	; 0x48
    d898:	2c00      	cmp	r4, #0
    d89a:	d101      	bne.n	d8a0 <_fwalk_reent+0x14>
    d89c:	0030      	movs	r0, r6
    d89e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d8a0:	6863      	ldr	r3, [r4, #4]
    d8a2:	68a5      	ldr	r5, [r4, #8]
    d8a4:	9300      	str	r3, [sp, #0]
    d8a6:	9b00      	ldr	r3, [sp, #0]
    d8a8:	3b01      	subs	r3, #1
    d8aa:	9300      	str	r3, [sp, #0]
    d8ac:	d501      	bpl.n	d8b2 <_fwalk_reent+0x26>
    d8ae:	6824      	ldr	r4, [r4, #0]
    d8b0:	e7f2      	b.n	d898 <_fwalk_reent+0xc>
    d8b2:	89ab      	ldrh	r3, [r5, #12]
    d8b4:	2b01      	cmp	r3, #1
    d8b6:	d908      	bls.n	d8ca <_fwalk_reent+0x3e>
    d8b8:	220e      	movs	r2, #14
    d8ba:	5eab      	ldrsh	r3, [r5, r2]
    d8bc:	3301      	adds	r3, #1
    d8be:	d004      	beq.n	d8ca <_fwalk_reent+0x3e>
    d8c0:	0029      	movs	r1, r5
    d8c2:	0038      	movs	r0, r7
    d8c4:	9b01      	ldr	r3, [sp, #4]
    d8c6:	4798      	blx	r3
    d8c8:	4306      	orrs	r6, r0
    d8ca:	3568      	adds	r5, #104	; 0x68
    d8cc:	e7eb      	b.n	d8a6 <_fwalk_reent+0x1a>

0000d8ce <__locale_ctype_ptr_l>:
    d8ce:	30ec      	adds	r0, #236	; 0xec
    d8d0:	6800      	ldr	r0, [r0, #0]
    d8d2:	4770      	bx	lr

0000d8d4 <__swhatbuf_r>:
    d8d4:	b570      	push	{r4, r5, r6, lr}
    d8d6:	000e      	movs	r6, r1
    d8d8:	001d      	movs	r5, r3
    d8da:	230e      	movs	r3, #14
    d8dc:	5ec9      	ldrsh	r1, [r1, r3]
    d8de:	b090      	sub	sp, #64	; 0x40
    d8e0:	0014      	movs	r4, r2
    d8e2:	2900      	cmp	r1, #0
    d8e4:	da07      	bge.n	d8f6 <__swhatbuf_r+0x22>
    d8e6:	2300      	movs	r3, #0
    d8e8:	602b      	str	r3, [r5, #0]
    d8ea:	89b3      	ldrh	r3, [r6, #12]
    d8ec:	061b      	lsls	r3, r3, #24
    d8ee:	d411      	bmi.n	d914 <__swhatbuf_r+0x40>
    d8f0:	2380      	movs	r3, #128	; 0x80
    d8f2:	00db      	lsls	r3, r3, #3
    d8f4:	e00f      	b.n	d916 <__swhatbuf_r+0x42>
    d8f6:	aa01      	add	r2, sp, #4
    d8f8:	f000 fd52 	bl	e3a0 <_fstat_r>
    d8fc:	2800      	cmp	r0, #0
    d8fe:	dbf2      	blt.n	d8e6 <__swhatbuf_r+0x12>
    d900:	22f0      	movs	r2, #240	; 0xf0
    d902:	9b02      	ldr	r3, [sp, #8]
    d904:	0212      	lsls	r2, r2, #8
    d906:	4013      	ands	r3, r2
    d908:	4a05      	ldr	r2, [pc, #20]	; (d920 <__swhatbuf_r+0x4c>)
    d90a:	189b      	adds	r3, r3, r2
    d90c:	425a      	negs	r2, r3
    d90e:	4153      	adcs	r3, r2
    d910:	602b      	str	r3, [r5, #0]
    d912:	e7ed      	b.n	d8f0 <__swhatbuf_r+0x1c>
    d914:	2340      	movs	r3, #64	; 0x40
    d916:	2000      	movs	r0, #0
    d918:	6023      	str	r3, [r4, #0]
    d91a:	b010      	add	sp, #64	; 0x40
    d91c:	bd70      	pop	{r4, r5, r6, pc}
    d91e:	46c0      	nop			; (mov r8, r8)
    d920:	ffffe000 	.word	0xffffe000

0000d924 <__smakebuf_r>:
    d924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d926:	2602      	movs	r6, #2
    d928:	898b      	ldrh	r3, [r1, #12]
    d92a:	0005      	movs	r5, r0
    d92c:	000c      	movs	r4, r1
    d92e:	4233      	tst	r3, r6
    d930:	d006      	beq.n	d940 <__smakebuf_r+0x1c>
    d932:	0023      	movs	r3, r4
    d934:	3347      	adds	r3, #71	; 0x47
    d936:	6023      	str	r3, [r4, #0]
    d938:	6123      	str	r3, [r4, #16]
    d93a:	2301      	movs	r3, #1
    d93c:	6163      	str	r3, [r4, #20]
    d93e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d940:	ab01      	add	r3, sp, #4
    d942:	466a      	mov	r2, sp
    d944:	f7ff ffc6 	bl	d8d4 <__swhatbuf_r>
    d948:	9900      	ldr	r1, [sp, #0]
    d94a:	0007      	movs	r7, r0
    d94c:	0028      	movs	r0, r5
    d94e:	f7ff fa8b 	bl	ce68 <_malloc_r>
    d952:	2800      	cmp	r0, #0
    d954:	d108      	bne.n	d968 <__smakebuf_r+0x44>
    d956:	220c      	movs	r2, #12
    d958:	5ea3      	ldrsh	r3, [r4, r2]
    d95a:	059a      	lsls	r2, r3, #22
    d95c:	d4ef      	bmi.n	d93e <__smakebuf_r+0x1a>
    d95e:	2203      	movs	r2, #3
    d960:	4393      	bics	r3, r2
    d962:	431e      	orrs	r6, r3
    d964:	81a6      	strh	r6, [r4, #12]
    d966:	e7e4      	b.n	d932 <__smakebuf_r+0xe>
    d968:	4b0f      	ldr	r3, [pc, #60]	; (d9a8 <__smakebuf_r+0x84>)
    d96a:	62ab      	str	r3, [r5, #40]	; 0x28
    d96c:	2380      	movs	r3, #128	; 0x80
    d96e:	89a2      	ldrh	r2, [r4, #12]
    d970:	6020      	str	r0, [r4, #0]
    d972:	4313      	orrs	r3, r2
    d974:	81a3      	strh	r3, [r4, #12]
    d976:	9b00      	ldr	r3, [sp, #0]
    d978:	6120      	str	r0, [r4, #16]
    d97a:	6163      	str	r3, [r4, #20]
    d97c:	9b01      	ldr	r3, [sp, #4]
    d97e:	2b00      	cmp	r3, #0
    d980:	d00d      	beq.n	d99e <__smakebuf_r+0x7a>
    d982:	230e      	movs	r3, #14
    d984:	5ee1      	ldrsh	r1, [r4, r3]
    d986:	0028      	movs	r0, r5
    d988:	f000 fd1c 	bl	e3c4 <_isatty_r>
    d98c:	2800      	cmp	r0, #0
    d98e:	d006      	beq.n	d99e <__smakebuf_r+0x7a>
    d990:	2203      	movs	r2, #3
    d992:	89a3      	ldrh	r3, [r4, #12]
    d994:	4393      	bics	r3, r2
    d996:	001a      	movs	r2, r3
    d998:	2301      	movs	r3, #1
    d99a:	4313      	orrs	r3, r2
    d99c:	81a3      	strh	r3, [r4, #12]
    d99e:	89a0      	ldrh	r0, [r4, #12]
    d9a0:	4338      	orrs	r0, r7
    d9a2:	81a0      	strh	r0, [r4, #12]
    d9a4:	e7cb      	b.n	d93e <__smakebuf_r+0x1a>
    d9a6:	46c0      	nop			; (mov r8, r8)
    d9a8:	0000d721 	.word	0x0000d721

0000d9ac <__ascii_mbtowc>:
    d9ac:	b082      	sub	sp, #8
    d9ae:	2900      	cmp	r1, #0
    d9b0:	d100      	bne.n	d9b4 <__ascii_mbtowc+0x8>
    d9b2:	a901      	add	r1, sp, #4
    d9b4:	1e10      	subs	r0, r2, #0
    d9b6:	d006      	beq.n	d9c6 <__ascii_mbtowc+0x1a>
    d9b8:	2b00      	cmp	r3, #0
    d9ba:	d006      	beq.n	d9ca <__ascii_mbtowc+0x1e>
    d9bc:	7813      	ldrb	r3, [r2, #0]
    d9be:	600b      	str	r3, [r1, #0]
    d9c0:	7810      	ldrb	r0, [r2, #0]
    d9c2:	1e43      	subs	r3, r0, #1
    d9c4:	4198      	sbcs	r0, r3
    d9c6:	b002      	add	sp, #8
    d9c8:	4770      	bx	lr
    d9ca:	2002      	movs	r0, #2
    d9cc:	4240      	negs	r0, r0
    d9ce:	e7fa      	b.n	d9c6 <__ascii_mbtowc+0x1a>

0000d9d0 <__malloc_lock>:
    d9d0:	4770      	bx	lr

0000d9d2 <__malloc_unlock>:
    d9d2:	4770      	bx	lr

0000d9d4 <__ssputs_r>:
    d9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9d6:	688e      	ldr	r6, [r1, #8]
    d9d8:	b085      	sub	sp, #20
    d9da:	0007      	movs	r7, r0
    d9dc:	000c      	movs	r4, r1
    d9de:	9203      	str	r2, [sp, #12]
    d9e0:	9301      	str	r3, [sp, #4]
    d9e2:	429e      	cmp	r6, r3
    d9e4:	d839      	bhi.n	da5a <__ssputs_r+0x86>
    d9e6:	2390      	movs	r3, #144	; 0x90
    d9e8:	898a      	ldrh	r2, [r1, #12]
    d9ea:	00db      	lsls	r3, r3, #3
    d9ec:	421a      	tst	r2, r3
    d9ee:	d034      	beq.n	da5a <__ssputs_r+0x86>
    d9f0:	2503      	movs	r5, #3
    d9f2:	6909      	ldr	r1, [r1, #16]
    d9f4:	6823      	ldr	r3, [r4, #0]
    d9f6:	1a5b      	subs	r3, r3, r1
    d9f8:	9302      	str	r3, [sp, #8]
    d9fa:	6963      	ldr	r3, [r4, #20]
    d9fc:	9802      	ldr	r0, [sp, #8]
    d9fe:	435d      	muls	r5, r3
    da00:	0feb      	lsrs	r3, r5, #31
    da02:	195d      	adds	r5, r3, r5
    da04:	9b01      	ldr	r3, [sp, #4]
    da06:	106d      	asrs	r5, r5, #1
    da08:	3301      	adds	r3, #1
    da0a:	181b      	adds	r3, r3, r0
    da0c:	42ab      	cmp	r3, r5
    da0e:	d900      	bls.n	da12 <__ssputs_r+0x3e>
    da10:	001d      	movs	r5, r3
    da12:	0553      	lsls	r3, r2, #21
    da14:	d532      	bpl.n	da7c <__ssputs_r+0xa8>
    da16:	0029      	movs	r1, r5
    da18:	0038      	movs	r0, r7
    da1a:	f7ff fa25 	bl	ce68 <_malloc_r>
    da1e:	1e06      	subs	r6, r0, #0
    da20:	d109      	bne.n	da36 <__ssputs_r+0x62>
    da22:	230c      	movs	r3, #12
    da24:	603b      	str	r3, [r7, #0]
    da26:	2340      	movs	r3, #64	; 0x40
    da28:	2001      	movs	r0, #1
    da2a:	89a2      	ldrh	r2, [r4, #12]
    da2c:	4240      	negs	r0, r0
    da2e:	4313      	orrs	r3, r2
    da30:	81a3      	strh	r3, [r4, #12]
    da32:	b005      	add	sp, #20
    da34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da36:	9a02      	ldr	r2, [sp, #8]
    da38:	6921      	ldr	r1, [r4, #16]
    da3a:	f7ff f9a7 	bl	cd8c <memcpy>
    da3e:	89a3      	ldrh	r3, [r4, #12]
    da40:	4a14      	ldr	r2, [pc, #80]	; (da94 <__ssputs_r+0xc0>)
    da42:	401a      	ands	r2, r3
    da44:	2380      	movs	r3, #128	; 0x80
    da46:	4313      	orrs	r3, r2
    da48:	81a3      	strh	r3, [r4, #12]
    da4a:	9b02      	ldr	r3, [sp, #8]
    da4c:	6126      	str	r6, [r4, #16]
    da4e:	18f6      	adds	r6, r6, r3
    da50:	6026      	str	r6, [r4, #0]
    da52:	6165      	str	r5, [r4, #20]
    da54:	9e01      	ldr	r6, [sp, #4]
    da56:	1aed      	subs	r5, r5, r3
    da58:	60a5      	str	r5, [r4, #8]
    da5a:	9b01      	ldr	r3, [sp, #4]
    da5c:	42b3      	cmp	r3, r6
    da5e:	d200      	bcs.n	da62 <__ssputs_r+0x8e>
    da60:	001e      	movs	r6, r3
    da62:	0032      	movs	r2, r6
    da64:	9903      	ldr	r1, [sp, #12]
    da66:	6820      	ldr	r0, [r4, #0]
    da68:	f7ff f999 	bl	cd9e <memmove>
    da6c:	68a3      	ldr	r3, [r4, #8]
    da6e:	2000      	movs	r0, #0
    da70:	1b9b      	subs	r3, r3, r6
    da72:	60a3      	str	r3, [r4, #8]
    da74:	6823      	ldr	r3, [r4, #0]
    da76:	199e      	adds	r6, r3, r6
    da78:	6026      	str	r6, [r4, #0]
    da7a:	e7da      	b.n	da32 <__ssputs_r+0x5e>
    da7c:	002a      	movs	r2, r5
    da7e:	0038      	movs	r0, r7
    da80:	f000 fcd1 	bl	e426 <_realloc_r>
    da84:	1e06      	subs	r6, r0, #0
    da86:	d1e0      	bne.n	da4a <__ssputs_r+0x76>
    da88:	6921      	ldr	r1, [r4, #16]
    da8a:	0038      	movs	r0, r7
    da8c:	f7ff f9a2 	bl	cdd4 <_free_r>
    da90:	e7c7      	b.n	da22 <__ssputs_r+0x4e>
    da92:	46c0      	nop			; (mov r8, r8)
    da94:	fffffb7f 	.word	0xfffffb7f

0000da98 <_svfiprintf_r>:
    da98:	b5f0      	push	{r4, r5, r6, r7, lr}
    da9a:	b09f      	sub	sp, #124	; 0x7c
    da9c:	9002      	str	r0, [sp, #8]
    da9e:	9305      	str	r3, [sp, #20]
    daa0:	898b      	ldrh	r3, [r1, #12]
    daa2:	000f      	movs	r7, r1
    daa4:	0016      	movs	r6, r2
    daa6:	061b      	lsls	r3, r3, #24
    daa8:	d511      	bpl.n	dace <_svfiprintf_r+0x36>
    daaa:	690b      	ldr	r3, [r1, #16]
    daac:	2b00      	cmp	r3, #0
    daae:	d10e      	bne.n	dace <_svfiprintf_r+0x36>
    dab0:	2140      	movs	r1, #64	; 0x40
    dab2:	f7ff f9d9 	bl	ce68 <_malloc_r>
    dab6:	6038      	str	r0, [r7, #0]
    dab8:	6138      	str	r0, [r7, #16]
    daba:	2800      	cmp	r0, #0
    dabc:	d105      	bne.n	daca <_svfiprintf_r+0x32>
    dabe:	230c      	movs	r3, #12
    dac0:	9a02      	ldr	r2, [sp, #8]
    dac2:	3801      	subs	r0, #1
    dac4:	6013      	str	r3, [r2, #0]
    dac6:	b01f      	add	sp, #124	; 0x7c
    dac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    daca:	2340      	movs	r3, #64	; 0x40
    dacc:	617b      	str	r3, [r7, #20]
    dace:	2300      	movs	r3, #0
    dad0:	ad06      	add	r5, sp, #24
    dad2:	616b      	str	r3, [r5, #20]
    dad4:	3320      	adds	r3, #32
    dad6:	766b      	strb	r3, [r5, #25]
    dad8:	3310      	adds	r3, #16
    dada:	76ab      	strb	r3, [r5, #26]
    dadc:	0034      	movs	r4, r6
    dade:	7823      	ldrb	r3, [r4, #0]
    dae0:	2b00      	cmp	r3, #0
    dae2:	d147      	bne.n	db74 <_svfiprintf_r+0xdc>
    dae4:	1ba3      	subs	r3, r4, r6
    dae6:	9304      	str	r3, [sp, #16]
    dae8:	d00d      	beq.n	db06 <_svfiprintf_r+0x6e>
    daea:	1ba3      	subs	r3, r4, r6
    daec:	0032      	movs	r2, r6
    daee:	0039      	movs	r1, r7
    daf0:	9802      	ldr	r0, [sp, #8]
    daf2:	f7ff ff6f 	bl	d9d4 <__ssputs_r>
    daf6:	1c43      	adds	r3, r0, #1
    daf8:	d100      	bne.n	dafc <_svfiprintf_r+0x64>
    dafa:	e0b5      	b.n	dc68 <_svfiprintf_r+0x1d0>
    dafc:	696a      	ldr	r2, [r5, #20]
    dafe:	9b04      	ldr	r3, [sp, #16]
    db00:	4694      	mov	ip, r2
    db02:	4463      	add	r3, ip
    db04:	616b      	str	r3, [r5, #20]
    db06:	7823      	ldrb	r3, [r4, #0]
    db08:	2b00      	cmp	r3, #0
    db0a:	d100      	bne.n	db0e <_svfiprintf_r+0x76>
    db0c:	e0ac      	b.n	dc68 <_svfiprintf_r+0x1d0>
    db0e:	2201      	movs	r2, #1
    db10:	2300      	movs	r3, #0
    db12:	4252      	negs	r2, r2
    db14:	606a      	str	r2, [r5, #4]
    db16:	a902      	add	r1, sp, #8
    db18:	3254      	adds	r2, #84	; 0x54
    db1a:	1852      	adds	r2, r2, r1
    db1c:	3401      	adds	r4, #1
    db1e:	602b      	str	r3, [r5, #0]
    db20:	60eb      	str	r3, [r5, #12]
    db22:	60ab      	str	r3, [r5, #8]
    db24:	7013      	strb	r3, [r2, #0]
    db26:	65ab      	str	r3, [r5, #88]	; 0x58
    db28:	4e58      	ldr	r6, [pc, #352]	; (dc8c <_svfiprintf_r+0x1f4>)
    db2a:	2205      	movs	r2, #5
    db2c:	7821      	ldrb	r1, [r4, #0]
    db2e:	0030      	movs	r0, r6
    db30:	f000 fc6e 	bl	e410 <memchr>
    db34:	1c62      	adds	r2, r4, #1
    db36:	2800      	cmp	r0, #0
    db38:	d120      	bne.n	db7c <_svfiprintf_r+0xe4>
    db3a:	6829      	ldr	r1, [r5, #0]
    db3c:	06cb      	lsls	r3, r1, #27
    db3e:	d504      	bpl.n	db4a <_svfiprintf_r+0xb2>
    db40:	2353      	movs	r3, #83	; 0x53
    db42:	ae02      	add	r6, sp, #8
    db44:	3020      	adds	r0, #32
    db46:	199b      	adds	r3, r3, r6
    db48:	7018      	strb	r0, [r3, #0]
    db4a:	070b      	lsls	r3, r1, #28
    db4c:	d504      	bpl.n	db58 <_svfiprintf_r+0xc0>
    db4e:	2353      	movs	r3, #83	; 0x53
    db50:	202b      	movs	r0, #43	; 0x2b
    db52:	ae02      	add	r6, sp, #8
    db54:	199b      	adds	r3, r3, r6
    db56:	7018      	strb	r0, [r3, #0]
    db58:	7823      	ldrb	r3, [r4, #0]
    db5a:	2b2a      	cmp	r3, #42	; 0x2a
    db5c:	d016      	beq.n	db8c <_svfiprintf_r+0xf4>
    db5e:	2000      	movs	r0, #0
    db60:	210a      	movs	r1, #10
    db62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db64:	7822      	ldrb	r2, [r4, #0]
    db66:	3a30      	subs	r2, #48	; 0x30
    db68:	2a09      	cmp	r2, #9
    db6a:	d955      	bls.n	dc18 <_svfiprintf_r+0x180>
    db6c:	2800      	cmp	r0, #0
    db6e:	d015      	beq.n	db9c <_svfiprintf_r+0x104>
    db70:	9309      	str	r3, [sp, #36]	; 0x24
    db72:	e013      	b.n	db9c <_svfiprintf_r+0x104>
    db74:	2b25      	cmp	r3, #37	; 0x25
    db76:	d0b5      	beq.n	dae4 <_svfiprintf_r+0x4c>
    db78:	3401      	adds	r4, #1
    db7a:	e7b0      	b.n	dade <_svfiprintf_r+0x46>
    db7c:	2301      	movs	r3, #1
    db7e:	1b80      	subs	r0, r0, r6
    db80:	4083      	lsls	r3, r0
    db82:	6829      	ldr	r1, [r5, #0]
    db84:	0014      	movs	r4, r2
    db86:	430b      	orrs	r3, r1
    db88:	602b      	str	r3, [r5, #0]
    db8a:	e7cd      	b.n	db28 <_svfiprintf_r+0x90>
    db8c:	9b05      	ldr	r3, [sp, #20]
    db8e:	1d18      	adds	r0, r3, #4
    db90:	681b      	ldr	r3, [r3, #0]
    db92:	9005      	str	r0, [sp, #20]
    db94:	2b00      	cmp	r3, #0
    db96:	db39      	blt.n	dc0c <_svfiprintf_r+0x174>
    db98:	9309      	str	r3, [sp, #36]	; 0x24
    db9a:	0014      	movs	r4, r2
    db9c:	7823      	ldrb	r3, [r4, #0]
    db9e:	2b2e      	cmp	r3, #46	; 0x2e
    dba0:	d10b      	bne.n	dbba <_svfiprintf_r+0x122>
    dba2:	7863      	ldrb	r3, [r4, #1]
    dba4:	1c62      	adds	r2, r4, #1
    dba6:	2b2a      	cmp	r3, #42	; 0x2a
    dba8:	d13e      	bne.n	dc28 <_svfiprintf_r+0x190>
    dbaa:	9b05      	ldr	r3, [sp, #20]
    dbac:	3402      	adds	r4, #2
    dbae:	1d1a      	adds	r2, r3, #4
    dbb0:	681b      	ldr	r3, [r3, #0]
    dbb2:	9205      	str	r2, [sp, #20]
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	db34      	blt.n	dc22 <_svfiprintf_r+0x18a>
    dbb8:	9307      	str	r3, [sp, #28]
    dbba:	4e35      	ldr	r6, [pc, #212]	; (dc90 <_svfiprintf_r+0x1f8>)
    dbbc:	7821      	ldrb	r1, [r4, #0]
    dbbe:	2203      	movs	r2, #3
    dbc0:	0030      	movs	r0, r6
    dbc2:	f000 fc25 	bl	e410 <memchr>
    dbc6:	2800      	cmp	r0, #0
    dbc8:	d006      	beq.n	dbd8 <_svfiprintf_r+0x140>
    dbca:	2340      	movs	r3, #64	; 0x40
    dbcc:	1b80      	subs	r0, r0, r6
    dbce:	4083      	lsls	r3, r0
    dbd0:	682a      	ldr	r2, [r5, #0]
    dbd2:	3401      	adds	r4, #1
    dbd4:	4313      	orrs	r3, r2
    dbd6:	602b      	str	r3, [r5, #0]
    dbd8:	7821      	ldrb	r1, [r4, #0]
    dbda:	2206      	movs	r2, #6
    dbdc:	482d      	ldr	r0, [pc, #180]	; (dc94 <_svfiprintf_r+0x1fc>)
    dbde:	1c66      	adds	r6, r4, #1
    dbe0:	7629      	strb	r1, [r5, #24]
    dbe2:	f000 fc15 	bl	e410 <memchr>
    dbe6:	2800      	cmp	r0, #0
    dbe8:	d046      	beq.n	dc78 <_svfiprintf_r+0x1e0>
    dbea:	4b2b      	ldr	r3, [pc, #172]	; (dc98 <_svfiprintf_r+0x200>)
    dbec:	2b00      	cmp	r3, #0
    dbee:	d12f      	bne.n	dc50 <_svfiprintf_r+0x1b8>
    dbf0:	6829      	ldr	r1, [r5, #0]
    dbf2:	9b05      	ldr	r3, [sp, #20]
    dbf4:	2207      	movs	r2, #7
    dbf6:	05c9      	lsls	r1, r1, #23
    dbf8:	d528      	bpl.n	dc4c <_svfiprintf_r+0x1b4>
    dbfa:	189b      	adds	r3, r3, r2
    dbfc:	4393      	bics	r3, r2
    dbfe:	3308      	adds	r3, #8
    dc00:	9305      	str	r3, [sp, #20]
    dc02:	696b      	ldr	r3, [r5, #20]
    dc04:	9a03      	ldr	r2, [sp, #12]
    dc06:	189b      	adds	r3, r3, r2
    dc08:	616b      	str	r3, [r5, #20]
    dc0a:	e767      	b.n	dadc <_svfiprintf_r+0x44>
    dc0c:	425b      	negs	r3, r3
    dc0e:	60eb      	str	r3, [r5, #12]
    dc10:	2302      	movs	r3, #2
    dc12:	430b      	orrs	r3, r1
    dc14:	602b      	str	r3, [r5, #0]
    dc16:	e7c0      	b.n	db9a <_svfiprintf_r+0x102>
    dc18:	434b      	muls	r3, r1
    dc1a:	3401      	adds	r4, #1
    dc1c:	189b      	adds	r3, r3, r2
    dc1e:	2001      	movs	r0, #1
    dc20:	e7a0      	b.n	db64 <_svfiprintf_r+0xcc>
    dc22:	2301      	movs	r3, #1
    dc24:	425b      	negs	r3, r3
    dc26:	e7c7      	b.n	dbb8 <_svfiprintf_r+0x120>
    dc28:	2300      	movs	r3, #0
    dc2a:	0014      	movs	r4, r2
    dc2c:	200a      	movs	r0, #10
    dc2e:	001a      	movs	r2, r3
    dc30:	606b      	str	r3, [r5, #4]
    dc32:	7821      	ldrb	r1, [r4, #0]
    dc34:	3930      	subs	r1, #48	; 0x30
    dc36:	2909      	cmp	r1, #9
    dc38:	d903      	bls.n	dc42 <_svfiprintf_r+0x1aa>
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d0bd      	beq.n	dbba <_svfiprintf_r+0x122>
    dc3e:	9207      	str	r2, [sp, #28]
    dc40:	e7bb      	b.n	dbba <_svfiprintf_r+0x122>
    dc42:	4342      	muls	r2, r0
    dc44:	3401      	adds	r4, #1
    dc46:	1852      	adds	r2, r2, r1
    dc48:	2301      	movs	r3, #1
    dc4a:	e7f2      	b.n	dc32 <_svfiprintf_r+0x19a>
    dc4c:	3307      	adds	r3, #7
    dc4e:	e7d5      	b.n	dbfc <_svfiprintf_r+0x164>
    dc50:	ab05      	add	r3, sp, #20
    dc52:	9300      	str	r3, [sp, #0]
    dc54:	003a      	movs	r2, r7
    dc56:	4b11      	ldr	r3, [pc, #68]	; (dc9c <_svfiprintf_r+0x204>)
    dc58:	0029      	movs	r1, r5
    dc5a:	9802      	ldr	r0, [sp, #8]
    dc5c:	e000      	b.n	dc60 <_svfiprintf_r+0x1c8>
    dc5e:	bf00      	nop
    dc60:	9003      	str	r0, [sp, #12]
    dc62:	9b03      	ldr	r3, [sp, #12]
    dc64:	3301      	adds	r3, #1
    dc66:	d1cc      	bne.n	dc02 <_svfiprintf_r+0x16a>
    dc68:	89bb      	ldrh	r3, [r7, #12]
    dc6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dc6c:	065b      	lsls	r3, r3, #25
    dc6e:	d400      	bmi.n	dc72 <_svfiprintf_r+0x1da>
    dc70:	e729      	b.n	dac6 <_svfiprintf_r+0x2e>
    dc72:	2001      	movs	r0, #1
    dc74:	4240      	negs	r0, r0
    dc76:	e726      	b.n	dac6 <_svfiprintf_r+0x2e>
    dc78:	ab05      	add	r3, sp, #20
    dc7a:	9300      	str	r3, [sp, #0]
    dc7c:	003a      	movs	r2, r7
    dc7e:	4b07      	ldr	r3, [pc, #28]	; (dc9c <_svfiprintf_r+0x204>)
    dc80:	0029      	movs	r1, r5
    dc82:	9802      	ldr	r0, [sp, #8]
    dc84:	f000 f9be 	bl	e004 <_printf_i>
    dc88:	e7ea      	b.n	dc60 <_svfiprintf_r+0x1c8>
    dc8a:	46c0      	nop			; (mov r8, r8)
    dc8c:	0000fd0a 	.word	0x0000fd0a
    dc90:	0000fd10 	.word	0x0000fd10
    dc94:	0000fd14 	.word	0x0000fd14
    dc98:	00000000 	.word	0x00000000
    dc9c:	0000d9d5 	.word	0x0000d9d5

0000dca0 <__sfputc_r>:
    dca0:	6893      	ldr	r3, [r2, #8]
    dca2:	b510      	push	{r4, lr}
    dca4:	3b01      	subs	r3, #1
    dca6:	6093      	str	r3, [r2, #8]
    dca8:	2b00      	cmp	r3, #0
    dcaa:	da05      	bge.n	dcb8 <__sfputc_r+0x18>
    dcac:	6994      	ldr	r4, [r2, #24]
    dcae:	42a3      	cmp	r3, r4
    dcb0:	db08      	blt.n	dcc4 <__sfputc_r+0x24>
    dcb2:	b2cb      	uxtb	r3, r1
    dcb4:	2b0a      	cmp	r3, #10
    dcb6:	d005      	beq.n	dcc4 <__sfputc_r+0x24>
    dcb8:	6813      	ldr	r3, [r2, #0]
    dcba:	1c58      	adds	r0, r3, #1
    dcbc:	6010      	str	r0, [r2, #0]
    dcbe:	7019      	strb	r1, [r3, #0]
    dcc0:	b2c8      	uxtb	r0, r1
    dcc2:	bd10      	pop	{r4, pc}
    dcc4:	f7ff fbaa 	bl	d41c <__swbuf_r>
    dcc8:	e7fb      	b.n	dcc2 <__sfputc_r+0x22>

0000dcca <__sfputs_r>:
    dcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dccc:	0006      	movs	r6, r0
    dcce:	000f      	movs	r7, r1
    dcd0:	0014      	movs	r4, r2
    dcd2:	18d5      	adds	r5, r2, r3
    dcd4:	42ac      	cmp	r4, r5
    dcd6:	d101      	bne.n	dcdc <__sfputs_r+0x12>
    dcd8:	2000      	movs	r0, #0
    dcda:	e007      	b.n	dcec <__sfputs_r+0x22>
    dcdc:	7821      	ldrb	r1, [r4, #0]
    dcde:	003a      	movs	r2, r7
    dce0:	0030      	movs	r0, r6
    dce2:	f7ff ffdd 	bl	dca0 <__sfputc_r>
    dce6:	3401      	adds	r4, #1
    dce8:	1c43      	adds	r3, r0, #1
    dcea:	d1f3      	bne.n	dcd4 <__sfputs_r+0xa>
    dcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000dcf0 <_vfiprintf_r>:
    dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcf2:	b09f      	sub	sp, #124	; 0x7c
    dcf4:	0006      	movs	r6, r0
    dcf6:	000f      	movs	r7, r1
    dcf8:	0014      	movs	r4, r2
    dcfa:	9305      	str	r3, [sp, #20]
    dcfc:	2800      	cmp	r0, #0
    dcfe:	d004      	beq.n	dd0a <_vfiprintf_r+0x1a>
    dd00:	6983      	ldr	r3, [r0, #24]
    dd02:	2b00      	cmp	r3, #0
    dd04:	d101      	bne.n	dd0a <_vfiprintf_r+0x1a>
    dd06:	f7ff fd4d 	bl	d7a4 <__sinit>
    dd0a:	4b7f      	ldr	r3, [pc, #508]	; (df08 <_vfiprintf_r+0x218>)
    dd0c:	429f      	cmp	r7, r3
    dd0e:	d15c      	bne.n	ddca <_vfiprintf_r+0xda>
    dd10:	6877      	ldr	r7, [r6, #4]
    dd12:	89bb      	ldrh	r3, [r7, #12]
    dd14:	071b      	lsls	r3, r3, #28
    dd16:	d562      	bpl.n	ddde <_vfiprintf_r+0xee>
    dd18:	693b      	ldr	r3, [r7, #16]
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	d05f      	beq.n	ddde <_vfiprintf_r+0xee>
    dd1e:	2300      	movs	r3, #0
    dd20:	ad06      	add	r5, sp, #24
    dd22:	616b      	str	r3, [r5, #20]
    dd24:	3320      	adds	r3, #32
    dd26:	766b      	strb	r3, [r5, #25]
    dd28:	3310      	adds	r3, #16
    dd2a:	76ab      	strb	r3, [r5, #26]
    dd2c:	9402      	str	r4, [sp, #8]
    dd2e:	9c02      	ldr	r4, [sp, #8]
    dd30:	7823      	ldrb	r3, [r4, #0]
    dd32:	2b00      	cmp	r3, #0
    dd34:	d15d      	bne.n	ddf2 <_vfiprintf_r+0x102>
    dd36:	9b02      	ldr	r3, [sp, #8]
    dd38:	1ae3      	subs	r3, r4, r3
    dd3a:	9304      	str	r3, [sp, #16]
    dd3c:	d00d      	beq.n	dd5a <_vfiprintf_r+0x6a>
    dd3e:	9b04      	ldr	r3, [sp, #16]
    dd40:	9a02      	ldr	r2, [sp, #8]
    dd42:	0039      	movs	r1, r7
    dd44:	0030      	movs	r0, r6
    dd46:	f7ff ffc0 	bl	dcca <__sfputs_r>
    dd4a:	1c43      	adds	r3, r0, #1
    dd4c:	d100      	bne.n	dd50 <_vfiprintf_r+0x60>
    dd4e:	e0cc      	b.n	deea <_vfiprintf_r+0x1fa>
    dd50:	696a      	ldr	r2, [r5, #20]
    dd52:	9b04      	ldr	r3, [sp, #16]
    dd54:	4694      	mov	ip, r2
    dd56:	4463      	add	r3, ip
    dd58:	616b      	str	r3, [r5, #20]
    dd5a:	7823      	ldrb	r3, [r4, #0]
    dd5c:	2b00      	cmp	r3, #0
    dd5e:	d100      	bne.n	dd62 <_vfiprintf_r+0x72>
    dd60:	e0c3      	b.n	deea <_vfiprintf_r+0x1fa>
    dd62:	2201      	movs	r2, #1
    dd64:	2300      	movs	r3, #0
    dd66:	4252      	negs	r2, r2
    dd68:	606a      	str	r2, [r5, #4]
    dd6a:	a902      	add	r1, sp, #8
    dd6c:	3254      	adds	r2, #84	; 0x54
    dd6e:	1852      	adds	r2, r2, r1
    dd70:	3401      	adds	r4, #1
    dd72:	602b      	str	r3, [r5, #0]
    dd74:	60eb      	str	r3, [r5, #12]
    dd76:	60ab      	str	r3, [r5, #8]
    dd78:	7013      	strb	r3, [r2, #0]
    dd7a:	65ab      	str	r3, [r5, #88]	; 0x58
    dd7c:	7821      	ldrb	r1, [r4, #0]
    dd7e:	2205      	movs	r2, #5
    dd80:	4862      	ldr	r0, [pc, #392]	; (df0c <_vfiprintf_r+0x21c>)
    dd82:	f000 fb45 	bl	e410 <memchr>
    dd86:	1c63      	adds	r3, r4, #1
    dd88:	469c      	mov	ip, r3
    dd8a:	2800      	cmp	r0, #0
    dd8c:	d135      	bne.n	ddfa <_vfiprintf_r+0x10a>
    dd8e:	6829      	ldr	r1, [r5, #0]
    dd90:	06cb      	lsls	r3, r1, #27
    dd92:	d504      	bpl.n	dd9e <_vfiprintf_r+0xae>
    dd94:	2353      	movs	r3, #83	; 0x53
    dd96:	aa02      	add	r2, sp, #8
    dd98:	3020      	adds	r0, #32
    dd9a:	189b      	adds	r3, r3, r2
    dd9c:	7018      	strb	r0, [r3, #0]
    dd9e:	070b      	lsls	r3, r1, #28
    dda0:	d504      	bpl.n	ddac <_vfiprintf_r+0xbc>
    dda2:	2353      	movs	r3, #83	; 0x53
    dda4:	202b      	movs	r0, #43	; 0x2b
    dda6:	aa02      	add	r2, sp, #8
    dda8:	189b      	adds	r3, r3, r2
    ddaa:	7018      	strb	r0, [r3, #0]
    ddac:	7823      	ldrb	r3, [r4, #0]
    ddae:	2b2a      	cmp	r3, #42	; 0x2a
    ddb0:	d02c      	beq.n	de0c <_vfiprintf_r+0x11c>
    ddb2:	2000      	movs	r0, #0
    ddb4:	210a      	movs	r1, #10
    ddb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddb8:	7822      	ldrb	r2, [r4, #0]
    ddba:	3a30      	subs	r2, #48	; 0x30
    ddbc:	2a09      	cmp	r2, #9
    ddbe:	d800      	bhi.n	ddc2 <_vfiprintf_r+0xd2>
    ddc0:	e06b      	b.n	de9a <_vfiprintf_r+0x1aa>
    ddc2:	2800      	cmp	r0, #0
    ddc4:	d02a      	beq.n	de1c <_vfiprintf_r+0x12c>
    ddc6:	9309      	str	r3, [sp, #36]	; 0x24
    ddc8:	e028      	b.n	de1c <_vfiprintf_r+0x12c>
    ddca:	4b51      	ldr	r3, [pc, #324]	; (df10 <_vfiprintf_r+0x220>)
    ddcc:	429f      	cmp	r7, r3
    ddce:	d101      	bne.n	ddd4 <_vfiprintf_r+0xe4>
    ddd0:	68b7      	ldr	r7, [r6, #8]
    ddd2:	e79e      	b.n	dd12 <_vfiprintf_r+0x22>
    ddd4:	4b4f      	ldr	r3, [pc, #316]	; (df14 <_vfiprintf_r+0x224>)
    ddd6:	429f      	cmp	r7, r3
    ddd8:	d19b      	bne.n	dd12 <_vfiprintf_r+0x22>
    ddda:	68f7      	ldr	r7, [r6, #12]
    dddc:	e799      	b.n	dd12 <_vfiprintf_r+0x22>
    ddde:	0039      	movs	r1, r7
    dde0:	0030      	movs	r0, r6
    dde2:	f7ff fb71 	bl	d4c8 <__swsetup_r>
    dde6:	2800      	cmp	r0, #0
    dde8:	d099      	beq.n	dd1e <_vfiprintf_r+0x2e>
    ddea:	2001      	movs	r0, #1
    ddec:	4240      	negs	r0, r0
    ddee:	b01f      	add	sp, #124	; 0x7c
    ddf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddf2:	2b25      	cmp	r3, #37	; 0x25
    ddf4:	d09f      	beq.n	dd36 <_vfiprintf_r+0x46>
    ddf6:	3401      	adds	r4, #1
    ddf8:	e79a      	b.n	dd30 <_vfiprintf_r+0x40>
    ddfa:	4b44      	ldr	r3, [pc, #272]	; (df0c <_vfiprintf_r+0x21c>)
    ddfc:	6829      	ldr	r1, [r5, #0]
    ddfe:	1ac0      	subs	r0, r0, r3
    de00:	2301      	movs	r3, #1
    de02:	4083      	lsls	r3, r0
    de04:	430b      	orrs	r3, r1
    de06:	602b      	str	r3, [r5, #0]
    de08:	4664      	mov	r4, ip
    de0a:	e7b7      	b.n	dd7c <_vfiprintf_r+0x8c>
    de0c:	9b05      	ldr	r3, [sp, #20]
    de0e:	1d18      	adds	r0, r3, #4
    de10:	681b      	ldr	r3, [r3, #0]
    de12:	9005      	str	r0, [sp, #20]
    de14:	2b00      	cmp	r3, #0
    de16:	db3a      	blt.n	de8e <_vfiprintf_r+0x19e>
    de18:	9309      	str	r3, [sp, #36]	; 0x24
    de1a:	4664      	mov	r4, ip
    de1c:	7823      	ldrb	r3, [r4, #0]
    de1e:	2b2e      	cmp	r3, #46	; 0x2e
    de20:	d10b      	bne.n	de3a <_vfiprintf_r+0x14a>
    de22:	7863      	ldrb	r3, [r4, #1]
    de24:	1c62      	adds	r2, r4, #1
    de26:	2b2a      	cmp	r3, #42	; 0x2a
    de28:	d13f      	bne.n	deaa <_vfiprintf_r+0x1ba>
    de2a:	9b05      	ldr	r3, [sp, #20]
    de2c:	3402      	adds	r4, #2
    de2e:	1d1a      	adds	r2, r3, #4
    de30:	681b      	ldr	r3, [r3, #0]
    de32:	9205      	str	r2, [sp, #20]
    de34:	2b00      	cmp	r3, #0
    de36:	db35      	blt.n	dea4 <_vfiprintf_r+0x1b4>
    de38:	9307      	str	r3, [sp, #28]
    de3a:	7821      	ldrb	r1, [r4, #0]
    de3c:	2203      	movs	r2, #3
    de3e:	4836      	ldr	r0, [pc, #216]	; (df18 <_vfiprintf_r+0x228>)
    de40:	f000 fae6 	bl	e410 <memchr>
    de44:	2800      	cmp	r0, #0
    de46:	d007      	beq.n	de58 <_vfiprintf_r+0x168>
    de48:	4b33      	ldr	r3, [pc, #204]	; (df18 <_vfiprintf_r+0x228>)
    de4a:	682a      	ldr	r2, [r5, #0]
    de4c:	1ac0      	subs	r0, r0, r3
    de4e:	2340      	movs	r3, #64	; 0x40
    de50:	4083      	lsls	r3, r0
    de52:	4313      	orrs	r3, r2
    de54:	602b      	str	r3, [r5, #0]
    de56:	3401      	adds	r4, #1
    de58:	7821      	ldrb	r1, [r4, #0]
    de5a:	1c63      	adds	r3, r4, #1
    de5c:	2206      	movs	r2, #6
    de5e:	482f      	ldr	r0, [pc, #188]	; (df1c <_vfiprintf_r+0x22c>)
    de60:	9302      	str	r3, [sp, #8]
    de62:	7629      	strb	r1, [r5, #24]
    de64:	f000 fad4 	bl	e410 <memchr>
    de68:	2800      	cmp	r0, #0
    de6a:	d044      	beq.n	def6 <_vfiprintf_r+0x206>
    de6c:	4b2c      	ldr	r3, [pc, #176]	; (df20 <_vfiprintf_r+0x230>)
    de6e:	2b00      	cmp	r3, #0
    de70:	d12f      	bne.n	ded2 <_vfiprintf_r+0x1e2>
    de72:	6829      	ldr	r1, [r5, #0]
    de74:	9b05      	ldr	r3, [sp, #20]
    de76:	2207      	movs	r2, #7
    de78:	05c9      	lsls	r1, r1, #23
    de7a:	d528      	bpl.n	dece <_vfiprintf_r+0x1de>
    de7c:	189b      	adds	r3, r3, r2
    de7e:	4393      	bics	r3, r2
    de80:	3308      	adds	r3, #8
    de82:	9305      	str	r3, [sp, #20]
    de84:	696b      	ldr	r3, [r5, #20]
    de86:	9a03      	ldr	r2, [sp, #12]
    de88:	189b      	adds	r3, r3, r2
    de8a:	616b      	str	r3, [r5, #20]
    de8c:	e74f      	b.n	dd2e <_vfiprintf_r+0x3e>
    de8e:	425b      	negs	r3, r3
    de90:	60eb      	str	r3, [r5, #12]
    de92:	2302      	movs	r3, #2
    de94:	430b      	orrs	r3, r1
    de96:	602b      	str	r3, [r5, #0]
    de98:	e7bf      	b.n	de1a <_vfiprintf_r+0x12a>
    de9a:	434b      	muls	r3, r1
    de9c:	3401      	adds	r4, #1
    de9e:	189b      	adds	r3, r3, r2
    dea0:	2001      	movs	r0, #1
    dea2:	e789      	b.n	ddb8 <_vfiprintf_r+0xc8>
    dea4:	2301      	movs	r3, #1
    dea6:	425b      	negs	r3, r3
    dea8:	e7c6      	b.n	de38 <_vfiprintf_r+0x148>
    deaa:	2300      	movs	r3, #0
    deac:	0014      	movs	r4, r2
    deae:	200a      	movs	r0, #10
    deb0:	001a      	movs	r2, r3
    deb2:	606b      	str	r3, [r5, #4]
    deb4:	7821      	ldrb	r1, [r4, #0]
    deb6:	3930      	subs	r1, #48	; 0x30
    deb8:	2909      	cmp	r1, #9
    deba:	d903      	bls.n	dec4 <_vfiprintf_r+0x1d4>
    debc:	2b00      	cmp	r3, #0
    debe:	d0bc      	beq.n	de3a <_vfiprintf_r+0x14a>
    dec0:	9207      	str	r2, [sp, #28]
    dec2:	e7ba      	b.n	de3a <_vfiprintf_r+0x14a>
    dec4:	4342      	muls	r2, r0
    dec6:	3401      	adds	r4, #1
    dec8:	1852      	adds	r2, r2, r1
    deca:	2301      	movs	r3, #1
    decc:	e7f2      	b.n	deb4 <_vfiprintf_r+0x1c4>
    dece:	3307      	adds	r3, #7
    ded0:	e7d5      	b.n	de7e <_vfiprintf_r+0x18e>
    ded2:	ab05      	add	r3, sp, #20
    ded4:	9300      	str	r3, [sp, #0]
    ded6:	003a      	movs	r2, r7
    ded8:	4b12      	ldr	r3, [pc, #72]	; (df24 <_vfiprintf_r+0x234>)
    deda:	0029      	movs	r1, r5
    dedc:	0030      	movs	r0, r6
    dede:	e000      	b.n	dee2 <_vfiprintf_r+0x1f2>
    dee0:	bf00      	nop
    dee2:	9003      	str	r0, [sp, #12]
    dee4:	9b03      	ldr	r3, [sp, #12]
    dee6:	3301      	adds	r3, #1
    dee8:	d1cc      	bne.n	de84 <_vfiprintf_r+0x194>
    deea:	89bb      	ldrh	r3, [r7, #12]
    deec:	065b      	lsls	r3, r3, #25
    deee:	d500      	bpl.n	def2 <_vfiprintf_r+0x202>
    def0:	e77b      	b.n	ddea <_vfiprintf_r+0xfa>
    def2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    def4:	e77b      	b.n	ddee <_vfiprintf_r+0xfe>
    def6:	ab05      	add	r3, sp, #20
    def8:	9300      	str	r3, [sp, #0]
    defa:	003a      	movs	r2, r7
    defc:	4b09      	ldr	r3, [pc, #36]	; (df24 <_vfiprintf_r+0x234>)
    defe:	0029      	movs	r1, r5
    df00:	0030      	movs	r0, r6
    df02:	f000 f87f 	bl	e004 <_printf_i>
    df06:	e7ec      	b.n	dee2 <_vfiprintf_r+0x1f2>
    df08:	0000fcc0 	.word	0x0000fcc0
    df0c:	0000fd0a 	.word	0x0000fd0a
    df10:	0000fce0 	.word	0x0000fce0
    df14:	0000fca0 	.word	0x0000fca0
    df18:	0000fd10 	.word	0x0000fd10
    df1c:	0000fd14 	.word	0x0000fd14
    df20:	00000000 	.word	0x00000000
    df24:	0000dccb 	.word	0x0000dccb

0000df28 <_printf_common>:
    df28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df2a:	0015      	movs	r5, r2
    df2c:	9301      	str	r3, [sp, #4]
    df2e:	688a      	ldr	r2, [r1, #8]
    df30:	690b      	ldr	r3, [r1, #16]
    df32:	9000      	str	r0, [sp, #0]
    df34:	000c      	movs	r4, r1
    df36:	4293      	cmp	r3, r2
    df38:	da00      	bge.n	df3c <_printf_common+0x14>
    df3a:	0013      	movs	r3, r2
    df3c:	0022      	movs	r2, r4
    df3e:	602b      	str	r3, [r5, #0]
    df40:	3243      	adds	r2, #67	; 0x43
    df42:	7812      	ldrb	r2, [r2, #0]
    df44:	2a00      	cmp	r2, #0
    df46:	d001      	beq.n	df4c <_printf_common+0x24>
    df48:	3301      	adds	r3, #1
    df4a:	602b      	str	r3, [r5, #0]
    df4c:	6823      	ldr	r3, [r4, #0]
    df4e:	069b      	lsls	r3, r3, #26
    df50:	d502      	bpl.n	df58 <_printf_common+0x30>
    df52:	682b      	ldr	r3, [r5, #0]
    df54:	3302      	adds	r3, #2
    df56:	602b      	str	r3, [r5, #0]
    df58:	2706      	movs	r7, #6
    df5a:	6823      	ldr	r3, [r4, #0]
    df5c:	401f      	ands	r7, r3
    df5e:	d027      	beq.n	dfb0 <_printf_common+0x88>
    df60:	0023      	movs	r3, r4
    df62:	3343      	adds	r3, #67	; 0x43
    df64:	781b      	ldrb	r3, [r3, #0]
    df66:	1e5a      	subs	r2, r3, #1
    df68:	4193      	sbcs	r3, r2
    df6a:	6822      	ldr	r2, [r4, #0]
    df6c:	0692      	lsls	r2, r2, #26
    df6e:	d430      	bmi.n	dfd2 <_printf_common+0xaa>
    df70:	0022      	movs	r2, r4
    df72:	9901      	ldr	r1, [sp, #4]
    df74:	3243      	adds	r2, #67	; 0x43
    df76:	9800      	ldr	r0, [sp, #0]
    df78:	9e08      	ldr	r6, [sp, #32]
    df7a:	47b0      	blx	r6
    df7c:	1c43      	adds	r3, r0, #1
    df7e:	d025      	beq.n	dfcc <_printf_common+0xa4>
    df80:	2306      	movs	r3, #6
    df82:	6820      	ldr	r0, [r4, #0]
    df84:	682a      	ldr	r2, [r5, #0]
    df86:	68e1      	ldr	r1, [r4, #12]
    df88:	4003      	ands	r3, r0
    df8a:	2500      	movs	r5, #0
    df8c:	2b04      	cmp	r3, #4
    df8e:	d103      	bne.n	df98 <_printf_common+0x70>
    df90:	1a8d      	subs	r5, r1, r2
    df92:	43eb      	mvns	r3, r5
    df94:	17db      	asrs	r3, r3, #31
    df96:	401d      	ands	r5, r3
    df98:	68a3      	ldr	r3, [r4, #8]
    df9a:	6922      	ldr	r2, [r4, #16]
    df9c:	4293      	cmp	r3, r2
    df9e:	dd01      	ble.n	dfa4 <_printf_common+0x7c>
    dfa0:	1a9b      	subs	r3, r3, r2
    dfa2:	18ed      	adds	r5, r5, r3
    dfa4:	2700      	movs	r7, #0
    dfa6:	42bd      	cmp	r5, r7
    dfa8:	d120      	bne.n	dfec <_printf_common+0xc4>
    dfaa:	2000      	movs	r0, #0
    dfac:	e010      	b.n	dfd0 <_printf_common+0xa8>
    dfae:	3701      	adds	r7, #1
    dfb0:	68e3      	ldr	r3, [r4, #12]
    dfb2:	682a      	ldr	r2, [r5, #0]
    dfb4:	1a9b      	subs	r3, r3, r2
    dfb6:	429f      	cmp	r7, r3
    dfb8:	dad2      	bge.n	df60 <_printf_common+0x38>
    dfba:	0022      	movs	r2, r4
    dfbc:	2301      	movs	r3, #1
    dfbe:	3219      	adds	r2, #25
    dfc0:	9901      	ldr	r1, [sp, #4]
    dfc2:	9800      	ldr	r0, [sp, #0]
    dfc4:	9e08      	ldr	r6, [sp, #32]
    dfc6:	47b0      	blx	r6
    dfc8:	1c43      	adds	r3, r0, #1
    dfca:	d1f0      	bne.n	dfae <_printf_common+0x86>
    dfcc:	2001      	movs	r0, #1
    dfce:	4240      	negs	r0, r0
    dfd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dfd2:	2030      	movs	r0, #48	; 0x30
    dfd4:	18e1      	adds	r1, r4, r3
    dfd6:	3143      	adds	r1, #67	; 0x43
    dfd8:	7008      	strb	r0, [r1, #0]
    dfda:	0021      	movs	r1, r4
    dfdc:	1c5a      	adds	r2, r3, #1
    dfde:	3145      	adds	r1, #69	; 0x45
    dfe0:	7809      	ldrb	r1, [r1, #0]
    dfe2:	18a2      	adds	r2, r4, r2
    dfe4:	3243      	adds	r2, #67	; 0x43
    dfe6:	3302      	adds	r3, #2
    dfe8:	7011      	strb	r1, [r2, #0]
    dfea:	e7c1      	b.n	df70 <_printf_common+0x48>
    dfec:	0022      	movs	r2, r4
    dfee:	2301      	movs	r3, #1
    dff0:	321a      	adds	r2, #26
    dff2:	9901      	ldr	r1, [sp, #4]
    dff4:	9800      	ldr	r0, [sp, #0]
    dff6:	9e08      	ldr	r6, [sp, #32]
    dff8:	47b0      	blx	r6
    dffa:	1c43      	adds	r3, r0, #1
    dffc:	d0e6      	beq.n	dfcc <_printf_common+0xa4>
    dffe:	3701      	adds	r7, #1
    e000:	e7d1      	b.n	dfa6 <_printf_common+0x7e>
	...

0000e004 <_printf_i>:
    e004:	b5f0      	push	{r4, r5, r6, r7, lr}
    e006:	b08b      	sub	sp, #44	; 0x2c
    e008:	9206      	str	r2, [sp, #24]
    e00a:	000a      	movs	r2, r1
    e00c:	3243      	adds	r2, #67	; 0x43
    e00e:	9307      	str	r3, [sp, #28]
    e010:	9005      	str	r0, [sp, #20]
    e012:	9204      	str	r2, [sp, #16]
    e014:	7e0a      	ldrb	r2, [r1, #24]
    e016:	000c      	movs	r4, r1
    e018:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e01a:	2a6e      	cmp	r2, #110	; 0x6e
    e01c:	d100      	bne.n	e020 <_printf_i+0x1c>
    e01e:	e08f      	b.n	e140 <_printf_i+0x13c>
    e020:	d817      	bhi.n	e052 <_printf_i+0x4e>
    e022:	2a63      	cmp	r2, #99	; 0x63
    e024:	d02c      	beq.n	e080 <_printf_i+0x7c>
    e026:	d808      	bhi.n	e03a <_printf_i+0x36>
    e028:	2a00      	cmp	r2, #0
    e02a:	d100      	bne.n	e02e <_printf_i+0x2a>
    e02c:	e099      	b.n	e162 <_printf_i+0x15e>
    e02e:	2a58      	cmp	r2, #88	; 0x58
    e030:	d054      	beq.n	e0dc <_printf_i+0xd8>
    e032:	0026      	movs	r6, r4
    e034:	3642      	adds	r6, #66	; 0x42
    e036:	7032      	strb	r2, [r6, #0]
    e038:	e029      	b.n	e08e <_printf_i+0x8a>
    e03a:	2a64      	cmp	r2, #100	; 0x64
    e03c:	d001      	beq.n	e042 <_printf_i+0x3e>
    e03e:	2a69      	cmp	r2, #105	; 0x69
    e040:	d1f7      	bne.n	e032 <_printf_i+0x2e>
    e042:	6821      	ldr	r1, [r4, #0]
    e044:	681a      	ldr	r2, [r3, #0]
    e046:	0608      	lsls	r0, r1, #24
    e048:	d523      	bpl.n	e092 <_printf_i+0x8e>
    e04a:	1d11      	adds	r1, r2, #4
    e04c:	6019      	str	r1, [r3, #0]
    e04e:	6815      	ldr	r5, [r2, #0]
    e050:	e025      	b.n	e09e <_printf_i+0x9a>
    e052:	2a73      	cmp	r2, #115	; 0x73
    e054:	d100      	bne.n	e058 <_printf_i+0x54>
    e056:	e088      	b.n	e16a <_printf_i+0x166>
    e058:	d808      	bhi.n	e06c <_printf_i+0x68>
    e05a:	2a6f      	cmp	r2, #111	; 0x6f
    e05c:	d029      	beq.n	e0b2 <_printf_i+0xae>
    e05e:	2a70      	cmp	r2, #112	; 0x70
    e060:	d1e7      	bne.n	e032 <_printf_i+0x2e>
    e062:	2220      	movs	r2, #32
    e064:	6809      	ldr	r1, [r1, #0]
    e066:	430a      	orrs	r2, r1
    e068:	6022      	str	r2, [r4, #0]
    e06a:	e003      	b.n	e074 <_printf_i+0x70>
    e06c:	2a75      	cmp	r2, #117	; 0x75
    e06e:	d020      	beq.n	e0b2 <_printf_i+0xae>
    e070:	2a78      	cmp	r2, #120	; 0x78
    e072:	d1de      	bne.n	e032 <_printf_i+0x2e>
    e074:	0022      	movs	r2, r4
    e076:	2178      	movs	r1, #120	; 0x78
    e078:	3245      	adds	r2, #69	; 0x45
    e07a:	7011      	strb	r1, [r2, #0]
    e07c:	4a6c      	ldr	r2, [pc, #432]	; (e230 <_printf_i+0x22c>)
    e07e:	e030      	b.n	e0e2 <_printf_i+0xde>
    e080:	000e      	movs	r6, r1
    e082:	681a      	ldr	r2, [r3, #0]
    e084:	3642      	adds	r6, #66	; 0x42
    e086:	1d11      	adds	r1, r2, #4
    e088:	6019      	str	r1, [r3, #0]
    e08a:	6813      	ldr	r3, [r2, #0]
    e08c:	7033      	strb	r3, [r6, #0]
    e08e:	2301      	movs	r3, #1
    e090:	e079      	b.n	e186 <_printf_i+0x182>
    e092:	0649      	lsls	r1, r1, #25
    e094:	d5d9      	bpl.n	e04a <_printf_i+0x46>
    e096:	1d11      	adds	r1, r2, #4
    e098:	6019      	str	r1, [r3, #0]
    e09a:	2300      	movs	r3, #0
    e09c:	5ed5      	ldrsh	r5, [r2, r3]
    e09e:	2d00      	cmp	r5, #0
    e0a0:	da03      	bge.n	e0aa <_printf_i+0xa6>
    e0a2:	232d      	movs	r3, #45	; 0x2d
    e0a4:	9a04      	ldr	r2, [sp, #16]
    e0a6:	426d      	negs	r5, r5
    e0a8:	7013      	strb	r3, [r2, #0]
    e0aa:	4b62      	ldr	r3, [pc, #392]	; (e234 <_printf_i+0x230>)
    e0ac:	270a      	movs	r7, #10
    e0ae:	9303      	str	r3, [sp, #12]
    e0b0:	e02f      	b.n	e112 <_printf_i+0x10e>
    e0b2:	6820      	ldr	r0, [r4, #0]
    e0b4:	6819      	ldr	r1, [r3, #0]
    e0b6:	0605      	lsls	r5, r0, #24
    e0b8:	d503      	bpl.n	e0c2 <_printf_i+0xbe>
    e0ba:	1d08      	adds	r0, r1, #4
    e0bc:	6018      	str	r0, [r3, #0]
    e0be:	680d      	ldr	r5, [r1, #0]
    e0c0:	e005      	b.n	e0ce <_printf_i+0xca>
    e0c2:	0640      	lsls	r0, r0, #25
    e0c4:	d5f9      	bpl.n	e0ba <_printf_i+0xb6>
    e0c6:	680d      	ldr	r5, [r1, #0]
    e0c8:	1d08      	adds	r0, r1, #4
    e0ca:	6018      	str	r0, [r3, #0]
    e0cc:	b2ad      	uxth	r5, r5
    e0ce:	4b59      	ldr	r3, [pc, #356]	; (e234 <_printf_i+0x230>)
    e0d0:	2708      	movs	r7, #8
    e0d2:	9303      	str	r3, [sp, #12]
    e0d4:	2a6f      	cmp	r2, #111	; 0x6f
    e0d6:	d018      	beq.n	e10a <_printf_i+0x106>
    e0d8:	270a      	movs	r7, #10
    e0da:	e016      	b.n	e10a <_printf_i+0x106>
    e0dc:	3145      	adds	r1, #69	; 0x45
    e0de:	700a      	strb	r2, [r1, #0]
    e0e0:	4a54      	ldr	r2, [pc, #336]	; (e234 <_printf_i+0x230>)
    e0e2:	9203      	str	r2, [sp, #12]
    e0e4:	681a      	ldr	r2, [r3, #0]
    e0e6:	6821      	ldr	r1, [r4, #0]
    e0e8:	1d10      	adds	r0, r2, #4
    e0ea:	6018      	str	r0, [r3, #0]
    e0ec:	6815      	ldr	r5, [r2, #0]
    e0ee:	0608      	lsls	r0, r1, #24
    e0f0:	d522      	bpl.n	e138 <_printf_i+0x134>
    e0f2:	07cb      	lsls	r3, r1, #31
    e0f4:	d502      	bpl.n	e0fc <_printf_i+0xf8>
    e0f6:	2320      	movs	r3, #32
    e0f8:	4319      	orrs	r1, r3
    e0fa:	6021      	str	r1, [r4, #0]
    e0fc:	2710      	movs	r7, #16
    e0fe:	2d00      	cmp	r5, #0
    e100:	d103      	bne.n	e10a <_printf_i+0x106>
    e102:	2320      	movs	r3, #32
    e104:	6822      	ldr	r2, [r4, #0]
    e106:	439a      	bics	r2, r3
    e108:	6022      	str	r2, [r4, #0]
    e10a:	0023      	movs	r3, r4
    e10c:	2200      	movs	r2, #0
    e10e:	3343      	adds	r3, #67	; 0x43
    e110:	701a      	strb	r2, [r3, #0]
    e112:	6863      	ldr	r3, [r4, #4]
    e114:	60a3      	str	r3, [r4, #8]
    e116:	2b00      	cmp	r3, #0
    e118:	db5c      	blt.n	e1d4 <_printf_i+0x1d0>
    e11a:	2204      	movs	r2, #4
    e11c:	6821      	ldr	r1, [r4, #0]
    e11e:	4391      	bics	r1, r2
    e120:	6021      	str	r1, [r4, #0]
    e122:	2d00      	cmp	r5, #0
    e124:	d158      	bne.n	e1d8 <_printf_i+0x1d4>
    e126:	9e04      	ldr	r6, [sp, #16]
    e128:	2b00      	cmp	r3, #0
    e12a:	d064      	beq.n	e1f6 <_printf_i+0x1f2>
    e12c:	0026      	movs	r6, r4
    e12e:	9b03      	ldr	r3, [sp, #12]
    e130:	3642      	adds	r6, #66	; 0x42
    e132:	781b      	ldrb	r3, [r3, #0]
    e134:	7033      	strb	r3, [r6, #0]
    e136:	e05e      	b.n	e1f6 <_printf_i+0x1f2>
    e138:	0648      	lsls	r0, r1, #25
    e13a:	d5da      	bpl.n	e0f2 <_printf_i+0xee>
    e13c:	b2ad      	uxth	r5, r5
    e13e:	e7d8      	b.n	e0f2 <_printf_i+0xee>
    e140:	6809      	ldr	r1, [r1, #0]
    e142:	681a      	ldr	r2, [r3, #0]
    e144:	0608      	lsls	r0, r1, #24
    e146:	d505      	bpl.n	e154 <_printf_i+0x150>
    e148:	1d11      	adds	r1, r2, #4
    e14a:	6019      	str	r1, [r3, #0]
    e14c:	6813      	ldr	r3, [r2, #0]
    e14e:	6962      	ldr	r2, [r4, #20]
    e150:	601a      	str	r2, [r3, #0]
    e152:	e006      	b.n	e162 <_printf_i+0x15e>
    e154:	0649      	lsls	r1, r1, #25
    e156:	d5f7      	bpl.n	e148 <_printf_i+0x144>
    e158:	1d11      	adds	r1, r2, #4
    e15a:	6019      	str	r1, [r3, #0]
    e15c:	6813      	ldr	r3, [r2, #0]
    e15e:	8aa2      	ldrh	r2, [r4, #20]
    e160:	801a      	strh	r2, [r3, #0]
    e162:	2300      	movs	r3, #0
    e164:	9e04      	ldr	r6, [sp, #16]
    e166:	6123      	str	r3, [r4, #16]
    e168:	e054      	b.n	e214 <_printf_i+0x210>
    e16a:	681a      	ldr	r2, [r3, #0]
    e16c:	1d11      	adds	r1, r2, #4
    e16e:	6019      	str	r1, [r3, #0]
    e170:	6816      	ldr	r6, [r2, #0]
    e172:	2100      	movs	r1, #0
    e174:	6862      	ldr	r2, [r4, #4]
    e176:	0030      	movs	r0, r6
    e178:	f000 f94a 	bl	e410 <memchr>
    e17c:	2800      	cmp	r0, #0
    e17e:	d001      	beq.n	e184 <_printf_i+0x180>
    e180:	1b80      	subs	r0, r0, r6
    e182:	6060      	str	r0, [r4, #4]
    e184:	6863      	ldr	r3, [r4, #4]
    e186:	6123      	str	r3, [r4, #16]
    e188:	2300      	movs	r3, #0
    e18a:	9a04      	ldr	r2, [sp, #16]
    e18c:	7013      	strb	r3, [r2, #0]
    e18e:	e041      	b.n	e214 <_printf_i+0x210>
    e190:	6923      	ldr	r3, [r4, #16]
    e192:	0032      	movs	r2, r6
    e194:	9906      	ldr	r1, [sp, #24]
    e196:	9805      	ldr	r0, [sp, #20]
    e198:	9d07      	ldr	r5, [sp, #28]
    e19a:	47a8      	blx	r5
    e19c:	1c43      	adds	r3, r0, #1
    e19e:	d043      	beq.n	e228 <_printf_i+0x224>
    e1a0:	6823      	ldr	r3, [r4, #0]
    e1a2:	2500      	movs	r5, #0
    e1a4:	079b      	lsls	r3, r3, #30
    e1a6:	d40f      	bmi.n	e1c8 <_printf_i+0x1c4>
    e1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1aa:	68e0      	ldr	r0, [r4, #12]
    e1ac:	4298      	cmp	r0, r3
    e1ae:	da3d      	bge.n	e22c <_printf_i+0x228>
    e1b0:	0018      	movs	r0, r3
    e1b2:	e03b      	b.n	e22c <_printf_i+0x228>
    e1b4:	0022      	movs	r2, r4
    e1b6:	2301      	movs	r3, #1
    e1b8:	3219      	adds	r2, #25
    e1ba:	9906      	ldr	r1, [sp, #24]
    e1bc:	9805      	ldr	r0, [sp, #20]
    e1be:	9e07      	ldr	r6, [sp, #28]
    e1c0:	47b0      	blx	r6
    e1c2:	1c43      	adds	r3, r0, #1
    e1c4:	d030      	beq.n	e228 <_printf_i+0x224>
    e1c6:	3501      	adds	r5, #1
    e1c8:	68e3      	ldr	r3, [r4, #12]
    e1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e1cc:	1a9b      	subs	r3, r3, r2
    e1ce:	429d      	cmp	r5, r3
    e1d0:	dbf0      	blt.n	e1b4 <_printf_i+0x1b0>
    e1d2:	e7e9      	b.n	e1a8 <_printf_i+0x1a4>
    e1d4:	2d00      	cmp	r5, #0
    e1d6:	d0a9      	beq.n	e12c <_printf_i+0x128>
    e1d8:	9e04      	ldr	r6, [sp, #16]
    e1da:	0028      	movs	r0, r5
    e1dc:	0039      	movs	r1, r7
    e1de:	f7fe fc7d 	bl	cadc <__aeabi_uidivmod>
    e1e2:	9b03      	ldr	r3, [sp, #12]
    e1e4:	3e01      	subs	r6, #1
    e1e6:	5c5b      	ldrb	r3, [r3, r1]
    e1e8:	0028      	movs	r0, r5
    e1ea:	7033      	strb	r3, [r6, #0]
    e1ec:	0039      	movs	r1, r7
    e1ee:	f7fe fbef 	bl	c9d0 <__udivsi3>
    e1f2:	1e05      	subs	r5, r0, #0
    e1f4:	d1f1      	bne.n	e1da <_printf_i+0x1d6>
    e1f6:	2f08      	cmp	r7, #8
    e1f8:	d109      	bne.n	e20e <_printf_i+0x20a>
    e1fa:	6823      	ldr	r3, [r4, #0]
    e1fc:	07db      	lsls	r3, r3, #31
    e1fe:	d506      	bpl.n	e20e <_printf_i+0x20a>
    e200:	6863      	ldr	r3, [r4, #4]
    e202:	6922      	ldr	r2, [r4, #16]
    e204:	4293      	cmp	r3, r2
    e206:	dc02      	bgt.n	e20e <_printf_i+0x20a>
    e208:	2330      	movs	r3, #48	; 0x30
    e20a:	3e01      	subs	r6, #1
    e20c:	7033      	strb	r3, [r6, #0]
    e20e:	9b04      	ldr	r3, [sp, #16]
    e210:	1b9b      	subs	r3, r3, r6
    e212:	6123      	str	r3, [r4, #16]
    e214:	9b07      	ldr	r3, [sp, #28]
    e216:	aa09      	add	r2, sp, #36	; 0x24
    e218:	9300      	str	r3, [sp, #0]
    e21a:	0021      	movs	r1, r4
    e21c:	9b06      	ldr	r3, [sp, #24]
    e21e:	9805      	ldr	r0, [sp, #20]
    e220:	f7ff fe82 	bl	df28 <_printf_common>
    e224:	1c43      	adds	r3, r0, #1
    e226:	d1b3      	bne.n	e190 <_printf_i+0x18c>
    e228:	2001      	movs	r0, #1
    e22a:	4240      	negs	r0, r0
    e22c:	b00b      	add	sp, #44	; 0x2c
    e22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e230:	0000fd2c 	.word	0x0000fd2c
    e234:	0000fd1b 	.word	0x0000fd1b

0000e238 <_putc_r>:
    e238:	b570      	push	{r4, r5, r6, lr}
    e23a:	0006      	movs	r6, r0
    e23c:	000d      	movs	r5, r1
    e23e:	0014      	movs	r4, r2
    e240:	2800      	cmp	r0, #0
    e242:	d004      	beq.n	e24e <_putc_r+0x16>
    e244:	6983      	ldr	r3, [r0, #24]
    e246:	2b00      	cmp	r3, #0
    e248:	d101      	bne.n	e24e <_putc_r+0x16>
    e24a:	f7ff faab 	bl	d7a4 <__sinit>
    e24e:	4b12      	ldr	r3, [pc, #72]	; (e298 <_putc_r+0x60>)
    e250:	429c      	cmp	r4, r3
    e252:	d111      	bne.n	e278 <_putc_r+0x40>
    e254:	6874      	ldr	r4, [r6, #4]
    e256:	68a3      	ldr	r3, [r4, #8]
    e258:	3b01      	subs	r3, #1
    e25a:	60a3      	str	r3, [r4, #8]
    e25c:	2b00      	cmp	r3, #0
    e25e:	da05      	bge.n	e26c <_putc_r+0x34>
    e260:	69a2      	ldr	r2, [r4, #24]
    e262:	4293      	cmp	r3, r2
    e264:	db12      	blt.n	e28c <_putc_r+0x54>
    e266:	b2eb      	uxtb	r3, r5
    e268:	2b0a      	cmp	r3, #10
    e26a:	d00f      	beq.n	e28c <_putc_r+0x54>
    e26c:	6823      	ldr	r3, [r4, #0]
    e26e:	b2e8      	uxtb	r0, r5
    e270:	1c5a      	adds	r2, r3, #1
    e272:	6022      	str	r2, [r4, #0]
    e274:	701d      	strb	r5, [r3, #0]
    e276:	bd70      	pop	{r4, r5, r6, pc}
    e278:	4b08      	ldr	r3, [pc, #32]	; (e29c <_putc_r+0x64>)
    e27a:	429c      	cmp	r4, r3
    e27c:	d101      	bne.n	e282 <_putc_r+0x4a>
    e27e:	68b4      	ldr	r4, [r6, #8]
    e280:	e7e9      	b.n	e256 <_putc_r+0x1e>
    e282:	4b07      	ldr	r3, [pc, #28]	; (e2a0 <_putc_r+0x68>)
    e284:	429c      	cmp	r4, r3
    e286:	d1e6      	bne.n	e256 <_putc_r+0x1e>
    e288:	68f4      	ldr	r4, [r6, #12]
    e28a:	e7e4      	b.n	e256 <_putc_r+0x1e>
    e28c:	0022      	movs	r2, r4
    e28e:	0029      	movs	r1, r5
    e290:	0030      	movs	r0, r6
    e292:	f7ff f8c3 	bl	d41c <__swbuf_r>
    e296:	e7ee      	b.n	e276 <_putc_r+0x3e>
    e298:	0000fcc0 	.word	0x0000fcc0
    e29c:	0000fce0 	.word	0x0000fce0
    e2a0:	0000fca0 	.word	0x0000fca0

0000e2a4 <__sread>:
    e2a4:	b570      	push	{r4, r5, r6, lr}
    e2a6:	000c      	movs	r4, r1
    e2a8:	250e      	movs	r5, #14
    e2aa:	5f49      	ldrsh	r1, [r1, r5]
    e2ac:	f000 f8e2 	bl	e474 <_read_r>
    e2b0:	2800      	cmp	r0, #0
    e2b2:	db03      	blt.n	e2bc <__sread+0x18>
    e2b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e2b6:	181b      	adds	r3, r3, r0
    e2b8:	6563      	str	r3, [r4, #84]	; 0x54
    e2ba:	bd70      	pop	{r4, r5, r6, pc}
    e2bc:	89a3      	ldrh	r3, [r4, #12]
    e2be:	4a02      	ldr	r2, [pc, #8]	; (e2c8 <__sread+0x24>)
    e2c0:	4013      	ands	r3, r2
    e2c2:	81a3      	strh	r3, [r4, #12]
    e2c4:	e7f9      	b.n	e2ba <__sread+0x16>
    e2c6:	46c0      	nop			; (mov r8, r8)
    e2c8:	ffffefff 	.word	0xffffefff

0000e2cc <__swrite>:
    e2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2ce:	001f      	movs	r7, r3
    e2d0:	898b      	ldrh	r3, [r1, #12]
    e2d2:	0005      	movs	r5, r0
    e2d4:	000c      	movs	r4, r1
    e2d6:	0016      	movs	r6, r2
    e2d8:	05db      	lsls	r3, r3, #23
    e2da:	d505      	bpl.n	e2e8 <__swrite+0x1c>
    e2dc:	230e      	movs	r3, #14
    e2de:	5ec9      	ldrsh	r1, [r1, r3]
    e2e0:	2200      	movs	r2, #0
    e2e2:	2302      	movs	r3, #2
    e2e4:	f000 f880 	bl	e3e8 <_lseek_r>
    e2e8:	89a3      	ldrh	r3, [r4, #12]
    e2ea:	4a05      	ldr	r2, [pc, #20]	; (e300 <__swrite+0x34>)
    e2ec:	0028      	movs	r0, r5
    e2ee:	4013      	ands	r3, r2
    e2f0:	81a3      	strh	r3, [r4, #12]
    e2f2:	0032      	movs	r2, r6
    e2f4:	230e      	movs	r3, #14
    e2f6:	5ee1      	ldrsh	r1, [r4, r3]
    e2f8:	003b      	movs	r3, r7
    e2fa:	f000 f82b 	bl	e354 <_write_r>
    e2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e300:	ffffefff 	.word	0xffffefff

0000e304 <__sseek>:
    e304:	b570      	push	{r4, r5, r6, lr}
    e306:	000c      	movs	r4, r1
    e308:	250e      	movs	r5, #14
    e30a:	5f49      	ldrsh	r1, [r1, r5]
    e30c:	f000 f86c 	bl	e3e8 <_lseek_r>
    e310:	89a3      	ldrh	r3, [r4, #12]
    e312:	1c42      	adds	r2, r0, #1
    e314:	d103      	bne.n	e31e <__sseek+0x1a>
    e316:	4a05      	ldr	r2, [pc, #20]	; (e32c <__sseek+0x28>)
    e318:	4013      	ands	r3, r2
    e31a:	81a3      	strh	r3, [r4, #12]
    e31c:	bd70      	pop	{r4, r5, r6, pc}
    e31e:	2280      	movs	r2, #128	; 0x80
    e320:	0152      	lsls	r2, r2, #5
    e322:	4313      	orrs	r3, r2
    e324:	81a3      	strh	r3, [r4, #12]
    e326:	6560      	str	r0, [r4, #84]	; 0x54
    e328:	e7f8      	b.n	e31c <__sseek+0x18>
    e32a:	46c0      	nop			; (mov r8, r8)
    e32c:	ffffefff 	.word	0xffffefff

0000e330 <__sclose>:
    e330:	b510      	push	{r4, lr}
    e332:	230e      	movs	r3, #14
    e334:	5ec9      	ldrsh	r1, [r1, r3]
    e336:	f000 f821 	bl	e37c <_close_r>
    e33a:	bd10      	pop	{r4, pc}

0000e33c <__ascii_wctomb>:
    e33c:	1e0b      	subs	r3, r1, #0
    e33e:	d004      	beq.n	e34a <__ascii_wctomb+0xe>
    e340:	2aff      	cmp	r2, #255	; 0xff
    e342:	d904      	bls.n	e34e <__ascii_wctomb+0x12>
    e344:	238a      	movs	r3, #138	; 0x8a
    e346:	6003      	str	r3, [r0, #0]
    e348:	3b8b      	subs	r3, #139	; 0x8b
    e34a:	0018      	movs	r0, r3
    e34c:	4770      	bx	lr
    e34e:	700a      	strb	r2, [r1, #0]
    e350:	2301      	movs	r3, #1
    e352:	e7fa      	b.n	e34a <__ascii_wctomb+0xe>

0000e354 <_write_r>:
    e354:	b570      	push	{r4, r5, r6, lr}
    e356:	0005      	movs	r5, r0
    e358:	0008      	movs	r0, r1
    e35a:	0011      	movs	r1, r2
    e35c:	2200      	movs	r2, #0
    e35e:	4c06      	ldr	r4, [pc, #24]	; (e378 <_write_r+0x24>)
    e360:	6022      	str	r2, [r4, #0]
    e362:	001a      	movs	r2, r3
    e364:	f7fb fdfe 	bl	9f64 <_write>
    e368:	1c43      	adds	r3, r0, #1
    e36a:	d103      	bne.n	e374 <_write_r+0x20>
    e36c:	6823      	ldr	r3, [r4, #0]
    e36e:	2b00      	cmp	r3, #0
    e370:	d000      	beq.n	e374 <_write_r+0x20>
    e372:	602b      	str	r3, [r5, #0]
    e374:	bd70      	pop	{r4, r5, r6, pc}
    e376:	46c0      	nop			; (mov r8, r8)
    e378:	200005e8 	.word	0x200005e8

0000e37c <_close_r>:
    e37c:	2300      	movs	r3, #0
    e37e:	b570      	push	{r4, r5, r6, lr}
    e380:	4c06      	ldr	r4, [pc, #24]	; (e39c <_close_r+0x20>)
    e382:	0005      	movs	r5, r0
    e384:	0008      	movs	r0, r1
    e386:	6023      	str	r3, [r4, #0]
    e388:	f7fb fe40 	bl	a00c <_close>
    e38c:	1c43      	adds	r3, r0, #1
    e38e:	d103      	bne.n	e398 <_close_r+0x1c>
    e390:	6823      	ldr	r3, [r4, #0]
    e392:	2b00      	cmp	r3, #0
    e394:	d000      	beq.n	e398 <_close_r+0x1c>
    e396:	602b      	str	r3, [r5, #0]
    e398:	bd70      	pop	{r4, r5, r6, pc}
    e39a:	46c0      	nop			; (mov r8, r8)
    e39c:	200005e8 	.word	0x200005e8

0000e3a0 <_fstat_r>:
    e3a0:	2300      	movs	r3, #0
    e3a2:	b570      	push	{r4, r5, r6, lr}
    e3a4:	4c06      	ldr	r4, [pc, #24]	; (e3c0 <_fstat_r+0x20>)
    e3a6:	0005      	movs	r5, r0
    e3a8:	0008      	movs	r0, r1
    e3aa:	0011      	movs	r1, r2
    e3ac:	6023      	str	r3, [r4, #0]
    e3ae:	f7fb fe37 	bl	a020 <_fstat>
    e3b2:	1c43      	adds	r3, r0, #1
    e3b4:	d103      	bne.n	e3be <_fstat_r+0x1e>
    e3b6:	6823      	ldr	r3, [r4, #0]
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	d000      	beq.n	e3be <_fstat_r+0x1e>
    e3bc:	602b      	str	r3, [r5, #0]
    e3be:	bd70      	pop	{r4, r5, r6, pc}
    e3c0:	200005e8 	.word	0x200005e8

0000e3c4 <_isatty_r>:
    e3c4:	2300      	movs	r3, #0
    e3c6:	b570      	push	{r4, r5, r6, lr}
    e3c8:	4c06      	ldr	r4, [pc, #24]	; (e3e4 <_isatty_r+0x20>)
    e3ca:	0005      	movs	r5, r0
    e3cc:	0008      	movs	r0, r1
    e3ce:	6023      	str	r3, [r4, #0]
    e3d0:	f7fb fe34 	bl	a03c <_isatty>
    e3d4:	1c43      	adds	r3, r0, #1
    e3d6:	d103      	bne.n	e3e0 <_isatty_r+0x1c>
    e3d8:	6823      	ldr	r3, [r4, #0]
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d000      	beq.n	e3e0 <_isatty_r+0x1c>
    e3de:	602b      	str	r3, [r5, #0]
    e3e0:	bd70      	pop	{r4, r5, r6, pc}
    e3e2:	46c0      	nop			; (mov r8, r8)
    e3e4:	200005e8 	.word	0x200005e8

0000e3e8 <_lseek_r>:
    e3e8:	b570      	push	{r4, r5, r6, lr}
    e3ea:	0005      	movs	r5, r0
    e3ec:	0008      	movs	r0, r1
    e3ee:	0011      	movs	r1, r2
    e3f0:	2200      	movs	r2, #0
    e3f2:	4c06      	ldr	r4, [pc, #24]	; (e40c <_lseek_r+0x24>)
    e3f4:	6022      	str	r2, [r4, #0]
    e3f6:	001a      	movs	r2, r3
    e3f8:	f7fb fe29 	bl	a04e <_lseek>
    e3fc:	1c43      	adds	r3, r0, #1
    e3fe:	d103      	bne.n	e408 <_lseek_r+0x20>
    e400:	6823      	ldr	r3, [r4, #0]
    e402:	2b00      	cmp	r3, #0
    e404:	d000      	beq.n	e408 <_lseek_r+0x20>
    e406:	602b      	str	r3, [r5, #0]
    e408:	bd70      	pop	{r4, r5, r6, pc}
    e40a:	46c0      	nop			; (mov r8, r8)
    e40c:	200005e8 	.word	0x200005e8

0000e410 <memchr>:
    e410:	b2c9      	uxtb	r1, r1
    e412:	1882      	adds	r2, r0, r2
    e414:	4290      	cmp	r0, r2
    e416:	d101      	bne.n	e41c <memchr+0xc>
    e418:	2000      	movs	r0, #0
    e41a:	4770      	bx	lr
    e41c:	7803      	ldrb	r3, [r0, #0]
    e41e:	428b      	cmp	r3, r1
    e420:	d0fb      	beq.n	e41a <memchr+0xa>
    e422:	3001      	adds	r0, #1
    e424:	e7f6      	b.n	e414 <memchr+0x4>

0000e426 <_realloc_r>:
    e426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e428:	0007      	movs	r7, r0
    e42a:	000d      	movs	r5, r1
    e42c:	0016      	movs	r6, r2
    e42e:	2900      	cmp	r1, #0
    e430:	d105      	bne.n	e43e <_realloc_r+0x18>
    e432:	0011      	movs	r1, r2
    e434:	f7fe fd18 	bl	ce68 <_malloc_r>
    e438:	0004      	movs	r4, r0
    e43a:	0020      	movs	r0, r4
    e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e43e:	2a00      	cmp	r2, #0
    e440:	d103      	bne.n	e44a <_realloc_r+0x24>
    e442:	f7fe fcc7 	bl	cdd4 <_free_r>
    e446:	0034      	movs	r4, r6
    e448:	e7f7      	b.n	e43a <_realloc_r+0x14>
    e44a:	f000 f827 	bl	e49c <_malloc_usable_size_r>
    e44e:	002c      	movs	r4, r5
    e450:	4286      	cmp	r6, r0
    e452:	d9f2      	bls.n	e43a <_realloc_r+0x14>
    e454:	0031      	movs	r1, r6
    e456:	0038      	movs	r0, r7
    e458:	f7fe fd06 	bl	ce68 <_malloc_r>
    e45c:	1e04      	subs	r4, r0, #0
    e45e:	d0ec      	beq.n	e43a <_realloc_r+0x14>
    e460:	0029      	movs	r1, r5
    e462:	0032      	movs	r2, r6
    e464:	f7fe fc92 	bl	cd8c <memcpy>
    e468:	0029      	movs	r1, r5
    e46a:	0038      	movs	r0, r7
    e46c:	f7fe fcb2 	bl	cdd4 <_free_r>
    e470:	e7e3      	b.n	e43a <_realloc_r+0x14>
	...

0000e474 <_read_r>:
    e474:	b570      	push	{r4, r5, r6, lr}
    e476:	0005      	movs	r5, r0
    e478:	0008      	movs	r0, r1
    e47a:	0011      	movs	r1, r2
    e47c:	2200      	movs	r2, #0
    e47e:	4c06      	ldr	r4, [pc, #24]	; (e498 <_read_r+0x24>)
    e480:	6022      	str	r2, [r4, #0]
    e482:	001a      	movs	r2, r3
    e484:	f7fb fd44 	bl	9f10 <_read>
    e488:	1c43      	adds	r3, r0, #1
    e48a:	d103      	bne.n	e494 <_read_r+0x20>
    e48c:	6823      	ldr	r3, [r4, #0]
    e48e:	2b00      	cmp	r3, #0
    e490:	d000      	beq.n	e494 <_read_r+0x20>
    e492:	602b      	str	r3, [r5, #0]
    e494:	bd70      	pop	{r4, r5, r6, pc}
    e496:	46c0      	nop			; (mov r8, r8)
    e498:	200005e8 	.word	0x200005e8

0000e49c <_malloc_usable_size_r>:
    e49c:	1f0b      	subs	r3, r1, #4
    e49e:	681b      	ldr	r3, [r3, #0]
    e4a0:	1f18      	subs	r0, r3, #4
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	da01      	bge.n	e4aa <_malloc_usable_size_r+0xe>
    e4a6:	580b      	ldr	r3, [r1, r0]
    e4a8:	18c0      	adds	r0, r0, r3
    e4aa:	4770      	bx	lr
    e4ac:	50504128 	.word	0x50504128
    e4b0:	52452829 	.word	0x52452829
    e4b4:	255b2952 	.word	0x255b2952
    e4b8:	255b5d73 	.word	0x255b5d73
    e4bc:	00005d64 	.word	0x00005d64
    e4c0:	61766e69 	.word	0x61766e69
    e4c4:	6564696c 	.word	0x6564696c
    e4c8:	636f6920 	.word	0x636f6920
    e4cc:	6320746c 	.word	0x6320746c
    e4d0:	0000646d 	.word	0x0000646d

0000e4d4 <__FUNCTION__.14402>:
    e4d4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    e4e4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
    e4f4:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
    e504:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    e514:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    e524:	74207075 63206568 00706968 66696828     up the chip.(hif
    e534:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
    e544:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
    e554:	66696828 64612029 73657264 75622073     (hif) address bu
    e564:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
    e574:	70757272 20646574 6b636170 53207465     rrupted packet S
    e584:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
    e594:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
    e5a4:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
    e5b4:	6361626c 7369206b 746f6e20 67657220     lback is not reg
    e5c4:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
    e5d4:	626c6c61 206b6361 6e207369 7220746f     allback is not r
    e5e4:	73696765 65726574 00000064 2061744f     egistered...Ota 
    e5f4:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
    e604:	69676572 72657473 00006465 70797243     registered..Cryp
    e614:	63206f74 626c6c61 206b6361 6e207369     to callback is n
    e624:	7220746f 73696765 65726574 00000064     ot registered...
    e634:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
    e644:	6f6e2073 65722074 74736967 64657265     s not registered
    e654:	00000000 66696828 6e692029 696c6176     ....(hif) invali
    e664:	72672064 2070756f 00004449 66696828     d group ID..(hif
    e674:	6f682029 61207473 64207070 276e6469     ) host app didn'
    e684:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
    e694:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
    e6a4:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    e6b4:	61462029 2065736c 65746e69 70757272     ) False interrup
    e6c4:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    e6d4:	74206c69 6552206f 69206461 7265746e     il to Read inter
    e6e4:	74707572 67657220 00000000 46494828     rupt reg....(HIF
    e6f4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    e704:	746e6920 75727265 25207470 72742064      interrupt %d tr
    e714:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    e724:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    e734:	72612064 656d7567 0000746e 20505041     d argument..APP 
    e744:	75716552 65747365 69532064 6920657a     Requested Size i
    e754:	616c2073 72656772 61687420 6874206e     s larger than th
    e764:	65722065 65766963 75622064 72656666     e recived buffer
    e774:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
    e784:	00000000 20505041 75716552 65747365     ....APP Requeste
    e794:	64412064 73657264 65622073 646e6f79     d Address beyond
    e7a4:	65687420 63657220 64657669 66756220      the recived buf
    e7b4:	20726566 72646461 20737365 20646e61     fer address and 
    e7c4:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    e7d4:	0000000a 00001a10 000019e0 000019d8     ................
    e7e4:	000019f0 000019e8 00001a08 000019f8     ................
    e7f4:	00001a00                                ....

0000e7f8 <__FUNCTION__.13073>:
    e7f8:	5f666968 646e6573 00000000              hif_send....

0000e804 <__FUNCTION__.13083>:
    e804:	5f666968 00727369                       hif_isr.

0000e80c <__FUNCTION__.13089>:
    e80c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000e81c <__FUNCTION__.13101>:
    e81c:	5f666968 65636572 00657669              hif_receive.

0000e828 <__FUNCTION__.13117>:
    e828:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    e838:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    e848:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    e858:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    e868:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    e878:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    e888:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    e898:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    e8a8:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    e8b8:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    e8c8:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    e8d8:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    e8e8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    e8f8:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    e908:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    e918:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    e928:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    e938:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    e948:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    e958:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
    e968:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
    e978:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
    e988:	6f206f4e 72702066 2065626f 75716572     No of probe requ
    e998:	73747365 72657020 61637320 6c73206e     ests per scan sl
    e9a8:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
    e9b8:	49535352 72687420 6f687365 2520646c     RSSI threshold %
    e9c8:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
    e9d8:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
    e9e8:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
    e9f8:	65726177 69754220 2520646c 69542073     ware Build %s Ti
    ea08:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
    ea18:	6e694d20 69726420 20726576 20726576      Min driver ver 
    ea28:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
    ea38:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
    ea48:	0000000a 303a3032 38353a38 00000000     ....20:08:58....
    ea58:	20727041 32203320 00383130 76697244     Apr  3 2018.Driv
    ea68:	62207265 746c6975 20746120 25097325     er built at %s.%
    ea78:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
    ea88:	7277616d 65562065 6f697372 0000006e     mawre Version...
    ea98:	2079654b 6e207369 7620746f 64696c61     Key is not valid
    eaa8:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
    eab8:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
    eac8:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
    ead8:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    eae8:	65646e69 64252078 0000000a 61766e49     index %d....Inva
    eaf8:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
    eb08:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
    eb18:	53502074 656b204b 656c2079 6874676e     t PSK key length
    eb28:	00000000 65646e75 656e6966 65732064     ....undefined se
    eb38:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
    eb48:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    eb58:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    eb68:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    eb78:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
    eb88:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
    eb98:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    eba8:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    ebb8:	66754220 20726566 65637865 64656465      Buffer exceeded
    ebc8:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    ebd8:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    ebe8:	00000000                                ....

0000ebec <__FUNCTION__.13052>:
    ebec:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000ebf8 <__FUNCTION__.13081>:
    ebf8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000ec08 <__FUNCTION__.13109>:
    ec08:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    ec18:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    ec28:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    ec38:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
    ec48:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
    ec58:	20656874 70696863 00000000 50504128     the chip....(APP
    ec68:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
    ec78:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
    ec88:	6c696166 74206465 6564206f 696e692d     failed to de-ini
    ec98:	6c616974 00657a69                       tialize.

0000eca0 <__FUNCTION__.12915>:
    eca0:	70696863 6b61775f 00000065              chip_wake...

0000ecac <__FUNCTION__.12964>:
    ecac:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
    ecbc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    eccc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    ecdc:	6e69206c 62207469 00007375 50504128     l init bus..(APP
    ecec:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
    ecfc:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
    ed0c:	6e65206f 656c6261 746e6920 75727265     o enable interru
    ed1c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
    ed2c:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
    ed3c:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
    ed4c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
    ed5c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
    ed6c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    ed7c:	75622074 00000073                       t bus...

0000ed84 <__FUNCTION__.12962>:
    ed84:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000ed90 <__FUNCTION__.12969>:
    ed90:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0000eda0 <crc7_syndrome_table>:
    eda0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    edb0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    edc0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    edd0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    ede0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    edf0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    ee00:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    ee10:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    ee20:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    ee30:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    ee40:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    ee50:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    ee60:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    ee70:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    ee80:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    ee90:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    eea0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    eeb0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    eec0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    eed0:	73756220 72726520 2e2e726f 0000002e      bus error......
    eee0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    eef0:	75622064 72652073 2e726f72 00002e2e     d bus error.....
    ef00:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ef10:	61642064 72206174 6f707365 2065736e     d data response 
    ef20:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
    ef30:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ef40:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    ef50:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    ef60:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ef70:	656c6961 61642064 72206174 6f707365     ailed data respo
    ef80:	2065736e 64616572 7562202c 72652073     nse read, bus er
    ef90:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    efa0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    efb0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    efc0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    efd0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    efe0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    eff0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    f000:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f010:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    f020:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    f030:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    f040:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    f050:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    f060:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f070:	656c6961 61642064 62206174 6b636f6c     ailed data block
    f080:	69727720 202c6574 20737562 6f727265      write, bus erro
    f090:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    f0a0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f0b0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    f0c0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    f0d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f0e0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    f0f0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    f100:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    f110:	65722064 6e6f7073 202c6573 74697277     d response, writ
    f120:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    f130:	00000000 65736552 6e612074 65722064     ....Reset and re
    f140:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
    f150:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f160:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    f170:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    f180:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    f190:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    f1a0:	69727720 62206574 6b636f6c 30252820      write block (%0
    f1b0:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    f1c0:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    f1d0:	61746164 69727720 2e2e6574 0000002e     data write......
    f1e0:	65736552 6e612074 65722064 20797274     Reset and retry 
    f1f0:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
    f200:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    f210:	72202c64 20646165 20676572 38302528     d, read reg (%08
    f220:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    f230:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    f240:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    f250:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    f260:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    f270:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    f280:	6e612074 65722064 20797274 25206425     t and retry %d %
    f290:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    f2a0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    f2b0:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    f2c0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f2d0:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    f2e0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    f2f0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    f300:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    f310:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    f320:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f330:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    f340:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    f350:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    f360:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    f370:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f380:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    f390:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    f3a0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f3b0:	6e692064 6e726574 77206c61 65746972     d internal write
    f3c0:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    f3d0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f3e0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    f3f0:	64692070 002e2e2e 000035cc 000035cc     p id.....5...5..
    f400:	0000365c 00003520 00003566 00003588     \6.. 5..f5...5..
    f410:	0000360e 0000360e 000036c8 000034f4     .6...6...6...4..
    f420:	00003722 00003722 00003722 00003722     "7.."7.."7.."7..
    f430:	000035aa                                .5..

0000f434 <__FUNCTION__.12268>:
    f434:	5f697073 00646d63                       spi_cmd.

0000f43c <__FUNCTION__.12275>:
    f43c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000f44c <__FUNCTION__.12284>:
    f44c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000f458 <__FUNCTION__.12300>:
    f458:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000f468 <__FUNCTION__.12315>:
    f468:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000f478 <__FUNCTION__.12327>:
    f478:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000f488 <__FUNCTION__.12338>:
    f488:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000f498 <__FUNCTION__.12350>:
    f498:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000f4a8 <__FUNCTION__.12363>:
    f4a8:	735f6d6e 725f6970 00646165              nm_spi_read.

0000f4b4 <__FUNCTION__.12384>:
    f4b4:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
    f4c4:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
    f4d4:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
    f4e4:	25207465 65732064 6f697373 4449206e     et %d session ID
    f4f4:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
    f504:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    f514:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    f524:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
    f534:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    f544:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    f554:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    f564:	204c5353 6b636f53 00007465              SSL Socket..

0000f570 <tcc_modules>:
    f570:	42002000 42002400 42002800              . .B.$.B.(.B

0000f57c <_tcc_gclk_ids>:
    f57c:	001b1a1a                                ....

0000f580 <_tcc_apbcmasks>:
    f580:	00000100 00000200 00000400              ............

0000f58c <_tcc_maxs>:
    f58c:	00ffffff 00ffffff 0000ffff              ............

0000f598 <_tcc_cc_nums>:
    f598:	00020204                                ....

0000f59c <_tcc_ow_nums>:
    f59c:	00020408                                ....

0000f5a0 <_tcc_intflag>:
    f5a0:	00000001 00000002 00000004 00000008     ................
    f5b0:	00001000 00002000 00004000 00008000     ..... ...@......
    f5c0:	00010000 00020000 00040000 00080000     ................
    f5d0:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    f5e0:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    f5f0:	00009086 000090fe 000090fe 000090a4     ................
    f600:	0000909e 000090aa 0000908c 000090b0     ................
    f610:	000090e4 000093c8 00009418 00009418     ................
    f620:	00009414 000093ba 000093da 000093aa     ................
    f630:	000093ec 000093fe 00009466 00009494     ........f.......
    f640:	00009494 00009490 00009460 0000946c     ........`...l...
    f650:	0000945a 00009472 00009478 656d7461     Z...r...x...atme
    f660:	2e312f6c 00322e30 70747468 002f2f3a     l/1.0.2.http://.
    f670:	70747468 2f2f3a73 00000000 20544547     https://....GET 
    f680:	00000000 54534f50 00000020 454c4544     ....POST ...DELE
    f690:	00204554 20545550 00000000 4954504f     TE .PUT ....OPTI
    f6a0:	20534e4f 00000000 44414548 00000020     ONS ....HEAD ...
    f6b0:	54544820 2e312f50 000a0d31 72657355      HTTP/1.1...User
    f6c0:	6567412d 203a746e 00000000 00000a0d     -Agent: ........
    f6d0:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
    f6e0:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
    f6f0:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
    f700:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
    f710:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
    f720:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
    f730:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
    f740:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
    f750:	203a6874 00000000 33323130 37363534     th: ....01234567
    f760:	62613938 66656463 6e617254 72656673     89abcdefTransfer
    f770:	636e452d 6e69646f 00203a67 6e6e6f43     -Encoding: .Conn
    f780:	69746365 203a6e6f 00000000 50545448     ection: ....HTTP
    f790:	0000002f 00000d31 0000a21a 0000a214     /...1...........
    f7a0:	0000a20e 0000a208 0000a220 0000a202     ........ .......
    f7b0:	0000a220 0000a1fc 0000a1f6 0000a220      ........... ...
    f7c0:	0000a1f0 0000a1f0 0000a1ea 0000a1e4     ................
    f7d0:	0000a1de 42002000 42002400 42002800     ..... .B.$.B.(.B
    f7e0:	69676542 676e696e 73657420 666f2074     Begining test of
    f7f0:	616c4620 52206873 2e2e2e57 0000000d      Flash RW.......
    f800:	73616c46 68632068 6d207069 69737369     Flash chip missi
    f810:	0d21676e 00000000 33435243 65522032     ng!.....CRC32 Re
    f820:	746c7573 20666f20 64616572 7825203a     sult of read: %x
    f830:	00000a0d 33435243 65522032 746c7573     ....CRC32 Result
    f840:	20666f20 74697277 25203a65 000a0d78      of write: %x...
    f850:	72617453 676e6974 73657420 666f2074     Starting test of
    f860:	4d564e20 2e575220 000d2e2e 54205752      NVM RW.....RW T
    f870:	73747365 6e6f6420 2e2e2e65 65727020     ests done... pre
    f880:	74207373 64206568 67756265 74756220     ss the debug but
    f890:	206e6f74 20726f66 20656874 2e44454c     ton for the LED.
    f8a0:	0000000d 72617473 6f645f74 6f6c6e77     ....start_downlo
    f8b0:	203a6461 462d6957 73692069 746f6e20     ad: Wi-Fi is not
    f8c0:	6e6f6320 7463656e 0d2e6465 00000000      connected......
    f8d0:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
    f8e0:	75716572 20747365 73207369 20746e65     request is sent 
    f8f0:	65726c61 2e796461 0000000d 72617473     already.....star
    f900:	6f645f74 6f6c6e77 203a6461 6e6e7572     t_download: runn
    f910:	20676e69 6e776f64 64616f6c 726c6120     ing download alr
    f920:	79646165 00000d2e 72617473 6f645f74     eady....start_do
    f930:	6f6c6e77 203a6461 646e6573 20676e69     wnload: sending 
    f940:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
    f950:	00000000 70747468 2f2f3a73 2e777777     ....https://www.
    f960:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
    f970:	6f646e72 2f696873 6e6f7244 44414465     rndoshi/DroneDAD
    f980:	6174654d 74656d2e 00000061 61746144     Meta.meta...Data
    f990:	00000021 70747468 696c635f 5f746e65     !...http_client_
    f9a0:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
    f9b0:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
    f9c0:	7463656e 0d2e6465 00000000 70747468     nected......http
    f9d0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
    f9e0:	6572203a 73657571 6f632074 656c706d     : request comple
    f9f0:	2e646574 0000000d 70747468 696c635f     ted.....http_cli
    fa00:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
    fa10:	76696563 72206465 6f707365 2065736e     ceived response 
    fa20:	64207525 20617461 657a6973 0d752520     %u data size %u.
    fa30:	0000000a 70747468 696c635f 5f746e65     ....http_client_
    fa40:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
    fa50:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
    fa60:	000a0d64 6f736572 5f65766c 203a6263     d...resolve_cb: 
    fa70:	49207325 64612050 73657264 73692073     %s IP address is
    fa80:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
    fa90:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
    faa0:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
    fab0:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
    fac0:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
    fad0:	000d4445 6e6e6570 30343731 69666977     ED..penn1740wifi
    fae0:	00000000 50726941 4e6e6e65 442d7465     ....AirPennNet-D
    faf0:	63697665 00000065 69666977 3a62635f     evice...wifi_cb:
    fb00:	20504920 72646461 20737365 25207369      IP address is %
    fb10:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
    fb20:	666e6f63 72756769 74685f65 635f7074     configure_http_c
    fb30:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
    fb40:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
    fb50:	6166206e 64656c69 72282021 25207365     n failed! (res %
    fb60:	0a0d2964 00000000 48202d2d 20505454     d)......-- HTTP 
    fb70:	656c6966 776f6420 616f6c6e 20726564     file downloader 
    fb80:	6d617865 20656c70 0a0d2d2d 55202d2d     example --..-- U
    fb90:	5f524553 52414f42 2d2d2044 2d2d0a0d     SER_BOARD --..--
    fba0:	6d6f4320 656c6970 41203a64 20207270      Compiled: Apr  
    fbb0:	30322033 32203831 33333a30 2036333a     3 2018 20:33:36 
    fbc0:	000d2d2d 68540a0d 65207369 706d6178     --....This examp
    fbd0:	7220656c 69757165 20736572 20656874     le requires the 
    fbe0:	74205041 6168206f 69206576 7265746e     AP to have inter
    fbf0:	2074656e 65636361 0d2e7373 00000d0a     net access......
    fc00:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
    fc10:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
    fc20:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
    fc30:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
    fc40:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
    fc50:	6e69616d 6c70203a 65736165 706e7520     main: please unp
    fc60:	2067756c 20656874 4d2f4453 6320434d     lug the SD/MMC c
    fc70:	2e647261 0000000d 6e69616d 6f64203a     ard.....main: do
    fc80:	0d2e656e 00000000 0000c528 0000c532     ne......(...2...
    fc90:	0000c542 0000c586 0000c5a6              B...........

0000fc9c <_global_impure_ptr>:
    fc9c:	20000018                                ... 

0000fca0 <__sf_fake_stderr>:
	...

0000fcc0 <__sf_fake_stdin>:
	...

0000fce0 <__sf_fake_stdout>:
	...
    fd00:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    fd10:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    fd20:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    fd30:	37363534 62613938 66656463 20200000              456789abcdef.

0000fd3d <_ctype_>:
    fd3d:	20202000 20202020 28282020 20282828     .         ((((( 
    fd4d:	20202020 20202020 20202020 20202020                     
    fd5d:	10108820 10101010 10101010 10101010      ...............
    fd6d:	04040410 04040404 10040404 10101010     ................
    fd7d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    fd8d:	01010101 01010101 01010101 10101010     ................
    fd9d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    fdad:	02020202 02020202 02020202 10101010     ................
    fdbd:	00000020 00000000 00000000 00000000      ...............
	...

0000fe40 <_init>:
    fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe42:	46c0      	nop			; (mov r8, r8)
    fe44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fe46:	bc08      	pop	{r3}
    fe48:	469e      	mov	lr, r3
    fe4a:	4770      	bx	lr

0000fe4c <__init_array_start>:
    fe4c:	000000dd 	.word	0x000000dd

0000fe50 <_fini>:
    fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe52:	46c0      	nop			; (mov r8, r8)
    fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fe56:	bc08      	pop	{r3}
    fe58:	469e      	mov	lr, r3
    fe5a:	4770      	bx	lr

0000fe5c <__fini_array_start>:
    fe5c:	000000b5 	.word	0x000000b5
