
WINC1500_HTTP_DOWNLOADER_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d748  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002fc  20000000  0000d748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000480  200002fc  0000da44  000202fc  2**2
                  ALLOC
  3 .stack        00002004  2000077c  0000dec4  000202fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007342e  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a484  00000000  00000000  000937ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001d03b  00000000  00000000  0009dc2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000013b0  00000000  00000000  000bac6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001c70  00000000  00000000  000bc01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000279a2  00000000  00000000  000bdc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024788  00000000  00000000  000e562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009de17  00000000  00000000  00109db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000043e0  00000000  00000000  001a7bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 27 00 20 79 67 00 00 75 67 00 00 75 67 00 00     .'. yg..ug..ug..
	...
      2c:	75 67 00 00 00 00 00 00 00 00 00 00 75 67 00 00     ug..........ug..
      3c:	75 67 00 00 75 67 00 00 75 67 00 00 75 67 00 00     ug..ug..ug..ug..
      4c:	89 48 00 00 09 45 00 00 75 67 00 00 75 67 00 00     .H...E..ug..ug..
      5c:	75 67 00 00 75 67 00 00 b1 4c 00 00 c1 4c 00 00     ug..ug...L...L..
      6c:	d1 4c 00 00 e1 4c 00 00 f1 4c 00 00 01 4d 00 00     .L...L...L...M..
      7c:	45 67 00 00 55 67 00 00 65 67 00 00 75 67 00 00     Eg..Ug..eg..ug..
      8c:	75 67 00 00 75 67 00 00 00 00 00 00 00 00 00 00     ug..ug..........
      9c:	75 67 00 00 75 67 00 00 75 67 00 00 75 67 00 00     ug..ug..ug..ug..
      ac:	75 67 00 00 00 00 00 00                             ug......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002fc 	.word	0x200002fc
      d4:	00000000 	.word	0x00000000
      d8:	0000d748 	.word	0x0000d748

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000300 	.word	0x20000300
     108:	0000d748 	.word	0x0000d748
     10c:	0000d748 	.word	0x0000d748
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000318 	.word	0x20000318
     138:	20000321 	.word	0x20000321
     13c:	00000d61 	.word	0x00000d61

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b38      	ldr	r3, [pc, #224]	; (230 <sd_mmc_select_slot+0xf0>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a35      	ldr	r2, [pc, #212]	; (234 <sd_mmc_select_slot+0xf4>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b2f      	ldr	r3, [pc, #188]	; (230 <sd_mmc_select_slot+0xf0>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b2d      	ldr	r3, [pc, #180]	; (230 <sd_mmc_select_slot+0xf0>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b2d      	ldr	r3, [pc, #180]	; (238 <sd_mmc_select_slot+0xf8>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b2b      	ldr	r3, [pc, #172]	; (23c <sd_mmc_select_slot+0xfc>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b27      	ldr	r3, [pc, #156]	; (230 <sd_mmc_select_slot+0xf0>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d024      	beq.n	1e8 <sd_mmc_select_slot+0xa8>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e036      	b.n	214 <sd_mmc_select_slot+0xd4>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b24      	ldr	r3, [pc, #144]	; (23c <sd_mmc_select_slot+0xfc>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d008      	beq.n	1c4 <sd_mmc_select_slot+0x84>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b20      	ldr	r3, [pc, #128]	; (238 <sd_mmc_select_slot+0xf8>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	20fa      	movs	r0, #250	; 0xfa
     1ba:	0080      	lsls	r0, r0, #2
     1bc:	4b20      	ldr	r3, [pc, #128]	; (240 <sd_mmc_select_slot+0x100>)
     1be:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1c0:	2302      	movs	r3, #2
     1c2:	e7c1      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1c4:	2401      	movs	r4, #1
     1c6:	4b1c      	ldr	r3, [pc, #112]	; (238 <sd_mmc_select_slot+0xf8>)
     1c8:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1ca:	2000      	movs	r0, #0
     1cc:	4b1d      	ldr	r3, [pc, #116]	; (244 <sd_mmc_select_slot+0x104>)
     1ce:	4798      	blx	r3
     1d0:	21fa      	movs	r1, #250	; 0xfa
     1d2:	0149      	lsls	r1, r1, #5
     1d4:	4b1c      	ldr	r3, [pc, #112]	; (248 <sd_mmc_select_slot+0x108>)
     1d6:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1d8:	23fa      	movs	r3, #250	; 0xfa
     1da:	009b      	lsls	r3, r3, #2
     1dc:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1de:	4b17      	ldr	r3, [pc, #92]	; (23c <sd_mmc_select_slot+0xfc>)
     1e0:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     1e2:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     1e4:	2302      	movs	r3, #2
     1e6:	e7af      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     1e8:	4b13      	ldr	r3, [pc, #76]	; (238 <sd_mmc_select_slot+0xf8>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d007      	beq.n	200 <sd_mmc_select_slot+0xc0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f0:	4b12      	ldr	r3, [pc, #72]	; (23c <sd_mmc_select_slot+0xfc>)
     1f2:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     1f4:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     1f6:	03d2      	lsls	r2, r2, #15
     1f8:	d5a6      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     1fa:	2200      	movs	r2, #0
     1fc:	4b0f      	ldr	r3, [pc, #60]	; (23c <sd_mmc_select_slot+0xfc>)
     1fe:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     200:	4b0b      	ldr	r3, [pc, #44]	; (230 <sd_mmc_select_slot+0xf0>)
     202:	2202      	movs	r2, #2
     204:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     206:	4a11      	ldr	r2, [pc, #68]	; (24c <sd_mmc_select_slot+0x10c>)
     208:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     20a:	2201      	movs	r2, #1
     20c:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     20e:	2100      	movs	r1, #0
     210:	3221      	adds	r2, #33	; 0x21
     212:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     214:	2200      	movs	r2, #0
     216:	4b0e      	ldr	r3, [pc, #56]	; (250 <sd_mmc_select_slot+0x110>)
     218:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     21a:	4c05      	ldr	r4, [pc, #20]	; (230 <sd_mmc_select_slot+0xf0>)
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <sd_mmc_select_slot+0x114>)
     21e:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <sd_mmc_select_slot+0x118>)
     222:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     224:	7ba3      	ldrb	r3, [r4, #14]
     226:	3b02      	subs	r3, #2
     228:	425a      	negs	r2, r3
     22a:	4153      	adcs	r3, r2
     22c:	b2db      	uxtb	r3, r3
     22e:	e78b      	b.n	148 <sd_mmc_select_slot+0x8>
     230:	20000000 	.word	0x20000000
     234:	41004400 	.word	0x41004400
     238:	20000320 	.word	0x20000320
     23c:	e000e010 	.word	0xe000e010
     240:	000011b5 	.word	0x000011b5
     244:	00005ea5 	.word	0x00005ea5
     248:	00009de9 	.word	0x00009de9
     24c:	00061a80 	.word	0x00061a80
     250:	20000321 	.word	0x20000321
     254:	20000318 	.word	0x20000318
     258:	00000115 	.word	0x00000115

0000025c <sd_mmc_cmd13>:
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     25e:	4d09      	ldr	r5, [pc, #36]	; (284 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     260:	4f09      	ldr	r7, [pc, #36]	; (288 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     262:	4e0a      	ldr	r6, [pc, #40]	; (28c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     264:	2100      	movs	r1, #0
     266:	480a      	ldr	r0, [pc, #40]	; (290 <sd_mmc_cmd13+0x34>)
     268:	47b8      	blx	r7
     26a:	1e04      	subs	r4, r0, #0
     26c:	d007      	beq.n	27e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     26e:	47b0      	blx	r6
     270:	23ff      	movs	r3, #255	; 0xff
     272:	4203      	tst	r3, r0
     274:	d003      	beq.n	27e <sd_mmc_cmd13+0x22>
     276:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     278:	2d00      	cmp	r5, #0
     27a:	d1f3      	bne.n	264 <sd_mmc_cmd13+0x8>
			return false;
     27c:	2400      	movs	r4, #0
}
     27e:	0020      	movs	r0, r4
     280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	00030d41 	.word	0x00030d41
     288:	00000fa5 	.word	0x00000fa5
     28c:	00000fbd 	.word	0x00000fbd
     290:	00001b0d 	.word	0x00001b0d

00000294 <sd_mmc_cmd9_spi>:
{
     294:	b510      	push	{r4, lr}
     296:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     298:	4b0c      	ldr	r3, [pc, #48]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	8999      	ldrh	r1, [r3, #12]
     29e:	0409      	lsls	r1, r1, #16
     2a0:	2301      	movs	r3, #1
     2a2:	9300      	str	r3, [sp, #0]
     2a4:	2210      	movs	r2, #16
     2a6:	480a      	ldr	r0, [pc, #40]	; (2d0 <sd_mmc_cmd9_spi+0x3c>)
     2a8:	4c0a      	ldr	r4, [pc, #40]	; (2d4 <sd_mmc_cmd9_spi+0x40>)
     2aa:	47a0      	blx	r4
     2ac:	2800      	cmp	r0, #0
     2ae:	d101      	bne.n	2b4 <sd_mmc_cmd9_spi+0x20>
}
     2b0:	b002      	add	sp, #8
     2b2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2b4:	4b05      	ldr	r3, [pc, #20]	; (2cc <sd_mmc_cmd9_spi+0x38>)
     2b6:	6818      	ldr	r0, [r3, #0]
     2b8:	3012      	adds	r0, #18
     2ba:	2101      	movs	r1, #1
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <sd_mmc_cmd9_spi+0x44>)
     2be:	4798      	blx	r3
     2c0:	2800      	cmp	r0, #0
     2c2:	d0f5      	beq.n	2b0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2c4:	4b05      	ldr	r3, [pc, #20]	; (2dc <sd_mmc_cmd9_spi+0x48>)
     2c6:	4798      	blx	r3
     2c8:	e7f2      	b.n	2b0 <sd_mmc_cmd9_spi+0x1c>
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	20000318 	.word	0x20000318
     2d0:	00081109 	.word	0x00081109
     2d4:	00000e15 	.word	0x00000e15
     2d8:	00001041 	.word	0x00001041
     2dc:	000010cd 	.word	0x000010cd

000002e0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     2e0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     2e2:	4b04      	ldr	r3, [pc, #16]	; (2f4 <sd_mmc_deselect_slot+0x14>)
     2e4:	781b      	ldrb	r3, [r3, #0]
     2e6:	2b00      	cmp	r3, #0
     2e8:	d000      	beq.n	2ec <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     2ea:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     2ec:	2000      	movs	r0, #0
     2ee:	4b02      	ldr	r3, [pc, #8]	; (2f8 <sd_mmc_deselect_slot+0x18>)
     2f0:	4798      	blx	r3
}
     2f2:	e7fa      	b.n	2ea <sd_mmc_deselect_slot+0xa>
     2f4:	20000321 	.word	0x20000321
     2f8:	00000db5 	.word	0x00000db5

000002fc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2fe:	46c6      	mov	lr, r8
     300:	b500      	push	{lr}
     302:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     304:	4bcb      	ldr	r3, [pc, #812]	; (634 <sd_mmc_check+0x338>)
     306:	4798      	blx	r3
     308:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     30a:	2801      	cmp	r0, #1
     30c:	d006      	beq.n	31c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     30e:	4bca      	ldr	r3, [pc, #808]	; (638 <sd_mmc_check+0x33c>)
     310:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     312:	0020      	movs	r0, r4
     314:	b008      	add	sp, #32
     316:	bc04      	pop	{r2}
     318:	4690      	mov	r8, r2
     31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     31c:	4bc7      	ldr	r3, [pc, #796]	; (63c <sd_mmc_check+0x340>)
     31e:	681b      	ldr	r3, [r3, #0]
     320:	2201      	movs	r2, #1
     322:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     324:	2200      	movs	r2, #0
     326:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     328:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     32a:	4bc5      	ldr	r3, [pc, #788]	; (640 <sd_mmc_check+0x344>)
     32c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     32e:	2100      	movs	r1, #0
     330:	2088      	movs	r0, #136	; 0x88
     332:	0140      	lsls	r0, r0, #5
     334:	4bc3      	ldr	r3, [pc, #780]	; (644 <sd_mmc_check+0x348>)
     336:	4798      	blx	r3
     338:	2800      	cmp	r0, #0
     33a:	d107      	bne.n	34c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     33c:	4bbf      	ldr	r3, [pc, #764]	; (63c <sd_mmc_check+0x340>)
     33e:	681b      	ldr	r3, [r3, #0]
     340:	2203      	movs	r2, #3
     342:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     344:	4bbc      	ldr	r3, [pc, #752]	; (638 <sd_mmc_check+0x33c>)
     346:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     348:	2403      	movs	r4, #3
     34a:	e7e2      	b.n	312 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     34c:	21d5      	movs	r1, #213	; 0xd5
     34e:	0049      	lsls	r1, r1, #1
     350:	48bd      	ldr	r0, [pc, #756]	; (648 <sd_mmc_check+0x34c>)
     352:	4bbc      	ldr	r3, [pc, #752]	; (644 <sd_mmc_check+0x348>)
     354:	4798      	blx	r3
	*v2 = 0;
     356:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     358:	2800      	cmp	r0, #0
     35a:	d125      	bne.n	3a8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     35c:	4bb7      	ldr	r3, [pc, #732]	; (63c <sd_mmc_check+0x340>)
     35e:	681b      	ldr	r3, [r3, #0]
     360:	7bdb      	ldrb	r3, [r3, #15]
     362:	07db      	lsls	r3, r3, #31
     364:	d500      	bpl.n	368 <sd_mmc_check+0x6c>
     366:	e1eb      	b.n	740 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     368:	4bb4      	ldr	r3, [pc, #720]	; (63c <sd_mmc_check+0x340>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	7bda      	ldrb	r2, [r3, #15]
     36e:	2309      	movs	r3, #9
     370:	4013      	ands	r3, r2
     372:	2b01      	cmp	r3, #1
     374:	d10f      	bne.n	396 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     376:	2180      	movs	r1, #128	; 0x80
     378:	0089      	lsls	r1, r1, #2
     37a:	48b4      	ldr	r0, [pc, #720]	; (64c <sd_mmc_check+0x350>)
     37c:	4bb1      	ldr	r3, [pc, #708]	; (644 <sd_mmc_check+0x348>)
     37e:	4798      	blx	r3
     380:	2800      	cmp	r0, #0
     382:	d0db      	beq.n	33c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     384:	4bad      	ldr	r3, [pc, #692]	; (63c <sd_mmc_check+0x340>)
     386:	681b      	ldr	r3, [r3, #0]
     388:	7bdb      	ldrb	r3, [r3, #15]
     38a:	07db      	lsls	r3, r3, #31
     38c:	d503      	bpl.n	396 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     38e:	4bb0      	ldr	r3, [pc, #704]	; (650 <sd_mmc_check+0x354>)
     390:	4798      	blx	r3
     392:	2800      	cmp	r0, #0
     394:	d0d2      	beq.n	33c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     396:	4baf      	ldr	r3, [pc, #700]	; (654 <sd_mmc_check+0x358>)
     398:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     39a:	4ba8      	ldr	r3, [pc, #672]	; (63c <sd_mmc_check+0x340>)
     39c:	681b      	ldr	r3, [r3, #0]
     39e:	2200      	movs	r2, #0
     3a0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3a2:	4ba5      	ldr	r3, [pc, #660]	; (638 <sd_mmc_check+0x33c>)
     3a4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3a6:	e7b4      	b.n	312 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3a8:	4bab      	ldr	r3, [pc, #684]	; (658 <sd_mmc_check+0x35c>)
     3aa:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3ac:	1c43      	adds	r3, r0, #1
     3ae:	d100      	bne.n	3b2 <sd_mmc_check+0xb6>
     3b0:	e1c4      	b.n	73c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3b2:	0500      	lsls	r0, r0, #20
     3b4:	0d00      	lsrs	r0, r0, #20
     3b6:	23d5      	movs	r3, #213	; 0xd5
     3b8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     3ba:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     3bc:	4298      	cmp	r0, r3
     3be:	d1bd      	bne.n	33c <sd_mmc_check+0x40>
     3c0:	e7cc      	b.n	35c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3c2:	2100      	movs	r1, #0
     3c4:	48a5      	ldr	r0, [pc, #660]	; (65c <sd_mmc_check+0x360>)
     3c6:	4b9f      	ldr	r3, [pc, #636]	; (644 <sd_mmc_check+0x348>)
     3c8:	4798      	blx	r3
     3ca:	2800      	cmp	r0, #0
     3cc:	d119      	bne.n	402 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     3ce:	4b9b      	ldr	r3, [pc, #620]	; (63c <sd_mmc_check+0x340>)
     3d0:	681b      	ldr	r3, [r3, #0]
     3d2:	2202      	movs	r2, #2
     3d4:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     3d6:	2100      	movs	r1, #0
     3d8:	2088      	movs	r0, #136	; 0x88
     3da:	0140      	lsls	r0, r0, #5
     3dc:	4b99      	ldr	r3, [pc, #612]	; (644 <sd_mmc_check+0x348>)
     3de:	4798      	blx	r3
     3e0:	2800      	cmp	r0, #0
     3e2:	d0ab      	beq.n	33c <sd_mmc_check+0x40>
     3e4:	4d9e      	ldr	r5, [pc, #632]	; (660 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     3e6:	4f97      	ldr	r7, [pc, #604]	; (644 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     3e8:	4e9b      	ldr	r6, [pc, #620]	; (658 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     3ea:	2100      	movs	r1, #0
     3ec:	489d      	ldr	r0, [pc, #628]	; (664 <sd_mmc_check+0x368>)
     3ee:	47b8      	blx	r7
     3f0:	2800      	cmp	r0, #0
     3f2:	d0a3      	beq.n	33c <sd_mmc_check+0x40>
		resp = driver_get_response();
     3f4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     3f6:	07c3      	lsls	r3, r0, #31
     3f8:	d57d      	bpl.n	4f6 <sd_mmc_check+0x1fa>
     3fa:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     3fc:	2d00      	cmp	r5, #0
     3fe:	d1f4      	bne.n	3ea <sd_mmc_check+0xee>
     400:	e79c      	b.n	33c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     402:	4b95      	ldr	r3, [pc, #596]	; (658 <sd_mmc_check+0x35c>)
     404:	4798      	blx	r3
     406:	0043      	lsls	r3, r0, #1
     408:	d505      	bpl.n	416 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     40a:	4b8c      	ldr	r3, [pc, #560]	; (63c <sd_mmc_check+0x340>)
     40c:	681a      	ldr	r2, [r3, #0]
     40e:	7bd3      	ldrb	r3, [r2, #15]
     410:	2108      	movs	r1, #8
     412:	430b      	orrs	r3, r1
     414:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     416:	2100      	movs	r1, #0
     418:	4893      	ldr	r0, [pc, #588]	; (668 <sd_mmc_check+0x36c>)
     41a:	4b8a      	ldr	r3, [pc, #552]	; (644 <sd_mmc_check+0x348>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d08c      	beq.n	33c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     422:	4b86      	ldr	r3, [pc, #536]	; (63c <sd_mmc_check+0x340>)
     424:	681b      	ldr	r3, [r3, #0]
     426:	7bdb      	ldrb	r3, [r3, #15]
     428:	07da      	lsls	r2, r3, #31
     42a:	d400      	bmi.n	42e <sd_mmc_check+0x132>
     42c:	e1a4      	b.n	778 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     42e:	4b8f      	ldr	r3, [pc, #572]	; (66c <sd_mmc_check+0x370>)
     430:	4798      	blx	r3
     432:	2800      	cmp	r0, #0
     434:	d082      	beq.n	33c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     436:	4b81      	ldr	r3, [pc, #516]	; (63c <sd_mmc_check+0x340>)
     438:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     43a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     43c:	2107      	movs	r1, #7
     43e:	4019      	ands	r1, r3
     440:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     442:	488b      	ldr	r0, [pc, #556]	; (670 <sd_mmc_check+0x374>)
     444:	5808      	ldr	r0, [r1, r0]
     446:	21fa      	movs	r1, #250	; 0xfa
     448:	0089      	lsls	r1, r1, #2
     44a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     44c:	065b      	lsls	r3, r3, #25
     44e:	0f1b      	lsrs	r3, r3, #28
     450:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     452:	4888      	ldr	r0, [pc, #544]	; (674 <sd_mmc_check+0x378>)
     454:	581b      	ldr	r3, [r3, r0]
     456:	434b      	muls	r3, r1
     458:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     45a:	7c93      	ldrb	r3, [r2, #18]
     45c:	099b      	lsrs	r3, r3, #6
     45e:	d000      	beq.n	462 <sd_mmc_check+0x166>
     460:	e13c      	b.n	6dc <sd_mmc_check+0x3e0>
     462:	7e91      	ldrb	r1, [r2, #26]
     464:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     466:	7e53      	ldrb	r3, [r2, #25]
     468:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     46a:	7e10      	ldrb	r0, [r2, #24]
     46c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     46e:	4303      	orrs	r3, r0
     470:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     472:	7f10      	ldrb	r0, [r2, #28]
     474:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     476:	7ed1      	ldrb	r1, [r2, #27]
     478:	0049      	lsls	r1, r1, #1
     47a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     47c:	051b      	lsls	r3, r3, #20
     47e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     480:	3301      	adds	r3, #1
     482:	2107      	movs	r1, #7
     484:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     486:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     488:	408b      	lsls	r3, r1
     48a:	7dd0      	ldrb	r0, [r2, #23]
     48c:	210f      	movs	r1, #15
     48e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     490:	408b      	lsls	r3, r1
				/ 1024;
     492:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     494:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     496:	8991      	ldrh	r1, [r2, #12]
     498:	0409      	lsls	r1, r1, #16
     49a:	4877      	ldr	r0, [pc, #476]	; (678 <sd_mmc_check+0x37c>)
     49c:	4b69      	ldr	r3, [pc, #420]	; (644 <sd_mmc_check+0x348>)
     49e:	4798      	blx	r3
     4a0:	2800      	cmp	r0, #0
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x1aa>
     4a4:	e74a      	b.n	33c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4a6:	2301      	movs	r3, #1
     4a8:	9300      	str	r3, [sp, #0]
     4aa:	2208      	movs	r2, #8
     4ac:	2100      	movs	r1, #0
     4ae:	4873      	ldr	r0, [pc, #460]	; (67c <sd_mmc_check+0x380>)
     4b0:	4d73      	ldr	r5, [pc, #460]	; (680 <sd_mmc_check+0x384>)
     4b2:	47a8      	blx	r5
     4b4:	2800      	cmp	r0, #0
     4b6:	d100      	bne.n	4ba <sd_mmc_check+0x1be>
     4b8:	e740      	b.n	33c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     4ba:	2101      	movs	r1, #1
     4bc:	a806      	add	r0, sp, #24
     4be:	4b71      	ldr	r3, [pc, #452]	; (684 <sd_mmc_check+0x388>)
     4c0:	4798      	blx	r3
     4c2:	2800      	cmp	r0, #0
     4c4:	d100      	bne.n	4c8 <sd_mmc_check+0x1cc>
     4c6:	e739      	b.n	33c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     4c8:	4b6f      	ldr	r3, [pc, #444]	; (688 <sd_mmc_check+0x38c>)
     4ca:	4798      	blx	r3
     4cc:	2800      	cmp	r0, #0
     4ce:	d100      	bne.n	4d2 <sd_mmc_check+0x1d6>
     4d0:	e734      	b.n	33c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4d2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	220f      	movs	r2, #15
     4d8:	4013      	ands	r3, r2
     4da:	2b01      	cmp	r3, #1
     4dc:	d100      	bne.n	4e0 <sd_mmc_check+0x1e4>
     4de:	e119      	b.n	714 <sd_mmc_check+0x418>
     4e0:	2b00      	cmp	r3, #0
     4e2:	d100      	bne.n	4e6 <sd_mmc_check+0x1ea>
     4e4:	e109      	b.n	6fa <sd_mmc_check+0x3fe>
     4e6:	2b02      	cmp	r3, #2
     4e8:	d100      	bne.n	4ec <sd_mmc_check+0x1f0>
     4ea:	e118      	b.n	71e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     4ec:	4b53      	ldr	r3, [pc, #332]	; (63c <sd_mmc_check+0x340>)
     4ee:	681b      	ldr	r3, [r3, #0]
     4f0:	2210      	movs	r2, #16
     4f2:	741a      	strb	r2, [r3, #16]
     4f4:	e105      	b.n	702 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     4f6:	2100      	movs	r1, #0
     4f8:	4858      	ldr	r0, [pc, #352]	; (65c <sd_mmc_check+0x360>)
     4fa:	4b52      	ldr	r3, [pc, #328]	; (644 <sd_mmc_check+0x348>)
     4fc:	4798      	blx	r3
     4fe:	2800      	cmp	r0, #0
     500:	d100      	bne.n	504 <sd_mmc_check+0x208>
     502:	e71b      	b.n	33c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     504:	4b54      	ldr	r3, [pc, #336]	; (658 <sd_mmc_check+0x35c>)
     506:	4798      	blx	r3
     508:	23c0      	movs	r3, #192	; 0xc0
     50a:	05db      	lsls	r3, r3, #23
     50c:	4018      	ands	r0, r3
     50e:	2380      	movs	r3, #128	; 0x80
     510:	05db      	lsls	r3, r3, #23
     512:	4298      	cmp	r0, r3
     514:	d105      	bne.n	522 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     516:	4b49      	ldr	r3, [pc, #292]	; (63c <sd_mmc_check+0x340>)
     518:	681a      	ldr	r2, [r3, #0]
     51a:	7bd1      	ldrb	r1, [r2, #15]
     51c:	2308      	movs	r3, #8
     51e:	430b      	orrs	r3, r1
     520:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     522:	2100      	movs	r1, #0
     524:	4850      	ldr	r0, [pc, #320]	; (668 <sd_mmc_check+0x36c>)
     526:	4b47      	ldr	r3, [pc, #284]	; (644 <sd_mmc_check+0x348>)
     528:	4798      	blx	r3
     52a:	2800      	cmp	r0, #0
     52c:	d100      	bne.n	530 <sd_mmc_check+0x234>
     52e:	e705      	b.n	33c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     530:	4b4e      	ldr	r3, [pc, #312]	; (66c <sd_mmc_check+0x370>)
     532:	4798      	blx	r3
     534:	2800      	cmp	r0, #0
     536:	d100      	bne.n	53a <sd_mmc_check+0x23e>
     538:	e700      	b.n	33c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     53a:	4b40      	ldr	r3, [pc, #256]	; (63c <sd_mmc_check+0x340>)
     53c:	681a      	ldr	r2, [r3, #0]
     53e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     540:	069b      	lsls	r3, r3, #26
     542:	0f1b      	lsrs	r3, r3, #28
     544:	2b02      	cmp	r3, #2
     546:	d100      	bne.n	54a <sd_mmc_check+0x24e>
     548:	e0a8      	b.n	69c <sd_mmc_check+0x3a0>
     54a:	d907      	bls.n	55c <sd_mmc_check+0x260>
     54c:	2b03      	cmp	r3, #3
     54e:	d100      	bne.n	552 <sd_mmc_check+0x256>
     550:	e0a7      	b.n	6a2 <sd_mmc_check+0x3a6>
     552:	2b04      	cmp	r3, #4
     554:	d104      	bne.n	560 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     556:	2340      	movs	r3, #64	; 0x40
     558:	7413      	strb	r3, [r2, #16]
     55a:	e003      	b.n	564 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     55c:	2b01      	cmp	r3, #1
     55e:	d066      	beq.n	62e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     560:	2312      	movs	r3, #18
     562:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     564:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     566:	0659      	lsls	r1, r3, #25
     568:	0f09      	lsrs	r1, r1, #28
     56a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     56c:	2007      	movs	r0, #7
     56e:	4003      	ands	r3, r0
     570:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     572:	483f      	ldr	r0, [pc, #252]	; (670 <sd_mmc_check+0x374>)
     574:	5818      	ldr	r0, [r3, r0]
     576:	23fa      	movs	r3, #250	; 0xfa
     578:	009b      	lsls	r3, r3, #2
     57a:	4343      	muls	r3, r0
     57c:	4843      	ldr	r0, [pc, #268]	; (68c <sd_mmc_check+0x390>)
     57e:	5809      	ldr	r1, [r1, r0]
     580:	434b      	muls	r3, r1
     582:	6013      	str	r3, [r2, #0]
     584:	7e91      	ldrb	r1, [r2, #26]
     586:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     588:	7e53      	ldrb	r3, [r2, #25]
     58a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     58c:	7e10      	ldrb	r0, [r2, #24]
     58e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     590:	4303      	orrs	r3, r0
     592:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     594:	051b      	lsls	r3, r3, #20
     596:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     598:	493d      	ldr	r1, [pc, #244]	; (690 <sd_mmc_check+0x394>)
     59a:	428b      	cmp	r3, r1
     59c:	d00f      	beq.n	5be <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     59e:	7f10      	ldrb	r0, [r2, #28]
     5a0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5a2:	7ed1      	ldrb	r1, [r2, #27]
     5a4:	0049      	lsls	r1, r1, #1
     5a6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5a8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5aa:	2007      	movs	r0, #7
     5ac:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     5ae:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5b0:	408b      	lsls	r3, r1
     5b2:	7dd1      	ldrb	r1, [r2, #23]
     5b4:	3008      	adds	r0, #8
     5b6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     5b8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     5ba:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     5bc:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     5be:	7c13      	ldrb	r3, [r2, #16]
     5c0:	2b3f      	cmp	r3, #63	; 0x3f
     5c2:	d97b      	bls.n	6bc <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     5c4:	2100      	movs	r1, #0
     5c6:	9100      	str	r1, [sp, #0]
     5c8:	2301      	movs	r3, #1
     5ca:	2280      	movs	r2, #128	; 0x80
     5cc:	0092      	lsls	r2, r2, #2
     5ce:	4831      	ldr	r0, [pc, #196]	; (694 <sd_mmc_check+0x398>)
     5d0:	4d2b      	ldr	r5, [pc, #172]	; (680 <sd_mmc_check+0x384>)
     5d2:	47a8      	blx	r5
     5d4:	2800      	cmp	r0, #0
     5d6:	d100      	bne.n	5da <sd_mmc_check+0x2de>
     5d8:	e6b0      	b.n	33c <sd_mmc_check+0x40>
     5da:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     5dc:	4e2e      	ldr	r6, [pc, #184]	; (698 <sd_mmc_check+0x39c>)
     5de:	a805      	add	r0, sp, #20
     5e0:	47b0      	blx	r6
     5e2:	2800      	cmp	r0, #0
     5e4:	d100      	bne.n	5e8 <sd_mmc_check+0x2ec>
     5e6:	e6a9      	b.n	33c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     5e8:	3501      	adds	r5, #1
     5ea:	b2ad      	uxth	r5, r5
     5ec:	2d32      	cmp	r5, #50	; 0x32
     5ee:	d1f6      	bne.n	5de <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     5f0:	4b12      	ldr	r3, [pc, #72]	; (63c <sd_mmc_check+0x340>)
     5f2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5f4:	7e8a      	ldrb	r2, [r1, #26]
     5f6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5f8:	7e4b      	ldrb	r3, [r1, #25]
     5fa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5fc:	7e09      	ldrb	r1, [r1, #24]
     5fe:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     600:	430b      	orrs	r3, r1
     602:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     604:	051b      	lsls	r3, r3, #20
     606:	0d1b      	lsrs	r3, r3, #20
     608:	4a21      	ldr	r2, [pc, #132]	; (690 <sd_mmc_check+0x394>)
     60a:	4293      	cmp	r3, r2
     60c:	d154      	bne.n	6b8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     60e:	4e22      	ldr	r6, [pc, #136]	; (698 <sd_mmc_check+0x39c>)
     610:	a806      	add	r0, sp, #24
     612:	47b0      	blx	r6
     614:	2800      	cmp	r0, #0
     616:	d100      	bne.n	61a <sd_mmc_check+0x31e>
     618:	e690      	b.n	33c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     61a:	3501      	adds	r5, #1
     61c:	b2ad      	uxth	r5, r5
     61e:	2d35      	cmp	r5, #53	; 0x35
     620:	d9f6      	bls.n	610 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     622:	4b06      	ldr	r3, [pc, #24]	; (63c <sd_mmc_check+0x340>)
     624:	681a      	ldr	r2, [r3, #0]
     626:	9b06      	ldr	r3, [sp, #24]
     628:	085b      	lsrs	r3, r3, #1
     62a:	6053      	str	r3, [r2, #4]
     62c:	e044      	b.n	6b8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     62e:	2314      	movs	r3, #20
     630:	7413      	strb	r3, [r2, #16]
     632:	e797      	b.n	564 <sd_mmc_check+0x268>
     634:	00000141 	.word	0x00000141
     638:	000002e1 	.word	0x000002e1
     63c:	20000318 	.word	0x20000318
     640:	00000ddd 	.word	0x00000ddd
     644:	00000fa5 	.word	0x00000fa5
     648:	00005508 	.word	0x00005508
     64c:	00001110 	.word	0x00001110
     650:	0000025d 	.word	0x0000025d
     654:	00000115 	.word	0x00000115
     658:	00000fbd 	.word	0x00000fbd
     65c:	0000053a 	.word	0x0000053a
     660:	00001bef 	.word	0x00001bef
     664:	00001101 	.word	0x00001101
     668:	0000113b 	.word	0x0000113b
     66c:	00000295 	.word	0x00000295
     670:	0000b96c 	.word	0x0000b96c
     674:	0000b988 	.word	0x0000b988
     678:	00001137 	.word	0x00001137
     67c:	00081133 	.word	0x00081133
     680:	00000e15 	.word	0x00000e15
     684:	00001041 	.word	0x00001041
     688:	000010cd 	.word	0x000010cd
     68c:	0000b92c 	.word	0x0000b92c
     690:	00000fff 	.word	0x00000fff
     694:	00081108 	.word	0x00081108
     698:	00000fc9 	.word	0x00000fc9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     69c:	2322      	movs	r3, #34	; 0x22
     69e:	7413      	strb	r3, [r2, #16]
     6a0:	e760      	b.n	564 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6a2:	2330      	movs	r3, #48	; 0x30
     6a4:	7413      	strb	r3, [r2, #16]
     6a6:	e75d      	b.n	564 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6a8:	a806      	add	r0, sp, #24
     6aa:	4b36      	ldr	r3, [pc, #216]	; (784 <sd_mmc_check+0x488>)
     6ac:	4798      	blx	r3
     6ae:	2800      	cmp	r0, #0
     6b0:	d100      	bne.n	6b4 <sd_mmc_check+0x3b8>
     6b2:	e643      	b.n	33c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     6b4:	3501      	adds	r5, #1
     6b6:	b2ad      	uxth	r5, r5
     6b8:	2d7f      	cmp	r5, #127	; 0x7f
     6ba:	d9f5      	bls.n	6a8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     6bc:	2180      	movs	r1, #128	; 0x80
     6be:	0089      	lsls	r1, r1, #2
     6c0:	4831      	ldr	r0, [pc, #196]	; (788 <sd_mmc_check+0x48c>)
     6c2:	4b32      	ldr	r3, [pc, #200]	; (78c <sd_mmc_check+0x490>)
     6c4:	4798      	blx	r3
     6c6:	2800      	cmp	r0, #0
     6c8:	d100      	bne.n	6cc <sd_mmc_check+0x3d0>
     6ca:	e637      	b.n	33c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     6cc:	4b30      	ldr	r3, [pc, #192]	; (790 <sd_mmc_check+0x494>)
     6ce:	4798      	blx	r3
     6d0:	2800      	cmp	r0, #0
     6d2:	d100      	bne.n	6d6 <sd_mmc_check+0x3da>
     6d4:	e632      	b.n	33c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     6d6:	4b2f      	ldr	r3, [pc, #188]	; (794 <sd_mmc_check+0x498>)
     6d8:	4798      	blx	r3
     6da:	e65e      	b.n	39a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     6dc:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     6de:	7e93      	ldrb	r3, [r2, #26]
     6e0:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6e2:	7e51      	ldrb	r1, [r2, #25]
     6e4:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     6e6:	430b      	orrs	r3, r1
     6e8:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     6ea:	029b      	lsls	r3, r3, #10
				* 512;
     6ec:	085b      	lsrs	r3, r3, #1
     6ee:	2180      	movs	r1, #128	; 0x80
     6f0:	0089      	lsls	r1, r1, #2
     6f2:	468c      	mov	ip, r1
     6f4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     6f6:	6053      	str	r3, [r2, #4]
     6f8:	e6cd      	b.n	496 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     6fa:	4b27      	ldr	r3, [pc, #156]	; (798 <sd_mmc_check+0x49c>)
     6fc:	681b      	ldr	r3, [r3, #0]
     6fe:	2210      	movs	r2, #16
     700:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     702:	4b25      	ldr	r3, [pc, #148]	; (798 <sd_mmc_check+0x49c>)
     704:	681b      	ldr	r3, [r3, #0]
     706:	7bdb      	ldrb	r3, [r3, #15]
     708:	2209      	movs	r2, #9
     70a:	4013      	ands	r3, r2
     70c:	2b01      	cmp	r3, #1
     70e:	d000      	beq.n	712 <sd_mmc_check+0x416>
     710:	e638      	b.n	384 <sd_mmc_check+0x88>
     712:	e630      	b.n	376 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     714:	4b20      	ldr	r3, [pc, #128]	; (798 <sd_mmc_check+0x49c>)
     716:	681b      	ldr	r3, [r3, #0]
     718:	221a      	movs	r2, #26
     71a:	741a      	strb	r2, [r3, #16]
     71c:	e7f1      	b.n	702 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     71e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     720:	789b      	ldrb	r3, [r3, #2]
     722:	09db      	lsrs	r3, r3, #7
     724:	2b01      	cmp	r3, #1
     726:	d104      	bne.n	732 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     728:	4b1b      	ldr	r3, [pc, #108]	; (798 <sd_mmc_check+0x49c>)
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	2230      	movs	r2, #48	; 0x30
     72e:	741a      	strb	r2, [r3, #16]
     730:	e7e7      	b.n	702 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     732:	4b19      	ldr	r3, [pc, #100]	; (798 <sd_mmc_check+0x49c>)
     734:	681b      	ldr	r3, [r3, #0]
     736:	2220      	movs	r2, #32
     738:	741a      	strb	r2, [r3, #16]
     73a:	e7e2      	b.n	702 <sd_mmc_check+0x406>
	*v2 = 0;
     73c:	2600      	movs	r6, #0
     73e:	e60d      	b.n	35c <sd_mmc_check+0x60>
     740:	1e73      	subs	r3, r6, #1
     742:	419e      	sbcs	r6, r3
     744:	07b3      	lsls	r3, r6, #30
     746:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     748:	4d14      	ldr	r5, [pc, #80]	; (79c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     74a:	4f10      	ldr	r7, [pc, #64]	; (78c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     74c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     74e:	4e14      	ldr	r6, [pc, #80]	; (7a0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     750:	2100      	movs	r1, #0
     752:	4814      	ldr	r0, [pc, #80]	; (7a4 <sd_mmc_check+0x4a8>)
     754:	47b8      	blx	r7
     756:	2800      	cmp	r0, #0
     758:	d100      	bne.n	75c <sd_mmc_check+0x460>
     75a:	e638      	b.n	3ce <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     75c:	9903      	ldr	r1, [sp, #12]
     75e:	4812      	ldr	r0, [pc, #72]	; (7a8 <sd_mmc_check+0x4ac>)
     760:	47c0      	blx	r8
     762:	2800      	cmp	r0, #0
     764:	d100      	bne.n	768 <sd_mmc_check+0x46c>
     766:	e632      	b.n	3ce <sd_mmc_check+0xd2>
		resp = driver_get_response();
     768:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     76a:	07c3      	lsls	r3, r0, #31
     76c:	d400      	bmi.n	770 <sd_mmc_check+0x474>
     76e:	e628      	b.n	3c2 <sd_mmc_check+0xc6>
     770:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     772:	2d00      	cmp	r5, #0
     774:	d1ec      	bne.n	750 <sd_mmc_check+0x454>
     776:	e62a      	b.n	3ce <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     778:	2209      	movs	r2, #9
     77a:	4013      	ands	r3, r2
     77c:	2b01      	cmp	r3, #1
     77e:	d000      	beq.n	782 <sd_mmc_check+0x486>
     780:	e609      	b.n	396 <sd_mmc_check+0x9a>
     782:	e5f8      	b.n	376 <sd_mmc_check+0x7a>
     784:	00000fc9 	.word	0x00000fc9
     788:	00001110 	.word	0x00001110
     78c:	00000fa5 	.word	0x00000fa5
     790:	0000025d 	.word	0x0000025d
     794:	00000115 	.word	0x00000115
     798:	20000318 	.word	0x20000318
     79c:	00001bef 	.word	0x00001bef
     7a0:	00000fbd 	.word	0x00000fbd
     7a4:	00001137 	.word	0x00001137
     7a8:	00001129 	.word	0x00001129

000007ac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     7ac:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7ae:	4b06      	ldr	r3, [pc, #24]	; (7c8 <sd_mmc_get_type+0x1c>)
     7b0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     7b2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7b4:	2800      	cmp	r0, #0
     7b6:	d001      	beq.n	7bc <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     7b8:	0018      	movs	r0, r3
     7ba:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     7bc:	4b03      	ldr	r3, [pc, #12]	; (7cc <sd_mmc_get_type+0x20>)
     7be:	4798      	blx	r3
	return sd_mmc_card->type;
     7c0:	4b03      	ldr	r3, [pc, #12]	; (7d0 <sd_mmc_get_type+0x24>)
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	7bdb      	ldrb	r3, [r3, #15]
     7c6:	e7f7      	b.n	7b8 <sd_mmc_get_type+0xc>
     7c8:	00000141 	.word	0x00000141
     7cc:	000002e1 	.word	0x000002e1
     7d0:	20000318 	.word	0x20000318

000007d4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     7d4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7d6:	4b06      	ldr	r3, [pc, #24]	; (7f0 <sd_mmc_get_capacity+0x1c>)
     7d8:	4798      	blx	r3
		return 0;
     7da:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7dc:	2800      	cmp	r0, #0
     7de:	d001      	beq.n	7e4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     7e0:	0018      	movs	r0, r3
     7e2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     7e4:	4b03      	ldr	r3, [pc, #12]	; (7f4 <sd_mmc_get_capacity+0x20>)
     7e6:	4798      	blx	r3
	return sd_mmc_card->capacity;
     7e8:	4b03      	ldr	r3, [pc, #12]	; (7f8 <sd_mmc_get_capacity+0x24>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	685b      	ldr	r3, [r3, #4]
     7ee:	e7f7      	b.n	7e0 <sd_mmc_get_capacity+0xc>
     7f0:	00000141 	.word	0x00000141
     7f4:	000002e1 	.word	0x000002e1
     7f8:	20000318 	.word	0x20000318

000007fc <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     7fc:	2000      	movs	r0, #0
     7fe:	4770      	bx	lr

00000800 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     800:	b570      	push	{r4, r5, r6, lr}
     802:	b082      	sub	sp, #8
     804:	000e      	movs	r6, r1
     806:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     808:	4b16      	ldr	r3, [pc, #88]	; (864 <sd_mmc_init_read_blocks+0x64>)
     80a:	4798      	blx	r3
     80c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     80e:	d002      	beq.n	816 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     810:	0020      	movs	r0, r4
     812:	b002      	add	sp, #8
     814:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     816:	4b14      	ldr	r3, [pc, #80]	; (868 <sd_mmc_init_read_blocks+0x68>)
     818:	4798      	blx	r3
     81a:	2800      	cmp	r0, #0
     81c:	d017      	beq.n	84e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     81e:	2d01      	cmp	r5, #1
     820:	d919      	bls.n	856 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     822:	4812      	ldr	r0, [pc, #72]	; (86c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     824:	4b12      	ldr	r3, [pc, #72]	; (870 <sd_mmc_init_read_blocks+0x70>)
     826:	681b      	ldr	r3, [r3, #0]
     828:	7bdb      	ldrb	r3, [r3, #15]
     82a:	071b      	lsls	r3, r3, #28
     82c:	d400      	bmi.n	830 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     82e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     830:	2301      	movs	r3, #1
     832:	9300      	str	r3, [sp, #0]
     834:	002b      	movs	r3, r5
     836:	2280      	movs	r2, #128	; 0x80
     838:	0092      	lsls	r2, r2, #2
     83a:	0031      	movs	r1, r6
     83c:	4e0d      	ldr	r6, [pc, #52]	; (874 <sd_mmc_init_read_blocks+0x74>)
     83e:	47b0      	blx	r6
     840:	2800      	cmp	r0, #0
     842:	d00a      	beq.n	85a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     844:	4b0c      	ldr	r3, [pc, #48]	; (878 <sd_mmc_init_read_blocks+0x78>)
     846:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     848:	4b0c      	ldr	r3, [pc, #48]	; (87c <sd_mmc_init_read_blocks+0x7c>)
     84a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     84c:	e7e0      	b.n	810 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     84e:	4b0c      	ldr	r3, [pc, #48]	; (880 <sd_mmc_init_read_blocks+0x80>)
     850:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     852:	3405      	adds	r4, #5
     854:	e7dc      	b.n	810 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     856:	480b      	ldr	r0, [pc, #44]	; (884 <sd_mmc_init_read_blocks+0x84>)
     858:	e7e4      	b.n	824 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     85a:	4b09      	ldr	r3, [pc, #36]	; (880 <sd_mmc_init_read_blocks+0x80>)
     85c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     85e:	2405      	movs	r4, #5
     860:	e7d6      	b.n	810 <sd_mmc_init_read_blocks+0x10>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00000141 	.word	0x00000141
     868:	0000025d 	.word	0x0000025d
     86c:	00101112 	.word	0x00101112
     870:	20000318 	.word	0x20000318
     874:	00000e15 	.word	0x00000e15
     878:	2000031c 	.word	0x2000031c
     87c:	2000031e 	.word	0x2000031e
     880:	000002e1 	.word	0x000002e1
     884:	00081111 	.word	0x00081111

00000888 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     888:	b510      	push	{r4, lr}
     88a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     88c:	4b07      	ldr	r3, [pc, #28]	; (8ac <sd_mmc_start_read_blocks+0x24>)
     88e:	4798      	blx	r3
     890:	2800      	cmp	r0, #0
     892:	d104      	bne.n	89e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     894:	2200      	movs	r2, #0
     896:	4b06      	ldr	r3, [pc, #24]	; (8b0 <sd_mmc_start_read_blocks+0x28>)
     898:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     89a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     89c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     89e:	4a04      	ldr	r2, [pc, #16]	; (8b0 <sd_mmc_start_read_blocks+0x28>)
     8a0:	8813      	ldrh	r3, [r2, #0]
     8a2:	1b1c      	subs	r4, r3, r4
     8a4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8a6:	2000      	movs	r0, #0
     8a8:	e7f8      	b.n	89c <sd_mmc_start_read_blocks+0x14>
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	00001041 	.word	0x00001041
     8b0:	2000031c 	.word	0x2000031c

000008b4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     8b4:	b510      	push	{r4, lr}
     8b6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     8b8:	4b14      	ldr	r3, [pc, #80]	; (90c <sd_mmc_wait_end_of_read_blocks+0x58>)
     8ba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8bc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     8be:	2800      	cmp	r0, #0
     8c0:	d101      	bne.n	8c6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     8c2:	0018      	movs	r0, r3
     8c4:	bd10      	pop	{r4, pc}
	if (abort) {
     8c6:	2c00      	cmp	r4, #0
     8c8:	d010      	beq.n	8ec <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     8ca:	2200      	movs	r2, #0
     8cc:	4b10      	ldr	r3, [pc, #64]	; (910 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     8ce:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     8d0:	4b10      	ldr	r3, [pc, #64]	; (914 <sd_mmc_wait_end_of_read_blocks+0x60>)
     8d2:	881b      	ldrh	r3, [r3, #0]
     8d4:	2b01      	cmp	r3, #1
     8d6:	d00f      	beq.n	8f8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     8d8:	2100      	movs	r1, #0
     8da:	480f      	ldr	r0, [pc, #60]	; (918 <sd_mmc_wait_end_of_read_blocks+0x64>)
     8dc:	4b0f      	ldr	r3, [pc, #60]	; (91c <sd_mmc_wait_end_of_read_blocks+0x68>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d00d      	beq.n	900 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     8e4:	4b0e      	ldr	r3, [pc, #56]	; (920 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     8e6:	4798      	blx	r3
	return SD_MMC_OK;
     8e8:	2300      	movs	r3, #0
     8ea:	e7ea      	b.n	8c2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     8ec:	4b08      	ldr	r3, [pc, #32]	; (910 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     8ee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     8f0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     8f2:	2a00      	cmp	r2, #0
     8f4:	d0ec      	beq.n	8d0 <sd_mmc_wait_end_of_read_blocks+0x1c>
     8f6:	e7e4      	b.n	8c2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     8f8:	4b09      	ldr	r3, [pc, #36]	; (920 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     8fa:	4798      	blx	r3
		return SD_MMC_OK;
     8fc:	2300      	movs	r3, #0
     8fe:	e7e0      	b.n	8c2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     900:	2100      	movs	r1, #0
     902:	4805      	ldr	r0, [pc, #20]	; (918 <sd_mmc_wait_end_of_read_blocks+0x64>)
     904:	4b05      	ldr	r3, [pc, #20]	; (91c <sd_mmc_wait_end_of_read_blocks+0x68>)
     906:	4798      	blx	r3
     908:	e7ec      	b.n	8e4 <sd_mmc_wait_end_of_read_blocks+0x30>
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	000010cd 	.word	0x000010cd
     910:	2000031c 	.word	0x2000031c
     914:	2000031e 	.word	0x2000031e
     918:	0000310c 	.word	0x0000310c
     91c:	00000fa5 	.word	0x00000fa5
     920:	000002e1 	.word	0x000002e1

00000924 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     924:	b570      	push	{r4, r5, r6, lr}
     926:	b082      	sub	sp, #8
     928:	000e      	movs	r6, r1
     92a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     92c:	4b11      	ldr	r3, [pc, #68]	; (974 <sd_mmc_init_write_blocks+0x50>)
     92e:	4798      	blx	r3
     930:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     932:	d116      	bne.n	962 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     934:	2d01      	cmp	r5, #1
     936:	d917      	bls.n	968 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     938:	480f      	ldr	r0, [pc, #60]	; (978 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     93a:	4b10      	ldr	r3, [pc, #64]	; (97c <sd_mmc_init_write_blocks+0x58>)
     93c:	681b      	ldr	r3, [r3, #0]
     93e:	7bdb      	ldrb	r3, [r3, #15]
     940:	071b      	lsls	r3, r3, #28
     942:	d400      	bmi.n	946 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     944:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     946:	2301      	movs	r3, #1
     948:	9300      	str	r3, [sp, #0]
     94a:	002b      	movs	r3, r5
     94c:	2280      	movs	r2, #128	; 0x80
     94e:	0092      	lsls	r2, r2, #2
     950:	0031      	movs	r1, r6
     952:	4e0b      	ldr	r6, [pc, #44]	; (980 <sd_mmc_init_write_blocks+0x5c>)
     954:	47b0      	blx	r6
     956:	2800      	cmp	r0, #0
     958:	d008      	beq.n	96c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     95a:	4b0a      	ldr	r3, [pc, #40]	; (984 <sd_mmc_init_write_blocks+0x60>)
     95c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     95e:	4b0a      	ldr	r3, [pc, #40]	; (988 <sd_mmc_init_write_blocks+0x64>)
     960:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     962:	0020      	movs	r0, r4
     964:	b002      	add	sp, #8
     966:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     968:	4808      	ldr	r0, [pc, #32]	; (98c <sd_mmc_init_write_blocks+0x68>)
     96a:	e7e6      	b.n	93a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     96c:	4b08      	ldr	r3, [pc, #32]	; (990 <sd_mmc_init_write_blocks+0x6c>)
     96e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     970:	2405      	movs	r4, #5
     972:	e7f6      	b.n	962 <sd_mmc_init_write_blocks+0x3e>
     974:	00000141 	.word	0x00000141
     978:	00109119 	.word	0x00109119
     97c:	20000318 	.word	0x20000318
     980:	00000e15 	.word	0x00000e15
     984:	2000031c 	.word	0x2000031c
     988:	2000031e 	.word	0x2000031e
     98c:	00089118 	.word	0x00089118
     990:	000002e1 	.word	0x000002e1

00000994 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     994:	b510      	push	{r4, lr}
     996:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     998:	4b07      	ldr	r3, [pc, #28]	; (9b8 <sd_mmc_start_write_blocks+0x24>)
     99a:	4798      	blx	r3
     99c:	2800      	cmp	r0, #0
     99e:	d104      	bne.n	9aa <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9a0:	2200      	movs	r2, #0
     9a2:	4b06      	ldr	r3, [pc, #24]	; (9bc <sd_mmc_start_write_blocks+0x28>)
     9a4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9a6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9a8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9aa:	4a04      	ldr	r2, [pc, #16]	; (9bc <sd_mmc_start_write_blocks+0x28>)
     9ac:	8813      	ldrh	r3, [r2, #0]
     9ae:	1b1c      	subs	r4, r3, r4
     9b0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     9b2:	2000      	movs	r0, #0
     9b4:	e7f8      	b.n	9a8 <sd_mmc_start_write_blocks+0x14>
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	000010d1 	.word	0x000010d1
     9bc:	2000031c 	.word	0x2000031c

000009c0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     9c0:	b510      	push	{r4, lr}
     9c2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     9c4:	4b0e      	ldr	r3, [pc, #56]	; (a00 <sd_mmc_wait_end_of_write_blocks+0x40>)
     9c6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9c8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     9ca:	2800      	cmp	r0, #0
     9cc:	d101      	bne.n	9d2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     9ce:	0018      	movs	r0, r3
     9d0:	bd10      	pop	{r4, pc}
	if (abort) {
     9d2:	2c00      	cmp	r4, #0
     9d4:	d00a      	beq.n	9ec <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     9d6:	2200      	movs	r2, #0
     9d8:	4b0a      	ldr	r3, [pc, #40]	; (a04 <sd_mmc_wait_end_of_write_blocks+0x44>)
     9da:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     9dc:	4b0a      	ldr	r3, [pc, #40]	; (a08 <sd_mmc_wait_end_of_write_blocks+0x48>)
     9de:	881b      	ldrh	r3, [r3, #0]
     9e0:	2b01      	cmp	r3, #1
     9e2:	d009      	beq.n	9f8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     9e4:	4b09      	ldr	r3, [pc, #36]	; (a0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     9e6:	4798      	blx	r3
	return SD_MMC_OK;
     9e8:	2300      	movs	r3, #0
     9ea:	e7f0      	b.n	9ce <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     9ec:	4b05      	ldr	r3, [pc, #20]	; (a04 <sd_mmc_wait_end_of_write_blocks+0x44>)
     9ee:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     9f0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     9f2:	2a00      	cmp	r2, #0
     9f4:	d0f2      	beq.n	9dc <sd_mmc_wait_end_of_write_blocks+0x1c>
     9f6:	e7ea      	b.n	9ce <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     9f8:	4b04      	ldr	r3, [pc, #16]	; (a0c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     9fa:	4798      	blx	r3
		return SD_MMC_OK;
     9fc:	2300      	movs	r3, #0
     9fe:	e7e6      	b.n	9ce <sd_mmc_wait_end_of_write_blocks+0xe>
     a00:	00001151 	.word	0x00001151
     a04:	2000031c 	.word	0x2000031c
     a08:	2000031e 	.word	0x2000031e
     a0c:	000002e1 	.word	0x000002e1

00000a10 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     a14:	4b0f      	ldr	r3, [pc, #60]	; (a54 <sd_mmc_test_unit_ready+0x44>)
     a16:	4798      	blx	r3
     a18:	2801      	cmp	r0, #1
     a1a:	d019      	beq.n	a50 <sd_mmc_test_unit_ready+0x40>
     a1c:	2800      	cmp	r0, #0
     a1e:	d003      	beq.n	a28 <sd_mmc_test_unit_ready+0x18>
     a20:	2802      	cmp	r0, #2
     a22:	d010      	beq.n	a46 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     a24:	2001      	movs	r0, #1
	}
}
     a26:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     a28:	4b0b      	ldr	r3, [pc, #44]	; (a58 <sd_mmc_test_unit_ready+0x48>)
     a2a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     a2c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     a2e:	2b00      	cmp	r3, #0
     a30:	d1f9      	bne.n	a26 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     a32:	0020      	movs	r0, r4
     a34:	4b09      	ldr	r3, [pc, #36]	; (a5c <sd_mmc_test_unit_ready+0x4c>)
     a36:	4798      	blx	r3
     a38:	0003      	movs	r3, r0
     a3a:	2003      	movs	r0, #3
     a3c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     a3e:	4243      	negs	r3, r0
     a40:	4158      	adcs	r0, r3
     a42:	0040      	lsls	r0, r0, #1
     a44:	e7ef      	b.n	a26 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     a46:	2200      	movs	r2, #0
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <sd_mmc_test_unit_ready+0x48>)
     a4a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     a4c:	2002      	movs	r0, #2
     a4e:	e7ea      	b.n	a26 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     a50:	2003      	movs	r0, #3
     a52:	e7e8      	b.n	a26 <sd_mmc_test_unit_ready+0x16>
     a54:	000002fd 	.word	0x000002fd
     a58:	20000324 	.word	0x20000324
     a5c:	000007ad 	.word	0x000007ad

00000a60 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     a60:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     a62:	2000      	movs	r0, #0
     a64:	4b01      	ldr	r3, [pc, #4]	; (a6c <sd_mmc_test_unit_ready_0+0xc>)
     a66:	4798      	blx	r3
}
     a68:	bd10      	pop	{r4, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00000a11 	.word	0x00000a11

00000a70 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	0004      	movs	r4, r0
     a74:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     a76:	4b04      	ldr	r3, [pc, #16]	; (a88 <sd_mmc_read_capacity+0x18>)
     a78:	4798      	blx	r3
     a7a:	0040      	lsls	r0, r0, #1
     a7c:	3801      	subs	r0, #1
     a7e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     a80:	0020      	movs	r0, r4
     a82:	4b02      	ldr	r3, [pc, #8]	; (a8c <sd_mmc_read_capacity+0x1c>)
     a84:	4798      	blx	r3
}
     a86:	bd70      	pop	{r4, r5, r6, pc}
     a88:	000007d5 	.word	0x000007d5
     a8c:	00000a11 	.word	0x00000a11

00000a90 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     a90:	b510      	push	{r4, lr}
     a92:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     a94:	2000      	movs	r0, #0
     a96:	4b01      	ldr	r3, [pc, #4]	; (a9c <sd_mmc_read_capacity_0+0xc>)
     a98:	4798      	blx	r3
}
     a9a:	bd10      	pop	{r4, pc}
     a9c:	00000a71 	.word	0x00000a71

00000aa0 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     aa0:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     aa2:	2000      	movs	r0, #0
     aa4:	4b01      	ldr	r3, [pc, #4]	; (aac <sd_mmc_wr_protect_0+0xc>)
     aa6:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     aa8:	bd10      	pop	{r4, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	000007fd 	.word	0x000007fd

00000ab0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     ab0:	b510      	push	{r4, lr}
     ab2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     ab4:	2201      	movs	r2, #1
     ab6:	4b0c      	ldr	r3, [pc, #48]	; (ae8 <sd_mmc_mem_2_ram+0x38>)
     ab8:	4798      	blx	r3
     aba:	2800      	cmp	r0, #0
     abc:	d004      	beq.n	ac8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     abe:	3802      	subs	r0, #2
     ac0:	4243      	negs	r3, r0
     ac2:	4158      	adcs	r0, r3
     ac4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     ac6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     ac8:	2101      	movs	r1, #1
     aca:	0020      	movs	r0, r4
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <sd_mmc_mem_2_ram+0x3c>)
     ace:	4798      	blx	r3
     ad0:	0003      	movs	r3, r0
		return CTRL_FAIL;
     ad2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     ad4:	2b00      	cmp	r3, #0
     ad6:	d1f6      	bne.n	ac6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     ad8:	2000      	movs	r0, #0
     ada:	4b05      	ldr	r3, [pc, #20]	; (af0 <sd_mmc_mem_2_ram+0x40>)
     adc:	4798      	blx	r3
     ade:	1e43      	subs	r3, r0, #1
     ae0:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     ae2:	b2c0      	uxtb	r0, r0
     ae4:	e7ef      	b.n	ac6 <sd_mmc_mem_2_ram+0x16>
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00000801 	.word	0x00000801
     aec:	00000889 	.word	0x00000889
     af0:	000008b5 	.word	0x000008b5

00000af4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     af4:	b510      	push	{r4, lr}
     af6:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     af8:	0001      	movs	r1, r0
     afa:	2000      	movs	r0, #0
     afc:	4b01      	ldr	r3, [pc, #4]	; (b04 <sd_mmc_mem_2_ram_0+0x10>)
     afe:	4798      	blx	r3
}
     b00:	bd10      	pop	{r4, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000ab1 	.word	0x00000ab1

00000b08 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     b08:	b510      	push	{r4, lr}
     b0a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     b0c:	2201      	movs	r2, #1
     b0e:	4b0c      	ldr	r3, [pc, #48]	; (b40 <sd_mmc_ram_2_mem+0x38>)
     b10:	4798      	blx	r3
     b12:	2800      	cmp	r0, #0
     b14:	d004      	beq.n	b20 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     b16:	3802      	subs	r0, #2
     b18:	4243      	negs	r3, r0
     b1a:	4158      	adcs	r0, r3
     b1c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     b1e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b20:	2101      	movs	r1, #1
     b22:	0020      	movs	r0, r4
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <sd_mmc_ram_2_mem+0x3c>)
     b26:	4798      	blx	r3
     b28:	0003      	movs	r3, r0
		return CTRL_FAIL;
     b2a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     b2c:	2b00      	cmp	r3, #0
     b2e:	d1f6      	bne.n	b1e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     b30:	2000      	movs	r0, #0
     b32:	4b05      	ldr	r3, [pc, #20]	; (b48 <sd_mmc_ram_2_mem+0x40>)
     b34:	4798      	blx	r3
     b36:	1e43      	subs	r3, r0, #1
     b38:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     b3a:	b2c0      	uxtb	r0, r0
     b3c:	e7ef      	b.n	b1e <sd_mmc_ram_2_mem+0x16>
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	00000925 	.word	0x00000925
     b44:	00000995 	.word	0x00000995
     b48:	000009c1 	.word	0x000009c1

00000b4c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     b4c:	b510      	push	{r4, lr}
     b4e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     b50:	0001      	movs	r1, r0
     b52:	2000      	movs	r0, #0
     b54:	4b01      	ldr	r3, [pc, #4]	; (b5c <sd_mmc_ram_2_mem_0+0x10>)
     b56:	4798      	blx	r3
}
     b58:	bd10      	pop	{r4, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	00000b09 	.word	0x00000b09

00000b60 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     b60:	b500      	push	{lr}
     b62:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     b64:	466b      	mov	r3, sp
     b66:	1dd9      	adds	r1, r3, #7
     b68:	23ff      	movs	r3, #255	; 0xff
     b6a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     b6c:	2201      	movs	r2, #1
     b6e:	480b      	ldr	r0, [pc, #44]	; (b9c <sd_mmc_spi_start_write_block+0x3c>)
     b70:	4b0b      	ldr	r3, [pc, #44]	; (ba0 <sd_mmc_spi_start_write_block+0x40>)
     b72:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     b74:	4b0b      	ldr	r3, [pc, #44]	; (ba4 <sd_mmc_spi_start_write_block+0x44>)
     b76:	881b      	ldrh	r3, [r3, #0]
     b78:	2b01      	cmp	r3, #1
     b7a:	d00a      	beq.n	b92 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     b7c:	22fc      	movs	r2, #252	; 0xfc
     b7e:	466b      	mov	r3, sp
     b80:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     b82:	2201      	movs	r2, #1
     b84:	466b      	mov	r3, sp
     b86:	1d99      	adds	r1, r3, #6
     b88:	4804      	ldr	r0, [pc, #16]	; (b9c <sd_mmc_spi_start_write_block+0x3c>)
     b8a:	4b05      	ldr	r3, [pc, #20]	; (ba0 <sd_mmc_spi_start_write_block+0x40>)
     b8c:	4798      	blx	r3
}
     b8e:	b003      	add	sp, #12
     b90:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     b92:	22fe      	movs	r2, #254	; 0xfe
     b94:	466b      	mov	r3, sp
     b96:	719a      	strb	r2, [r3, #6]
     b98:	e7f3      	b.n	b82 <sd_mmc_spi_start_write_block+0x22>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	20000328 	.word	0x20000328
     ba0:	00005169 	.word	0x00005169
     ba4:	2000036c 	.word	0x2000036c

00000ba8 <sd_mmc_spi_wait_busy>:
{
     ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
     baa:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     bac:	466b      	mov	r3, sp
     bae:	1ddc      	adds	r4, r3, #7
     bb0:	23ff      	movs	r3, #255	; 0xff
     bb2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bb4:	4e12      	ldr	r6, [pc, #72]	; (c00 <sd_mmc_spi_wait_busy+0x58>)
     bb6:	2201      	movs	r2, #1
     bb8:	0021      	movs	r1, r4
     bba:	0030      	movs	r0, r6
     bbc:	4d11      	ldr	r5, [pc, #68]	; (c04 <sd_mmc_spi_wait_busy+0x5c>)
     bbe:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bc0:	23ff      	movs	r3, #255	; 0xff
     bc2:	2201      	movs	r2, #1
     bc4:	0021      	movs	r1, r4
     bc6:	0030      	movs	r0, r6
     bc8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bca:	23ff      	movs	r3, #255	; 0xff
     bcc:	2201      	movs	r2, #1
     bce:	0021      	movs	r1, r4
     bd0:	0030      	movs	r0, r6
     bd2:	47a8      	blx	r5
     bd4:	4c0c      	ldr	r4, [pc, #48]	; (c08 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     bd6:	466b      	mov	r3, sp
     bd8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     bda:	4e09      	ldr	r6, [pc, #36]	; (c00 <sd_mmc_spi_wait_busy+0x58>)
     bdc:	4f09      	ldr	r7, [pc, #36]	; (c04 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     bde:	782b      	ldrb	r3, [r5, #0]
     be0:	2bff      	cmp	r3, #255	; 0xff
     be2:	d009      	beq.n	bf8 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     be4:	23ff      	movs	r3, #255	; 0xff
     be6:	2201      	movs	r2, #1
     be8:	0029      	movs	r1, r5
     bea:	0030      	movs	r0, r6
     bec:	47b8      	blx	r7
     bee:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     bf0:	2c00      	cmp	r4, #0
     bf2:	d1f4      	bne.n	bde <sd_mmc_spi_wait_busy+0x36>
			return false;
     bf4:	2000      	movs	r0, #0
     bf6:	e000      	b.n	bfa <sd_mmc_spi_wait_busy+0x52>
	return true;
     bf8:	2001      	movs	r0, #1
}
     bfa:	b003      	add	sp, #12
     bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	20000328 	.word	0x20000328
     c04:	00004fa1 	.word	0x00004fa1
     c08:	00030d40 	.word	0x00030d40

00000c0c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     c0c:	b570      	push	{r4, r5, r6, lr}
     c0e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     c10:	4b14      	ldr	r3, [pc, #80]	; (c64 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     c12:	881c      	ldrh	r4, [r3, #0]
     c14:	2c01      	cmp	r4, #1
     c16:	d023      	beq.n	c60 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     c18:	4b13      	ldr	r3, [pc, #76]	; (c68 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     c1a:	8819      	ldrh	r1, [r3, #0]
     c1c:	4b13      	ldr	r3, [pc, #76]	; (c6c <sd_mmc_spi_stop_multiwrite_block+0x60>)
     c1e:	6818      	ldr	r0, [r3, #0]
     c20:	4b13      	ldr	r3, [pc, #76]	; (c70 <sd_mmc_spi_stop_multiwrite_block+0x64>)
     c22:	4798      	blx	r3
		return true; // It is not the End of multi write
     c24:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     c26:	4284      	cmp	r4, r0
     c28:	d902      	bls.n	c30 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     c2a:	0018      	movs	r0, r3
     c2c:	b002      	add	sp, #8
     c2e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     c30:	466b      	mov	r3, sp
     c32:	1ddc      	adds	r4, r3, #7
     c34:	23ff      	movs	r3, #255	; 0xff
     c36:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c38:	4e0e      	ldr	r6, [pc, #56]	; (c74 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     c3a:	2201      	movs	r2, #1
     c3c:	0021      	movs	r1, r4
     c3e:	0030      	movs	r0, r6
     c40:	4d0d      	ldr	r5, [pc, #52]	; (c78 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     c42:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     c44:	23fd      	movs	r3, #253	; 0xfd
     c46:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     c48:	2201      	movs	r2, #1
     c4a:	0021      	movs	r1, r4
     c4c:	0030      	movs	r0, r6
     c4e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <sd_mmc_spi_stop_multiwrite_block+0x70>)
     c52:	4798      	blx	r3
     c54:	1e03      	subs	r3, r0, #0
     c56:	d1e8      	bne.n	c2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     c58:	2105      	movs	r1, #5
     c5a:	4a09      	ldr	r2, [pc, #36]	; (c80 <sd_mmc_spi_stop_multiwrite_block+0x74>)
     c5c:	7011      	strb	r1, [r2, #0]
		return false;
     c5e:	e7e4      	b.n	c2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     c60:	2301      	movs	r3, #1
     c62:	e7e2      	b.n	c2a <sd_mmc_spi_stop_multiwrite_block+0x1e>
     c64:	2000036c 	.word	0x2000036c
     c68:	20000364 	.word	0x20000364
     c6c:	20000374 	.word	0x20000374
     c70:	00009de9 	.word	0x00009de9
     c74:	20000328 	.word	0x20000328
     c78:	00005169 	.word	0x00005169
     c7c:	00000ba9 	.word	0x00000ba9
     c80:	2000036b 	.word	0x2000036b

00000c84 <sd_mmc_spi_start_read_block>:
{
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	b083      	sub	sp, #12
	token = 0;
     c88:	2200      	movs	r2, #0
     c8a:	466b      	mov	r3, sp
     c8c:	71da      	strb	r2, [r3, #7]
     c8e:	4c14      	ldr	r4, [pc, #80]	; (ce0 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     c90:	466b      	mov	r3, sp
     c92:	1ddd      	adds	r5, r3, #7
     c94:	4e13      	ldr	r6, [pc, #76]	; (ce4 <sd_mmc_spi_start_read_block+0x60>)
     c96:	4f14      	ldr	r7, [pc, #80]	; (ce8 <sd_mmc_spi_start_read_block+0x64>)
     c98:	23ff      	movs	r3, #255	; 0xff
     c9a:	2201      	movs	r2, #1
     c9c:	0029      	movs	r1, r5
     c9e:	0030      	movs	r0, r6
     ca0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     ca2:	782b      	ldrb	r3, [r5, #0]
     ca4:	220f      	movs	r2, #15
     ca6:	0019      	movs	r1, r3
     ca8:	4391      	bics	r1, r2
     caa:	1e0a      	subs	r2, r1, #0
     cac:	d009      	beq.n	cc2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     cae:	2bfe      	cmp	r3, #254	; 0xfe
     cb0:	d013      	beq.n	cda <sd_mmc_spi_start_read_block+0x56>
     cb2:	3c01      	subs	r4, #1
		if (i-- == 0) {
     cb4:	2c00      	cmp	r4, #0
     cb6:	d1ef      	bne.n	c98 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     cb8:	2204      	movs	r2, #4
     cba:	4b0c      	ldr	r3, [pc, #48]	; (cec <sd_mmc_spi_start_read_block+0x68>)
     cbc:	701a      	strb	r2, [r3, #0]
			return false;
     cbe:	2000      	movs	r0, #0
     cc0:	e00c      	b.n	cdc <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     cc2:	075b      	lsls	r3, r3, #29
     cc4:	d004      	beq.n	cd0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     cc6:	3207      	adds	r2, #7
     cc8:	4b08      	ldr	r3, [pc, #32]	; (cec <sd_mmc_spi_start_read_block+0x68>)
     cca:	701a      	strb	r2, [r3, #0]
			return false;
     ccc:	2000      	movs	r0, #0
     cce:	e005      	b.n	cdc <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     cd0:	220b      	movs	r2, #11
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <sd_mmc_spi_start_read_block+0x68>)
     cd4:	701a      	strb	r2, [r3, #0]
			return false;
     cd6:	2000      	movs	r0, #0
     cd8:	e000      	b.n	cdc <sd_mmc_spi_start_read_block+0x58>
	return true;
     cda:	2001      	movs	r0, #1
}
     cdc:	b003      	add	sp, #12
     cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce0:	0007a120 	.word	0x0007a120
     ce4:	20000328 	.word	0x20000328
     ce8:	00004fa1 	.word	0x00004fa1
     cec:	2000036b 	.word	0x2000036b

00000cf0 <sd_mmc_spi_stop_write_block>:
{
     cf0:	b530      	push	{r4, r5, lr}
     cf2:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     cf4:	a901      	add	r1, sp, #4
     cf6:	2301      	movs	r3, #1
     cf8:	425b      	negs	r3, r3
     cfa:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     cfc:	4d14      	ldr	r5, [pc, #80]	; (d50 <sd_mmc_spi_stop_write_block+0x60>)
     cfe:	2202      	movs	r2, #2
     d00:	0028      	movs	r0, r5
     d02:	4b14      	ldr	r3, [pc, #80]	; (d54 <sd_mmc_spi_stop_write_block+0x64>)
     d04:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     d06:	466b      	mov	r3, sp
     d08:	1ddc      	adds	r4, r3, #7
     d0a:	23ff      	movs	r3, #255	; 0xff
     d0c:	2201      	movs	r2, #1
     d0e:	0021      	movs	r1, r4
     d10:	0028      	movs	r0, r5
     d12:	4d11      	ldr	r5, [pc, #68]	; (d58 <sd_mmc_spi_stop_write_block+0x68>)
     d14:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     d16:	7822      	ldrb	r2, [r4, #0]
     d18:	2311      	movs	r3, #17
     d1a:	4013      	ands	r3, r2
     d1c:	2b01      	cmp	r3, #1
     d1e:	d005      	beq.n	d2c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     d20:	2201      	movs	r2, #1
     d22:	4b0e      	ldr	r3, [pc, #56]	; (d5c <sd_mmc_spi_stop_write_block+0x6c>)
     d24:	701a      	strb	r2, [r3, #0]
		return false;
     d26:	2000      	movs	r0, #0
}
     d28:	b003      	add	sp, #12
     d2a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     d2c:	231e      	movs	r3, #30
     d2e:	401a      	ands	r2, r3
     d30:	2a04      	cmp	r2, #4
     d32:	d00b      	beq.n	d4c <sd_mmc_spi_stop_write_block+0x5c>
     d34:	2a0a      	cmp	r2, #10
     d36:	d104      	bne.n	d42 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     d38:	3a02      	subs	r2, #2
     d3a:	4b08      	ldr	r3, [pc, #32]	; (d5c <sd_mmc_spi_stop_write_block+0x6c>)
     d3c:	701a      	strb	r2, [r3, #0]
		return false;
     d3e:	2000      	movs	r0, #0
     d40:	e7f2      	b.n	d28 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     d42:	220a      	movs	r2, #10
     d44:	4b05      	ldr	r3, [pc, #20]	; (d5c <sd_mmc_spi_stop_write_block+0x6c>)
     d46:	701a      	strb	r2, [r3, #0]
		return false;
     d48:	2000      	movs	r0, #0
     d4a:	e7ed      	b.n	d28 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     d4c:	2001      	movs	r0, #1
     d4e:	e7eb      	b.n	d28 <sd_mmc_spi_stop_write_block+0x38>
     d50:	20000328 	.word	0x20000328
     d54:	00005169 	.word	0x00005169
     d58:	00004fa1 	.word	0x00004fa1
     d5c:	2000036b 	.word	0x2000036b

00000d60 <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d62:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     d64:	2200      	movs	r2, #0
     d66:	4b0d      	ldr	r3, [pc, #52]	; (d9c <sd_mmc_spi_select_device+0x3c>)
     d68:	701a      	strb	r2, [r3, #0]
     d6a:	000c      	movs	r4, r1
     d6c:	4b0c      	ldr	r3, [pc, #48]	; (da0 <sd_mmc_spi_select_device+0x40>)
     d6e:	4299      	cmp	r1, r3
     d70:	d900      	bls.n	d74 <sd_mmc_spi_select_device+0x14>
     d72:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     d74:	4d0b      	ldr	r5, [pc, #44]	; (da4 <sd_mmc_spi_select_device+0x44>)
     d76:	4e0c      	ldr	r6, [pc, #48]	; (da8 <sd_mmc_spi_select_device+0x48>)
     d78:	e001      	b.n	d7e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     d7a:	08e3      	lsrs	r3, r4, #3
     d7c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     d7e:	0021      	movs	r1, r4
     d80:	0028      	movs	r0, r5
     d82:	47b0      	blx	r6
     d84:	2817      	cmp	r0, #23
     d86:	d0f8      	beq.n	d7a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     d88:	0079      	lsls	r1, r7, #1
     d8a:	19cf      	adds	r7, r1, r7
     d8c:	4907      	ldr	r1, [pc, #28]	; (dac <sd_mmc_spi_select_device+0x4c>)
     d8e:	19c9      	adds	r1, r1, r7
     d90:	2201      	movs	r2, #1
     d92:	4804      	ldr	r0, [pc, #16]	; (da4 <sd_mmc_spi_select_device+0x44>)
     d94:	4b06      	ldr	r3, [pc, #24]	; (db0 <sd_mmc_spi_select_device+0x50>)
     d96:	4798      	blx	r3
}
     d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	2000036b 	.word	0x2000036b
     da0:	00989680 	.word	0x00989680
     da4:	20000328 	.word	0x20000328
     da8:	00004d11 	.word	0x00004d11
     dac:	20000368 	.word	0x20000368
     db0:	00005075 	.word	0x00005075

00000db4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     db4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     db6:	2200      	movs	r2, #0
     db8:	4b04      	ldr	r3, [pc, #16]	; (dcc <sd_mmc_spi_deselect_device+0x18>)
     dba:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     dbc:	0041      	lsls	r1, r0, #1
     dbe:	1808      	adds	r0, r1, r0
     dc0:	4903      	ldr	r1, [pc, #12]	; (dd0 <sd_mmc_spi_deselect_device+0x1c>)
     dc2:	1809      	adds	r1, r1, r0
     dc4:	4803      	ldr	r0, [pc, #12]	; (dd4 <sd_mmc_spi_deselect_device+0x20>)
     dc6:	4b04      	ldr	r3, [pc, #16]	; (dd8 <sd_mmc_spi_deselect_device+0x24>)
     dc8:	4798      	blx	r3
}
     dca:	bd10      	pop	{r4, pc}
     dcc:	2000036b 	.word	0x2000036b
     dd0:	20000368 	.word	0x20000368
     dd4:	20000328 	.word	0x20000328
     dd8:	00005075 	.word	0x00005075

00000ddc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     ddc:	b570      	push	{r4, r5, r6, lr}
     dde:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     de0:	22ff      	movs	r2, #255	; 0xff
     de2:	466b      	mov	r3, sp
     de4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     de6:	2200      	movs	r2, #0
     de8:	4b07      	ldr	r3, [pc, #28]	; (e08 <sd_mmc_spi_send_clock+0x2c>)
     dea:	701a      	strb	r2, [r3, #0]
     dec:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     dee:	4e07      	ldr	r6, [pc, #28]	; (e0c <sd_mmc_spi_send_clock+0x30>)
     df0:	4d07      	ldr	r5, [pc, #28]	; (e10 <sd_mmc_spi_send_clock+0x34>)
     df2:	2201      	movs	r2, #1
     df4:	466b      	mov	r3, sp
     df6:	1dd9      	adds	r1, r3, #7
     df8:	0030      	movs	r0, r6
     dfa:	47a8      	blx	r5
     dfc:	3c01      	subs	r4, #1
     dfe:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     e00:	2c00      	cmp	r4, #0
     e02:	d1f6      	bne.n	df2 <sd_mmc_spi_send_clock+0x16>
	}
}
     e04:	b002      	add	sp, #8
     e06:	bd70      	pop	{r4, r5, r6, pc}
     e08:	2000036b 	.word	0x2000036b
     e0c:	20000328 	.word	0x20000328
     e10:	00005169 	.word	0x00005169

00000e14 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     e14:	b5f0      	push	{r4, r5, r6, r7, lr}
     e16:	46c6      	mov	lr, r8
     e18:	b500      	push	{lr}
     e1a:	b086      	sub	sp, #24
     e1c:	4680      	mov	r8, r0
     e1e:	9200      	str	r2, [sp, #0]
     e20:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     e22:	22ff      	movs	r2, #255	; 0xff
     e24:	230f      	movs	r3, #15
     e26:	a802      	add	r0, sp, #8
     e28:	4684      	mov	ip, r0
     e2a:	4463      	add	r3, ip
     e2c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e2e:	2200      	movs	r2, #0
     e30:	4b53      	ldr	r3, [pc, #332]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     e32:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     e34:	ab04      	add	r3, sp, #16
     e36:	323f      	adds	r2, #63	; 0x3f
     e38:	4640      	mov	r0, r8
     e3a:	4002      	ands	r2, r0
     e3c:	2040      	movs	r0, #64	; 0x40
     e3e:	4302      	orrs	r2, r0
     e40:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     e42:	0e0a      	lsrs	r2, r1, #24
     e44:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     e46:	0c0a      	lsrs	r2, r1, #16
     e48:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     e4a:	0a0a      	lsrs	r2, r1, #8
     e4c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     e4e:	7119      	strb	r1, [r3, #4]
     e50:	2700      	movs	r7, #0
	crc = 0;
     e52:	2300      	movs	r3, #0
		value = *buf++;
     e54:	a904      	add	r1, sp, #16
     e56:	2208      	movs	r2, #8
				crc ^= 0x09;
     e58:	2409      	movs	r4, #9
     e5a:	e011      	b.n	e80 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     e5c:	0076      	lsls	r6, r6, #1
     e5e:	b2f6      	uxtb	r6, r6
     e60:	3801      	subs	r0, #1
     e62:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     e64:	2800      	cmp	r0, #0
     e66:	d008      	beq.n	e7a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     e68:	005b      	lsls	r3, r3, #1
     e6a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     e6c:	001d      	movs	r5, r3
     e6e:	4075      	eors	r5, r6
     e70:	062d      	lsls	r5, r5, #24
     e72:	d5f3      	bpl.n	e5c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     e74:	4063      	eors	r3, r4
     e76:	b2db      	uxtb	r3, r3
     e78:	e7f0      	b.n	e5c <sd_mmc_spi_adtc_start+0x48>
     e7a:	3701      	adds	r7, #1
	while (size--) {
     e7c:	2f05      	cmp	r7, #5
     e7e:	d002      	beq.n	e86 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     e80:	5c7e      	ldrb	r6, [r7, r1]
     e82:	0010      	movs	r0, r2
     e84:	e7f0      	b.n	e68 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     e86:	005b      	lsls	r3, r3, #1
     e88:	2201      	movs	r2, #1
     e8a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     e8c:	ac04      	add	r4, sp, #16
     e8e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     e90:	4e3c      	ldr	r6, [pc, #240]	; (f84 <sd_mmc_spi_adtc_start+0x170>)
     e92:	2201      	movs	r2, #1
     e94:	210f      	movs	r1, #15
     e96:	ab02      	add	r3, sp, #8
     e98:	469c      	mov	ip, r3
     e9a:	4461      	add	r1, ip
     e9c:	0030      	movs	r0, r6
     e9e:	4f3a      	ldr	r7, [pc, #232]	; (f88 <sd_mmc_spi_adtc_start+0x174>)
     ea0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     ea2:	2206      	movs	r2, #6
     ea4:	0021      	movs	r1, r4
     ea6:	0030      	movs	r0, r6
     ea8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     eaa:	ab02      	add	r3, sp, #8
     eac:	1dd9      	adds	r1, r3, #7
     eae:	23ff      	movs	r3, #255	; 0xff
     eb0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     eb2:	2201      	movs	r2, #1
     eb4:	0030      	movs	r0, r6
     eb6:	4e35      	ldr	r6, [pc, #212]	; (f8c <sd_mmc_spi_adtc_start+0x178>)
     eb8:	47b0      	blx	r6
     eba:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     ebc:	ab02      	add	r3, sp, #8
     ebe:	1dde      	adds	r6, r3, #7
     ec0:	4f30      	ldr	r7, [pc, #192]	; (f84 <sd_mmc_spi_adtc_start+0x170>)
     ec2:	4d32      	ldr	r5, [pc, #200]	; (f8c <sd_mmc_spi_adtc_start+0x178>)
     ec4:	23ff      	movs	r3, #255	; 0xff
     ec6:	2201      	movs	r2, #1
     ec8:	0031      	movs	r1, r6
     eca:	0038      	movs	r0, r7
     ecc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     ece:	7833      	ldrb	r3, [r6, #0]
     ed0:	b25a      	sxtb	r2, r3
     ed2:	2a00      	cmp	r2, #0
     ed4:	da0b      	bge.n	eee <sd_mmc_spi_adtc_start+0xda>
     ed6:	3c01      	subs	r4, #1
     ed8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     eda:	2c00      	cmp	r4, #0
     edc:	d1f2      	bne.n	ec4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     ede:	2202      	movs	r2, #2
     ee0:	4b27      	ldr	r3, [pc, #156]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     ee2:	701a      	strb	r2, [r3, #0]
			return false;
     ee4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     ee6:	b006      	add	sp, #24
     ee8:	bc04      	pop	{r2}
     eea:	4690      	mov	r8, r2
     eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     eee:	4a28      	ldr	r2, [pc, #160]	; (f90 <sd_mmc_spi_adtc_start+0x17c>)
     ef0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     ef2:	071a      	lsls	r2, r3, #28
     ef4:	d41a      	bmi.n	f2c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     ef6:	075a      	lsls	r2, r3, #29
     ef8:	d41d      	bmi.n	f36 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     efa:	2201      	movs	r2, #1
     efc:	4393      	bics	r3, r2
     efe:	d11f      	bne.n	f40 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     f00:	4643      	mov	r3, r8
     f02:	049b      	lsls	r3, r3, #18
     f04:	d420      	bmi.n	f48 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     f06:	4643      	mov	r3, r8
     f08:	059b      	lsls	r3, r3, #22
     f0a:	d425      	bmi.n	f58 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     f0c:	4643      	mov	r3, r8
     f0e:	055b      	lsls	r3, r3, #21
     f10:	d42b      	bmi.n	f6a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     f12:	4b20      	ldr	r3, [pc, #128]	; (f94 <sd_mmc_spi_adtc_start+0x180>)
     f14:	466a      	mov	r2, sp
     f16:	8812      	ldrh	r2, [r2, #0]
     f18:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     f1a:	4b1f      	ldr	r3, [pc, #124]	; (f98 <sd_mmc_spi_adtc_start+0x184>)
     f1c:	466a      	mov	r2, sp
     f1e:	8892      	ldrh	r2, [r2, #4]
     f20:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     f22:	2200      	movs	r2, #0
     f24:	4b1d      	ldr	r3, [pc, #116]	; (f9c <sd_mmc_spi_adtc_start+0x188>)
     f26:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     f28:	2001      	movs	r0, #1
     f2a:	e7dc      	b.n	ee6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     f2c:	2206      	movs	r2, #6
     f2e:	4b14      	ldr	r3, [pc, #80]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     f30:	701a      	strb	r2, [r3, #0]
		return false;
     f32:	2000      	movs	r0, #0
     f34:	e7d7      	b.n	ee6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     f36:	2209      	movs	r2, #9
     f38:	4b11      	ldr	r3, [pc, #68]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     f3a:	701a      	strb	r2, [r3, #0]
		return false;
     f3c:	2000      	movs	r0, #0
     f3e:	e7d2      	b.n	ee6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     f40:	4b0f      	ldr	r3, [pc, #60]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     f42:	701a      	strb	r2, [r3, #0]
		return false;
     f44:	2000      	movs	r0, #0
     f46:	e7ce      	b.n	ee6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     f48:	4b15      	ldr	r3, [pc, #84]	; (fa0 <sd_mmc_spi_adtc_start+0x18c>)
     f4a:	4798      	blx	r3
     f4c:	2800      	cmp	r0, #0
     f4e:	d1da      	bne.n	f06 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     f50:	2203      	movs	r2, #3
     f52:	4b0b      	ldr	r3, [pc, #44]	; (f80 <sd_mmc_spi_adtc_start+0x16c>)
     f54:	701a      	strb	r2, [r3, #0]
			return false;
     f56:	e7c6      	b.n	ee6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     f58:	490d      	ldr	r1, [pc, #52]	; (f90 <sd_mmc_spi_adtc_start+0x17c>)
     f5a:	2300      	movs	r3, #0
     f5c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     f5e:	33ff      	adds	r3, #255	; 0xff
     f60:	2201      	movs	r2, #1
     f62:	4808      	ldr	r0, [pc, #32]	; (f84 <sd_mmc_spi_adtc_start+0x170>)
     f64:	4e09      	ldr	r6, [pc, #36]	; (f8c <sd_mmc_spi_adtc_start+0x178>)
     f66:	47b0      	blx	r6
     f68:	e7d0      	b.n	f0c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     f6a:	4e09      	ldr	r6, [pc, #36]	; (f90 <sd_mmc_spi_adtc_start+0x17c>)
     f6c:	23ff      	movs	r3, #255	; 0xff
     f6e:	2204      	movs	r2, #4
     f70:	0031      	movs	r1, r6
     f72:	4804      	ldr	r0, [pc, #16]	; (f84 <sd_mmc_spi_adtc_start+0x170>)
     f74:	4f05      	ldr	r7, [pc, #20]	; (f8c <sd_mmc_spi_adtc_start+0x178>)
     f76:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     f78:	6833      	ldr	r3, [r6, #0]
     f7a:	ba1b      	rev	r3, r3
     f7c:	6033      	str	r3, [r6, #0]
     f7e:	e7c8      	b.n	f12 <sd_mmc_spi_adtc_start+0xfe>
     f80:	2000036b 	.word	0x2000036b
     f84:	20000328 	.word	0x20000328
     f88:	00005169 	.word	0x00005169
     f8c:	00004fa1 	.word	0x00004fa1
     f90:	20000370 	.word	0x20000370
     f94:	20000364 	.word	0x20000364
     f98:	2000036c 	.word	0x2000036c
     f9c:	20000374 	.word	0x20000374
     fa0:	00000ba9 	.word	0x00000ba9

00000fa4 <sd_mmc_spi_send_cmd>:
{
     fa4:	b510      	push	{r4, lr}
     fa6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
     fa8:	2300      	movs	r3, #0
     faa:	9300      	str	r3, [sp, #0]
     fac:	2200      	movs	r2, #0
     fae:	4c02      	ldr	r4, [pc, #8]	; (fb8 <sd_mmc_spi_send_cmd+0x14>)
     fb0:	47a0      	blx	r4
}
     fb2:	b002      	add	sp, #8
     fb4:	bd10      	pop	{r4, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	00000e15 	.word	0x00000e15

00000fbc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
     fbc:	4b01      	ldr	r3, [pc, #4]	; (fc4 <sd_mmc_spi_get_response+0x8>)
     fbe:	6818      	ldr	r0, [r3, #0]
}
     fc0:	4770      	bx	lr
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	20000370 	.word	0x20000370

00000fc8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
     fc8:	b510      	push	{r4, lr}
     fca:	b084      	sub	sp, #16
     fcc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     fce:	2200      	movs	r2, #0
     fd0:	4b14      	ldr	r3, [pc, #80]	; (1024 <sd_mmc_spi_read_word+0x5c>)
     fd2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
     fd4:	4b14      	ldr	r3, [pc, #80]	; (1028 <sd_mmc_spi_read_word+0x60>)
     fd6:	8819      	ldrh	r1, [r3, #0]
     fd8:	4b14      	ldr	r3, [pc, #80]	; (102c <sd_mmc_spi_read_word+0x64>)
     fda:	6818      	ldr	r0, [r3, #0]
     fdc:	4b14      	ldr	r3, [pc, #80]	; (1030 <sd_mmc_spi_read_word+0x68>)
     fde:	4798      	blx	r3
     fe0:	2900      	cmp	r1, #0
     fe2:	d103      	bne.n	fec <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
     fe4:	4b13      	ldr	r3, [pc, #76]	; (1034 <sd_mmc_spi_read_word+0x6c>)
     fe6:	4798      	blx	r3
     fe8:	2800      	cmp	r0, #0
     fea:	d010      	beq.n	100e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
     fec:	23ff      	movs	r3, #255	; 0xff
     fee:	2204      	movs	r2, #4
     ff0:	a901      	add	r1, sp, #4
     ff2:	4811      	ldr	r0, [pc, #68]	; (1038 <sd_mmc_spi_read_word+0x70>)
     ff4:	4c11      	ldr	r4, [pc, #68]	; (103c <sd_mmc_spi_read_word+0x74>)
     ff6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
     ff8:	4b0c      	ldr	r3, [pc, #48]	; (102c <sd_mmc_spi_read_word+0x64>)
     ffa:	681a      	ldr	r2, [r3, #0]
     ffc:	1d10      	adds	r0, r2, #4
     ffe:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1000:	4b09      	ldr	r3, [pc, #36]	; (1028 <sd_mmc_spi_read_word+0x60>)
    1002:	8819      	ldrh	r1, [r3, #0]
    1004:	4b0a      	ldr	r3, [pc, #40]	; (1030 <sd_mmc_spi_read_word+0x68>)
    1006:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1008:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    100a:	2900      	cmp	r1, #0
    100c:	d001      	beq.n	1012 <sd_mmc_spi_read_word+0x4a>
}
    100e:	b004      	add	sp, #16
    1010:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1012:	23ff      	movs	r3, #255	; 0xff
    1014:	2202      	movs	r2, #2
    1016:	a903      	add	r1, sp, #12
    1018:	4807      	ldr	r0, [pc, #28]	; (1038 <sd_mmc_spi_read_word+0x70>)
    101a:	4c08      	ldr	r4, [pc, #32]	; (103c <sd_mmc_spi_read_word+0x74>)
    101c:	47a0      	blx	r4
	return true;
    101e:	2001      	movs	r0, #1
    1020:	e7f5      	b.n	100e <sd_mmc_spi_read_word+0x46>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	2000036b 	.word	0x2000036b
    1028:	20000364 	.word	0x20000364
    102c:	20000374 	.word	0x20000374
    1030:	00009ef5 	.word	0x00009ef5
    1034:	00000c85 	.word	0x00000c85
    1038:	20000328 	.word	0x20000328
    103c:	00004fa1 	.word	0x00004fa1

00001040 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    1040:	b5f0      	push	{r4, r5, r6, r7, lr}
    1042:	46de      	mov	lr, fp
    1044:	4657      	mov	r7, sl
    1046:	4646      	mov	r6, r8
    1048:	b5c0      	push	{r6, r7, lr}
    104a:	b082      	sub	sp, #8
    104c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    104e:	2200      	movs	r2, #0
    1050:	4b17      	ldr	r3, [pc, #92]	; (10b0 <sd_mmc_spi_start_read_blocks+0x70>)
    1052:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1054:	1e4c      	subs	r4, r1, #1
    1056:	b2a4      	uxth	r4, r4
    1058:	2900      	cmp	r1, #0
    105a:	d026      	beq.n	10aa <sd_mmc_spi_start_read_blocks+0x6a>
    105c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    105e:	4b15      	ldr	r3, [pc, #84]	; (10b4 <sd_mmc_spi_start_read_blocks+0x74>)
    1060:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1062:	4f15      	ldr	r7, [pc, #84]	; (10b8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1064:	47d0      	blx	sl
    1066:	4680      	mov	r8, r0
    1068:	2800      	cmp	r0, #0
    106a:	d017      	beq.n	109c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    106c:	883a      	ldrh	r2, [r7, #0]
    106e:	465b      	mov	r3, fp
    1070:	1999      	adds	r1, r3, r6
    1072:	23ff      	movs	r3, #255	; 0xff
    1074:	4811      	ldr	r0, [pc, #68]	; (10bc <sd_mmc_spi_start_read_blocks+0x7c>)
    1076:	4d12      	ldr	r5, [pc, #72]	; (10c0 <sd_mmc_spi_start_read_blocks+0x80>)
    1078:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    107a:	883b      	ldrh	r3, [r7, #0]
    107c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    107e:	4a11      	ldr	r2, [pc, #68]	; (10c4 <sd_mmc_spi_start_read_blocks+0x84>)
    1080:	6811      	ldr	r1, [r2, #0]
    1082:	468c      	mov	ip, r1
    1084:	4463      	add	r3, ip
    1086:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1088:	23ff      	movs	r3, #255	; 0xff
    108a:	2202      	movs	r2, #2
    108c:	a901      	add	r1, sp, #4
    108e:	480b      	ldr	r0, [pc, #44]	; (10bc <sd_mmc_spi_start_read_blocks+0x7c>)
    1090:	47a8      	blx	r5
	while (nb_block--) {
    1092:	3c01      	subs	r4, #1
    1094:	b2a4      	uxth	r4, r4
    1096:	4b0c      	ldr	r3, [pc, #48]	; (10c8 <sd_mmc_spi_start_read_blocks+0x88>)
    1098:	429c      	cmp	r4, r3
    109a:	d1e3      	bne.n	1064 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    109c:	4640      	mov	r0, r8
    109e:	b002      	add	sp, #8
    10a0:	bc1c      	pop	{r2, r3, r4}
    10a2:	4690      	mov	r8, r2
    10a4:	469a      	mov	sl, r3
    10a6:	46a3      	mov	fp, r4
    10a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    10aa:	2301      	movs	r3, #1
    10ac:	4698      	mov	r8, r3
    10ae:	e7f5      	b.n	109c <sd_mmc_spi_start_read_blocks+0x5c>
    10b0:	2000036b 	.word	0x2000036b
    10b4:	00000c85 	.word	0x00000c85
    10b8:	20000364 	.word	0x20000364
    10bc:	20000328 	.word	0x20000328
    10c0:	00004fa1 	.word	0x00004fa1
    10c4:	20000374 	.word	0x20000374
    10c8:	0000ffff 	.word	0x0000ffff

000010cc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    10cc:	2001      	movs	r0, #1
    10ce:	4770      	bx	lr

000010d0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d2:	46c6      	mov	lr, r8
    10d4:	b500      	push	{lr}
    10d6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10d8:	2200      	movs	r2, #0
    10da:	4b15      	ldr	r3, [pc, #84]	; (1130 <sd_mmc_spi_start_write_blocks+0x60>)
    10dc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    10de:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    10e0:	4f14      	ldr	r7, [pc, #80]	; (1134 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    10e2:	4e15      	ldr	r6, [pc, #84]	; (1138 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    10e4:	e000      	b.n	10e8 <sd_mmc_spi_start_write_blocks+0x18>
{
    10e6:	0021      	movs	r1, r4
	while (nb_block--) {
    10e8:	1e4c      	subs	r4, r1, #1
    10ea:	b2a4      	uxth	r4, r4
    10ec:	2900      	cmp	r1, #0
    10ee:	d01b      	beq.n	1128 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    10f0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    10f2:	8832      	ldrh	r2, [r6, #0]
    10f4:	4643      	mov	r3, r8
    10f6:	1959      	adds	r1, r3, r5
    10f8:	4810      	ldr	r0, [pc, #64]	; (113c <sd_mmc_spi_start_write_blocks+0x6c>)
    10fa:	4b11      	ldr	r3, [pc, #68]	; (1140 <sd_mmc_spi_start_write_blocks+0x70>)
    10fc:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    10fe:	8833      	ldrh	r3, [r6, #0]
    1100:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1102:	4a10      	ldr	r2, [pc, #64]	; (1144 <sd_mmc_spi_start_write_blocks+0x74>)
    1104:	6811      	ldr	r1, [r2, #0]
    1106:	468c      	mov	ip, r1
    1108:	4463      	add	r3, ip
    110a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    110c:	4b0e      	ldr	r3, [pc, #56]	; (1148 <sd_mmc_spi_start_write_blocks+0x78>)
    110e:	4798      	blx	r3
    1110:	2800      	cmp	r0, #0
    1112:	d00a      	beq.n	112a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1114:	2c00      	cmp	r4, #0
    1116:	d0e6      	beq.n	10e6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1118:	4b0c      	ldr	r3, [pc, #48]	; (114c <sd_mmc_spi_start_write_blocks+0x7c>)
    111a:	4798      	blx	r3
    111c:	2800      	cmp	r0, #0
    111e:	d1e2      	bne.n	10e6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1120:	2205      	movs	r2, #5
    1122:	4b03      	ldr	r3, [pc, #12]	; (1130 <sd_mmc_spi_start_write_blocks+0x60>)
    1124:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1126:	e000      	b.n	112a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1128:	2001      	movs	r0, #1
}
    112a:	bc04      	pop	{r2}
    112c:	4690      	mov	r8, r2
    112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1130:	2000036b 	.word	0x2000036b
    1134:	00000b61 	.word	0x00000b61
    1138:	20000364 	.word	0x20000364
    113c:	20000328 	.word	0x20000328
    1140:	00005169 	.word	0x00005169
    1144:	20000374 	.word	0x20000374
    1148:	00000cf1 	.word	0x00000cf1
    114c:	00000ba9 	.word	0x00000ba9

00001150 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1150:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1152:	4b05      	ldr	r3, [pc, #20]	; (1168 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1154:	4798      	blx	r3
    1156:	2800      	cmp	r0, #0
    1158:	d103      	bne.n	1162 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    115a:	2205      	movs	r2, #5
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    115e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1160:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1162:	4b03      	ldr	r3, [pc, #12]	; (1170 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1164:	4798      	blx	r3
    1166:	e7fb      	b.n	1160 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1168:	00000ba9 	.word	0x00000ba9
    116c:	2000036b 	.word	0x2000036b
    1170:	00000c0d 	.word	0x00000c0d

00001174 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1174:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1176:	2000      	movs	r0, #0
    1178:	4b08      	ldr	r3, [pc, #32]	; (119c <delay_init+0x28>)
    117a:	4798      	blx	r3
    117c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    117e:	4c08      	ldr	r4, [pc, #32]	; (11a0 <delay_init+0x2c>)
    1180:	21fa      	movs	r1, #250	; 0xfa
    1182:	0089      	lsls	r1, r1, #2
    1184:	47a0      	blx	r4
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <delay_init+0x30>)
    1188:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    118a:	4907      	ldr	r1, [pc, #28]	; (11a8 <delay_init+0x34>)
    118c:	0028      	movs	r0, r5
    118e:	47a0      	blx	r4
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <delay_init+0x38>)
    1192:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1194:	2205      	movs	r2, #5
    1196:	4b06      	ldr	r3, [pc, #24]	; (11b0 <delay_init+0x3c>)
    1198:	601a      	str	r2, [r3, #0]
}
    119a:	bd70      	pop	{r4, r5, r6, pc}
    119c:	00005ea5 	.word	0x00005ea5
    11a0:	00009de9 	.word	0x00009de9
    11a4:	20000024 	.word	0x20000024
    11a8:	000f4240 	.word	0x000f4240
    11ac:	20000028 	.word	0x20000028
    11b0:	e000e010 	.word	0xe000e010

000011b4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    11b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    11b6:	4b08      	ldr	r3, [pc, #32]	; (11d8 <delay_cycles_ms+0x24>)
    11b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    11ba:	4a08      	ldr	r2, [pc, #32]	; (11dc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    11bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11be:	2180      	movs	r1, #128	; 0x80
    11c0:	0249      	lsls	r1, r1, #9
	while (n--) {
    11c2:	3801      	subs	r0, #1
    11c4:	d307      	bcc.n	11d6 <delay_cycles_ms+0x22>
	if (n > 0) {
    11c6:	2c00      	cmp	r4, #0
    11c8:	d0fb      	beq.n	11c2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    11ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    11cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11ce:	6813      	ldr	r3, [r2, #0]
    11d0:	420b      	tst	r3, r1
    11d2:	d0fc      	beq.n	11ce <delay_cycles_ms+0x1a>
    11d4:	e7f5      	b.n	11c2 <delay_cycles_ms+0xe>
	}
}
    11d6:	bd30      	pop	{r4, r5, pc}
    11d8:	20000024 	.word	0x20000024
    11dc:	e000e010 	.word	0xe000e010

000011e0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    11e0:	b510      	push	{r4, lr}
	if (gpfIsr) {
    11e2:	4b03      	ldr	r3, [pc, #12]	; (11f0 <chip_isr+0x10>)
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d000      	beq.n	11ec <chip_isr+0xc>
		gpfIsr();
    11ea:	4798      	blx	r3
	}
}
    11ec:	bd10      	pop	{r4, pc}
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	20000378 	.word	0x20000378

000011f4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    11f6:	1e44      	subs	r4, r0, #1
    11f8:	2800      	cmp	r0, #0
    11fa:	d004      	beq.n	1206 <nm_bsp_sleep+0x12>
		delay_ms(1);
    11fc:	4d02      	ldr	r5, [pc, #8]	; (1208 <nm_bsp_sleep+0x14>)
    11fe:	2001      	movs	r0, #1
    1200:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1202:	3c01      	subs	r4, #1
    1204:	d2fb      	bcs.n	11fe <nm_bsp_sleep+0xa>
	}
}
    1206:	bd70      	pop	{r4, r5, r6, pc}
    1208:	000011b5 	.word	0x000011b5

0000120c <nm_bsp_reset>:
{
    120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    120e:	4c07      	ldr	r4, [pc, #28]	; (122c <nm_bsp_reset+0x20>)
    1210:	2780      	movs	r7, #128	; 0x80
    1212:	057f      	lsls	r7, r7, #21
    1214:	6167      	str	r7, [r4, #20]
    1216:	2580      	movs	r5, #128	; 0x80
    1218:	052d      	lsls	r5, r5, #20
    121a:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    121c:	2001      	movs	r0, #1
    121e:	4e04      	ldr	r6, [pc, #16]	; (1230 <nm_bsp_reset+0x24>)
    1220:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1222:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    1224:	200a      	movs	r0, #10
    1226:	47b0      	blx	r6
    1228:	61a5      	str	r5, [r4, #24]
}
    122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    122c:	41004400 	.word	0x41004400
    1230:	000011f5 	.word	0x000011f5

00001234 <nm_bsp_init>:
{
    1234:	b570      	push	{r4, r5, r6, lr}
    1236:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1238:	2300      	movs	r3, #0
    123a:	4a16      	ldr	r2, [pc, #88]	; (1294 <nm_bsp_init+0x60>)
    123c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    123e:	ac01      	add	r4, sp, #4
    1240:	2501      	movs	r5, #1
    1242:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1244:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1246:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1248:	0021      	movs	r1, r4
    124a:	201b      	movs	r0, #27
    124c:	4e12      	ldr	r6, [pc, #72]	; (1298 <nm_bsp_init+0x64>)
    124e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1250:	0021      	movs	r1, r4
    1252:	201c      	movs	r0, #28
    1254:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1256:	0021      	movs	r1, r4
    1258:	2028      	movs	r0, #40	; 0x28
    125a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    125c:	4b0f      	ldr	r3, [pc, #60]	; (129c <nm_bsp_init+0x68>)
    125e:	2280      	movs	r2, #128	; 0x80
    1260:	0552      	lsls	r2, r2, #21
    1262:	615a      	str	r2, [r3, #20]
    1264:	2280      	movs	r2, #128	; 0x80
    1266:	0512      	lsls	r2, r2, #20
    1268:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    126a:	4b0d      	ldr	r3, [pc, #52]	; (12a0 <nm_bsp_init+0x6c>)
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	421d      	tst	r5, r3
    1270:	d003      	beq.n	127a <nm_bsp_init+0x46>
    1272:	4b0b      	ldr	r3, [pc, #44]	; (12a0 <nm_bsp_init+0x6c>)
    1274:	681b      	ldr	r3, [r3, #0]
    1276:	079b      	lsls	r3, r3, #30
    1278:	d401      	bmi.n	127e <nm_bsp_init+0x4a>
	    delay_init();
    127a:	4b0a      	ldr	r3, [pc, #40]	; (12a4 <nm_bsp_init+0x70>)
    127c:	4798      	blx	r3
	nm_bsp_reset();
    127e:	4b0a      	ldr	r3, [pc, #40]	; (12a8 <nm_bsp_init+0x74>)
    1280:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1282:	2201      	movs	r2, #1
    1284:	4b09      	ldr	r3, [pc, #36]	; (12ac <nm_bsp_init+0x78>)
    1286:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1288:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    128c:	b662      	cpsie	i
}
    128e:	2000      	movs	r0, #0
    1290:	b002      	add	sp, #8
    1292:	bd70      	pop	{r4, r5, r6, pc}
    1294:	20000378 	.word	0x20000378
    1298:	0000466d 	.word	0x0000466d
    129c:	41004400 	.word	0x41004400
    12a0:	e000e010 	.word	0xe000e010
    12a4:	00001175 	.word	0x00001175
    12a8:	0000120d 	.word	0x0000120d
    12ac:	2000002e 	.word	0x2000002e

000012b0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    12b0:	b510      	push	{r4, lr}
    12b2:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    12b4:	4b0e      	ldr	r3, [pc, #56]	; (12f0 <nm_bsp_register_isr+0x40>)
    12b6:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    12b8:	ac01      	add	r4, sp, #4
    12ba:	0020      	movs	r0, r4
    12bc:	4b0d      	ldr	r3, [pc, #52]	; (12f4 <nm_bsp_register_isr+0x44>)
    12be:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    12c0:	2329      	movs	r3, #41	; 0x29
    12c2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    12c4:	2300      	movs	r3, #0
    12c6:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    12c8:	3301      	adds	r3, #1
    12ca:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    12cc:	3301      	adds	r3, #1
    12ce:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    12d0:	0021      	movs	r1, r4
    12d2:	2009      	movs	r0, #9
    12d4:	4b08      	ldr	r3, [pc, #32]	; (12f8 <nm_bsp_register_isr+0x48>)
    12d6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    12d8:	2200      	movs	r2, #0
    12da:	2109      	movs	r1, #9
    12dc:	4807      	ldr	r0, [pc, #28]	; (12fc <nm_bsp_register_isr+0x4c>)
    12de:	4b08      	ldr	r3, [pc, #32]	; (1300 <nm_bsp_register_isr+0x50>)
    12e0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    12e2:	2100      	movs	r1, #0
    12e4:	2009      	movs	r0, #9
    12e6:	4b07      	ldr	r3, [pc, #28]	; (1304 <nm_bsp_register_isr+0x54>)
    12e8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    12ea:	b004      	add	sp, #16
    12ec:	bd10      	pop	{r4, pc}
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	20000378 	.word	0x20000378
    12f4:	000045e1 	.word	0x000045e1
    12f8:	000045f5 	.word	0x000045f5
    12fc:	000011e1 	.word	0x000011e1
    1300:	0000449d 	.word	0x0000449d
    1304:	000044c9 	.word	0x000044c9

00001308 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1308:	b510      	push	{r4, lr}
	if (u8Enable) {
    130a:	2800      	cmp	r0, #0
    130c:	d104      	bne.n	1318 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    130e:	2100      	movs	r1, #0
    1310:	2009      	movs	r0, #9
    1312:	4b04      	ldr	r3, [pc, #16]	; (1324 <nm_bsp_interrupt_ctrl+0x1c>)
    1314:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1316:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1318:	2100      	movs	r1, #0
    131a:	2009      	movs	r0, #9
    131c:	4b02      	ldr	r3, [pc, #8]	; (1328 <nm_bsp_interrupt_ctrl+0x20>)
    131e:	4798      	blx	r3
    1320:	e7f9      	b.n	1316 <nm_bsp_interrupt_ctrl+0xe>
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	000044e9 	.word	0x000044e9
    1328:	000044c9 	.word	0x000044c9

0000132c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    132c:	b530      	push	{r4, r5, lr}
    132e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1330:	4c30      	ldr	r4, [pc, #192]	; (13f4 <nm_bus_init+0xc8>)
    1332:	230e      	movs	r3, #14
    1334:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1336:	2300      	movs	r3, #0
    1338:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    133a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    133c:	a901      	add	r1, sp, #4
    133e:	2201      	movs	r2, #1
    1340:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1342:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1344:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1346:	200e      	movs	r0, #14
    1348:	4b2b      	ldr	r3, [pc, #172]	; (13f8 <nm_bus_init+0xcc>)
    134a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    134c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    134e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1350:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1352:	2900      	cmp	r1, #0
    1354:	d104      	bne.n	1360 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    1356:	0953      	lsrs	r3, r2, #5
    1358:	01db      	lsls	r3, r3, #7
    135a:	4928      	ldr	r1, [pc, #160]	; (13fc <nm_bus_init+0xd0>)
    135c:	468c      	mov	ip, r1
    135e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1360:	211f      	movs	r1, #31
    1362:	4011      	ands	r1, r2
    1364:	2201      	movs	r2, #1
    1366:	0010      	movs	r0, r2
    1368:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    136a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    136c:	ac02      	add	r4, sp, #8
    136e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1370:	2300      	movs	r3, #0
    1372:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1374:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1376:	21c0      	movs	r1, #192	; 0xc0
    1378:	0389      	lsls	r1, r1, #14
    137a:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    137c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    137e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1380:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1382:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    1384:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1386:	3223      	adds	r2, #35	; 0x23
    1388:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    138a:	3a18      	subs	r2, #24
    138c:	2100      	movs	r1, #0
    138e:	a808      	add	r0, sp, #32
    1390:	4b1b      	ldr	r3, [pc, #108]	; (1400 <nm_bus_init+0xd4>)
    1392:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    1394:	4b1b      	ldr	r3, [pc, #108]	; (1404 <nm_bus_init+0xd8>)
    1396:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    1398:	4b1b      	ldr	r3, [pc, #108]	; (1408 <nm_bus_init+0xdc>)
    139a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    139c:	2301      	movs	r3, #1
    139e:	425b      	negs	r3, r3
    13a0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    13a2:	4b1a      	ldr	r3, [pc, #104]	; (140c <nm_bus_init+0xe0>)
    13a4:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    13a6:	4b1a      	ldr	r3, [pc, #104]	; (1410 <nm_bus_init+0xe4>)
    13a8:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    13aa:	0022      	movs	r2, r4
    13ac:	4919      	ldr	r1, [pc, #100]	; (1414 <nm_bus_init+0xe8>)
    13ae:	481a      	ldr	r0, [pc, #104]	; (1418 <nm_bus_init+0xec>)
    13b0:	4b1a      	ldr	r3, [pc, #104]	; (141c <nm_bus_init+0xf0>)
    13b2:	4798      	blx	r3
    13b4:	2800      	cmp	r0, #0
    13b6:	d11a      	bne.n	13ee <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13b8:	4d17      	ldr	r5, [pc, #92]	; (1418 <nm_bus_init+0xec>)
    13ba:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13bc:	0020      	movs	r0, r4
    13be:	4b18      	ldr	r3, [pc, #96]	; (1420 <nm_bus_init+0xf4>)
    13c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13c2:	231f      	movs	r3, #31
    13c4:	4018      	ands	r0, r3
    13c6:	3b1e      	subs	r3, #30
    13c8:	4083      	lsls	r3, r0
    13ca:	4a16      	ldr	r2, [pc, #88]	; (1424 <nm_bus_init+0xf8>)
    13cc:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    13ce:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    13d0:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    13d2:	2b00      	cmp	r3, #0
    13d4:	d1fc      	bne.n	13d0 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    13d6:	6823      	ldr	r3, [r4, #0]
    13d8:	2202      	movs	r2, #2
    13da:	4313      	orrs	r3, r2
    13dc:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    13de:	4b12      	ldr	r3, [pc, #72]	; (1428 <nm_bus_init+0xfc>)
    13e0:	4798      	blx	r3
	nm_bsp_sleep(1);
    13e2:	2001      	movs	r0, #1
    13e4:	4b11      	ldr	r3, [pc, #68]	; (142c <nm_bus_init+0x100>)
    13e6:	4798      	blx	r3
#endif
	return result;
    13e8:	2000      	movs	r0, #0
}
    13ea:	b011      	add	sp, #68	; 0x44
    13ec:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    13ee:	2006      	movs	r0, #6
    13f0:	4240      	negs	r0, r0
    13f2:	e7fa      	b.n	13ea <nm_bus_init+0xbe>
    13f4:	20000480 	.word	0x20000480
    13f8:	0000466d 	.word	0x0000466d
    13fc:	41004400 	.word	0x41004400
    1400:	0000a1db 	.word	0x0000a1db
    1404:	000c0002 	.word	0x000c0002
    1408:	000d0002 	.word	0x000d0002
    140c:	000f0002 	.word	0x000f0002
    1410:	00b71b00 	.word	0x00b71b00
    1414:	42001000 	.word	0x42001000
    1418:	20000484 	.word	0x20000484
    141c:	00004dc9 	.word	0x00004dc9
    1420:	00004c81 	.word	0x00004c81
    1424:	e000e100 	.word	0xe000e100
    1428:	0000120d 	.word	0x0000120d
    142c:	000011f5 	.word	0x000011f5

00001430 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1430:	b5f0      	push	{r4, r5, r6, r7, lr}
    1432:	46de      	mov	lr, fp
    1434:	4657      	mov	r7, sl
    1436:	464e      	mov	r6, r9
    1438:	4645      	mov	r5, r8
    143a:	b5e0      	push	{r5, r6, r7, lr}
    143c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    143e:	2803      	cmp	r0, #3
    1440:	d000      	beq.n	1444 <nm_bus_ioctl+0x14>
    1442:	e075      	b.n	1530 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1444:	680e      	ldr	r6, [r1, #0]
    1446:	684d      	ldr	r5, [r1, #4]
    1448:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    144a:	2200      	movs	r2, #0
    144c:	466b      	mov	r3, sp
    144e:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    1450:	2d00      	cmp	r5, #0
    1452:	d027      	beq.n	14a4 <nm_bus_ioctl+0x74>
    1454:	2c00      	cmp	r4, #0
    1456:	d065      	beq.n	1524 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    1458:	2e00      	cmp	r6, #0
    145a:	d100      	bne.n	145e <nm_bus_ioctl+0x2e>
    145c:	e077      	b.n	154e <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    145e:	2300      	movs	r3, #0
    1460:	4698      	mov	r8, r3
    1462:	2300      	movs	r3, #0
    1464:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    1466:	2201      	movs	r2, #1
    1468:	493b      	ldr	r1, [pc, #236]	; (1558 <nm_bus_ioctl+0x128>)
    146a:	483c      	ldr	r0, [pc, #240]	; (155c <nm_bus_ioctl+0x12c>)
    146c:	4b3c      	ldr	r3, [pc, #240]	; (1560 <nm_bus_ioctl+0x130>)
    146e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1470:	4b3a      	ldr	r3, [pc, #232]	; (155c <nm_bus_ioctl+0x12c>)
    1472:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    1474:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    1476:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1478:	4699      	mov	r9, r3
			pu8Miso++;
    147a:	4659      	mov	r1, fp
    147c:	424b      	negs	r3, r1
    147e:	4159      	adcs	r1, r3
    1480:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    1482:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1484:	4653      	mov	r3, sl
    1486:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1488:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    148a:	4239      	tst	r1, r7
    148c:	d0fc      	beq.n	1488 <nm_bus_ioctl+0x58>
    148e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1490:	4239      	tst	r1, r7
    1492:	d0fc      	beq.n	148e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1494:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1496:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    1498:	4211      	tst	r1, r2
    149a:	d0fc      	beq.n	1496 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    149c:	4649      	mov	r1, r9
    149e:	7989      	ldrb	r1, [r1, #6]
    14a0:	468c      	mov	ip, r1
    14a2:	e011      	b.n	14c8 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    14a4:	2e00      	cmp	r6, #0
    14a6:	d03a      	beq.n	151e <nm_bus_ioctl+0xee>
    14a8:	2c00      	cmp	r4, #0
    14aa:	d03e      	beq.n	152a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    14ac:	2300      	movs	r3, #0
    14ae:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    14b0:	3301      	adds	r3, #1
    14b2:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    14b4:	466b      	mov	r3, sp
    14b6:	1ddd      	adds	r5, r3, #7
    14b8:	e7d5      	b.n	1466 <nm_bus_ioctl+0x36>
    14ba:	4660      	mov	r0, ip
    14bc:	2801      	cmp	r0, #1
    14be:	d00d      	beq.n	14dc <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    14c2:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    14c4:	2900      	cmp	r1, #0
    14c6:	d00d      	beq.n	14e4 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14c8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    14ca:	4211      	tst	r1, r2
    14cc:	d0fc      	beq.n	14c8 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14ce:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    14d0:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    14d2:	4210      	tst	r0, r2
    14d4:	d0f1      	beq.n	14ba <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    14d6:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    14d8:	311e      	adds	r1, #30
    14da:	e7ee      	b.n	14ba <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    14de:	05c0      	lsls	r0, r0, #23
    14e0:	0dc0      	lsrs	r0, r0, #23
    14e2:	e7ef      	b.n	14c4 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    14e4:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    14e6:	3c01      	subs	r4, #1
    14e8:	b2a4      	uxth	r4, r4
			pu8Miso++;
    14ea:	445d      	add	r5, fp
			pu8Mosi++;
    14ec:	4643      	mov	r3, r8
    14ee:	4259      	negs	r1, r3
    14f0:	414b      	adcs	r3, r1
    14f2:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    14f4:	2c00      	cmp	r4, #0
    14f6:	d1c4      	bne.n	1482 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    14f8:	4b18      	ldr	r3, [pc, #96]	; (155c <nm_bus_ioctl+0x12c>)
    14fa:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    14fc:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    14fe:	7e0b      	ldrb	r3, [r1, #24]
    1500:	4213      	tst	r3, r2
    1502:	d0fc      	beq.n	14fe <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1504:	2200      	movs	r2, #0
    1506:	4914      	ldr	r1, [pc, #80]	; (1558 <nm_bus_ioctl+0x128>)
    1508:	4814      	ldr	r0, [pc, #80]	; (155c <nm_bus_ioctl+0x12c>)
    150a:	4b15      	ldr	r3, [pc, #84]	; (1560 <nm_bus_ioctl+0x130>)
    150c:	4798      	blx	r3
	return M2M_SUCCESS;
    150e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1510:	b003      	add	sp, #12
    1512:	bc3c      	pop	{r2, r3, r4, r5}
    1514:	4690      	mov	r8, r2
    1516:	4699      	mov	r9, r3
    1518:	46a2      	mov	sl, r4
    151a:	46ab      	mov	fp, r5
    151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    151e:	200f      	movs	r0, #15
    1520:	4240      	negs	r0, r0
    1522:	e7f5      	b.n	1510 <nm_bus_ioctl+0xe0>
    1524:	200f      	movs	r0, #15
    1526:	4240      	negs	r0, r0
    1528:	e7f2      	b.n	1510 <nm_bus_ioctl+0xe0>
    152a:	200f      	movs	r0, #15
    152c:	4240      	negs	r0, r0
		break;
    152e:	e7ef      	b.n	1510 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1530:	220e      	movs	r2, #14
    1532:	32ff      	adds	r2, #255	; 0xff
    1534:	490b      	ldr	r1, [pc, #44]	; (1564 <nm_bus_ioctl+0x134>)
    1536:	480c      	ldr	r0, [pc, #48]	; (1568 <nm_bus_ioctl+0x138>)
    1538:	4b0c      	ldr	r3, [pc, #48]	; (156c <nm_bus_ioctl+0x13c>)
    153a:	4798      	blx	r3
    153c:	480c      	ldr	r0, [pc, #48]	; (1570 <nm_bus_ioctl+0x140>)
    153e:	4b0d      	ldr	r3, [pc, #52]	; (1574 <nm_bus_ioctl+0x144>)
    1540:	4798      	blx	r3
    1542:	200d      	movs	r0, #13
    1544:	4b0c      	ldr	r3, [pc, #48]	; (1578 <nm_bus_ioctl+0x148>)
    1546:	4798      	blx	r3
			s8Ret = -1;
    1548:	2001      	movs	r0, #1
    154a:	4240      	negs	r0, r0
	return s8Ret;
    154c:	e7e0      	b.n	1510 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    154e:	2301      	movs	r3, #1
    1550:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    1552:	466b      	mov	r3, sp
    1554:	1dde      	adds	r6, r3, #7
    1556:	e784      	b.n	1462 <nm_bus_ioctl+0x32>
    1558:	20000480 	.word	0x20000480
    155c:	20000484 	.word	0x20000484
    1560:	00005075 	.word	0x00005075
    1564:	0000b9c8 	.word	0x0000b9c8
    1568:	0000b9d8 	.word	0x0000b9d8
    156c:	0000a33d 	.word	0x0000a33d
    1570:	0000b9ec 	.word	0x0000b9ec
    1574:	0000a459 	.word	0x0000a459
    1578:	0000a371 	.word	0x0000a371

0000157c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    157c:	b530      	push	{r4, r5, lr}
    157e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1580:	ab01      	add	r3, sp, #4
    1582:	2200      	movs	r2, #0
    1584:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    1586:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1588:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    158a:	4d13      	ldr	r5, [pc, #76]	; (15d8 <nm_bus_deinit+0x5c>)
    158c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    158e:	0020      	movs	r0, r4
    1590:	4b12      	ldr	r3, [pc, #72]	; (15dc <nm_bus_deinit+0x60>)
    1592:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1594:	231f      	movs	r3, #31
    1596:	4018      	ands	r0, r3
    1598:	3b1e      	subs	r3, #30
    159a:	4083      	lsls	r3, r0
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	4910      	ldr	r1, [pc, #64]	; (15e0 <nm_bus_deinit+0x64>)
    15a0:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15a2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    15a4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    15a6:	2b00      	cmp	r3, #0
    15a8:	d1fc      	bne.n	15a4 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    15aa:	338f      	adds	r3, #143	; 0x8f
    15ac:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    15ae:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    15b0:	6823      	ldr	r3, [r4, #0]
    15b2:	2202      	movs	r2, #2
    15b4:	4393      	bics	r3, r2
    15b6:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    15b8:	a901      	add	r1, sp, #4
    15ba:	200c      	movs	r0, #12
    15bc:	4c09      	ldr	r4, [pc, #36]	; (15e4 <nm_bus_deinit+0x68>)
    15be:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    15c0:	a901      	add	r1, sp, #4
    15c2:	200f      	movs	r0, #15
    15c4:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    15c6:	a901      	add	r1, sp, #4
    15c8:	200d      	movs	r0, #13
    15ca:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    15cc:	a901      	add	r1, sp, #4
    15ce:	200e      	movs	r0, #14
    15d0:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    15d2:	2000      	movs	r0, #0
    15d4:	b003      	add	sp, #12
    15d6:	bd30      	pop	{r4, r5, pc}
    15d8:	20000484 	.word	0x20000484
    15dc:	00004c81 	.word	0x00004c81
    15e0:	e000e100 	.word	0xe000e100
    15e4:	0000466d 	.word	0x0000466d

000015e8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    15e8:	2a00      	cmp	r2, #0
    15ea:	d006      	beq.n	15fa <m2m_memcpy+0x12>
    15ec:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    15ee:	780b      	ldrb	r3, [r1, #0]
    15f0:	7003      	strb	r3, [r0, #0]
		pDst++;
    15f2:	3001      	adds	r0, #1
		pSrc++;
    15f4:	3101      	adds	r1, #1
	}while(--sz);
    15f6:	4290      	cmp	r0, r2
    15f8:	d1f9      	bne.n	15ee <m2m_memcpy+0x6>
}
    15fa:	4770      	bx	lr

000015fc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    15fc:	2a00      	cmp	r2, #0
    15fe:	d004      	beq.n	160a <m2m_memset+0xe>
    1600:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1602:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1604:	3001      	adds	r0, #1
	}while(--sz);
    1606:	4290      	cmp	r0, r2
    1608:	d1fb      	bne.n	1602 <m2m_memset+0x6>
}
    160a:	4770      	bx	lr

0000160c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    160c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    160e:	7802      	ldrb	r2, [r0, #0]
    1610:	2a00      	cmp	r2, #0
    1612:	d007      	beq.n	1624 <m2m_strlen+0x18>
    1614:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    1616:	3001      	adds	r0, #1
    1618:	b280      	uxth	r0, r0
		pcStr++;
    161a:	3301      	adds	r3, #1
	while(*pcStr)
    161c:	781a      	ldrb	r2, [r3, #0]
    161e:	2a00      	cmp	r2, #0
    1620:	d1f9      	bne.n	1616 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1622:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1624:	2000      	movs	r0, #0
    1626:	e7fc      	b.n	1622 <m2m_strlen+0x16>

00001628 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1628:	4a02      	ldr	r2, [pc, #8]	; (1634 <isr+0xc>)
    162a:	78d3      	ldrb	r3, [r2, #3]
    162c:	3301      	adds	r3, #1
    162e:	b2db      	uxtb	r3, r3
    1630:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    1632:	4770      	bx	lr
    1634:	200004c0 	.word	0x200004c0

00001638 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1638:	4770      	bx	lr
	...

0000163c <hif_set_rx_done>:
{
    163c:	b500      	push	{lr}
    163e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1640:	2200      	movs	r2, #0
    1642:	4b0a      	ldr	r3, [pc, #40]	; (166c <hif_set_rx_done+0x30>)
    1644:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    1646:	2001      	movs	r0, #1
    1648:	4b09      	ldr	r3, [pc, #36]	; (1670 <hif_set_rx_done+0x34>)
    164a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    164c:	a901      	add	r1, sp, #4
    164e:	4809      	ldr	r0, [pc, #36]	; (1674 <hif_set_rx_done+0x38>)
    1650:	4b09      	ldr	r3, [pc, #36]	; (1678 <hif_set_rx_done+0x3c>)
    1652:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1654:	2800      	cmp	r0, #0
    1656:	d001      	beq.n	165c <hif_set_rx_done+0x20>
}
    1658:	b003      	add	sp, #12
    165a:	bd00      	pop	{pc}
	reg |= NBIT1;
    165c:	2102      	movs	r1, #2
    165e:	9b01      	ldr	r3, [sp, #4]
    1660:	4319      	orrs	r1, r3
    1662:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1664:	4803      	ldr	r0, [pc, #12]	; (1674 <hif_set_rx_done+0x38>)
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <hif_set_rx_done+0x40>)
    1668:	4798      	blx	r3
    166a:	e7f5      	b.n	1658 <hif_set_rx_done+0x1c>
    166c:	200004c0 	.word	0x200004c0
    1670:	00001309 	.word	0x00001309
    1674:	00001070 	.word	0x00001070
    1678:	00002a45 	.word	0x00002a45
    167c:	00002a51 	.word	0x00002a51

00001680 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1680:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    1682:	4b0c      	ldr	r3, [pc, #48]	; (16b4 <hif_chip_wake+0x34>)
    1684:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    1686:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    1688:	2b00      	cmp	r3, #0
    168a:	d10d      	bne.n	16a8 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    168c:	4b09      	ldr	r3, [pc, #36]	; (16b4 <hif_chip_wake+0x34>)
    168e:	785b      	ldrb	r3, [r3, #1]
    1690:	2b00      	cmp	r3, #0
    1692:	d103      	bne.n	169c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    1694:	4b07      	ldr	r3, [pc, #28]	; (16b4 <hif_chip_wake+0x34>)
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	2b00      	cmp	r3, #0
    169a:	d106      	bne.n	16aa <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    169c:	4a05      	ldr	r2, [pc, #20]	; (16b4 <hif_chip_wake+0x34>)
    169e:	7853      	ldrb	r3, [r2, #1]
    16a0:	3301      	adds	r3, #1
    16a2:	b2db      	uxtb	r3, r3
    16a4:	7053      	strb	r3, [r2, #1]
    16a6:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    16a8:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    16aa:	4b03      	ldr	r3, [pc, #12]	; (16b8 <hif_chip_wake+0x38>)
    16ac:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    16ae:	2800      	cmp	r0, #0
    16b0:	d0f4      	beq.n	169c <hif_chip_wake+0x1c>
    16b2:	e7f9      	b.n	16a8 <hif_chip_wake+0x28>
    16b4:	200004c0 	.word	0x200004c0
    16b8:	0000272d 	.word	0x0000272d

000016bc <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    16bc:	4b05      	ldr	r3, [pc, #20]	; (16d4 <hif_chip_sleep_sc+0x18>)
    16be:	785b      	ldrb	r3, [r3, #1]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d004      	beq.n	16ce <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    16c4:	4a03      	ldr	r2, [pc, #12]	; (16d4 <hif_chip_sleep_sc+0x18>)
    16c6:	7853      	ldrb	r3, [r2, #1]
    16c8:	3b01      	subs	r3, #1
    16ca:	b2db      	uxtb	r3, r3
    16cc:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    16ce:	2000      	movs	r0, #0
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	200004c0 	.word	0x200004c0

000016d8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    16d8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    16da:	4b0b      	ldr	r3, [pc, #44]	; (1708 <hif_chip_sleep+0x30>)
    16dc:	785b      	ldrb	r3, [r3, #1]
    16de:	2b00      	cmp	r3, #0
    16e0:	d004      	beq.n	16ec <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    16e2:	4a09      	ldr	r2, [pc, #36]	; (1708 <hif_chip_sleep+0x30>)
    16e4:	7853      	ldrb	r3, [r2, #1]
    16e6:	3b01      	subs	r3, #1
    16e8:	b2db      	uxtb	r3, r3
    16ea:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <hif_chip_sleep+0x30>)
    16ee:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    16f0:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    16f2:	2b00      	cmp	r3, #0
    16f4:	d103      	bne.n	16fe <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    16f6:	4b04      	ldr	r3, [pc, #16]	; (1708 <hif_chip_sleep+0x30>)
    16f8:	781b      	ldrb	r3, [r3, #0]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d100      	bne.n	1700 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    16fe:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1700:	4b02      	ldr	r3, [pc, #8]	; (170c <hif_chip_sleep+0x34>)
    1702:	4798      	blx	r3
    1704:	e7fb      	b.n	16fe <hif_chip_sleep+0x26>
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	200004c0 	.word	0x200004c0
    170c:	000026c5 	.word	0x000026c5

00001710 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1710:	b5f0      	push	{r4, r5, r6, r7, lr}
    1712:	46de      	mov	lr, fp
    1714:	4657      	mov	r7, sl
    1716:	b580      	push	{r7, lr}
    1718:	b089      	sub	sp, #36	; 0x24
    171a:	4683      	mov	fp, r0
    171c:	468a      	mov	sl, r1
    171e:	9201      	str	r2, [sp, #4]
    1720:	9300      	str	r3, [sp, #0]
    1722:	ab10      	add	r3, sp, #64	; 0x40
    1724:	cb80      	ldmia	r3!, {r7}
    1726:	881e      	ldrh	r6, [r3, #0]
    1728:	ab12      	add	r3, sp, #72	; 0x48
    172a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    172c:	227f      	movs	r2, #127	; 0x7f
    172e:	400a      	ands	r2, r1
    1730:	ab07      	add	r3, sp, #28
    1732:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1734:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1736:	2208      	movs	r2, #8
    1738:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    173a:	2f00      	cmp	r7, #0
    173c:	d03d      	beq.n	17ba <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    173e:	885a      	ldrh	r2, [r3, #2]
    1740:	1992      	adds	r2, r2, r6
    1742:	18aa      	adds	r2, r5, r2
    1744:	b292      	uxth	r2, r2
    1746:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    1748:	4b69      	ldr	r3, [pc, #420]	; (18f0 <hif_send+0x1e0>)
    174a:	4798      	blx	r3
    174c:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    174e:	d000      	beq.n	1752 <hif_send+0x42>
    1750:	e0c1      	b.n	18d6 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    1752:	2300      	movs	r3, #0
    1754:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    1756:	aa02      	add	r2, sp, #8
    1758:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    175a:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    175c:	9b04      	ldr	r3, [sp, #16]
    175e:	465a      	mov	r2, fp
    1760:	431a      	orrs	r2, r3
    1762:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    1764:	9a04      	ldr	r2, [sp, #16]
    1766:	4653      	mov	r3, sl
    1768:	021b      	lsls	r3, r3, #8
    176a:	4313      	orrs	r3, r2
    176c:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    176e:	ab07      	add	r3, sp, #28
    1770:	885b      	ldrh	r3, [r3, #2]
    1772:	9a04      	ldr	r2, [sp, #16]
    1774:	041b      	lsls	r3, r3, #16
    1776:	4313      	orrs	r3, r2
    1778:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    177a:	9904      	ldr	r1, [sp, #16]
    177c:	485d      	ldr	r0, [pc, #372]	; (18f4 <hif_send+0x1e4>)
    177e:	4b5e      	ldr	r3, [pc, #376]	; (18f8 <hif_send+0x1e8>)
    1780:	4798      	blx	r3
    1782:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1784:	d157      	bne.n	1836 <hif_send+0x126>

		reg = 0UL;
    1786:	2300      	movs	r3, #0
    1788:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    178a:	9b04      	ldr	r3, [sp, #16]
    178c:	2202      	movs	r2, #2
    178e:	4313      	orrs	r3, r2
    1790:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1792:	9904      	ldr	r1, [sp, #16]
    1794:	4859      	ldr	r0, [pc, #356]	; (18fc <hif_send+0x1ec>)
    1796:	4b58      	ldr	r3, [pc, #352]	; (18f8 <hif_send+0x1e8>)
    1798:	4798      	blx	r3
    179a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    179c:	d14b      	bne.n	1836 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    179e:	2200      	movs	r2, #0
    17a0:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    17a2:	ab02      	add	r3, sp, #8
    17a4:	80da      	strh	r2, [r3, #6]
    17a6:	3306      	adds	r3, #6
    17a8:	881b      	ldrh	r3, [r3, #0]
    17aa:	b29b      	uxth	r3, r3
    17ac:	4a54      	ldr	r2, [pc, #336]	; (1900 <hif_send+0x1f0>)
    17ae:	4293      	cmp	r3, r2
    17b0:	d849      	bhi.n	1846 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    17b2:	4c54      	ldr	r4, [pc, #336]	; (1904 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    17b4:	4b54      	ldr	r3, [pc, #336]	; (1908 <hif_send+0x1f8>)
    17b6:	469a      	mov	sl, r3
    17b8:	e017      	b.n	17ea <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    17ba:	ab07      	add	r3, sp, #28
    17bc:	885a      	ldrh	r2, [r3, #2]
    17be:	9900      	ldr	r1, [sp, #0]
    17c0:	468c      	mov	ip, r1
    17c2:	4462      	add	r2, ip
    17c4:	b292      	uxth	r2, r2
    17c6:	805a      	strh	r2, [r3, #2]
    17c8:	e7be      	b.n	1748 <hif_send+0x38>
				nm_bsp_sleep(1);
    17ca:	2001      	movs	r0, #1
    17cc:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    17ce:	9b04      	ldr	r3, [sp, #16]
    17d0:	079b      	lsls	r3, r3, #30
    17d2:	d528      	bpl.n	1826 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    17d4:	ab02      	add	r3, sp, #8
    17d6:	88da      	ldrh	r2, [r3, #6]
    17d8:	3201      	adds	r2, #1
    17da:	b292      	uxth	r2, r2
    17dc:	80da      	strh	r2, [r3, #6]
    17de:	3306      	adds	r3, #6
    17e0:	881b      	ldrh	r3, [r3, #0]
    17e2:	b29b      	uxth	r3, r3
    17e4:	4a46      	ldr	r2, [pc, #280]	; (1900 <hif_send+0x1f0>)
    17e6:	4293      	cmp	r3, r2
    17e8:	d82d      	bhi.n	1846 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    17ea:	a904      	add	r1, sp, #16
    17ec:	4843      	ldr	r0, [pc, #268]	; (18fc <hif_send+0x1ec>)
    17ee:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    17f0:	2800      	cmp	r0, #0
    17f2:	d128      	bne.n	1846 <hif_send+0x136>
			if(cnt >= 500) {
    17f4:	ab02      	add	r3, sp, #8
    17f6:	3306      	adds	r3, #6
    17f8:	881b      	ldrh	r3, [r3, #0]
    17fa:	b29b      	uxth	r3, r3
    17fc:	22f4      	movs	r2, #244	; 0xf4
    17fe:	32ff      	adds	r2, #255	; 0xff
    1800:	4293      	cmp	r3, r2
    1802:	d9e4      	bls.n	17ce <hif_send+0xbe>
				if(cnt < 501) {
    1804:	ab02      	add	r3, sp, #8
    1806:	3306      	adds	r3, #6
    1808:	881b      	ldrh	r3, [r3, #0]
    180a:	b29b      	uxth	r3, r3
    180c:	3201      	adds	r2, #1
    180e:	4293      	cmp	r3, r2
    1810:	d8db      	bhi.n	17ca <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1812:	483e      	ldr	r0, [pc, #248]	; (190c <hif_send+0x1fc>)
    1814:	4b3e      	ldr	r3, [pc, #248]	; (1910 <hif_send+0x200>)
    1816:	4798      	blx	r3
    1818:	483e      	ldr	r0, [pc, #248]	; (1914 <hif_send+0x204>)
    181a:	4b3f      	ldr	r3, [pc, #252]	; (1918 <hif_send+0x208>)
    181c:	4798      	blx	r3
    181e:	200d      	movs	r0, #13
    1820:	4b3e      	ldr	r3, [pc, #248]	; (191c <hif_send+0x20c>)
    1822:	4798      	blx	r3
    1824:	e7d1      	b.n	17ca <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    1826:	a905      	add	r1, sp, #20
    1828:	483d      	ldr	r0, [pc, #244]	; (1920 <hif_send+0x210>)
    182a:	4b36      	ldr	r3, [pc, #216]	; (1904 <hif_send+0x1f4>)
    182c:	4798      	blx	r3
    182e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1830:	d009      	beq.n	1846 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1832:	2300      	movs	r3, #0
    1834:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    1836:	4b3b      	ldr	r3, [pc, #236]	; (1924 <hif_send+0x214>)
    1838:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    183a:	0020      	movs	r0, r4
    183c:	b009      	add	sp, #36	; 0x24
    183e:	bc0c      	pop	{r2, r3}
    1840:	4692      	mov	sl, r2
    1842:	469b      	mov	fp, r3
    1844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    1846:	9b05      	ldr	r3, [sp, #20]
    1848:	2b00      	cmp	r3, #0
    184a:	d03f      	beq.n	18cc <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    184c:	9b05      	ldr	r3, [sp, #20]
    184e:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1850:	a907      	add	r1, sp, #28
    1852:	884b      	ldrh	r3, [r1, #2]
    1854:	b29b      	uxth	r3, r3
    1856:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1858:	9806      	ldr	r0, [sp, #24]
    185a:	2208      	movs	r2, #8
    185c:	4b32      	ldr	r3, [pc, #200]	; (1928 <hif_send+0x218>)
    185e:	4798      	blx	r3
    1860:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1862:	d1e8      	bne.n	1836 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1864:	9b06      	ldr	r3, [sp, #24]
    1866:	3308      	adds	r3, #8
    1868:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    186a:	9b01      	ldr	r3, [sp, #4]
    186c:	2b00      	cmp	r3, #0
    186e:	d00b      	beq.n	1888 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1870:	9806      	ldr	r0, [sp, #24]
    1872:	9a00      	ldr	r2, [sp, #0]
    1874:	0019      	movs	r1, r3
    1876:	4b2c      	ldr	r3, [pc, #176]	; (1928 <hif_send+0x218>)
    1878:	4798      	blx	r3
    187a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    187c:	d1db      	bne.n	1836 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    187e:	9b06      	ldr	r3, [sp, #24]
    1880:	9a00      	ldr	r2, [sp, #0]
    1882:	4694      	mov	ip, r2
    1884:	4463      	add	r3, ip
    1886:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    1888:	2f00      	cmp	r7, #0
    188a:	d00e      	beq.n	18aa <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    188c:	9b06      	ldr	r3, [sp, #24]
    188e:	9a00      	ldr	r2, [sp, #0]
    1890:	1aad      	subs	r5, r5, r2
    1892:	18ed      	adds	r5, r5, r3
    1894:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1896:	9806      	ldr	r0, [sp, #24]
    1898:	0032      	movs	r2, r6
    189a:	0039      	movs	r1, r7
    189c:	4b22      	ldr	r3, [pc, #136]	; (1928 <hif_send+0x218>)
    189e:	4798      	blx	r3
    18a0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    18a2:	d1c8      	bne.n	1836 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    18a4:	9b06      	ldr	r3, [sp, #24]
    18a6:	18f3      	adds	r3, r6, r3
    18a8:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    18aa:	9b05      	ldr	r3, [sp, #20]
    18ac:	009b      	lsls	r3, r3, #2
    18ae:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    18b0:	9b04      	ldr	r3, [sp, #16]
    18b2:	2202      	movs	r2, #2
    18b4:	4313      	orrs	r3, r2
    18b6:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    18b8:	9904      	ldr	r1, [sp, #16]
    18ba:	481c      	ldr	r0, [pc, #112]	; (192c <hif_send+0x21c>)
    18bc:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <hif_send+0x1e8>)
    18be:	4798      	blx	r3
    18c0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    18c2:	d1b8      	bne.n	1836 <hif_send+0x126>
 	ret = hif_chip_sleep();
    18c4:	4b1a      	ldr	r3, [pc, #104]	; (1930 <hif_send+0x220>)
    18c6:	4798      	blx	r3
    18c8:	0004      	movs	r4, r0
	return ret;
    18ca:	e7b6      	b.n	183a <hif_send+0x12a>
			ret = hif_chip_sleep();
    18cc:	4b18      	ldr	r3, [pc, #96]	; (1930 <hif_send+0x220>)
    18ce:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    18d0:	2403      	movs	r4, #3
    18d2:	4264      	negs	r4, r4
			goto ERR2;
    18d4:	e7b1      	b.n	183a <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    18d6:	22cb      	movs	r2, #203	; 0xcb
    18d8:	0052      	lsls	r2, r2, #1
    18da:	4916      	ldr	r1, [pc, #88]	; (1934 <hif_send+0x224>)
    18dc:	4816      	ldr	r0, [pc, #88]	; (1938 <hif_send+0x228>)
    18de:	4b0c      	ldr	r3, [pc, #48]	; (1910 <hif_send+0x200>)
    18e0:	4798      	blx	r3
    18e2:	4816      	ldr	r0, [pc, #88]	; (193c <hif_send+0x22c>)
    18e4:	4b0c      	ldr	r3, [pc, #48]	; (1918 <hif_send+0x208>)
    18e6:	4798      	blx	r3
    18e8:	200d      	movs	r0, #13
    18ea:	4b0c      	ldr	r3, [pc, #48]	; (191c <hif_send+0x20c>)
    18ec:	4798      	blx	r3
		goto ERR2;
    18ee:	e7a4      	b.n	183a <hif_send+0x12a>
    18f0:	00001681 	.word	0x00001681
    18f4:	0000108c 	.word	0x0000108c
    18f8:	00002a51 	.word	0x00002a51
    18fc:	00001078 	.word	0x00001078
    1900:	000003e7 	.word	0x000003e7
    1904:	00002a45 	.word	0x00002a45
    1908:	000011f5 	.word	0x000011f5
    190c:	0000bd08 	.word	0x0000bd08
    1910:	0000a33d 	.word	0x0000a33d
    1914:	0000bd14 	.word	0x0000bd14
    1918:	0000a459 	.word	0x0000a459
    191c:	0000a371 	.word	0x0000a371
    1920:	00150400 	.word	0x00150400
    1924:	000016bd 	.word	0x000016bd
    1928:	00002ac5 	.word	0x00002ac5
    192c:	0000106c 	.word	0x0000106c
    1930:	000016d9 	.word	0x000016d9
    1934:	0000ba20 	.word	0x0000ba20
    1938:	0000b9d8 	.word	0x0000b9d8
    193c:	0000bd24 	.word	0x0000bd24

00001940 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1940:	b5f0      	push	{r4, r5, r6, r7, lr}
    1942:	46ce      	mov	lr, r9
    1944:	4647      	mov	r7, r8
    1946:	b580      	push	{r7, lr}
    1948:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    194a:	4bcf      	ldr	r3, [pc, #828]	; (1c88 <hif_handle_isr+0x348>)
    194c:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    194e:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    1950:	e080      	b.n	1a54 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    1952:	4bcd      	ldr	r3, [pc, #820]	; (1c88 <hif_handle_isr+0x348>)
    1954:	9a05      	ldr	r2, [sp, #20]
    1956:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    1958:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    195a:	af04      	add	r7, sp, #16
    195c:	2204      	movs	r2, #4
    195e:	0039      	movs	r1, r7
    1960:	9805      	ldr	r0, [sp, #20]
    1962:	4bca      	ldr	r3, [pc, #808]	; (1c8c <hif_handle_isr+0x34c>)
    1964:	4798      	blx	r3
    1966:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1968:	887b      	ldrh	r3, [r7, #2]
    196a:	b29b      	uxth	r3, r3
    196c:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    196e:	2800      	cmp	r0, #0
    1970:	d133      	bne.n	19da <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    1972:	ab04      	add	r3, sp, #16
    1974:	885b      	ldrh	r3, [r3, #2]
    1976:	b29b      	uxth	r3, r3
    1978:	429d      	cmp	r5, r3
    197a:	d004      	beq.n	1986 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    197c:	ab04      	add	r3, sp, #16
    197e:	885b      	ldrh	r3, [r3, #2]
    1980:	1aeb      	subs	r3, r5, r3
    1982:	2b04      	cmp	r3, #4
    1984:	dc39      	bgt.n	19fa <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1986:	ab04      	add	r3, sp, #16
    1988:	781b      	ldrb	r3, [r3, #0]
    198a:	2b01      	cmp	r3, #1
    198c:	d04e      	beq.n	1a2c <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    198e:	ab04      	add	r3, sp, #16
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	2b02      	cmp	r3, #2
    1994:	d078      	beq.n	1a88 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1996:	ab04      	add	r3, sp, #16
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	2b04      	cmp	r3, #4
    199c:	d100      	bne.n	19a0 <hif_handle_isr+0x60>
    199e:	e090      	b.n	1ac2 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    19a0:	ab04      	add	r3, sp, #16
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	2b06      	cmp	r3, #6
    19a6:	d100      	bne.n	19aa <hif_handle_isr+0x6a>
    19a8:	e0a8      	b.n	1afc <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    19aa:	ab04      	add	r3, sp, #16
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b07      	cmp	r3, #7
    19b0:	d100      	bne.n	19b4 <hif_handle_isr+0x74>
    19b2:	e0bf      	b.n	1b34 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    19b4:	ab04      	add	r3, sp, #16
    19b6:	781b      	ldrb	r3, [r3, #0]
    19b8:	2b05      	cmp	r3, #5
    19ba:	d100      	bne.n	19be <hif_handle_isr+0x7e>
    19bc:	e0d6      	b.n	1b6c <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    19be:	4ab4      	ldr	r2, [pc, #720]	; (1c90 <hif_handle_isr+0x350>)
    19c0:	49b4      	ldr	r1, [pc, #720]	; (1c94 <hif_handle_isr+0x354>)
    19c2:	48b5      	ldr	r0, [pc, #724]	; (1c98 <hif_handle_isr+0x358>)
    19c4:	4bb5      	ldr	r3, [pc, #724]	; (1c9c <hif_handle_isr+0x35c>)
    19c6:	4798      	blx	r3
    19c8:	48b5      	ldr	r0, [pc, #724]	; (1ca0 <hif_handle_isr+0x360>)
    19ca:	4bb6      	ldr	r3, [pc, #728]	; (1ca4 <hif_handle_isr+0x364>)
    19cc:	4798      	blx	r3
    19ce:	200d      	movs	r0, #13
    19d0:	4bb5      	ldr	r3, [pc, #724]	; (1ca8 <hif_handle_isr+0x368>)
    19d2:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    19d4:	2406      	movs	r4, #6
    19d6:	4264      	negs	r4, r4
    19d8:	e116      	b.n	1c08 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    19da:	22d2      	movs	r2, #210	; 0xd2
    19dc:	32ff      	adds	r2, #255	; 0xff
    19de:	49ad      	ldr	r1, [pc, #692]	; (1c94 <hif_handle_isr+0x354>)
    19e0:	48ad      	ldr	r0, [pc, #692]	; (1c98 <hif_handle_isr+0x358>)
    19e2:	4bae      	ldr	r3, [pc, #696]	; (1c9c <hif_handle_isr+0x35c>)
    19e4:	4798      	blx	r3
    19e6:	48b1      	ldr	r0, [pc, #708]	; (1cac <hif_handle_isr+0x36c>)
    19e8:	4bae      	ldr	r3, [pc, #696]	; (1ca4 <hif_handle_isr+0x364>)
    19ea:	4798      	blx	r3
    19ec:	200d      	movs	r0, #13
    19ee:	4bae      	ldr	r3, [pc, #696]	; (1ca8 <hif_handle_isr+0x368>)
    19f0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    19f2:	2001      	movs	r0, #1
    19f4:	4bae      	ldr	r3, [pc, #696]	; (1cb0 <hif_handle_isr+0x370>)
    19f6:	4798      	blx	r3
    19f8:	e106      	b.n	1c08 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    19fa:	22ed      	movs	r2, #237	; 0xed
    19fc:	0052      	lsls	r2, r2, #1
    19fe:	49a5      	ldr	r1, [pc, #660]	; (1c94 <hif_handle_isr+0x354>)
    1a00:	48a5      	ldr	r0, [pc, #660]	; (1c98 <hif_handle_isr+0x358>)
    1a02:	4ca6      	ldr	r4, [pc, #664]	; (1c9c <hif_handle_isr+0x35c>)
    1a04:	47a0      	blx	r4
    1a06:	a904      	add	r1, sp, #16
    1a08:	884a      	ldrh	r2, [r1, #2]
    1a0a:	b292      	uxth	r2, r2
    1a0c:	780b      	ldrb	r3, [r1, #0]
    1a0e:	b2db      	uxtb	r3, r3
    1a10:	7849      	ldrb	r1, [r1, #1]
    1a12:	9100      	str	r1, [sp, #0]
    1a14:	0029      	movs	r1, r5
    1a16:	48a7      	ldr	r0, [pc, #668]	; (1cb4 <hif_handle_isr+0x374>)
    1a18:	47a0      	blx	r4
    1a1a:	200d      	movs	r0, #13
    1a1c:	4ba2      	ldr	r3, [pc, #648]	; (1ca8 <hif_handle_isr+0x368>)
    1a1e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1a20:	2001      	movs	r0, #1
    1a22:	4ba3      	ldr	r3, [pc, #652]	; (1cb0 <hif_handle_isr+0x370>)
    1a24:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1a26:	2406      	movs	r4, #6
    1a28:	4264      	negs	r4, r4
    1a2a:	e0ed      	b.n	1c08 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    1a2c:	4b96      	ldr	r3, [pc, #600]	; (1c88 <hif_handle_isr+0x348>)
    1a2e:	68db      	ldr	r3, [r3, #12]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d01c      	beq.n	1a6e <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a34:	4b94      	ldr	r3, [pc, #592]	; (1c88 <hif_handle_isr+0x348>)
    1a36:	68db      	ldr	r3, [r3, #12]
    1a38:	aa04      	add	r2, sp, #16
    1a3a:	7850      	ldrb	r0, [r2, #1]
    1a3c:	b2c0      	uxtb	r0, r0
    1a3e:	8851      	ldrh	r1, [r2, #2]
    1a40:	9a05      	ldr	r2, [sp, #20]
    1a42:	3208      	adds	r2, #8
    1a44:	3908      	subs	r1, #8
    1a46:	b289      	uxth	r1, r1
    1a48:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1a4a:	4b8f      	ldr	r3, [pc, #572]	; (1c88 <hif_handle_isr+0x348>)
    1a4c:	789b      	ldrb	r3, [r3, #2]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d000      	beq.n	1a54 <hif_handle_isr+0x114>
    1a52:	e09c      	b.n	1b8e <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    1a54:	4643      	mov	r3, r8
    1a56:	78db      	ldrb	r3, [r3, #3]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d100      	bne.n	1a5e <hif_handle_isr+0x11e>
    1a5c:	e158      	b.n	1d10 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    1a5e:	464b      	mov	r3, r9
    1a60:	78db      	ldrb	r3, [r3, #3]
    1a62:	3b01      	subs	r3, #1
    1a64:	b2db      	uxtb	r3, r3
    1a66:	464a      	mov	r2, r9
    1a68:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1a6a:	4e93      	ldr	r6, [pc, #588]	; (1cb8 <hif_handle_isr+0x378>)
    1a6c:	e0d7      	b.n	1c1e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    1a6e:	22f3      	movs	r2, #243	; 0xf3
    1a70:	0052      	lsls	r2, r2, #1
    1a72:	4988      	ldr	r1, [pc, #544]	; (1c94 <hif_handle_isr+0x354>)
    1a74:	4888      	ldr	r0, [pc, #544]	; (1c98 <hif_handle_isr+0x358>)
    1a76:	4b89      	ldr	r3, [pc, #548]	; (1c9c <hif_handle_isr+0x35c>)
    1a78:	4798      	blx	r3
    1a7a:	4890      	ldr	r0, [pc, #576]	; (1cbc <hif_handle_isr+0x37c>)
    1a7c:	4b89      	ldr	r3, [pc, #548]	; (1ca4 <hif_handle_isr+0x364>)
    1a7e:	4798      	blx	r3
    1a80:	200d      	movs	r0, #13
    1a82:	4b89      	ldr	r3, [pc, #548]	; (1ca8 <hif_handle_isr+0x368>)
    1a84:	4798      	blx	r3
    1a86:	e7e0      	b.n	1a4a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    1a88:	4b7f      	ldr	r3, [pc, #508]	; (1c88 <hif_handle_isr+0x348>)
    1a8a:	691b      	ldr	r3, [r3, #16]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d00b      	beq.n	1aa8 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a90:	4b7d      	ldr	r3, [pc, #500]	; (1c88 <hif_handle_isr+0x348>)
    1a92:	691b      	ldr	r3, [r3, #16]
    1a94:	aa04      	add	r2, sp, #16
    1a96:	7850      	ldrb	r0, [r2, #1]
    1a98:	b2c0      	uxtb	r0, r0
    1a9a:	8851      	ldrh	r1, [r2, #2]
    1a9c:	9a05      	ldr	r2, [sp, #20]
    1a9e:	3208      	adds	r2, #8
    1aa0:	3908      	subs	r1, #8
    1aa2:	b289      	uxth	r1, r1
    1aa4:	4798      	blx	r3
    1aa6:	e7d0      	b.n	1a4a <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    1aa8:	22f7      	movs	r2, #247	; 0xf7
    1aaa:	0052      	lsls	r2, r2, #1
    1aac:	4979      	ldr	r1, [pc, #484]	; (1c94 <hif_handle_isr+0x354>)
    1aae:	487a      	ldr	r0, [pc, #488]	; (1c98 <hif_handle_isr+0x358>)
    1ab0:	4b7a      	ldr	r3, [pc, #488]	; (1c9c <hif_handle_isr+0x35c>)
    1ab2:	4798      	blx	r3
    1ab4:	4882      	ldr	r0, [pc, #520]	; (1cc0 <hif_handle_isr+0x380>)
    1ab6:	4b7b      	ldr	r3, [pc, #492]	; (1ca4 <hif_handle_isr+0x364>)
    1ab8:	4798      	blx	r3
    1aba:	200d      	movs	r0, #13
    1abc:	4b7a      	ldr	r3, [pc, #488]	; (1ca8 <hif_handle_isr+0x368>)
    1abe:	4798      	blx	r3
    1ac0:	e7c3      	b.n	1a4a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    1ac2:	4b71      	ldr	r3, [pc, #452]	; (1c88 <hif_handle_isr+0x348>)
    1ac4:	695b      	ldr	r3, [r3, #20]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d00b      	beq.n	1ae2 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1aca:	4b6f      	ldr	r3, [pc, #444]	; (1c88 <hif_handle_isr+0x348>)
    1acc:	695b      	ldr	r3, [r3, #20]
    1ace:	aa04      	add	r2, sp, #16
    1ad0:	7850      	ldrb	r0, [r2, #1]
    1ad2:	b2c0      	uxtb	r0, r0
    1ad4:	8851      	ldrh	r1, [r2, #2]
    1ad6:	9a05      	ldr	r2, [sp, #20]
    1ad8:	3208      	adds	r2, #8
    1ada:	3908      	subs	r1, #8
    1adc:	b289      	uxth	r1, r1
    1ade:	4798      	blx	r3
    1ae0:	e7b3      	b.n	1a4a <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    1ae2:	22fb      	movs	r2, #251	; 0xfb
    1ae4:	0052      	lsls	r2, r2, #1
    1ae6:	496b      	ldr	r1, [pc, #428]	; (1c94 <hif_handle_isr+0x354>)
    1ae8:	486b      	ldr	r0, [pc, #428]	; (1c98 <hif_handle_isr+0x358>)
    1aea:	4b6c      	ldr	r3, [pc, #432]	; (1c9c <hif_handle_isr+0x35c>)
    1aec:	4798      	blx	r3
    1aee:	4875      	ldr	r0, [pc, #468]	; (1cc4 <hif_handle_isr+0x384>)
    1af0:	4b6c      	ldr	r3, [pc, #432]	; (1ca4 <hif_handle_isr+0x364>)
    1af2:	4798      	blx	r3
    1af4:	200d      	movs	r0, #13
    1af6:	4b6c      	ldr	r3, [pc, #432]	; (1ca8 <hif_handle_isr+0x368>)
    1af8:	4798      	blx	r3
    1afa:	e7a6      	b.n	1a4a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    1afc:	4b62      	ldr	r3, [pc, #392]	; (1c88 <hif_handle_isr+0x348>)
    1afe:	6a1b      	ldr	r3, [r3, #32]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d00b      	beq.n	1b1c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b04:	4b60      	ldr	r3, [pc, #384]	; (1c88 <hif_handle_isr+0x348>)
    1b06:	6a1b      	ldr	r3, [r3, #32]
    1b08:	aa04      	add	r2, sp, #16
    1b0a:	7850      	ldrb	r0, [r2, #1]
    1b0c:	b2c0      	uxtb	r0, r0
    1b0e:	8851      	ldrh	r1, [r2, #2]
    1b10:	9a05      	ldr	r2, [sp, #20]
    1b12:	3208      	adds	r2, #8
    1b14:	3908      	subs	r1, #8
    1b16:	b289      	uxth	r1, r1
    1b18:	4798      	blx	r3
    1b1a:	e796      	b.n	1a4a <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1b1c:	4a6a      	ldr	r2, [pc, #424]	; (1cc8 <hif_handle_isr+0x388>)
    1b1e:	495d      	ldr	r1, [pc, #372]	; (1c94 <hif_handle_isr+0x354>)
    1b20:	485d      	ldr	r0, [pc, #372]	; (1c98 <hif_handle_isr+0x358>)
    1b22:	4b5e      	ldr	r3, [pc, #376]	; (1c9c <hif_handle_isr+0x35c>)
    1b24:	4798      	blx	r3
    1b26:	4869      	ldr	r0, [pc, #420]	; (1ccc <hif_handle_isr+0x38c>)
    1b28:	4b5e      	ldr	r3, [pc, #376]	; (1ca4 <hif_handle_isr+0x364>)
    1b2a:	4798      	blx	r3
    1b2c:	200d      	movs	r0, #13
    1b2e:	4b5e      	ldr	r3, [pc, #376]	; (1ca8 <hif_handle_isr+0x368>)
    1b30:	4798      	blx	r3
    1b32:	e78a      	b.n	1a4a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    1b34:	4b54      	ldr	r3, [pc, #336]	; (1c88 <hif_handle_isr+0x348>)
    1b36:	699b      	ldr	r3, [r3, #24]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d00b      	beq.n	1b54 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b3c:	4b52      	ldr	r3, [pc, #328]	; (1c88 <hif_handle_isr+0x348>)
    1b3e:	699b      	ldr	r3, [r3, #24]
    1b40:	aa04      	add	r2, sp, #16
    1b42:	7850      	ldrb	r0, [r2, #1]
    1b44:	b2c0      	uxtb	r0, r0
    1b46:	8851      	ldrh	r1, [r2, #2]
    1b48:	9a05      	ldr	r2, [sp, #20]
    1b4a:	3208      	adds	r2, #8
    1b4c:	3908      	subs	r1, #8
    1b4e:	b289      	uxth	r1, r1
    1b50:	4798      	blx	r3
    1b52:	e77a      	b.n	1a4a <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    1b54:	4a5e      	ldr	r2, [pc, #376]	; (1cd0 <hif_handle_isr+0x390>)
    1b56:	494f      	ldr	r1, [pc, #316]	; (1c94 <hif_handle_isr+0x354>)
    1b58:	484f      	ldr	r0, [pc, #316]	; (1c98 <hif_handle_isr+0x358>)
    1b5a:	4b50      	ldr	r3, [pc, #320]	; (1c9c <hif_handle_isr+0x35c>)
    1b5c:	4798      	blx	r3
    1b5e:	485d      	ldr	r0, [pc, #372]	; (1cd4 <hif_handle_isr+0x394>)
    1b60:	4b50      	ldr	r3, [pc, #320]	; (1ca4 <hif_handle_isr+0x364>)
    1b62:	4798      	blx	r3
    1b64:	200d      	movs	r0, #13
    1b66:	4b50      	ldr	r3, [pc, #320]	; (1ca8 <hif_handle_isr+0x368>)
    1b68:	4798      	blx	r3
    1b6a:	e76e      	b.n	1a4a <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    1b6c:	4b46      	ldr	r3, [pc, #280]	; (1c88 <hif_handle_isr+0x348>)
    1b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b70:	2b00      	cmp	r3, #0
    1b72:	d100      	bne.n	1b76 <hif_handle_isr+0x236>
    1b74:	e769      	b.n	1a4a <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b76:	4b44      	ldr	r3, [pc, #272]	; (1c88 <hif_handle_isr+0x348>)
    1b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b7a:	aa04      	add	r2, sp, #16
    1b7c:	7850      	ldrb	r0, [r2, #1]
    1b7e:	b2c0      	uxtb	r0, r0
    1b80:	8851      	ldrh	r1, [r2, #2]
    1b82:	9a05      	ldr	r2, [sp, #20]
    1b84:	3208      	adds	r2, #8
    1b86:	3908      	subs	r1, #8
    1b88:	b289      	uxth	r1, r1
    1b8a:	4798      	blx	r3
    1b8c:	e75d      	b.n	1a4a <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1b8e:	4a52      	ldr	r2, [pc, #328]	; (1cd8 <hif_handle_isr+0x398>)
    1b90:	4940      	ldr	r1, [pc, #256]	; (1c94 <hif_handle_isr+0x354>)
    1b92:	4841      	ldr	r0, [pc, #260]	; (1c98 <hif_handle_isr+0x358>)
    1b94:	4c41      	ldr	r4, [pc, #260]	; (1c9c <hif_handle_isr+0x35c>)
    1b96:	47a0      	blx	r4
    1b98:	ab04      	add	r3, sp, #16
    1b9a:	7819      	ldrb	r1, [r3, #0]
    1b9c:	b2c9      	uxtb	r1, r1
    1b9e:	785a      	ldrb	r2, [r3, #1]
    1ba0:	b2d2      	uxtb	r2, r2
    1ba2:	484e      	ldr	r0, [pc, #312]	; (1cdc <hif_handle_isr+0x39c>)
    1ba4:	47a0      	blx	r4
    1ba6:	200d      	movs	r0, #13
    1ba8:	4b3f      	ldr	r3, [pc, #252]	; (1ca8 <hif_handle_isr+0x368>)
    1baa:	4798      	blx	r3
					ret = hif_set_rx_done();
    1bac:	4b4c      	ldr	r3, [pc, #304]	; (1ce0 <hif_handle_isr+0x3a0>)
    1bae:	4798      	blx	r3
    1bb0:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1bb2:	d129      	bne.n	1c08 <hif_handle_isr+0x2c8>
    1bb4:	e74e      	b.n	1a54 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    1bb6:	2287      	movs	r2, #135	; 0x87
    1bb8:	0092      	lsls	r2, r2, #2
    1bba:	4936      	ldr	r1, [pc, #216]	; (1c94 <hif_handle_isr+0x354>)
    1bbc:	4836      	ldr	r0, [pc, #216]	; (1c98 <hif_handle_isr+0x358>)
    1bbe:	4b37      	ldr	r3, [pc, #220]	; (1c9c <hif_handle_isr+0x35c>)
    1bc0:	4798      	blx	r3
    1bc2:	4848      	ldr	r0, [pc, #288]	; (1ce4 <hif_handle_isr+0x3a4>)
    1bc4:	4b37      	ldr	r3, [pc, #220]	; (1ca4 <hif_handle_isr+0x364>)
    1bc6:	4798      	blx	r3
    1bc8:	200d      	movs	r0, #13
    1bca:	4b37      	ldr	r3, [pc, #220]	; (1ca8 <hif_handle_isr+0x368>)
    1bcc:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1bce:	2402      	movs	r4, #2
    1bd0:	4264      	negs	r4, r4
    1bd2:	e019      	b.n	1c08 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1bd4:	2289      	movs	r2, #137	; 0x89
    1bd6:	0092      	lsls	r2, r2, #2
    1bd8:	492e      	ldr	r1, [pc, #184]	; (1c94 <hif_handle_isr+0x354>)
    1bda:	482f      	ldr	r0, [pc, #188]	; (1c98 <hif_handle_isr+0x358>)
    1bdc:	4c2f      	ldr	r4, [pc, #188]	; (1c9c <hif_handle_isr+0x35c>)
    1bde:	47a0      	blx	r4
    1be0:	9903      	ldr	r1, [sp, #12]
    1be2:	4841      	ldr	r0, [pc, #260]	; (1ce8 <hif_handle_isr+0x3a8>)
    1be4:	47a0      	blx	r4
    1be6:	200d      	movs	r0, #13
    1be8:	4b2f      	ldr	r3, [pc, #188]	; (1ca8 <hif_handle_isr+0x368>)
    1bea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1bec:	240c      	movs	r4, #12
    1bee:	4264      	negs	r4, r4
    1bf0:	e00a      	b.n	1c08 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1bf2:	4a3e      	ldr	r2, [pc, #248]	; (1cec <hif_handle_isr+0x3ac>)
    1bf4:	4927      	ldr	r1, [pc, #156]	; (1c94 <hif_handle_isr+0x354>)
    1bf6:	4828      	ldr	r0, [pc, #160]	; (1c98 <hif_handle_isr+0x358>)
    1bf8:	4b28      	ldr	r3, [pc, #160]	; (1c9c <hif_handle_isr+0x35c>)
    1bfa:	4798      	blx	r3
    1bfc:	483c      	ldr	r0, [pc, #240]	; (1cf0 <hif_handle_isr+0x3b0>)
    1bfe:	4b29      	ldr	r3, [pc, #164]	; (1ca4 <hif_handle_isr+0x364>)
    1c00:	4798      	blx	r3
    1c02:	200d      	movs	r0, #13
    1c04:	4b28      	ldr	r3, [pc, #160]	; (1ca8 <hif_handle_isr+0x368>)
    1c06:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1c08:	4a3a      	ldr	r2, [pc, #232]	; (1cf4 <hif_handle_isr+0x3b4>)
    1c0a:	493b      	ldr	r1, [pc, #236]	; (1cf8 <hif_handle_isr+0x3b8>)
    1c0c:	4822      	ldr	r0, [pc, #136]	; (1c98 <hif_handle_isr+0x358>)
    1c0e:	4f23      	ldr	r7, [pc, #140]	; (1c9c <hif_handle_isr+0x35c>)
    1c10:	47b8      	blx	r7
    1c12:	0021      	movs	r1, r4
    1c14:	4839      	ldr	r0, [pc, #228]	; (1cfc <hif_handle_isr+0x3bc>)
    1c16:	47b8      	blx	r7
    1c18:	200d      	movs	r0, #13
    1c1a:	4b23      	ldr	r3, [pc, #140]	; (1ca8 <hif_handle_isr+0x368>)
    1c1c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1c1e:	a903      	add	r1, sp, #12
    1c20:	4837      	ldr	r0, [pc, #220]	; (1d00 <hif_handle_isr+0x3c0>)
    1c22:	47b0      	blx	r6
    1c24:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1c26:	d1e4      	bne.n	1bf2 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1c28:	9b03      	ldr	r3, [sp, #12]
    1c2a:	07db      	lsls	r3, r3, #31
    1c2c:	d5d2      	bpl.n	1bd4 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    1c2e:	2000      	movs	r0, #0
    1c30:	4b1f      	ldr	r3, [pc, #124]	; (1cb0 <hif_handle_isr+0x370>)
    1c32:	4798      	blx	r3
			reg &= ~NBIT0;
    1c34:	2301      	movs	r3, #1
    1c36:	9903      	ldr	r1, [sp, #12]
    1c38:	4399      	bics	r1, r3
    1c3a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1c3c:	4830      	ldr	r0, [pc, #192]	; (1d00 <hif_handle_isr+0x3c0>)
    1c3e:	4b31      	ldr	r3, [pc, #196]	; (1d04 <hif_handle_isr+0x3c4>)
    1c40:	4798      	blx	r3
    1c42:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1c44:	d1e0      	bne.n	1c08 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    1c46:	2201      	movs	r2, #1
    1c48:	4b0f      	ldr	r3, [pc, #60]	; (1c88 <hif_handle_isr+0x348>)
    1c4a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1c4c:	9b03      	ldr	r3, [sp, #12]
    1c4e:	049d      	lsls	r5, r3, #18
    1c50:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    1c52:	d0b0      	beq.n	1bb6 <hif_handle_isr+0x276>
				uint32 address = 0;
    1c54:	2300      	movs	r3, #0
    1c56:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1c58:	a905      	add	r1, sp, #20
    1c5a:	482b      	ldr	r0, [pc, #172]	; (1d08 <hif_handle_isr+0x3c8>)
    1c5c:	4b16      	ldr	r3, [pc, #88]	; (1cb8 <hif_handle_isr+0x378>)
    1c5e:	4798      	blx	r3
    1c60:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1c62:	d100      	bne.n	1c66 <hif_handle_isr+0x326>
    1c64:	e675      	b.n	1952 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1c66:	22c8      	movs	r2, #200	; 0xc8
    1c68:	32ff      	adds	r2, #255	; 0xff
    1c6a:	490a      	ldr	r1, [pc, #40]	; (1c94 <hif_handle_isr+0x354>)
    1c6c:	480a      	ldr	r0, [pc, #40]	; (1c98 <hif_handle_isr+0x358>)
    1c6e:	4b0b      	ldr	r3, [pc, #44]	; (1c9c <hif_handle_isr+0x35c>)
    1c70:	4798      	blx	r3
    1c72:	4826      	ldr	r0, [pc, #152]	; (1d0c <hif_handle_isr+0x3cc>)
    1c74:	4b0b      	ldr	r3, [pc, #44]	; (1ca4 <hif_handle_isr+0x364>)
    1c76:	4798      	blx	r3
    1c78:	200d      	movs	r0, #13
    1c7a:	4b0b      	ldr	r3, [pc, #44]	; (1ca8 <hif_handle_isr+0x368>)
    1c7c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1c7e:	2001      	movs	r0, #1
    1c80:	4b0b      	ldr	r3, [pc, #44]	; (1cb0 <hif_handle_isr+0x370>)
    1c82:	4798      	blx	r3
    1c84:	e7c0      	b.n	1c08 <hif_handle_isr+0x2c8>
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	200004c0 	.word	0x200004c0
    1c8c:	00002a5d 	.word	0x00002a5d
    1c90:	0000020f 	.word	0x0000020f
    1c94:	0000ba2c 	.word	0x0000ba2c
    1c98:	0000b9d8 	.word	0x0000b9d8
    1c9c:	0000a33d 	.word	0x0000a33d
    1ca0:	0000bb88 	.word	0x0000bb88
    1ca4:	0000a459 	.word	0x0000a459
    1ca8:	0000a371 	.word	0x0000a371
    1cac:	0000ba84 	.word	0x0000ba84
    1cb0:	00001309 	.word	0x00001309
    1cb4:	0000ba9c 	.word	0x0000ba9c
    1cb8:	00002a45 	.word	0x00002a45
    1cbc:	0000badc 	.word	0x0000badc
    1cc0:	0000bafc 	.word	0x0000bafc
    1cc4:	0000bb20 	.word	0x0000bb20
    1cc8:	000001ff 	.word	0x000001ff
    1ccc:	0000bb40 	.word	0x0000bb40
    1cd0:	00000206 	.word	0x00000206
    1cd4:	0000bb64 	.word	0x0000bb64
    1cd8:	00000215 	.word	0x00000215
    1cdc:	0000bba0 	.word	0x0000bba0
    1ce0:	0000163d 	.word	0x0000163d
    1ce4:	0000bbcc 	.word	0x0000bbcc
    1ce8:	0000bbe0 	.word	0x0000bbe0
    1cec:	0000022d 	.word	0x0000022d
    1cf0:	0000bbfc 	.word	0x0000bbfc
    1cf4:	0000024a 	.word	0x0000024a
    1cf8:	0000ba34 	.word	0x0000ba34
    1cfc:	0000bc20 	.word	0x0000bc20
    1d00:	00001070 	.word	0x00001070
    1d04:	00002a51 	.word	0x00002a51
    1d08:	00001084 	.word	0x00001084
    1d0c:	0000ba60 	.word	0x0000ba60
			}
		}
	}

	return ret;
}
    1d10:	2000      	movs	r0, #0
    1d12:	b007      	add	sp, #28
    1d14:	bc0c      	pop	{r2, r3}
    1d16:	4690      	mov	r8, r2
    1d18:	4699      	mov	r9, r3
    1d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d1c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1d1c:	b570      	push	{r4, r5, r6, lr}
    1d1e:	0014      	movs	r4, r2
    1d20:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1d22:	2800      	cmp	r0, #0
    1d24:	d003      	beq.n	1d2e <hif_receive+0x12>
    1d26:	2900      	cmp	r1, #0
    1d28:	d001      	beq.n	1d2e <hif_receive+0x12>
    1d2a:	2a00      	cmp	r2, #0
    1d2c:	d112      	bne.n	1d54 <hif_receive+0x38>
	{
		if(isDone)
    1d2e:	2d00      	cmp	r5, #0
    1d30:	d002      	beq.n	1d38 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1d32:	4b27      	ldr	r3, [pc, #156]	; (1dd0 <hif_receive+0xb4>)
    1d34:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1d36:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1d38:	4a26      	ldr	r2, [pc, #152]	; (1dd4 <hif_receive+0xb8>)
    1d3a:	4927      	ldr	r1, [pc, #156]	; (1dd8 <hif_receive+0xbc>)
    1d3c:	4827      	ldr	r0, [pc, #156]	; (1ddc <hif_receive+0xc0>)
    1d3e:	4b28      	ldr	r3, [pc, #160]	; (1de0 <hif_receive+0xc4>)
    1d40:	4798      	blx	r3
    1d42:	4828      	ldr	r0, [pc, #160]	; (1de4 <hif_receive+0xc8>)
    1d44:	4b28      	ldr	r3, [pc, #160]	; (1de8 <hif_receive+0xcc>)
    1d46:	4798      	blx	r3
    1d48:	200d      	movs	r0, #13
    1d4a:	4b28      	ldr	r3, [pc, #160]	; (1dec <hif_receive+0xd0>)
    1d4c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1d4e:	200c      	movs	r0, #12
    1d50:	4240      	negs	r0, r0
    1d52:	e7f0      	b.n	1d36 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1d54:	4b26      	ldr	r3, [pc, #152]	; (1df0 <hif_receive+0xd4>)
    1d56:	689b      	ldr	r3, [r3, #8]
    1d58:	429a      	cmp	r2, r3
    1d5a:	d81a      	bhi.n	1d92 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1d5c:	4b24      	ldr	r3, [pc, #144]	; (1df0 <hif_receive+0xd4>)
    1d5e:	685b      	ldr	r3, [r3, #4]
    1d60:	4298      	cmp	r0, r3
    1d62:	d326      	bcc.n	1db2 <hif_receive+0x96>
    1d64:	1886      	adds	r6, r0, r2
    1d66:	4a22      	ldr	r2, [pc, #136]	; (1df0 <hif_receive+0xd4>)
    1d68:	6853      	ldr	r3, [r2, #4]
    1d6a:	6892      	ldr	r2, [r2, #8]
    1d6c:	189b      	adds	r3, r3, r2
    1d6e:	429e      	cmp	r6, r3
    1d70:	d81f      	bhi.n	1db2 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1d72:	0022      	movs	r2, r4
    1d74:	4b1f      	ldr	r3, [pc, #124]	; (1df4 <hif_receive+0xd8>)
    1d76:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1d78:	2800      	cmp	r0, #0
    1d7a:	d1dc      	bne.n	1d36 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1d7c:	4a1c      	ldr	r2, [pc, #112]	; (1df0 <hif_receive+0xd4>)
    1d7e:	6853      	ldr	r3, [r2, #4]
    1d80:	6892      	ldr	r2, [r2, #8]
    1d82:	189b      	adds	r3, r3, r2
    1d84:	429e      	cmp	r6, r3
    1d86:	d001      	beq.n	1d8c <hif_receive+0x70>
    1d88:	2d00      	cmp	r5, #0
    1d8a:	d0d4      	beq.n	1d36 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1d8c:	4b10      	ldr	r3, [pc, #64]	; (1dd0 <hif_receive+0xb4>)
    1d8e:	4798      	blx	r3
    1d90:	e7d1      	b.n	1d36 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1d92:	4a19      	ldr	r2, [pc, #100]	; (1df8 <hif_receive+0xdc>)
    1d94:	4910      	ldr	r1, [pc, #64]	; (1dd8 <hif_receive+0xbc>)
    1d96:	4811      	ldr	r0, [pc, #68]	; (1ddc <hif_receive+0xc0>)
    1d98:	4d11      	ldr	r5, [pc, #68]	; (1de0 <hif_receive+0xc4>)
    1d9a:	47a8      	blx	r5
    1d9c:	4b14      	ldr	r3, [pc, #80]	; (1df0 <hif_receive+0xd4>)
    1d9e:	689a      	ldr	r2, [r3, #8]
    1da0:	0021      	movs	r1, r4
    1da2:	4816      	ldr	r0, [pc, #88]	; (1dfc <hif_receive+0xe0>)
    1da4:	47a8      	blx	r5
    1da6:	200d      	movs	r0, #13
    1da8:	4b10      	ldr	r3, [pc, #64]	; (1dec <hif_receive+0xd0>)
    1daa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1dac:	200c      	movs	r0, #12
    1dae:	4240      	negs	r0, r0
		goto ERR1;
    1db0:	e7c1      	b.n	1d36 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1db2:	4a13      	ldr	r2, [pc, #76]	; (1e00 <hif_receive+0xe4>)
    1db4:	4908      	ldr	r1, [pc, #32]	; (1dd8 <hif_receive+0xbc>)
    1db6:	4809      	ldr	r0, [pc, #36]	; (1ddc <hif_receive+0xc0>)
    1db8:	4b09      	ldr	r3, [pc, #36]	; (1de0 <hif_receive+0xc4>)
    1dba:	4798      	blx	r3
    1dbc:	4811      	ldr	r0, [pc, #68]	; (1e04 <hif_receive+0xe8>)
    1dbe:	4b0a      	ldr	r3, [pc, #40]	; (1de8 <hif_receive+0xcc>)
    1dc0:	4798      	blx	r3
    1dc2:	200d      	movs	r0, #13
    1dc4:	4b09      	ldr	r3, [pc, #36]	; (1dec <hif_receive+0xd0>)
    1dc6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1dc8:	200c      	movs	r0, #12
    1dca:	4240      	negs	r0, r0
		goto ERR1;
    1dcc:	e7b3      	b.n	1d36 <hif_receive+0x1a>
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	0000163d 	.word	0x0000163d
    1dd4:	0000026b 	.word	0x0000026b
    1dd8:	0000ba44 	.word	0x0000ba44
    1ddc:	0000b9d8 	.word	0x0000b9d8
    1de0:	0000a33d 	.word	0x0000a33d
    1de4:	0000bc50 	.word	0x0000bc50
    1de8:	0000a459 	.word	0x0000a459
    1dec:	0000a371 	.word	0x0000a371
    1df0:	200004c0 	.word	0x200004c0
    1df4:	00002a5d 	.word	0x00002a5d
    1df8:	00000273 	.word	0x00000273
    1dfc:	0000bc70 	.word	0x0000bc70
    1e00:	00000279 	.word	0x00000279
    1e04:	0000bcb8 	.word	0x0000bcb8

00001e08 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1e08:	b570      	push	{r4, r5, r6, lr}
    1e0a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1e0c:	2807      	cmp	r0, #7
    1e0e:	d81f      	bhi.n	1e50 <hif_register_cb+0x48>
    1e10:	0083      	lsls	r3, r0, #2
    1e12:	4a16      	ldr	r2, [pc, #88]	; (1e6c <hif_register_cb+0x64>)
    1e14:	58d3      	ldr	r3, [r2, r3]
    1e16:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1e18:	4b15      	ldr	r3, [pc, #84]	; (1e70 <hif_register_cb+0x68>)
    1e1a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1e1c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1e1e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1e20:	4b13      	ldr	r3, [pc, #76]	; (1e70 <hif_register_cb+0x68>)
    1e22:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    1e24:	2000      	movs	r0, #0
			break;
    1e26:	e7fa      	b.n	1e1e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1e28:	4b11      	ldr	r3, [pc, #68]	; (1e70 <hif_register_cb+0x68>)
    1e2a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1e2c:	2000      	movs	r0, #0
			break;
    1e2e:	e7f6      	b.n	1e1e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1e30:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <hif_register_cb+0x68>)
    1e32:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1e34:	2000      	movs	r0, #0
			break;
    1e36:	e7f2      	b.n	1e1e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1e38:	4b0d      	ldr	r3, [pc, #52]	; (1e70 <hif_register_cb+0x68>)
    1e3a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1e3c:	2000      	movs	r0, #0
			break;
    1e3e:	e7ee      	b.n	1e1e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1e40:	4b0b      	ldr	r3, [pc, #44]	; (1e70 <hif_register_cb+0x68>)
    1e42:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1e44:	2000      	movs	r0, #0
			break;
    1e46:	e7ea      	b.n	1e1e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1e48:	4b09      	ldr	r3, [pc, #36]	; (1e70 <hif_register_cb+0x68>)
    1e4a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1e4c:	2000      	movs	r0, #0
			break;
    1e4e:	e7e6      	b.n	1e1e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1e50:	4a08      	ldr	r2, [pc, #32]	; (1e74 <hif_register_cb+0x6c>)
    1e52:	4909      	ldr	r1, [pc, #36]	; (1e78 <hif_register_cb+0x70>)
    1e54:	4809      	ldr	r0, [pc, #36]	; (1e7c <hif_register_cb+0x74>)
    1e56:	4d0a      	ldr	r5, [pc, #40]	; (1e80 <hif_register_cb+0x78>)
    1e58:	47a8      	blx	r5
    1e5a:	0021      	movs	r1, r4
    1e5c:	4809      	ldr	r0, [pc, #36]	; (1e84 <hif_register_cb+0x7c>)
    1e5e:	47a8      	blx	r5
    1e60:	200d      	movs	r0, #13
    1e62:	4b09      	ldr	r3, [pc, #36]	; (1e88 <hif_register_cb+0x80>)
    1e64:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e66:	200c      	movs	r0, #12
    1e68:	4240      	negs	r0, r0
			break;
    1e6a:	e7d8      	b.n	1e1e <hif_register_cb+0x16>
    1e6c:	0000ba00 	.word	0x0000ba00
    1e70:	200004c0 	.word	0x200004c0
    1e74:	000002b1 	.word	0x000002b1
    1e78:	0000ba50 	.word	0x0000ba50
    1e7c:	0000b9d8 	.word	0x0000b9d8
    1e80:	0000a33d 	.word	0x0000a33d
    1e84:	0000bcfc 	.word	0x0000bcfc
    1e88:	0000a371 	.word	0x0000a371

00001e8c <hif_init>:
{
    1e8c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1e8e:	2228      	movs	r2, #40	; 0x28
    1e90:	2100      	movs	r1, #0
    1e92:	4806      	ldr	r0, [pc, #24]	; (1eac <hif_init+0x20>)
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <hif_init+0x24>)
    1e96:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1e98:	4806      	ldr	r0, [pc, #24]	; (1eb4 <hif_init+0x28>)
    1e9a:	4b07      	ldr	r3, [pc, #28]	; (1eb8 <hif_init+0x2c>)
    1e9c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1e9e:	4907      	ldr	r1, [pc, #28]	; (1ebc <hif_init+0x30>)
    1ea0:	2003      	movs	r0, #3
    1ea2:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <hif_init+0x34>)
    1ea4:	4798      	blx	r3
}
    1ea6:	2000      	movs	r0, #0
    1ea8:	bd10      	pop	{r4, pc}
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	200004c0 	.word	0x200004c0
    1eb0:	000015fd 	.word	0x000015fd
    1eb4:	00001629 	.word	0x00001629
    1eb8:	000012b1 	.word	0x000012b1
    1ebc:	00001639 	.word	0x00001639
    1ec0:	00001e09 	.word	0x00001e09

00001ec4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1ec4:	b530      	push	{r4, r5, lr}
    1ec6:	b09f      	sub	sp, #124	; 0x7c
    1ec8:	0004      	movs	r4, r0
    1eca:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1ecc:	282c      	cmp	r0, #44	; 0x2c
    1ece:	d02f      	beq.n	1f30 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1ed0:	281b      	cmp	r0, #27
    1ed2:	d03d      	beq.n	1f50 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1ed4:	2806      	cmp	r0, #6
    1ed6:	d04b      	beq.n	1f70 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1ed8:	280e      	cmp	r0, #14
    1eda:	d027      	beq.n	1f2c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1edc:	2832      	cmp	r0, #50	; 0x32
    1ede:	d057      	beq.n	1f90 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1ee0:	282f      	cmp	r0, #47	; 0x2f
    1ee2:	d065      	beq.n	1fb0 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1ee4:	2834      	cmp	r0, #52	; 0x34
    1ee6:	d100      	bne.n	1eea <m2m_wifi_cb+0x26>
    1ee8:	e077      	b.n	1fda <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1eea:	2811      	cmp	r0, #17
    1eec:	d100      	bne.n	1ef0 <m2m_wifi_cb+0x2c>
    1eee:	e096      	b.n	201e <STACK_SIZE+0x1e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1ef0:	2813      	cmp	r0, #19
    1ef2:	d100      	bne.n	1ef6 <m2m_wifi_cb+0x32>
    1ef4:	e0ac      	b.n	2050 <STACK_SIZE+0x50>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1ef6:	2804      	cmp	r0, #4
    1ef8:	d100      	bne.n	1efc <m2m_wifi_cb+0x38>
    1efa:	e0bb      	b.n	2074 <STACK_SIZE+0x74>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1efc:	2865      	cmp	r0, #101	; 0x65
    1efe:	d100      	bne.n	1f02 <m2m_wifi_cb+0x3e>
    1f00:	e0ca      	b.n	2098 <STACK_SIZE+0x98>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1f02:	2809      	cmp	r0, #9
    1f04:	d100      	bne.n	1f08 <m2m_wifi_cb+0x44>
    1f06:	e0d9      	b.n	20bc <STACK_SIZE+0xbc>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1f08:	282a      	cmp	r0, #42	; 0x2a
    1f0a:	d100      	bne.n	1f0e <m2m_wifi_cb+0x4a>
    1f0c:	e0e8      	b.n	20e0 <STACK_SIZE+0xe0>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1f0e:	2820      	cmp	r0, #32
    1f10:	d100      	bne.n	1f14 <m2m_wifi_cb+0x50>
    1f12:	e0f7      	b.n	2104 <STACK_SIZE+0x104>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1f14:	2295      	movs	r2, #149	; 0x95
    1f16:	0052      	lsls	r2, r2, #1
    1f18:	4989      	ldr	r1, [pc, #548]	; (2140 <STACK_SIZE+0x140>)
    1f1a:	488a      	ldr	r0, [pc, #552]	; (2144 <STACK_SIZE+0x144>)
    1f1c:	4d8a      	ldr	r5, [pc, #552]	; (2148 <STACK_SIZE+0x148>)
    1f1e:	47a8      	blx	r5
    1f20:	0021      	movs	r1, r4
    1f22:	488a      	ldr	r0, [pc, #552]	; (214c <STACK_SIZE+0x14c>)
    1f24:	47a8      	blx	r5
    1f26:	200d      	movs	r0, #13
    1f28:	4b89      	ldr	r3, [pc, #548]	; (2150 <STACK_SIZE+0x150>)
    1f2a:	4798      	blx	r3
	}
}
    1f2c:	b01f      	add	sp, #124	; 0x7c
    1f2e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1f30:	2300      	movs	r3, #0
    1f32:	2204      	movs	r2, #4
    1f34:	a903      	add	r1, sp, #12
    1f36:	0028      	movs	r0, r5
    1f38:	4c86      	ldr	r4, [pc, #536]	; (2154 <STACK_SIZE+0x154>)
    1f3a:	47a0      	blx	r4
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d1f5      	bne.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f40:	4b85      	ldr	r3, [pc, #532]	; (2158 <STACK_SIZE+0x158>)
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	2b00      	cmp	r3, #0
    1f46:	d0f1      	beq.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1f48:	a903      	add	r1, sp, #12
    1f4a:	302c      	adds	r0, #44	; 0x2c
    1f4c:	4798      	blx	r3
    1f4e:	e7ed      	b.n	1f2c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1f50:	2300      	movs	r3, #0
    1f52:	2208      	movs	r2, #8
    1f54:	a903      	add	r1, sp, #12
    1f56:	0028      	movs	r0, r5
    1f58:	4c7e      	ldr	r4, [pc, #504]	; (2154 <STACK_SIZE+0x154>)
    1f5a:	47a0      	blx	r4
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d1e5      	bne.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f60:	4b7d      	ldr	r3, [pc, #500]	; (2158 <STACK_SIZE+0x158>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d0e1      	beq.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1f68:	a903      	add	r1, sp, #12
    1f6a:	301b      	adds	r0, #27
    1f6c:	4798      	blx	r3
    1f6e:	e7dd      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1f70:	2301      	movs	r3, #1
    1f72:	2230      	movs	r2, #48	; 0x30
    1f74:	a903      	add	r1, sp, #12
    1f76:	0028      	movs	r0, r5
    1f78:	4c76      	ldr	r4, [pc, #472]	; (2154 <STACK_SIZE+0x154>)
    1f7a:	47a0      	blx	r4
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d1d5      	bne.n	1f2c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1f80:	4b75      	ldr	r3, [pc, #468]	; (2158 <STACK_SIZE+0x158>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d0d1      	beq.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1f88:	a903      	add	r1, sp, #12
    1f8a:	3006      	adds	r0, #6
    1f8c:	4798      	blx	r3
    1f8e:	e7cd      	b.n	1f2c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1f90:	2300      	movs	r3, #0
    1f92:	2214      	movs	r2, #20
    1f94:	a903      	add	r1, sp, #12
    1f96:	0028      	movs	r0, r5
    1f98:	4c6e      	ldr	r4, [pc, #440]	; (2154 <STACK_SIZE+0x154>)
    1f9a:	47a0      	blx	r4
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d1c5      	bne.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fa0:	4b6d      	ldr	r3, [pc, #436]	; (2158 <STACK_SIZE+0x158>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d0c1      	beq.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1fa8:	a903      	add	r1, sp, #12
    1faa:	3032      	adds	r0, #50	; 0x32
    1fac:	4798      	blx	r3
    1fae:	e7bd      	b.n	1f2c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1fb0:	2264      	movs	r2, #100	; 0x64
    1fb2:	2100      	movs	r1, #0
    1fb4:	a803      	add	r0, sp, #12
    1fb6:	4b69      	ldr	r3, [pc, #420]	; (215c <STACK_SIZE+0x15c>)
    1fb8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1fba:	2300      	movs	r3, #0
    1fbc:	2264      	movs	r2, #100	; 0x64
    1fbe:	a903      	add	r1, sp, #12
    1fc0:	0028      	movs	r0, r5
    1fc2:	4c64      	ldr	r4, [pc, #400]	; (2154 <STACK_SIZE+0x154>)
    1fc4:	47a0      	blx	r4
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d1b0      	bne.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fca:	4b63      	ldr	r3, [pc, #396]	; (2158 <STACK_SIZE+0x158>)
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d0ac      	beq.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1fd2:	a903      	add	r1, sp, #12
    1fd4:	302f      	adds	r0, #47	; 0x2f
    1fd6:	4798      	blx	r3
    1fd8:	e7a8      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1fda:	2300      	movs	r3, #0
    1fdc:	2204      	movs	r2, #4
    1fde:	a903      	add	r1, sp, #12
    1fe0:	0028      	movs	r0, r5
    1fe2:	4c5c      	ldr	r4, [pc, #368]	; (2154 <STACK_SIZE+0x154>)
    1fe4:	47a0      	blx	r4
    1fe6:	2800      	cmp	r0, #0
    1fe8:	d1a0      	bne.n	1f2c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1fea:	485d      	ldr	r0, [pc, #372]	; (2160 <STACK_SIZE+0x160>)
    1fec:	4d56      	ldr	r5, [pc, #344]	; (2148 <STACK_SIZE+0x148>)
    1fee:	47a8      	blx	r5
    1ff0:	9c03      	ldr	r4, [sp, #12]
    1ff2:	0a23      	lsrs	r3, r4, #8
    1ff4:	20ff      	movs	r0, #255	; 0xff
    1ff6:	4003      	ands	r3, r0
    1ff8:	0c22      	lsrs	r2, r4, #16
    1ffa:	4002      	ands	r2, r0
    1ffc:	0e21      	lsrs	r1, r4, #24
    1ffe:	4020      	ands	r0, r4
    2000:	9000      	str	r0, [sp, #0]
    2002:	4858      	ldr	r0, [pc, #352]	; (2164 <STACK_SIZE+0x164>)
    2004:	47a8      	blx	r5
    2006:	200d      	movs	r0, #13
    2008:	4b51      	ldr	r3, [pc, #324]	; (2150 <STACK_SIZE+0x150>)
    200a:	4798      	blx	r3
			if (gpfAppWifiCb)
    200c:	4b52      	ldr	r3, [pc, #328]	; (2158 <STACK_SIZE+0x158>)
    200e:	681b      	ldr	r3, [r3, #0]
    2010:	2b00      	cmp	r3, #0
    2012:	d100      	bne.n	2016 <STACK_SIZE+0x16>
    2014:	e78a      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2016:	2100      	movs	r1, #0
    2018:	2034      	movs	r0, #52	; 0x34
    201a:	4798      	blx	r3
    201c:	e786      	b.n	1f2c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    201e:	2200      	movs	r2, #0
    2020:	4b51      	ldr	r3, [pc, #324]	; (2168 <STACK_SIZE+0x168>)
    2022:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2024:	2300      	movs	r3, #0
    2026:	3204      	adds	r2, #4
    2028:	a903      	add	r1, sp, #12
    202a:	0028      	movs	r0, r5
    202c:	4c49      	ldr	r4, [pc, #292]	; (2154 <STACK_SIZE+0x154>)
    202e:	47a0      	blx	r4
    2030:	2800      	cmp	r0, #0
    2032:	d000      	beq.n	2036 <STACK_SIZE+0x36>
    2034:	e77a      	b.n	1f2c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    2036:	ab03      	add	r3, sp, #12
    2038:	781a      	ldrb	r2, [r3, #0]
    203a:	4b4c      	ldr	r3, [pc, #304]	; (216c <STACK_SIZE+0x16c>)
    203c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    203e:	4b46      	ldr	r3, [pc, #280]	; (2158 <STACK_SIZE+0x158>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	2b00      	cmp	r3, #0
    2044:	d100      	bne.n	2048 <STACK_SIZE+0x48>
    2046:	e771      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    2048:	a903      	add	r1, sp, #12
    204a:	3011      	adds	r0, #17
    204c:	4798      	blx	r3
    204e:	e76d      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    2050:	2300      	movs	r3, #0
    2052:	222c      	movs	r2, #44	; 0x2c
    2054:	a903      	add	r1, sp, #12
    2056:	0028      	movs	r0, r5
    2058:	4c3e      	ldr	r4, [pc, #248]	; (2154 <STACK_SIZE+0x154>)
    205a:	47a0      	blx	r4
    205c:	2800      	cmp	r0, #0
    205e:	d000      	beq.n	2062 <STACK_SIZE+0x62>
    2060:	e764      	b.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2062:	4b3d      	ldr	r3, [pc, #244]	; (2158 <STACK_SIZE+0x158>)
    2064:	681b      	ldr	r3, [r3, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d100      	bne.n	206c <STACK_SIZE+0x6c>
    206a:	e75f      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    206c:	a903      	add	r1, sp, #12
    206e:	3013      	adds	r0, #19
    2070:	4798      	blx	r3
    2072:	e75b      	b.n	1f2c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2074:	2300      	movs	r3, #0
    2076:	2204      	movs	r2, #4
    2078:	a91c      	add	r1, sp, #112	; 0x70
    207a:	0028      	movs	r0, r5
    207c:	4c35      	ldr	r4, [pc, #212]	; (2154 <STACK_SIZE+0x154>)
    207e:	47a0      	blx	r4
    2080:	2800      	cmp	r0, #0
    2082:	d000      	beq.n	2086 <STACK_SIZE+0x86>
    2084:	e752      	b.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2086:	4b34      	ldr	r3, [pc, #208]	; (2158 <STACK_SIZE+0x158>)
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	2b00      	cmp	r3, #0
    208c:	d100      	bne.n	2090 <STACK_SIZE+0x90>
    208e:	e74d      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    2090:	a91c      	add	r1, sp, #112	; 0x70
    2092:	3004      	adds	r0, #4
    2094:	4798      	blx	r3
    2096:	e749      	b.n	1f2c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2098:	2300      	movs	r3, #0
    209a:	2204      	movs	r2, #4
    209c:	a91c      	add	r1, sp, #112	; 0x70
    209e:	0028      	movs	r0, r5
    20a0:	4c2c      	ldr	r4, [pc, #176]	; (2154 <STACK_SIZE+0x154>)
    20a2:	47a0      	blx	r4
    20a4:	2800      	cmp	r0, #0
    20a6:	d000      	beq.n	20aa <STACK_SIZE+0xaa>
    20a8:	e740      	b.n	1f2c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    20aa:	4b2b      	ldr	r3, [pc, #172]	; (2158 <STACK_SIZE+0x158>)
    20ac:	681b      	ldr	r3, [r3, #0]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d100      	bne.n	20b4 <STACK_SIZE+0xb4>
    20b2:	e73b      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    20b4:	a91c      	add	r1, sp, #112	; 0x70
    20b6:	3065      	adds	r0, #101	; 0x65
    20b8:	4798      	blx	r3
    20ba:	e737      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    20bc:	2301      	movs	r3, #1
    20be:	2264      	movs	r2, #100	; 0x64
    20c0:	a903      	add	r1, sp, #12
    20c2:	0028      	movs	r0, r5
    20c4:	4c23      	ldr	r4, [pc, #140]	; (2154 <STACK_SIZE+0x154>)
    20c6:	47a0      	blx	r4
    20c8:	2800      	cmp	r0, #0
    20ca:	d000      	beq.n	20ce <STACK_SIZE+0xce>
    20cc:	e72e      	b.n	1f2c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    20ce:	4b22      	ldr	r3, [pc, #136]	; (2158 <STACK_SIZE+0x158>)
    20d0:	681b      	ldr	r3, [r3, #0]
    20d2:	2b00      	cmp	r3, #0
    20d4:	d100      	bne.n	20d8 <STACK_SIZE+0xd8>
    20d6:	e729      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    20d8:	a903      	add	r1, sp, #12
    20da:	3009      	adds	r0, #9
    20dc:	4798      	blx	r3
    20de:	e725      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    20e0:	2301      	movs	r3, #1
    20e2:	2204      	movs	r2, #4
    20e4:	a903      	add	r1, sp, #12
    20e6:	0028      	movs	r0, r5
    20e8:	4c1a      	ldr	r4, [pc, #104]	; (2154 <STACK_SIZE+0x154>)
    20ea:	47a0      	blx	r4
    20ec:	2800      	cmp	r0, #0
    20ee:	d000      	beq.n	20f2 <STACK_SIZE+0xf2>
    20f0:	e71c      	b.n	1f2c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    20f2:	4b19      	ldr	r3, [pc, #100]	; (2158 <STACK_SIZE+0x158>)
    20f4:	681b      	ldr	r3, [r3, #0]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d100      	bne.n	20fc <STACK_SIZE+0xfc>
    20fa:	e717      	b.n	1f2c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    20fc:	a903      	add	r1, sp, #12
    20fe:	302a      	adds	r0, #42	; 0x2a
    2100:	4798      	blx	r3
    2102:	e713      	b.n	1f2c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2104:	2300      	movs	r3, #0
    2106:	2208      	movs	r2, #8
    2108:	a903      	add	r1, sp, #12
    210a:	0028      	movs	r0, r5
    210c:	4c11      	ldr	r4, [pc, #68]	; (2154 <STACK_SIZE+0x154>)
    210e:	47a0      	blx	r4
    2110:	2800      	cmp	r0, #0
    2112:	d000      	beq.n	2116 <STACK_SIZE+0x116>
    2114:	e70a      	b.n	1f2c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2116:	ab03      	add	r3, sp, #12
    2118:	889a      	ldrh	r2, [r3, #4]
    211a:	0028      	movs	r0, r5
    211c:	3008      	adds	r0, #8
    211e:	2301      	movs	r3, #1
    2120:	9903      	ldr	r1, [sp, #12]
    2122:	4c0c      	ldr	r4, [pc, #48]	; (2154 <STACK_SIZE+0x154>)
    2124:	47a0      	blx	r4
    2126:	2800      	cmp	r0, #0
    2128:	d000      	beq.n	212c <STACK_SIZE+0x12c>
    212a:	e6ff      	b.n	1f2c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    212c:	4b0a      	ldr	r3, [pc, #40]	; (2158 <STACK_SIZE+0x158>)
    212e:	681b      	ldr	r3, [r3, #0]
    2130:	2b00      	cmp	r3, #0
    2132:	d100      	bne.n	2136 <STACK_SIZE+0x136>
    2134:	e6fa      	b.n	1f2c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    2136:	a903      	add	r1, sp, #12
    2138:	3020      	adds	r0, #32
    213a:	4798      	blx	r3
    213c:	e6f6      	b.n	1f2c <m2m_wifi_cb+0x68>
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	0000bd40 	.word	0x0000bd40
    2144:	0000b9d8 	.word	0x0000b9d8
    2148:	0000a33d 	.word	0x0000a33d
    214c:	0000bd90 	.word	0x0000bd90
    2150:	0000a371 	.word	0x0000a371
    2154:	00001d1d 	.word	0x00001d1d
    2158:	2000037c 	.word	0x2000037c
    215c:	000015fd 	.word	0x000015fd
    2160:	0000bd08 	.word	0x0000bd08
    2164:	0000bd70 	.word	0x0000bd70
    2168:	20000381 	.word	0x20000381
    216c:	20000380 	.word	0x20000380

00002170 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2174:	2201      	movs	r2, #1
    2176:	230f      	movs	r3, #15
    2178:	446b      	add	r3, sp
    217a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    217c:	2800      	cmp	r0, #0
    217e:	d061      	beq.n	2244 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    2180:	6802      	ldr	r2, [r0, #0]
    2182:	4b32      	ldr	r3, [pc, #200]	; (224c <m2m_wifi_init+0xdc>)
    2184:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    2186:	2200      	movs	r2, #0
    2188:	4b31      	ldr	r3, [pc, #196]	; (2250 <m2m_wifi_init+0xe0>)
    218a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    218c:	200f      	movs	r0, #15
    218e:	4468      	add	r0, sp
    2190:	4b30      	ldr	r3, [pc, #192]	; (2254 <m2m_wifi_init+0xe4>)
    2192:	4798      	blx	r3
    2194:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    2196:	d002      	beq.n	219e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    2198:	0020      	movs	r0, r4
    219a:	b00f      	add	sp, #60	; 0x3c
    219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    219e:	2000      	movs	r0, #0
    21a0:	4b2d      	ldr	r3, [pc, #180]	; (2258 <m2m_wifi_init+0xe8>)
    21a2:	4798      	blx	r3
    21a4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    21a6:	d149      	bne.n	223c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    21a8:	492c      	ldr	r1, [pc, #176]	; (225c <m2m_wifi_init+0xec>)
    21aa:	2001      	movs	r0, #1
    21ac:	4b2c      	ldr	r3, [pc, #176]	; (2260 <m2m_wifi_init+0xf0>)
    21ae:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    21b0:	ae04      	add	r6, sp, #16
    21b2:	0030      	movs	r0, r6
    21b4:	4b2b      	ldr	r3, [pc, #172]	; (2264 <m2m_wifi_init+0xf4>)
    21b6:	4798      	blx	r3
    21b8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    21ba:	482b      	ldr	r0, [pc, #172]	; (2268 <m2m_wifi_init+0xf8>)
    21bc:	4d2b      	ldr	r5, [pc, #172]	; (226c <m2m_wifi_init+0xfc>)
    21be:	47a8      	blx	r5
    21c0:	79b3      	ldrb	r3, [r6, #6]
    21c2:	7972      	ldrb	r2, [r6, #5]
    21c4:	7931      	ldrb	r1, [r6, #4]
    21c6:	8c30      	ldrh	r0, [r6, #32]
    21c8:	9000      	str	r0, [sp, #0]
    21ca:	4829      	ldr	r0, [pc, #164]	; (2270 <m2m_wifi_init+0x100>)
    21cc:	47a8      	blx	r5
    21ce:	200d      	movs	r0, #13
    21d0:	4f28      	ldr	r7, [pc, #160]	; (2274 <m2m_wifi_init+0x104>)
    21d2:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    21d4:	4824      	ldr	r0, [pc, #144]	; (2268 <m2m_wifi_init+0xf8>)
    21d6:	47a8      	blx	r5
    21d8:	2226      	movs	r2, #38	; 0x26
    21da:	446a      	add	r2, sp
    21dc:	211a      	movs	r1, #26
    21de:	4469      	add	r1, sp
    21e0:	4825      	ldr	r0, [pc, #148]	; (2278 <m2m_wifi_init+0x108>)
    21e2:	47a8      	blx	r5
    21e4:	200d      	movs	r0, #13
    21e6:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    21e8:	481f      	ldr	r0, [pc, #124]	; (2268 <m2m_wifi_init+0xf8>)
    21ea:	47a8      	blx	r5
    21ec:	7a73      	ldrb	r3, [r6, #9]
    21ee:	7a32      	ldrb	r2, [r6, #8]
    21f0:	79f1      	ldrb	r1, [r6, #7]
    21f2:	4822      	ldr	r0, [pc, #136]	; (227c <m2m_wifi_init+0x10c>)
    21f4:	47a8      	blx	r5
    21f6:	200d      	movs	r0, #13
    21f8:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    21fa:	481b      	ldr	r0, [pc, #108]	; (2268 <m2m_wifi_init+0xf8>)
    21fc:	47a8      	blx	r5
    21fe:	2302      	movs	r3, #2
    2200:	2205      	movs	r2, #5
    2202:	2113      	movs	r1, #19
    2204:	481e      	ldr	r0, [pc, #120]	; (2280 <m2m_wifi_init+0x110>)
    2206:	47a8      	blx	r5
    2208:	200d      	movs	r0, #13
    220a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    220c:	4816      	ldr	r0, [pc, #88]	; (2268 <m2m_wifi_init+0xf8>)
    220e:	47a8      	blx	r5
    2210:	4a1c      	ldr	r2, [pc, #112]	; (2284 <m2m_wifi_init+0x114>)
    2212:	491d      	ldr	r1, [pc, #116]	; (2288 <m2m_wifi_init+0x118>)
    2214:	481d      	ldr	r0, [pc, #116]	; (228c <m2m_wifi_init+0x11c>)
    2216:	47a8      	blx	r5
    2218:	200d      	movs	r0, #13
    221a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    221c:	0023      	movs	r3, r4
    221e:	330d      	adds	r3, #13
    2220:	d1ba      	bne.n	2198 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    2222:	22ee      	movs	r2, #238	; 0xee
    2224:	32ff      	adds	r2, #255	; 0xff
    2226:	491a      	ldr	r1, [pc, #104]	; (2290 <m2m_wifi_init+0x120>)
    2228:	481a      	ldr	r0, [pc, #104]	; (2294 <m2m_wifi_init+0x124>)
    222a:	4b10      	ldr	r3, [pc, #64]	; (226c <m2m_wifi_init+0xfc>)
    222c:	4798      	blx	r3
    222e:	481a      	ldr	r0, [pc, #104]	; (2298 <m2m_wifi_init+0x128>)
    2230:	4b1a      	ldr	r3, [pc, #104]	; (229c <m2m_wifi_init+0x12c>)
    2232:	4798      	blx	r3
    2234:	200d      	movs	r0, #13
    2236:	4b0f      	ldr	r3, [pc, #60]	; (2274 <m2m_wifi_init+0x104>)
    2238:	4798      	blx	r3
    223a:	e7ad      	b.n	2198 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    223c:	2000      	movs	r0, #0
    223e:	4b18      	ldr	r3, [pc, #96]	; (22a0 <m2m_wifi_init+0x130>)
    2240:	4798      	blx	r3
    2242:	e7a9      	b.n	2198 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    2244:	240c      	movs	r4, #12
    2246:	4264      	negs	r4, r4
    2248:	e7a6      	b.n	2198 <m2m_wifi_init+0x28>
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	2000037c 	.word	0x2000037c
    2250:	20000381 	.word	0x20000381
    2254:	00002c11 	.word	0x00002c11
    2258:	00001e8d 	.word	0x00001e8d
    225c:	00001ec5 	.word	0x00001ec5
    2260:	00001e09 	.word	0x00001e09
    2264:	00002b2d 	.word	0x00002b2d
    2268:	0000bd08 	.word	0x0000bd08
    226c:	0000a33d 	.word	0x0000a33d
    2270:	0000be4c 	.word	0x0000be4c
    2274:	0000a371 	.word	0x0000a371
    2278:	0000be74 	.word	0x0000be74
    227c:	0000be90 	.word	0x0000be90
    2280:	0000beb4 	.word	0x0000beb4
    2284:	0000becc 	.word	0x0000becc
    2288:	0000bed8 	.word	0x0000bed8
    228c:	0000bee4 	.word	0x0000bee4
    2290:	0000bd4c 	.word	0x0000bd4c
    2294:	0000b9d8 	.word	0x0000b9d8
    2298:	0000befc 	.word	0x0000befc
    229c:	0000a459 	.word	0x0000a459
    22a0:	00002ce5 	.word	0x00002ce5

000022a4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    22a4:	b510      	push	{r4, lr}
	return hif_handle_isr();
    22a6:	4b01      	ldr	r3, [pc, #4]	; (22ac <m2m_wifi_handle_events+0x8>)
    22a8:	4798      	blx	r3
}
    22aa:	bd10      	pop	{r4, pc}
    22ac:	00001941 	.word	0x00001941

000022b0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b2:	46ce      	mov	lr, r9
    22b4:	4647      	mov	r7, r8
    22b6:	b580      	push	{r7, lr}
    22b8:	b0a3      	sub	sp, #140	; 0x8c
    22ba:	9005      	str	r0, [sp, #20]
    22bc:	000c      	movs	r4, r1
    22be:	0015      	movs	r5, r2
    22c0:	001f      	movs	r7, r3
    22c2:	ab2a      	add	r3, sp, #168	; 0xa8
    22c4:	881b      	ldrh	r3, [r3, #0]
    22c6:	4699      	mov	r9, r3
    22c8:	ab2b      	add	r3, sp, #172	; 0xac
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    22ce:	2a01      	cmp	r2, #1
    22d0:	d003      	beq.n	22da <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    22d2:	2f00      	cmp	r7, #0
    22d4:	d040      	beq.n	2358 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    22d6:	2a02      	cmp	r2, #2
    22d8:	d04c      	beq.n	2374 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    22da:	1e63      	subs	r3, r4, #1
    22dc:	2b1f      	cmp	r3, #31
    22de:	d900      	bls.n	22e2 <m2m_wifi_connect_sc+0x32>
    22e0:	e078      	b.n	23d4 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    22e2:	464b      	mov	r3, r9
    22e4:	3b01      	subs	r3, #1
    22e6:	b29b      	uxth	r3, r3
    22e8:	2b0d      	cmp	r3, #13
    22ea:	d903      	bls.n	22f4 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    22ec:	464b      	mov	r3, r9
    22ee:	2bff      	cmp	r3, #255	; 0xff
    22f0:	d000      	beq.n	22f4 <m2m_wifi_connect_sc+0x44>
    22f2:	e07d      	b.n	23f0 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    22f4:	ae07      	add	r6, sp, #28
    22f6:	0022      	movs	r2, r4
    22f8:	9905      	ldr	r1, [sp, #20]
    22fa:	205a      	movs	r0, #90	; 0x5a
    22fc:	ab02      	add	r3, sp, #8
    22fe:	469c      	mov	ip, r3
    2300:	4460      	add	r0, ip
    2302:	4b78      	ldr	r3, [pc, #480]	; (24e4 <m2m_wifi_connect_sc+0x234>)
    2304:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2306:	1934      	adds	r4, r6, r4
    2308:	3446      	adds	r4, #70	; 0x46
    230a:	2300      	movs	r3, #0
    230c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    230e:	3344      	adds	r3, #68	; 0x44
    2310:	464a      	mov	r2, r9
    2312:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2314:	4643      	mov	r3, r8
    2316:	1e5a      	subs	r2, r3, #1
    2318:	4193      	sbcs	r3, r2
    231a:	2267      	movs	r2, #103	; 0x67
    231c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    231e:	2341      	movs	r3, #65	; 0x41
    2320:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2322:	2d03      	cmp	r5, #3
    2324:	d100      	bne.n	2328 <m2m_wifi_connect_sc+0x78>
    2326:	e071      	b.n	240c <m2m_wifi_connect_sc+0x15c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2328:	2d02      	cmp	r5, #2
    232a:	d100      	bne.n	232e <m2m_wifi_connect_sc+0x7e>
    232c:	e0ab      	b.n	2486 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    232e:	2d04      	cmp	r5, #4
    2330:	d100      	bne.n	2334 <m2m_wifi_connect_sc+0x84>
    2332:	e0c3      	b.n	24bc <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2334:	2d01      	cmp	r5, #1
    2336:	d000      	beq.n	233a <m2m_wifi_connect_sc+0x8a>
    2338:	e0c6      	b.n	24c8 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    233a:	2300      	movs	r3, #0
    233c:	9302      	str	r3, [sp, #8]
    233e:	9301      	str	r3, [sp, #4]
    2340:	9300      	str	r3, [sp, #0]
    2342:	336c      	adds	r3, #108	; 0x6c
    2344:	aa07      	add	r2, sp, #28
    2346:	2128      	movs	r1, #40	; 0x28
    2348:	2001      	movs	r0, #1
    234a:	4c67      	ldr	r4, [pc, #412]	; (24e8 <m2m_wifi_connect_sc+0x238>)
    234c:	47a0      	blx	r4

ERR1:
	return ret;
}
    234e:	b023      	add	sp, #140	; 0x8c
    2350:	bc0c      	pop	{r2, r3}
    2352:	4690      	mov	r8, r2
    2354:	4699      	mov	r9, r3
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    2358:	4a64      	ldr	r2, [pc, #400]	; (24ec <m2m_wifi_connect_sc+0x23c>)
    235a:	4965      	ldr	r1, [pc, #404]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    235c:	4865      	ldr	r0, [pc, #404]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    235e:	4b66      	ldr	r3, [pc, #408]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    2360:	4798      	blx	r3
    2362:	4866      	ldr	r0, [pc, #408]	; (24fc <m2m_wifi_connect_sc+0x24c>)
    2364:	4b66      	ldr	r3, [pc, #408]	; (2500 <m2m_wifi_connect_sc+0x250>)
    2366:	4798      	blx	r3
    2368:	200d      	movs	r0, #13
    236a:	4b66      	ldr	r3, [pc, #408]	; (2504 <m2m_wifi_connect_sc+0x254>)
    236c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    236e:	200c      	movs	r0, #12
    2370:	4240      	negs	r0, r0
			goto ERR1;
    2372:	e7ec      	b.n	234e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2374:	0038      	movs	r0, r7
    2376:	4b64      	ldr	r3, [pc, #400]	; (2508 <m2m_wifi_connect_sc+0x258>)
    2378:	4798      	blx	r3
    237a:	2840      	cmp	r0, #64	; 0x40
    237c:	d1ad      	bne.n	22da <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    237e:	783b      	ldrb	r3, [r7, #0]
    2380:	001a      	movs	r2, r3
    2382:	3a30      	subs	r2, #48	; 0x30
    2384:	2a36      	cmp	r2, #54	; 0x36
    2386:	d817      	bhi.n	23b8 <m2m_wifi_connect_sc+0x108>
    2388:	3a0a      	subs	r2, #10
    238a:	2a06      	cmp	r2, #6
    238c:	d914      	bls.n	23b8 <m2m_wifi_connect_sc+0x108>
    238e:	3b47      	subs	r3, #71	; 0x47
    2390:	2b19      	cmp	r3, #25
    2392:	d911      	bls.n	23b8 <m2m_wifi_connect_sc+0x108>
    2394:	1c7a      	adds	r2, r7, #1
    2396:	0038      	movs	r0, r7
    2398:	3040      	adds	r0, #64	; 0x40
    239a:	7813      	ldrb	r3, [r2, #0]
    239c:	0019      	movs	r1, r3
    239e:	3930      	subs	r1, #48	; 0x30
    23a0:	2936      	cmp	r1, #54	; 0x36
    23a2:	d809      	bhi.n	23b8 <m2m_wifi_connect_sc+0x108>
    23a4:	390a      	subs	r1, #10
    23a6:	2906      	cmp	r1, #6
    23a8:	d906      	bls.n	23b8 <m2m_wifi_connect_sc+0x108>
    23aa:	3b47      	subs	r3, #71	; 0x47
    23ac:	2b19      	cmp	r3, #25
    23ae:	d903      	bls.n	23b8 <m2m_wifi_connect_sc+0x108>
    23b0:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    23b2:	4282      	cmp	r2, r0
    23b4:	d1f1      	bne.n	239a <m2m_wifi_connect_sc+0xea>
    23b6:	e790      	b.n	22da <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    23b8:	4a54      	ldr	r2, [pc, #336]	; (250c <m2m_wifi_connect_sc+0x25c>)
    23ba:	494d      	ldr	r1, [pc, #308]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    23bc:	484d      	ldr	r0, [pc, #308]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    23be:	4b4e      	ldr	r3, [pc, #312]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    23c0:	4798      	blx	r3
    23c2:	4853      	ldr	r0, [pc, #332]	; (2510 <m2m_wifi_connect_sc+0x260>)
    23c4:	4b4e      	ldr	r3, [pc, #312]	; (2500 <m2m_wifi_connect_sc+0x250>)
    23c6:	4798      	blx	r3
    23c8:	200d      	movs	r0, #13
    23ca:	4b4e      	ldr	r3, [pc, #312]	; (2504 <m2m_wifi_connect_sc+0x254>)
    23cc:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    23ce:	200c      	movs	r0, #12
    23d0:	4240      	negs	r0, r0
					goto ERR1;
    23d2:	e7bc      	b.n	234e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    23d4:	4a4f      	ldr	r2, [pc, #316]	; (2514 <m2m_wifi_connect_sc+0x264>)
    23d6:	4946      	ldr	r1, [pc, #280]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    23d8:	4846      	ldr	r0, [pc, #280]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    23da:	4b47      	ldr	r3, [pc, #284]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    23dc:	4798      	blx	r3
    23de:	484e      	ldr	r0, [pc, #312]	; (2518 <m2m_wifi_connect_sc+0x268>)
    23e0:	4b47      	ldr	r3, [pc, #284]	; (2500 <m2m_wifi_connect_sc+0x250>)
    23e2:	4798      	blx	r3
    23e4:	200d      	movs	r0, #13
    23e6:	4b47      	ldr	r3, [pc, #284]	; (2504 <m2m_wifi_connect_sc+0x254>)
    23e8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    23ea:	200c      	movs	r0, #12
    23ec:	4240      	negs	r0, r0
		goto ERR1;
    23ee:	e7ae      	b.n	234e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    23f0:	4a4a      	ldr	r2, [pc, #296]	; (251c <m2m_wifi_connect_sc+0x26c>)
    23f2:	493f      	ldr	r1, [pc, #252]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    23f4:	483f      	ldr	r0, [pc, #252]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    23f6:	4b40      	ldr	r3, [pc, #256]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    23f8:	4798      	blx	r3
    23fa:	4849      	ldr	r0, [pc, #292]	; (2520 <m2m_wifi_connect_sc+0x270>)
    23fc:	4b40      	ldr	r3, [pc, #256]	; (2500 <m2m_wifi_connect_sc+0x250>)
    23fe:	4798      	blx	r3
    2400:	200d      	movs	r0, #13
    2402:	4b40      	ldr	r3, [pc, #256]	; (2504 <m2m_wifi_connect_sc+0x254>)
    2404:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2406:	200c      	movs	r0, #12
    2408:	4240      	negs	r0, r0
			goto ERR1;
    240a:	e7a0      	b.n	234e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    240c:	783b      	ldrb	r3, [r7, #0]
    240e:	3b01      	subs	r3, #1
    2410:	b2db      	uxtb	r3, r3
    2412:	aa07      	add	r2, sp, #28
    2414:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2416:	2b03      	cmp	r3, #3
    2418:	d818      	bhi.n	244c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    241a:	787a      	ldrb	r2, [r7, #1]
    241c:	1e51      	subs	r1, r2, #1
    241e:	ab07      	add	r3, sp, #28
    2420:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2422:	2310      	movs	r3, #16
    2424:	0011      	movs	r1, r2
    2426:	4399      	bics	r1, r3
    2428:	290b      	cmp	r1, #11
    242a:	d01e      	beq.n	246a <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    242c:	2296      	movs	r2, #150	; 0x96
    242e:	0092      	lsls	r2, r2, #2
    2430:	492f      	ldr	r1, [pc, #188]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    2432:	4830      	ldr	r0, [pc, #192]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    2434:	4c30      	ldr	r4, [pc, #192]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    2436:	47a0      	blx	r4
    2438:	ab07      	add	r3, sp, #28
    243a:	7859      	ldrb	r1, [r3, #1]
    243c:	4839      	ldr	r0, [pc, #228]	; (2524 <m2m_wifi_connect_sc+0x274>)
    243e:	47a0      	blx	r4
    2440:	200d      	movs	r0, #13
    2442:	4b30      	ldr	r3, [pc, #192]	; (2504 <m2m_wifi_connect_sc+0x254>)
    2444:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2446:	200c      	movs	r0, #12
    2448:	4240      	negs	r0, r0
			goto ERR1;
    244a:	e780      	b.n	234e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    244c:	4a36      	ldr	r2, [pc, #216]	; (2528 <m2m_wifi_connect_sc+0x278>)
    244e:	4928      	ldr	r1, [pc, #160]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    2450:	4828      	ldr	r0, [pc, #160]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    2452:	4c29      	ldr	r4, [pc, #164]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    2454:	47a0      	blx	r4
    2456:	ab07      	add	r3, sp, #28
    2458:	7819      	ldrb	r1, [r3, #0]
    245a:	4834      	ldr	r0, [pc, #208]	; (252c <m2m_wifi_connect_sc+0x27c>)
    245c:	47a0      	blx	r4
    245e:	200d      	movs	r0, #13
    2460:	4b28      	ldr	r3, [pc, #160]	; (2504 <m2m_wifi_connect_sc+0x254>)
    2462:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2464:	200c      	movs	r0, #12
    2466:	4240      	negs	r0, r0
			goto ERR1;
    2468:	e771      	b.n	234e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    246a:	1cb9      	adds	r1, r7, #2
    246c:	2016      	movs	r0, #22
    246e:	ab02      	add	r3, sp, #8
    2470:	469c      	mov	ip, r3
    2472:	4460      	add	r0, ip
    2474:	4b1b      	ldr	r3, [pc, #108]	; (24e4 <m2m_wifi_connect_sc+0x234>)
    2476:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    2478:	787b      	ldrb	r3, [r7, #1]
    247a:	aa07      	add	r2, sp, #28
    247c:	4694      	mov	ip, r2
    247e:	4463      	add	r3, ip
    2480:	2200      	movs	r2, #0
    2482:	709a      	strb	r2, [r3, #2]
    2484:	e759      	b.n	233a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2486:	0038      	movs	r0, r7
    2488:	4b1f      	ldr	r3, [pc, #124]	; (2508 <m2m_wifi_connect_sc+0x258>)
    248a:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    248c:	1e43      	subs	r3, r0, #1
    248e:	b29b      	uxth	r3, r3
    2490:	2b3f      	cmp	r3, #63	; 0x3f
    2492:	d805      	bhi.n	24a0 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2494:	1c42      	adds	r2, r0, #1
    2496:	0039      	movs	r1, r7
    2498:	a807      	add	r0, sp, #28
    249a:	4b12      	ldr	r3, [pc, #72]	; (24e4 <m2m_wifi_connect_sc+0x234>)
    249c:	4798      	blx	r3
    249e:	e74c      	b.n	233a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    24a0:	4a23      	ldr	r2, [pc, #140]	; (2530 <m2m_wifi_connect_sc+0x280>)
    24a2:	4913      	ldr	r1, [pc, #76]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    24a4:	4813      	ldr	r0, [pc, #76]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    24a6:	4b14      	ldr	r3, [pc, #80]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    24a8:	4798      	blx	r3
    24aa:	4822      	ldr	r0, [pc, #136]	; (2534 <m2m_wifi_connect_sc+0x284>)
    24ac:	4b14      	ldr	r3, [pc, #80]	; (2500 <m2m_wifi_connect_sc+0x250>)
    24ae:	4798      	blx	r3
    24b0:	200d      	movs	r0, #13
    24b2:	4b14      	ldr	r3, [pc, #80]	; (2504 <m2m_wifi_connect_sc+0x254>)
    24b4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24b6:	200c      	movs	r0, #12
    24b8:	4240      	negs	r0, r0
			goto ERR1;
    24ba:	e748      	b.n	234e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    24bc:	223e      	movs	r2, #62	; 0x3e
    24be:	0039      	movs	r1, r7
    24c0:	a807      	add	r0, sp, #28
    24c2:	4b08      	ldr	r3, [pc, #32]	; (24e4 <m2m_wifi_connect_sc+0x234>)
    24c4:	4798      	blx	r3
    24c6:	e738      	b.n	233a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    24c8:	4a1b      	ldr	r2, [pc, #108]	; (2538 <m2m_wifi_connect_sc+0x288>)
    24ca:	4909      	ldr	r1, [pc, #36]	; (24f0 <m2m_wifi_connect_sc+0x240>)
    24cc:	4809      	ldr	r0, [pc, #36]	; (24f4 <m2m_wifi_connect_sc+0x244>)
    24ce:	4b0a      	ldr	r3, [pc, #40]	; (24f8 <m2m_wifi_connect_sc+0x248>)
    24d0:	4798      	blx	r3
    24d2:	481a      	ldr	r0, [pc, #104]	; (253c <m2m_wifi_connect_sc+0x28c>)
    24d4:	4b0a      	ldr	r3, [pc, #40]	; (2500 <m2m_wifi_connect_sc+0x250>)
    24d6:	4798      	blx	r3
    24d8:	200d      	movs	r0, #13
    24da:	4b0a      	ldr	r3, [pc, #40]	; (2504 <m2m_wifi_connect_sc+0x254>)
    24dc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    24de:	200c      	movs	r0, #12
    24e0:	4240      	negs	r0, r0
		goto ERR1;
    24e2:	e734      	b.n	234e <m2m_wifi_connect_sc+0x9e>
    24e4:	000015e9 	.word	0x000015e9
    24e8:	00001711 	.word	0x00001711
    24ec:	0000021b 	.word	0x0000021b
    24f0:	0000bd5c 	.word	0x0000bd5c
    24f4:	0000b9d8 	.word	0x0000b9d8
    24f8:	0000a33d 	.word	0x0000a33d
    24fc:	0000bda4 	.word	0x0000bda4
    2500:	0000a459 	.word	0x0000a459
    2504:	0000a371 	.word	0x0000a371
    2508:	0000160d 	.word	0x0000160d
    250c:	00000227 	.word	0x00000227
    2510:	0000bdb8 	.word	0x0000bdb8
    2514:	00000231 	.word	0x00000231
    2518:	0000bdc4 	.word	0x0000bdc4
    251c:	0000023a 	.word	0x0000023a
    2520:	0000bdd8 	.word	0x0000bdd8
    2524:	0000be00 	.word	0x0000be00
    2528:	00000251 	.word	0x00000251
    252c:	0000bde4 	.word	0x0000bde4
    2530:	00000267 	.word	0x00000267
    2534:	0000be1c 	.word	0x0000be1c
    2538:	00000277 	.word	0x00000277
    253c:	0000be38 	.word	0x0000be38

00002540 <m2m_wifi_connect>:
{
    2540:	b530      	push	{r4, r5, lr}
    2542:	b083      	sub	sp, #12
    2544:	ac06      	add	r4, sp, #24
    2546:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2548:	2500      	movs	r5, #0
    254a:	9501      	str	r5, [sp, #4]
    254c:	9400      	str	r4, [sp, #0]
    254e:	4c02      	ldr	r4, [pc, #8]	; (2558 <m2m_wifi_connect+0x18>)
    2550:	47a0      	blx	r4
}
    2552:	b003      	add	sp, #12
    2554:	bd30      	pop	{r4, r5, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	000022b1 	.word	0x000022b1

0000255c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    255c:	2000      	movs	r0, #0
    255e:	4770      	bx	lr

00002560 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2560:	b5f0      	push	{r4, r5, r6, r7, lr}
    2562:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2564:	2580      	movs	r5, #128	; 0x80
    2566:	006d      	lsls	r5, r5, #1
    2568:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    256a:	24a5      	movs	r4, #165	; 0xa5
    256c:	0164      	lsls	r4, r4, #5
    256e:	4f08      	ldr	r7, [pc, #32]	; (2590 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2570:	4e08      	ldr	r6, [pc, #32]	; (2594 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    2572:	0029      	movs	r1, r5
    2574:	0020      	movs	r0, r4
    2576:	47b8      	blx	r7
			uint32 reg = 0;
    2578:	2300      	movs	r3, #0
    257a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    257c:	a901      	add	r1, sp, #4
    257e:	0020      	movs	r0, r4
    2580:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    2582:	2800      	cmp	r0, #0
    2584:	d1f5      	bne.n	2572 <chip_apply_conf+0x12>
				if(reg == val32)
    2586:	9b01      	ldr	r3, [sp, #4]
    2588:	429d      	cmp	r5, r3
    258a:	d1f2      	bne.n	2572 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    258c:	b003      	add	sp, #12
    258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2590:	00002a51 	.word	0x00002a51
    2594:	00002a45 	.word	0x00002a45

00002598 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2598:	b500      	push	{lr}
    259a:	b083      	sub	sp, #12
	uint32 reg = 0;
    259c:	2300      	movs	r3, #0
    259e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    25a0:	a901      	add	r1, sp, #4
    25a2:	4811      	ldr	r0, [pc, #68]	; (25e8 <enable_interrupts+0x50>)
    25a4:	4b11      	ldr	r3, [pc, #68]	; (25ec <enable_interrupts+0x54>)
    25a6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    25a8:	2800      	cmp	r0, #0
    25aa:	d001      	beq.n	25b0 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    25ac:	b003      	add	sp, #12
    25ae:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    25b0:	2180      	movs	r1, #128	; 0x80
    25b2:	0049      	lsls	r1, r1, #1
    25b4:	9b01      	ldr	r3, [sp, #4]
    25b6:	4319      	orrs	r1, r3
    25b8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    25ba:	480b      	ldr	r0, [pc, #44]	; (25e8 <enable_interrupts+0x50>)
    25bc:	4b0c      	ldr	r3, [pc, #48]	; (25f0 <enable_interrupts+0x58>)
    25be:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    25c0:	2800      	cmp	r0, #0
    25c2:	d1f3      	bne.n	25ac <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    25c4:	a901      	add	r1, sp, #4
    25c6:	20d0      	movs	r0, #208	; 0xd0
    25c8:	0140      	lsls	r0, r0, #5
    25ca:	4b08      	ldr	r3, [pc, #32]	; (25ec <enable_interrupts+0x54>)
    25cc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    25ce:	2800      	cmp	r0, #0
    25d0:	d1ec      	bne.n	25ac <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    25d2:	2180      	movs	r1, #128	; 0x80
    25d4:	0249      	lsls	r1, r1, #9
    25d6:	9b01      	ldr	r3, [sp, #4]
    25d8:	4319      	orrs	r1, r3
    25da:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    25dc:	20d0      	movs	r0, #208	; 0xd0
    25de:	0140      	lsls	r0, r0, #5
    25e0:	4b03      	ldr	r3, [pc, #12]	; (25f0 <enable_interrupts+0x58>)
    25e2:	4798      	blx	r3
    25e4:	e7e2      	b.n	25ac <enable_interrupts+0x14>
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	00001408 	.word	0x00001408
    25ec:	00002a45 	.word	0x00002a45
    25f0:	00002a51 	.word	0x00002a51

000025f4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    25f4:	b510      	push	{r4, lr}
    25f6:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    25f8:	4b28      	ldr	r3, [pc, #160]	; (269c <nmi_get_chipid+0xa8>)
    25fa:	681c      	ldr	r4, [r3, #0]
    25fc:	2c00      	cmp	r4, #0
    25fe:	d004      	beq.n	260a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2600:	4b26      	ldr	r3, [pc, #152]	; (269c <nmi_get_chipid+0xa8>)
    2602:	681c      	ldr	r4, [r3, #0]
}
    2604:	0020      	movs	r0, r4
    2606:	b002      	add	sp, #8
    2608:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    260a:	0019      	movs	r1, r3
    260c:	2080      	movs	r0, #128	; 0x80
    260e:	0140      	lsls	r0, r0, #5
    2610:	4b23      	ldr	r3, [pc, #140]	; (26a0 <nmi_get_chipid+0xac>)
    2612:	4798      	blx	r3
    2614:	2800      	cmp	r0, #0
    2616:	d003      	beq.n	2620 <nmi_get_chipid+0x2c>
			chipid = 0;
    2618:	2200      	movs	r2, #0
    261a:	4b20      	ldr	r3, [pc, #128]	; (269c <nmi_get_chipid+0xa8>)
    261c:	601a      	str	r2, [r3, #0]
			return 0;
    261e:	e7f1      	b.n	2604 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2620:	a901      	add	r1, sp, #4
    2622:	4820      	ldr	r0, [pc, #128]	; (26a4 <nmi_get_chipid+0xb0>)
    2624:	4b1e      	ldr	r3, [pc, #120]	; (26a0 <nmi_get_chipid+0xac>)
    2626:	4798      	blx	r3
    2628:	2800      	cmp	r0, #0
    262a:	d003      	beq.n	2634 <nmi_get_chipid+0x40>
			chipid = 0;
    262c:	2200      	movs	r2, #0
    262e:	4b1b      	ldr	r3, [pc, #108]	; (269c <nmi_get_chipid+0xa8>)
    2630:	601a      	str	r2, [r3, #0]
			return 0;
    2632:	e7e7      	b.n	2604 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2634:	4b19      	ldr	r3, [pc, #100]	; (269c <nmi_get_chipid+0xa8>)
    2636:	681b      	ldr	r3, [r3, #0]
    2638:	4a1b      	ldr	r2, [pc, #108]	; (26a8 <nmi_get_chipid+0xb4>)
    263a:	4293      	cmp	r3, r2
    263c:	d00e      	beq.n	265c <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    263e:	4a1b      	ldr	r2, [pc, #108]	; (26ac <nmi_get_chipid+0xb8>)
    2640:	4293      	cmp	r3, r2
    2642:	d012      	beq.n	266a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    2644:	4a1a      	ldr	r2, [pc, #104]	; (26b0 <nmi_get_chipid+0xbc>)
    2646:	4293      	cmp	r3, r2
    2648:	d01c      	beq.n	2684 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    264a:	4914      	ldr	r1, [pc, #80]	; (269c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    264c:	4a19      	ldr	r2, [pc, #100]	; (26b4 <nmi_get_chipid+0xc0>)
    264e:	680b      	ldr	r3, [r1, #0]
    2650:	401a      	ands	r2, r3
		chipid |= 0x050000;
    2652:	23a0      	movs	r3, #160	; 0xa0
    2654:	02db      	lsls	r3, r3, #11
    2656:	4313      	orrs	r3, r2
    2658:	600b      	str	r3, [r1, #0]
    265a:	e7d1      	b.n	2600 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    265c:	9b01      	ldr	r3, [sp, #4]
    265e:	2b01      	cmp	r3, #1
    2660:	d0f3      	beq.n	264a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    2662:	4a15      	ldr	r2, [pc, #84]	; (26b8 <nmi_get_chipid+0xc4>)
    2664:	4b0d      	ldr	r3, [pc, #52]	; (269c <nmi_get_chipid+0xa8>)
    2666:	601a      	str	r2, [r3, #0]
    2668:	e7ef      	b.n	264a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    266a:	9b01      	ldr	r3, [sp, #4]
    266c:	2b03      	cmp	r3, #3
    266e:	d0ec      	beq.n	264a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    2670:	2b04      	cmp	r3, #4
    2672:	d003      	beq.n	267c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    2674:	4a11      	ldr	r2, [pc, #68]	; (26bc <nmi_get_chipid+0xc8>)
    2676:	4b09      	ldr	r3, [pc, #36]	; (269c <nmi_get_chipid+0xa8>)
    2678:	601a      	str	r2, [r3, #0]
    267a:	e7e6      	b.n	264a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    267c:	4a10      	ldr	r2, [pc, #64]	; (26c0 <nmi_get_chipid+0xcc>)
    267e:	4b07      	ldr	r3, [pc, #28]	; (269c <nmi_get_chipid+0xa8>)
    2680:	601a      	str	r2, [r3, #0]
    2682:	e7e2      	b.n	264a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2684:	4905      	ldr	r1, [pc, #20]	; (269c <nmi_get_chipid+0xa8>)
    2686:	20ec      	movs	r0, #236	; 0xec
    2688:	0380      	lsls	r0, r0, #14
    268a:	4b05      	ldr	r3, [pc, #20]	; (26a0 <nmi_get_chipid+0xac>)
    268c:	4798      	blx	r3
    268e:	2800      	cmp	r0, #0
    2690:	d0db      	beq.n	264a <nmi_get_chipid+0x56>
			chipid = 0;
    2692:	2200      	movs	r2, #0
    2694:	4b01      	ldr	r3, [pc, #4]	; (269c <nmi_get_chipid+0xa8>)
    2696:	601a      	str	r2, [r3, #0]
			return 0;
    2698:	e7b4      	b.n	2604 <nmi_get_chipid+0x10>
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	20000384 	.word	0x20000384
    26a0:	00002a45 	.word	0x00002a45
    26a4:	000013f4 	.word	0x000013f4
    26a8:	001002a0 	.word	0x001002a0
    26ac:	001002b0 	.word	0x001002b0
    26b0:	001000f0 	.word	0x001000f0
    26b4:	fff0ffff 	.word	0xfff0ffff
    26b8:	001002a1 	.word	0x001002a1
    26bc:	001002b2 	.word	0x001002b2
    26c0:	001002b1 	.word	0x001002b1

000026c4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    26c4:	b530      	push	{r4, r5, lr}
    26c6:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    26c8:	4c16      	ldr	r4, [pc, #88]	; (2724 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    26ca:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    26cc:	a901      	add	r1, sp, #4
    26ce:	2010      	movs	r0, #16
    26d0:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    26d2:	2800      	cmp	r0, #0
    26d4:	d11c      	bne.n	2710 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	422b      	tst	r3, r5
    26da:	d1f7      	bne.n	26cc <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    26dc:	a901      	add	r1, sp, #4
    26de:	3001      	adds	r0, #1
    26e0:	4b10      	ldr	r3, [pc, #64]	; (2724 <chip_sleep+0x60>)
    26e2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    26e4:	2800      	cmp	r0, #0
    26e6:	d113      	bne.n	2710 <chip_sleep+0x4c>
	if(reg & NBIT1)
    26e8:	9901      	ldr	r1, [sp, #4]
    26ea:	078b      	lsls	r3, r1, #30
    26ec:	d507      	bpl.n	26fe <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    26ee:	2302      	movs	r3, #2
    26f0:	4399      	bics	r1, r3
    26f2:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    26f4:	3001      	adds	r0, #1
    26f6:	4b0c      	ldr	r3, [pc, #48]	; (2728 <chip_sleep+0x64>)
    26f8:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    26fa:	2800      	cmp	r0, #0
    26fc:	d108      	bne.n	2710 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    26fe:	a901      	add	r1, sp, #4
    2700:	200b      	movs	r0, #11
    2702:	4b08      	ldr	r3, [pc, #32]	; (2724 <chip_sleep+0x60>)
    2704:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2706:	2800      	cmp	r0, #0
    2708:	d102      	bne.n	2710 <chip_sleep+0x4c>
	if(reg & NBIT0)
    270a:	9901      	ldr	r1, [sp, #4]
    270c:	07cb      	lsls	r3, r1, #31
    270e:	d401      	bmi.n	2714 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2710:	b003      	add	sp, #12
    2712:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2714:	2301      	movs	r3, #1
    2716:	4399      	bics	r1, r3
    2718:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    271a:	300b      	adds	r0, #11
    271c:	4b02      	ldr	r3, [pc, #8]	; (2728 <chip_sleep+0x64>)
    271e:	4798      	blx	r3
    2720:	e7f6      	b.n	2710 <chip_sleep+0x4c>
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	00002a45 	.word	0x00002a45
    2728:	00002a51 	.word	0x00002a51

0000272c <chip_wake>:
sint8 chip_wake(void)
{
    272c:	b5f0      	push	{r4, r5, r6, r7, lr}
    272e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2730:	2300      	movs	r3, #0
    2732:	9301      	str	r3, [sp, #4]
    2734:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2736:	a901      	add	r1, sp, #4
    2738:	200b      	movs	r0, #11
    273a:	4b28      	ldr	r3, [pc, #160]	; (27dc <chip_wake+0xb0>)
    273c:	4798      	blx	r3
    273e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2740:	d130      	bne.n	27a4 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    2742:	9901      	ldr	r1, [sp, #4]
    2744:	07cb      	lsls	r3, r1, #31
    2746:	d406      	bmi.n	2756 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2748:	2301      	movs	r3, #1
    274a:	4319      	orrs	r1, r3
    274c:	200b      	movs	r0, #11
    274e:	4b24      	ldr	r3, [pc, #144]	; (27e0 <chip_wake+0xb4>)
    2750:	4798      	blx	r3
    2752:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2754:	d126      	bne.n	27a4 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2756:	a901      	add	r1, sp, #4
    2758:	2001      	movs	r0, #1
    275a:	4b20      	ldr	r3, [pc, #128]	; (27dc <chip_wake+0xb0>)
    275c:	4798      	blx	r3
    275e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2760:	d120      	bne.n	27a4 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2762:	9901      	ldr	r1, [sp, #4]
    2764:	078b      	lsls	r3, r1, #30
    2766:	d520      	bpl.n	27aa <chip_wake+0x7e>
{
    2768:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    276a:	4f1c      	ldr	r7, [pc, #112]	; (27dc <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    276c:	4e1d      	ldr	r6, [pc, #116]	; (27e4 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    276e:	4669      	mov	r1, sp
    2770:	200f      	movs	r0, #15
    2772:	47b8      	blx	r7
    2774:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    2776:	d120      	bne.n	27ba <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    2778:	9b00      	ldr	r3, [sp, #0]
    277a:	075b      	lsls	r3, r3, #29
    277c:	d42b      	bmi.n	27d6 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    277e:	2002      	movs	r0, #2
    2780:	47b0      	blx	r6
    2782:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2784:	2d00      	cmp	r5, #0
    2786:	d1f2      	bne.n	276e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2788:	22af      	movs	r2, #175	; 0xaf
    278a:	0052      	lsls	r2, r2, #1
    278c:	4916      	ldr	r1, [pc, #88]	; (27e8 <chip_wake+0xbc>)
    278e:	4817      	ldr	r0, [pc, #92]	; (27ec <chip_wake+0xc0>)
    2790:	4b17      	ldr	r3, [pc, #92]	; (27f0 <chip_wake+0xc4>)
    2792:	4798      	blx	r3
    2794:	4817      	ldr	r0, [pc, #92]	; (27f4 <chip_wake+0xc8>)
    2796:	4b18      	ldr	r3, [pc, #96]	; (27f8 <chip_wake+0xcc>)
    2798:	4798      	blx	r3
    279a:	200d      	movs	r0, #13
    279c:	4b17      	ldr	r3, [pc, #92]	; (27fc <chip_wake+0xd0>)
    279e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    27a0:	2404      	movs	r4, #4
    27a2:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    27a4:	0020      	movs	r0, r4
    27a6:	b003      	add	sp, #12
    27a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    27aa:	2302      	movs	r3, #2
    27ac:	4319      	orrs	r1, r3
    27ae:	2001      	movs	r0, #1
    27b0:	4b0b      	ldr	r3, [pc, #44]	; (27e0 <chip_wake+0xb4>)
    27b2:	4798      	blx	r3
    27b4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    27b6:	d0d7      	beq.n	2768 <chip_wake+0x3c>
    27b8:	e7f4      	b.n	27a4 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    27ba:	22aa      	movs	r2, #170	; 0xaa
    27bc:	0052      	lsls	r2, r2, #1
    27be:	490a      	ldr	r1, [pc, #40]	; (27e8 <chip_wake+0xbc>)
    27c0:	480a      	ldr	r0, [pc, #40]	; (27ec <chip_wake+0xc0>)
    27c2:	4d0b      	ldr	r5, [pc, #44]	; (27f0 <chip_wake+0xc4>)
    27c4:	47a8      	blx	r5
    27c6:	9a00      	ldr	r2, [sp, #0]
    27c8:	0021      	movs	r1, r4
    27ca:	480d      	ldr	r0, [pc, #52]	; (2800 <chip_wake+0xd4>)
    27cc:	47a8      	blx	r5
    27ce:	200d      	movs	r0, #13
    27d0:	4b0a      	ldr	r3, [pc, #40]	; (27fc <chip_wake+0xd0>)
    27d2:	4798      	blx	r3
			goto _WAKE_EXIT;
    27d4:	e7e6      	b.n	27a4 <chip_wake+0x78>
	nm_bus_reset();
    27d6:	4b0b      	ldr	r3, [pc, #44]	; (2804 <chip_wake+0xd8>)
    27d8:	4798      	blx	r3
    27da:	e7e3      	b.n	27a4 <chip_wake+0x78>
    27dc:	00002a45 	.word	0x00002a45
    27e0:	00002a51 	.word	0x00002a51
    27e4:	000011f5 	.word	0x000011f5
    27e8:	0000bf18 	.word	0x0000bf18
    27ec:	0000b9d8 	.word	0x0000b9d8
    27f0:	0000a33d 	.word	0x0000a33d
    27f4:	0000bf60 	.word	0x0000bf60
    27f8:	0000a459 	.word	0x0000a459
    27fc:	0000a371 	.word	0x0000a371
    2800:	0000bf48 	.word	0x0000bf48
    2804:	00002a2d 	.word	0x00002a2d

00002808 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    280a:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    280c:	4d2d      	ldr	r5, [pc, #180]	; (28c4 <wait_for_bootrom+0xbc>)
    280e:	4c2e      	ldr	r4, [pc, #184]	; (28c8 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2810:	4e2e      	ldr	r6, [pc, #184]	; (28cc <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2812:	0028      	movs	r0, r5
    2814:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2816:	2800      	cmp	r0, #0
    2818:	db02      	blt.n	2820 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    281a:	2001      	movs	r0, #1
    281c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    281e:	e7f8      	b.n	2812 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2820:	482b      	ldr	r0, [pc, #172]	; (28d0 <wait_for_bootrom+0xc8>)
    2822:	4b29      	ldr	r3, [pc, #164]	; (28c8 <wait_for_bootrom+0xc0>)
    2824:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2826:	07c3      	lsls	r3, r0, #31
    2828:	d409      	bmi.n	283e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    282a:	4e28      	ldr	r6, [pc, #160]	; (28cc <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    282c:	4c29      	ldr	r4, [pc, #164]	; (28d4 <wait_for_bootrom+0xcc>)
    282e:	4d26      	ldr	r5, [pc, #152]	; (28c8 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    2830:	2001      	movs	r0, #1
    2832:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2834:	0020      	movs	r0, r4
    2836:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2838:	4b27      	ldr	r3, [pc, #156]	; (28d8 <wait_for_bootrom+0xd0>)
    283a:	4298      	cmp	r0, r3
    283c:	d1f8      	bne.n	2830 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    283e:	2f02      	cmp	r7, #2
    2840:	d021      	beq.n	2886 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2842:	2f03      	cmp	r7, #3
    2844:	d029      	beq.n	289a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2846:	2f04      	cmp	r7, #4
    2848:	d030      	beq.n	28ac <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    284a:	4924      	ldr	r1, [pc, #144]	; (28dc <wait_for_bootrom+0xd4>)
    284c:	4824      	ldr	r0, [pc, #144]	; (28e0 <wait_for_bootrom+0xd8>)
    284e:	4b25      	ldr	r3, [pc, #148]	; (28e4 <wait_for_bootrom+0xdc>)
    2850:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    2852:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2854:	4b24      	ldr	r3, [pc, #144]	; (28e8 <wait_for_bootrom+0xe0>)
    2856:	4798      	blx	r3
    2858:	0500      	lsls	r0, r0, #20
    285a:	0d00      	lsrs	r0, r0, #20
    285c:	4b23      	ldr	r3, [pc, #140]	; (28ec <wait_for_bootrom+0xe4>)
    285e:	4298      	cmp	r0, r3
    2860:	d82a      	bhi.n	28b8 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    2862:	0020      	movs	r0, r4
    2864:	4b22      	ldr	r3, [pc, #136]	; (28f0 <wait_for_bootrom+0xe8>)
    2866:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2868:	4822      	ldr	r0, [pc, #136]	; (28f4 <wait_for_bootrom+0xec>)
    286a:	4c23      	ldr	r4, [pc, #140]	; (28f8 <wait_for_bootrom+0xf0>)
    286c:	47a0      	blx	r4
    286e:	491b      	ldr	r1, [pc, #108]	; (28dc <wait_for_bootrom+0xd4>)
    2870:	4822      	ldr	r0, [pc, #136]	; (28fc <wait_for_bootrom+0xf4>)
    2872:	47a0      	blx	r4
    2874:	200d      	movs	r0, #13
    2876:	4b22      	ldr	r3, [pc, #136]	; (2900 <wait_for_bootrom+0xf8>)
    2878:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    287a:	4922      	ldr	r1, [pc, #136]	; (2904 <wait_for_bootrom+0xfc>)
    287c:	4815      	ldr	r0, [pc, #84]	; (28d4 <wait_for_bootrom+0xcc>)
    287e:	4b19      	ldr	r3, [pc, #100]	; (28e4 <wait_for_bootrom+0xdc>)
    2880:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    2882:	2000      	movs	r0, #0
    2884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2886:	4920      	ldr	r1, [pc, #128]	; (2908 <wait_for_bootrom+0x100>)
    2888:	4820      	ldr	r0, [pc, #128]	; (290c <wait_for_bootrom+0x104>)
    288a:	4c16      	ldr	r4, [pc, #88]	; (28e4 <wait_for_bootrom+0xdc>)
    288c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    288e:	2180      	movs	r1, #128	; 0x80
    2890:	0349      	lsls	r1, r1, #13
    2892:	4813      	ldr	r0, [pc, #76]	; (28e0 <wait_for_bootrom+0xd8>)
    2894:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2896:	2400      	movs	r4, #0
    2898:	e7dc      	b.n	2854 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    289a:	491b      	ldr	r1, [pc, #108]	; (2908 <wait_for_bootrom+0x100>)
    289c:	481b      	ldr	r0, [pc, #108]	; (290c <wait_for_bootrom+0x104>)
    289e:	4c11      	ldr	r4, [pc, #68]	; (28e4 <wait_for_bootrom+0xdc>)
    28a0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    28a2:	2100      	movs	r1, #0
    28a4:	480e      	ldr	r0, [pc, #56]	; (28e0 <wait_for_bootrom+0xd8>)
    28a6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    28a8:	2400      	movs	r4, #0
    28aa:	e7d3      	b.n	2854 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    28ac:	490b      	ldr	r1, [pc, #44]	; (28dc <wait_for_bootrom+0xd4>)
    28ae:	480c      	ldr	r0, [pc, #48]	; (28e0 <wait_for_bootrom+0xd8>)
    28b0:	4b0c      	ldr	r3, [pc, #48]	; (28e4 <wait_for_bootrom+0xdc>)
    28b2:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    28b4:	2480      	movs	r4, #128	; 0x80
    28b6:	e7cd      	b.n	2854 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    28b8:	2002      	movs	r0, #2
    28ba:	4320      	orrs	r0, r4
    28bc:	4b0c      	ldr	r3, [pc, #48]	; (28f0 <wait_for_bootrom+0xe8>)
    28be:	4798      	blx	r3
    28c0:	e7d2      	b.n	2868 <wait_for_bootrom+0x60>
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	00001014 	.word	0x00001014
    28c8:	00002a39 	.word	0x00002a39
    28cc:	000011f5 	.word	0x000011f5
    28d0:	000207bc 	.word	0x000207bc
    28d4:	000c000c 	.word	0x000c000c
    28d8:	10add09e 	.word	0x10add09e
    28dc:	13521352 	.word	0x13521352
    28e0:	0000108c 	.word	0x0000108c
    28e4:	00002a51 	.word	0x00002a51
    28e8:	000025f5 	.word	0x000025f5
    28ec:	0000039f 	.word	0x0000039f
    28f0:	00002561 	.word	0x00002561
    28f4:	0000bd08 	.word	0x0000bd08
    28f8:	0000a33d 	.word	0x0000a33d
    28fc:	0000bf7c 	.word	0x0000bf7c
    2900:	0000a371 	.word	0x0000a371
    2904:	ef522f61 	.word	0xef522f61
    2908:	3c1cd57d 	.word	0x3c1cd57d
    290c:	000207ac 	.word	0x000207ac

00002910 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2910:	b570      	push	{r4, r5, r6, lr}
    2912:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2914:	4b15      	ldr	r3, [pc, #84]	; (296c <wait_for_firmware_start+0x5c>)
    2916:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2918:	4b15      	ldr	r3, [pc, #84]	; (2970 <wait_for_firmware_start+0x60>)
    291a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    291c:	3802      	subs	r0, #2
    291e:	2801      	cmp	r0, #1
    2920:	d911      	bls.n	2946 <wait_for_firmware_start+0x36>
{
    2922:	2401      	movs	r4, #1
    2924:	4264      	negs	r4, r4
    2926:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2928:	4e12      	ldr	r6, [pc, #72]	; (2974 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    292a:	4d13      	ldr	r5, [pc, #76]	; (2978 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    292c:	9b00      	ldr	r3, [sp, #0]
    292e:	4298      	cmp	r0, r3
    2930:	d00e      	beq.n	2950 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2932:	2002      	movs	r0, #2
    2934:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2936:	9801      	ldr	r0, [sp, #4]
    2938:	47a8      	blx	r5
    293a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    293c:	2c00      	cmp	r4, #0
    293e:	d1f5      	bne.n	292c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2940:	2005      	movs	r0, #5
    2942:	4240      	negs	r0, r0
    2944:	e009      	b.n	295a <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    2946:	4b0d      	ldr	r3, [pc, #52]	; (297c <wait_for_firmware_start+0x6c>)
    2948:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    294a:	4b0d      	ldr	r3, [pc, #52]	; (2980 <wait_for_firmware_start+0x70>)
    294c:	9300      	str	r3, [sp, #0]
    294e:	e7e8      	b.n	2922 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2950:	9a00      	ldr	r2, [sp, #0]
    2952:	4b07      	ldr	r3, [pc, #28]	; (2970 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    2954:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    2956:	429a      	cmp	r2, r3
    2958:	d001      	beq.n	295e <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    295a:	b002      	add	sp, #8
    295c:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    295e:	2100      	movs	r1, #0
    2960:	4802      	ldr	r0, [pc, #8]	; (296c <wait_for_firmware_start+0x5c>)
    2962:	4b08      	ldr	r3, [pc, #32]	; (2984 <wait_for_firmware_start+0x74>)
    2964:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2966:	2000      	movs	r0, #0
    2968:	e7f7      	b.n	295a <wait_for_firmware_start+0x4a>
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	0000108c 	.word	0x0000108c
    2970:	02532636 	.word	0x02532636
    2974:	000011f5 	.word	0x000011f5
    2978:	00002a39 	.word	0x00002a39
    297c:	000207ac 	.word	0x000207ac
    2980:	d75dc1c3 	.word	0xd75dc1c3
    2984:	00002a51 	.word	0x00002a51

00002988 <chip_deinit>:

sint8 chip_deinit(void)
{
    2988:	b510      	push	{r4, lr}
    298a:	b082      	sub	sp, #8
	uint32 reg = 0;
    298c:	2300      	movs	r3, #0
    298e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2990:	a901      	add	r1, sp, #4
    2992:	20a0      	movs	r0, #160	; 0xa0
    2994:	0140      	lsls	r0, r0, #5
    2996:	4b14      	ldr	r3, [pc, #80]	; (29e8 <chip_deinit+0x60>)
    2998:	4798      	blx	r3
    299a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    299c:	d115      	bne.n	29ca <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    299e:	4913      	ldr	r1, [pc, #76]	; (29ec <chip_deinit+0x64>)
    29a0:	9b01      	ldr	r3, [sp, #4]
    29a2:	4019      	ands	r1, r3
    29a4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    29a6:	20a0      	movs	r0, #160	; 0xa0
    29a8:	0140      	lsls	r0, r0, #5
    29aa:	4b11      	ldr	r3, [pc, #68]	; (29f0 <chip_deinit+0x68>)
    29ac:	4798      	blx	r3
    29ae:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    29b0:	d016      	beq.n	29e0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    29b2:	4a10      	ldr	r2, [pc, #64]	; (29f4 <chip_deinit+0x6c>)
    29b4:	4910      	ldr	r1, [pc, #64]	; (29f8 <chip_deinit+0x70>)
    29b6:	4811      	ldr	r0, [pc, #68]	; (29fc <chip_deinit+0x74>)
    29b8:	4b11      	ldr	r3, [pc, #68]	; (2a00 <chip_deinit+0x78>)
    29ba:	4798      	blx	r3
    29bc:	4811      	ldr	r0, [pc, #68]	; (2a04 <chip_deinit+0x7c>)
    29be:	4b12      	ldr	r3, [pc, #72]	; (2a08 <chip_deinit+0x80>)
    29c0:	4798      	blx	r3
    29c2:	200d      	movs	r0, #13
    29c4:	4b11      	ldr	r3, [pc, #68]	; (2a0c <chip_deinit+0x84>)
    29c6:	4798      	blx	r3
		goto ERR1;
    29c8:	e00a      	b.n	29e0 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    29ca:	4a11      	ldr	r2, [pc, #68]	; (2a10 <chip_deinit+0x88>)
    29cc:	490a      	ldr	r1, [pc, #40]	; (29f8 <chip_deinit+0x70>)
    29ce:	480b      	ldr	r0, [pc, #44]	; (29fc <chip_deinit+0x74>)
    29d0:	4b0b      	ldr	r3, [pc, #44]	; (2a00 <chip_deinit+0x78>)
    29d2:	4798      	blx	r3
    29d4:	480b      	ldr	r0, [pc, #44]	; (2a04 <chip_deinit+0x7c>)
    29d6:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <chip_deinit+0x80>)
    29d8:	4798      	blx	r3
    29da:	200d      	movs	r0, #13
    29dc:	4b0b      	ldr	r3, [pc, #44]	; (2a0c <chip_deinit+0x84>)
    29de:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    29e0:	0020      	movs	r0, r4
    29e2:	b002      	add	sp, #8
    29e4:	bd10      	pop	{r4, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	00002a45 	.word	0x00002a45
    29ec:	fffffbff 	.word	0xfffffbff
    29f0:	00002a51 	.word	0x00002a51
    29f4:	0000020b 	.word	0x0000020b
    29f8:	0000bf24 	.word	0x0000bf24
    29fc:	0000b9d8 	.word	0x0000b9d8
    2a00:	0000a33d 	.word	0x0000a33d
    2a04:	0000bf30 	.word	0x0000bf30
    2a08:	0000a459 	.word	0x0000a459
    2a0c:	0000a371 	.word	0x0000a371
    2a10:	00000205 	.word	0x00000205

00002a14 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2a14:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2a16:	4b01      	ldr	r3, [pc, #4]	; (2a1c <nm_bus_iface_init+0x8>)
    2a18:	4798      	blx	r3
	return ret;
}
    2a1a:	bd10      	pop	{r4, pc}
    2a1c:	0000132d 	.word	0x0000132d

00002a20 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2a20:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2a22:	4b01      	ldr	r3, [pc, #4]	; (2a28 <nm_bus_iface_deinit+0x8>)
    2a24:	4798      	blx	r3

	return ret;
}
    2a26:	bd10      	pop	{r4, pc}
    2a28:	0000157d 	.word	0x0000157d

00002a2c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2a2c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2a2e:	4b01      	ldr	r3, [pc, #4]	; (2a34 <nm_bus_reset+0x8>)
    2a30:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2a32:	bd10      	pop	{r4, pc}
    2a34:	000033dd 	.word	0x000033dd

00002a38 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2a38:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2a3a:	4b01      	ldr	r3, [pc, #4]	; (2a40 <nm_read_reg+0x8>)
    2a3c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2a3e:	bd10      	pop	{r4, pc}
    2a40:	00003415 	.word	0x00003415

00002a44 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2a44:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2a46:	4b01      	ldr	r3, [pc, #4]	; (2a4c <nm_read_reg_with_ret+0x8>)
    2a48:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2a4a:	bd10      	pop	{r4, pc}
    2a4c:	00003429 	.word	0x00003429

00002a50 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2a50:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2a52:	4b01      	ldr	r3, [pc, #4]	; (2a58 <nm_write_reg+0x8>)
    2a54:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2a56:	bd10      	pop	{r4, pc}
    2a58:	00003441 	.word	0x00003441

00002a5c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a5e:	46d6      	mov	lr, sl
    2a60:	464f      	mov	r7, r9
    2a62:	4646      	mov	r6, r8
    2a64:	b5c0      	push	{r6, r7, lr}
    2a66:	b082      	sub	sp, #8
    2a68:	4680      	mov	r8, r0
    2a6a:	4689      	mov	r9, r1
    2a6c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2a6e:	4b13      	ldr	r3, [pc, #76]	; (2abc <nm_read_block+0x60>)
    2a70:	881f      	ldrh	r7, [r3, #0]
    2a72:	3f08      	subs	r7, #8
    2a74:	b2bb      	uxth	r3, r7
    2a76:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2a78:	001e      	movs	r6, r3
    2a7a:	0004      	movs	r4, r0
    2a7c:	429a      	cmp	r2, r3
    2a7e:	d91a      	bls.n	2ab6 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a80:	4b0f      	ldr	r3, [pc, #60]	; (2ac0 <nm_read_block+0x64>)
    2a82:	469a      	mov	sl, r3
    2a84:	1a37      	subs	r7, r6, r0
    2a86:	4643      	mov	r3, r8
    2a88:	1ae1      	subs	r1, r4, r3
    2a8a:	4449      	add	r1, r9
    2a8c:	9a01      	ldr	r2, [sp, #4]
    2a8e:	0020      	movs	r0, r4
    2a90:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2a92:	2800      	cmp	r0, #0
    2a94:	d109      	bne.n	2aaa <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2a96:	1bad      	subs	r5, r5, r6
    2a98:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2a9a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2a9c:	42b5      	cmp	r5, r6
    2a9e:	d8f2      	bhi.n	2a86 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2aa0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2aa2:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2aa4:	0020      	movs	r0, r4
    2aa6:	4b06      	ldr	r3, [pc, #24]	; (2ac0 <nm_read_block+0x64>)
    2aa8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2aaa:	b002      	add	sp, #8
    2aac:	bc1c      	pop	{r2, r3, r4}
    2aae:	4690      	mov	r8, r2
    2ab0:	4699      	mov	r9, r3
    2ab2:	46a2      	mov	sl, r4
    2ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2ab6:	2100      	movs	r1, #0
    2ab8:	e7f2      	b.n	2aa0 <nm_read_block+0x44>
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	2000002c 	.word	0x2000002c
    2ac0:	00003585 	.word	0x00003585

00002ac4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac6:	46d6      	mov	lr, sl
    2ac8:	464f      	mov	r7, r9
    2aca:	4646      	mov	r6, r8
    2acc:	b5c0      	push	{r6, r7, lr}
    2ace:	b082      	sub	sp, #8
    2ad0:	4680      	mov	r8, r0
    2ad2:	4689      	mov	r9, r1
    2ad4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2ad6:	4b13      	ldr	r3, [pc, #76]	; (2b24 <nm_write_block+0x60>)
    2ad8:	881f      	ldrh	r7, [r3, #0]
    2ada:	3f08      	subs	r7, #8
    2adc:	b2bb      	uxth	r3, r7
    2ade:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2ae0:	001e      	movs	r6, r3
    2ae2:	0004      	movs	r4, r0
    2ae4:	429a      	cmp	r2, r3
    2ae6:	d91a      	bls.n	2b1e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <nm_write_block+0x64>)
    2aea:	469a      	mov	sl, r3
    2aec:	1a37      	subs	r7, r6, r0
    2aee:	4643      	mov	r3, r8
    2af0:	1ae1      	subs	r1, r4, r3
    2af2:	4449      	add	r1, r9
    2af4:	9a01      	ldr	r2, [sp, #4]
    2af6:	0020      	movs	r0, r4
    2af8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2afa:	2800      	cmp	r0, #0
    2afc:	d109      	bne.n	2b12 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2afe:	1bad      	subs	r5, r5, r6
    2b00:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2b02:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2b04:	42b5      	cmp	r5, r6
    2b06:	d8f2      	bhi.n	2aee <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b08:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2b0a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b06      	ldr	r3, [pc, #24]	; (2b28 <nm_write_block+0x64>)
    2b10:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b12:	b002      	add	sp, #8
    2b14:	bc1c      	pop	{r2, r3, r4}
    2b16:	4690      	mov	r8, r2
    2b18:	4699      	mov	r9, r3
    2b1a:	46a2      	mov	sl, r4
    2b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b1e:	2100      	movs	r1, #0
    2b20:	e7f2      	b.n	2b08 <nm_write_block+0x44>
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	2000002c 	.word	0x2000002c
    2b28:	000036e1 	.word	0x000036e1

00002b2c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
    2b2e:	b084      	sub	sp, #16
    2b30:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2b32:	2300      	movs	r3, #0
    2b34:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2b36:	2208      	movs	r2, #8
    2b38:	2100      	movs	r1, #0
    2b3a:	a801      	add	r0, sp, #4
    2b3c:	4b2d      	ldr	r3, [pc, #180]	; (2bf4 <nm_get_firmware_full_info+0xc8>)
    2b3e:	4798      	blx	r3
	if (pstrRev != NULL)
    2b40:	2c00      	cmp	r4, #0
    2b42:	d044      	beq.n	2bce <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2b44:	2228      	movs	r2, #40	; 0x28
    2b46:	2100      	movs	r1, #0
    2b48:	0020      	movs	r0, r4
    2b4a:	4b2b      	ldr	r3, [pc, #172]	; (2bf8 <nm_get_firmware_full_info+0xcc>)
    2b4c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2b4e:	a903      	add	r1, sp, #12
    2b50:	482a      	ldr	r0, [pc, #168]	; (2bfc <nm_get_firmware_full_info+0xd0>)
    2b52:	4b2b      	ldr	r3, [pc, #172]	; (2c00 <nm_get_firmware_full_info+0xd4>)
    2b54:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2b56:	2800      	cmp	r0, #0
    2b58:	d13a      	bne.n	2bd0 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2b5a:	9b03      	ldr	r3, [sp, #12]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d039      	beq.n	2bd4 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2b60:	20c0      	movs	r0, #192	; 0xc0
    2b62:	0280      	lsls	r0, r0, #10
    2b64:	4318      	orrs	r0, r3
    2b66:	2208      	movs	r2, #8
    2b68:	a901      	add	r1, sp, #4
    2b6a:	4b26      	ldr	r3, [pc, #152]	; (2c04 <nm_get_firmware_full_info+0xd8>)
    2b6c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2b6e:	2800      	cmp	r0, #0
    2b70:	d12e      	bne.n	2bd0 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2b72:	9b02      	ldr	r3, [sp, #8]
    2b74:	0418      	lsls	r0, r3, #16
    2b76:	0c00      	lsrs	r0, r0, #16
    2b78:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2b7a:	d02e      	beq.n	2bda <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2b7c:	23c0      	movs	r3, #192	; 0xc0
    2b7e:	029b      	lsls	r3, r3, #10
    2b80:	4318      	orrs	r0, r3
    2b82:	2228      	movs	r2, #40	; 0x28
    2b84:	0021      	movs	r1, r4
    2b86:	4b1f      	ldr	r3, [pc, #124]	; (2c04 <nm_get_firmware_full_info+0xd8>)
    2b88:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d120      	bne.n	2bd0 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2b8e:	7921      	ldrb	r1, [r4, #4]
    2b90:	0209      	lsls	r1, r1, #8
    2b92:	79a2      	ldrb	r2, [r4, #6]
    2b94:	230f      	movs	r3, #15
    2b96:	401a      	ands	r2, r3
    2b98:	430a      	orrs	r2, r1
    2b9a:	7961      	ldrb	r1, [r4, #5]
    2b9c:	0109      	lsls	r1, r1, #4
    2b9e:	25ff      	movs	r5, #255	; 0xff
    2ba0:	4029      	ands	r1, r5
    2ba2:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2ba4:	79e1      	ldrb	r1, [r4, #7]
    2ba6:	0209      	lsls	r1, r1, #8
    2ba8:	7a66      	ldrb	r6, [r4, #9]
    2baa:	4033      	ands	r3, r6
    2bac:	430b      	orrs	r3, r1
    2bae:	7a21      	ldrb	r1, [r4, #8]
    2bb0:	0109      	lsls	r1, r1, #4
    2bb2:	400d      	ands	r5, r1
    2bb4:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2bb6:	2a00      	cmp	r2, #0
    2bb8:	d012      	beq.n	2be0 <nm_get_firmware_full_info+0xb4>
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d013      	beq.n	2be6 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2bbe:	4912      	ldr	r1, [pc, #72]	; (2c08 <nm_get_firmware_full_info+0xdc>)
    2bc0:	428b      	cmp	r3, r1
    2bc2:	d813      	bhi.n	2bec <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2bc4:	4b11      	ldr	r3, [pc, #68]	; (2c0c <nm_get_firmware_full_info+0xe0>)
    2bc6:	429a      	cmp	r2, r3
    2bc8:	d802      	bhi.n	2bd0 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2bca:	380d      	subs	r0, #13
    2bcc:	e000      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2bce:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2bd0:	b004      	add	sp, #16
    2bd2:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2bd4:	200c      	movs	r0, #12
    2bd6:	4240      	negs	r0, r0
    2bd8:	e7fa      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2bda:	200c      	movs	r0, #12
    2bdc:	4240      	negs	r0, r0
    2bde:	e7f7      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2be0:	200c      	movs	r0, #12
    2be2:	4240      	negs	r0, r0
    2be4:	e7f4      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
    2be6:	200c      	movs	r0, #12
    2be8:	4240      	negs	r0, r0
    2bea:	e7f1      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2bec:	200d      	movs	r0, #13
    2bee:	4240      	negs	r0, r0
    2bf0:	e7ee      	b.n	2bd0 <nm_get_firmware_full_info+0xa4>
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	0000a1db 	.word	0x0000a1db
    2bf8:	000015fd 	.word	0x000015fd
    2bfc:	000c0008 	.word	0x000c0008
    2c00:	00002a45 	.word	0x00002a45
    2c04:	00002a5d 	.word	0x00002a5d
    2c08:	00001352 	.word	0x00001352
    2c0c:	00001351 	.word	0x00001351

00002c10 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2c10:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2c12:	2800      	cmp	r0, #0
    2c14:	d037      	beq.n	2c86 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2c16:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2c18:	1e6b      	subs	r3, r5, #1
    2c1a:	2b03      	cmp	r3, #3
    2c1c:	d900      	bls.n	2c20 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2c1e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2c20:	2000      	movs	r0, #0
    2c22:	4b20      	ldr	r3, [pc, #128]	; (2ca4 <nm_drv_init+0x94>)
    2c24:	4798      	blx	r3
    2c26:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c28:	d12f      	bne.n	2c8a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2c2a:	481f      	ldr	r0, [pc, #124]	; (2ca8 <nm_drv_init+0x98>)
    2c2c:	4c1f      	ldr	r4, [pc, #124]	; (2cac <nm_drv_init+0x9c>)
    2c2e:	47a0      	blx	r4
    2c30:	4b1f      	ldr	r3, [pc, #124]	; (2cb0 <nm_drv_init+0xa0>)
    2c32:	4798      	blx	r3
    2c34:	0001      	movs	r1, r0
    2c36:	481f      	ldr	r0, [pc, #124]	; (2cb4 <nm_drv_init+0xa4>)
    2c38:	47a0      	blx	r4
    2c3a:	200d      	movs	r0, #13
    2c3c:	4b1e      	ldr	r3, [pc, #120]	; (2cb8 <nm_drv_init+0xa8>)
    2c3e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2c40:	4b1e      	ldr	r3, [pc, #120]	; (2cbc <nm_drv_init+0xac>)
    2c42:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2c44:	0028      	movs	r0, r5
    2c46:	4b1e      	ldr	r3, [pc, #120]	; (2cc0 <nm_drv_init+0xb0>)
    2c48:	4798      	blx	r3
    2c4a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c4c:	d117      	bne.n	2c7e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2c4e:	0028      	movs	r0, r5
    2c50:	4b1c      	ldr	r3, [pc, #112]	; (2cc4 <nm_drv_init+0xb4>)
    2c52:	4798      	blx	r3
    2c54:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c56:	d112      	bne.n	2c7e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2c58:	3d02      	subs	r5, #2
    2c5a:	2d01      	cmp	r5, #1
    2c5c:	d911      	bls.n	2c82 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2c5e:	4b1a      	ldr	r3, [pc, #104]	; (2cc8 <nm_drv_init+0xb8>)
    2c60:	4798      	blx	r3
    2c62:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c64:	d00d      	beq.n	2c82 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2c66:	2256      	movs	r2, #86	; 0x56
    2c68:	32ff      	adds	r2, #255	; 0xff
    2c6a:	4918      	ldr	r1, [pc, #96]	; (2ccc <nm_drv_init+0xbc>)
    2c6c:	4818      	ldr	r0, [pc, #96]	; (2cd0 <nm_drv_init+0xc0>)
    2c6e:	4b0f      	ldr	r3, [pc, #60]	; (2cac <nm_drv_init+0x9c>)
    2c70:	4798      	blx	r3
    2c72:	4818      	ldr	r0, [pc, #96]	; (2cd4 <nm_drv_init+0xc4>)
    2c74:	4b18      	ldr	r3, [pc, #96]	; (2cd8 <nm_drv_init+0xc8>)
    2c76:	4798      	blx	r3
    2c78:	200d      	movs	r0, #13
    2c7a:	4b0f      	ldr	r3, [pc, #60]	; (2cb8 <nm_drv_init+0xa8>)
    2c7c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2c7e:	4b17      	ldr	r3, [pc, #92]	; (2cdc <nm_drv_init+0xcc>)
    2c80:	4798      	blx	r3
ERR1:
	return ret;
}
    2c82:	0020      	movs	r0, r4
    2c84:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2c86:	2501      	movs	r5, #1
    2c88:	e7ca      	b.n	2c20 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2c8a:	2228      	movs	r2, #40	; 0x28
    2c8c:	32ff      	adds	r2, #255	; 0xff
    2c8e:	490f      	ldr	r1, [pc, #60]	; (2ccc <nm_drv_init+0xbc>)
    2c90:	480f      	ldr	r0, [pc, #60]	; (2cd0 <nm_drv_init+0xc0>)
    2c92:	4b06      	ldr	r3, [pc, #24]	; (2cac <nm_drv_init+0x9c>)
    2c94:	4798      	blx	r3
    2c96:	4812      	ldr	r0, [pc, #72]	; (2ce0 <nm_drv_init+0xd0>)
    2c98:	4b0f      	ldr	r3, [pc, #60]	; (2cd8 <nm_drv_init+0xc8>)
    2c9a:	4798      	blx	r3
    2c9c:	200d      	movs	r0, #13
    2c9e:	4b06      	ldr	r3, [pc, #24]	; (2cb8 <nm_drv_init+0xa8>)
    2ca0:	4798      	blx	r3
		goto ERR1;
    2ca2:	e7ee      	b.n	2c82 <nm_drv_init+0x72>
    2ca4:	00002a15 	.word	0x00002a15
    2ca8:	0000bd08 	.word	0x0000bd08
    2cac:	0000a33d 	.word	0x0000a33d
    2cb0:	000025f5 	.word	0x000025f5
    2cb4:	0000c04c 	.word	0x0000c04c
    2cb8:	0000a371 	.word	0x0000a371
    2cbc:	00003459 	.word	0x00003459
    2cc0:	00002809 	.word	0x00002809
    2cc4:	00002911 	.word	0x00002911
    2cc8:	00002599 	.word	0x00002599
    2ccc:	0000bf94 	.word	0x0000bf94
    2cd0:	0000b9d8 	.word	0x0000b9d8
    2cd4:	0000c010 	.word	0x0000c010
    2cd8:	0000a459 	.word	0x0000a459
    2cdc:	00002a21 	.word	0x00002a21
    2ce0:	0000c030 	.word	0x0000c030

00002ce4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2ce4:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2ce6:	4b1c      	ldr	r3, [pc, #112]	; (2d58 <nm_drv_deinit+0x74>)
    2ce8:	4798      	blx	r3
    2cea:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cec:	d10b      	bne.n	2d06 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2cee:	2000      	movs	r0, #0
    2cf0:	4b1a      	ldr	r3, [pc, #104]	; (2d5c <nm_drv_deinit+0x78>)
    2cf2:	4798      	blx	r3
    2cf4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cf6:	d114      	bne.n	2d22 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2cf8:	4b19      	ldr	r3, [pc, #100]	; (2d60 <nm_drv_deinit+0x7c>)
    2cfa:	4798      	blx	r3
    2cfc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cfe:	d11d      	bne.n	2d3c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2d00:	4b18      	ldr	r3, [pc, #96]	; (2d64 <nm_drv_deinit+0x80>)
    2d02:	4798      	blx	r3
    2d04:	e00b      	b.n	2d1e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2d06:	22b6      	movs	r2, #182	; 0xb6
    2d08:	0052      	lsls	r2, r2, #1
    2d0a:	4917      	ldr	r1, [pc, #92]	; (2d68 <nm_drv_deinit+0x84>)
    2d0c:	4817      	ldr	r0, [pc, #92]	; (2d6c <nm_drv_deinit+0x88>)
    2d0e:	4b18      	ldr	r3, [pc, #96]	; (2d70 <nm_drv_deinit+0x8c>)
    2d10:	4798      	blx	r3
    2d12:	4818      	ldr	r0, [pc, #96]	; (2d74 <nm_drv_deinit+0x90>)
    2d14:	4b18      	ldr	r3, [pc, #96]	; (2d78 <nm_drv_deinit+0x94>)
    2d16:	4798      	blx	r3
    2d18:	200d      	movs	r0, #13
    2d1a:	4b18      	ldr	r3, [pc, #96]	; (2d7c <nm_drv_deinit+0x98>)
    2d1c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2d1e:	0020      	movs	r0, r4
    2d20:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2d22:	2274      	movs	r2, #116	; 0x74
    2d24:	32ff      	adds	r2, #255	; 0xff
    2d26:	4910      	ldr	r1, [pc, #64]	; (2d68 <nm_drv_deinit+0x84>)
    2d28:	4810      	ldr	r0, [pc, #64]	; (2d6c <nm_drv_deinit+0x88>)
    2d2a:	4b11      	ldr	r3, [pc, #68]	; (2d70 <nm_drv_deinit+0x8c>)
    2d2c:	4798      	blx	r3
    2d2e:	4814      	ldr	r0, [pc, #80]	; (2d80 <nm_drv_deinit+0x9c>)
    2d30:	4b11      	ldr	r3, [pc, #68]	; (2d78 <nm_drv_deinit+0x94>)
    2d32:	4798      	blx	r3
    2d34:	200d      	movs	r0, #13
    2d36:	4b11      	ldr	r3, [pc, #68]	; (2d7c <nm_drv_deinit+0x98>)
    2d38:	4798      	blx	r3
		goto ERR1;
    2d3a:	e7f0      	b.n	2d1e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2d3c:	227a      	movs	r2, #122	; 0x7a
    2d3e:	32ff      	adds	r2, #255	; 0xff
    2d40:	4909      	ldr	r1, [pc, #36]	; (2d68 <nm_drv_deinit+0x84>)
    2d42:	480a      	ldr	r0, [pc, #40]	; (2d6c <nm_drv_deinit+0x88>)
    2d44:	4b0a      	ldr	r3, [pc, #40]	; (2d70 <nm_drv_deinit+0x8c>)
    2d46:	4798      	blx	r3
    2d48:	480e      	ldr	r0, [pc, #56]	; (2d84 <nm_drv_deinit+0xa0>)
    2d4a:	4b0b      	ldr	r3, [pc, #44]	; (2d78 <nm_drv_deinit+0x94>)
    2d4c:	4798      	blx	r3
    2d4e:	200d      	movs	r0, #13
    2d50:	4b0a      	ldr	r3, [pc, #40]	; (2d7c <nm_drv_deinit+0x98>)
    2d52:	4798      	blx	r3
		goto ERR1;
    2d54:	e7e3      	b.n	2d1e <nm_drv_deinit+0x3a>
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	00002989 	.word	0x00002989
    2d5c:	00004279 	.word	0x00004279
    2d60:	00002a21 	.word	0x00002a21
    2d64:	00003405 	.word	0x00003405
    2d68:	0000bfa0 	.word	0x0000bfa0
    2d6c:	0000b9d8 	.word	0x0000b9d8
    2d70:	0000a33d 	.word	0x0000a33d
    2d74:	0000bfb0 	.word	0x0000bfb0
    2d78:	0000a459 	.word	0x0000a459
    2d7c:	0000a371 	.word	0x0000a371
    2d80:	0000bfd0 	.word	0x0000bfd0
    2d84:	0000bff4 	.word	0x0000bff4

00002d88 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2d88:	b500      	push	{lr}
    2d8a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2d8c:	ab01      	add	r3, sp, #4
    2d8e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2d90:	2200      	movs	r2, #0
    2d92:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2d94:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2d96:	0019      	movs	r1, r3
    2d98:	2003      	movs	r0, #3
    2d9a:	4b02      	ldr	r3, [pc, #8]	; (2da4 <nmi_spi_write+0x1c>)
    2d9c:	4798      	blx	r3
}
    2d9e:	b005      	add	sp, #20
    2da0:	bd00      	pop	{pc}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	00001431 	.word	0x00001431

00002da8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2da8:	b570      	push	{r4, r5, r6, lr}
    2daa:	b084      	sub	sp, #16
    2dac:	ac08      	add	r4, sp, #32
    2dae:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2db0:	ac01      	add	r4, sp, #4
    2db2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2db4:	303f      	adds	r0, #63	; 0x3f
    2db6:	b2c4      	uxtb	r4, r0
    2db8:	2c0e      	cmp	r4, #14
    2dba:	d900      	bls.n	2dbe <spi_cmd+0x16>
    2dbc:	e084      	b.n	2ec8 <spi_cmd+0x120>
    2dbe:	00a0      	lsls	r0, r4, #2
    2dc0:	4c4f      	ldr	r4, [pc, #316]	; (2f00 <spi_cmd+0x158>)
    2dc2:	5820      	ldr	r0, [r4, r0]
    2dc4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2dc6:	ab01      	add	r3, sp, #4
    2dc8:	0c0a      	lsrs	r2, r1, #16
    2dca:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2dcc:	0a0a      	lsrs	r2, r1, #8
    2dce:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2dd0:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2dd2:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2dd4:	4b4b      	ldr	r3, [pc, #300]	; (2f04 <spi_cmd+0x15c>)
    2dd6:	781b      	ldrb	r3, [r3, #0]
    2dd8:	2b00      	cmp	r3, #0
    2dda:	d077      	beq.n	2ecc <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2ddc:	3901      	subs	r1, #1
    2dde:	b2c9      	uxtb	r1, r1
    2de0:	e083      	b.n	2eea <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2de2:	0a0b      	lsrs	r3, r1, #8
    2de4:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2de6:	2d00      	cmp	r5, #0
    2de8:	d107      	bne.n	2dfa <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2dea:	aa01      	add	r2, sp, #4
    2dec:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2dee:	ab01      	add	r3, sp, #4
    2df0:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2df2:	2200      	movs	r2, #0
    2df4:	70da      	strb	r2, [r3, #3]
		len = 5;
    2df6:	2105      	movs	r1, #5
		break;
    2df8:	e7ec      	b.n	2dd4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2dfa:	2280      	movs	r2, #128	; 0x80
    2dfc:	4252      	negs	r2, r2
    2dfe:	4313      	orrs	r3, r2
    2e00:	aa01      	add	r2, sp, #4
    2e02:	7053      	strb	r3, [r2, #1]
    2e04:	e7f3      	b.n	2dee <spi_cmd+0x46>
		bc[1] = 0x00;
    2e06:	ab01      	add	r3, sp, #4
    2e08:	2200      	movs	r2, #0
    2e0a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e0c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e0e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e10:	2105      	movs	r1, #5
		break;
    2e12:	e7df      	b.n	2dd4 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2e14:	ab01      	add	r3, sp, #4
    2e16:	2200      	movs	r2, #0
    2e18:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e1a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e1c:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e1e:	2105      	movs	r1, #5
		break;
    2e20:	e7d8      	b.n	2dd4 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2e22:	ab01      	add	r3, sp, #4
    2e24:	22ff      	movs	r2, #255	; 0xff
    2e26:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2e28:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2e2a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e2c:	2105      	movs	r1, #5
		break;
    2e2e:	e7d1      	b.n	2dd4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2e30:	aa01      	add	r2, sp, #4
    2e32:	0c08      	lsrs	r0, r1, #16
    2e34:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2e36:	0a08      	lsrs	r0, r1, #8
    2e38:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2e3a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2e3c:	0a19      	lsrs	r1, r3, #8
    2e3e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2e40:	7153      	strb	r3, [r2, #5]
		len = 7;
    2e42:	2107      	movs	r1, #7
		break;
    2e44:	e7c6      	b.n	2dd4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2e46:	aa01      	add	r2, sp, #4
    2e48:	0c08      	lsrs	r0, r1, #16
    2e4a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2e4c:	0a08      	lsrs	r0, r1, #8
    2e4e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2e50:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2e52:	0c19      	lsrs	r1, r3, #16
    2e54:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2e56:	0a19      	lsrs	r1, r3, #8
    2e58:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2e5a:	7193      	strb	r3, [r2, #6]
		len = 8;
    2e5c:	2108      	movs	r1, #8
		break;
    2e5e:	e7b9      	b.n	2dd4 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2e60:	0a0b      	lsrs	r3, r1, #8
    2e62:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2e64:	2d00      	cmp	r5, #0
    2e66:	d10c      	bne.n	2e82 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2e68:	a801      	add	r0, sp, #4
    2e6a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2e6c:	ab01      	add	r3, sp, #4
    2e6e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2e70:	0e11      	lsrs	r1, r2, #24
    2e72:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2e74:	0c11      	lsrs	r1, r2, #16
    2e76:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2e78:	0a11      	lsrs	r1, r2, #8
    2e7a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2e7c:	719a      	strb	r2, [r3, #6]
		len = 8;
    2e7e:	2108      	movs	r1, #8
		break;
    2e80:	e7a8      	b.n	2dd4 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2e82:	2080      	movs	r0, #128	; 0x80
    2e84:	4240      	negs	r0, r0
    2e86:	4303      	orrs	r3, r0
    2e88:	a801      	add	r0, sp, #4
    2e8a:	7043      	strb	r3, [r0, #1]
    2e8c:	e7ee      	b.n	2e6c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2e8e:	ab01      	add	r3, sp, #4
    2e90:	0c08      	lsrs	r0, r1, #16
    2e92:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2e94:	0a08      	lsrs	r0, r1, #8
    2e96:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2e98:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2e9a:	0e11      	lsrs	r1, r2, #24
    2e9c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2e9e:	0c11      	lsrs	r1, r2, #16
    2ea0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2ea2:	0a11      	lsrs	r1, r2, #8
    2ea4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2ea6:	71da      	strb	r2, [r3, #7]
		len = 9;
    2ea8:	2109      	movs	r1, #9
		break;
    2eaa:	e793      	b.n	2dd4 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2eac:	2228      	movs	r2, #40	; 0x28
    2eae:	32ff      	adds	r2, #255	; 0xff
    2eb0:	4915      	ldr	r1, [pc, #84]	; (2f08 <spi_cmd+0x160>)
    2eb2:	4816      	ldr	r0, [pc, #88]	; (2f0c <spi_cmd+0x164>)
    2eb4:	4b16      	ldr	r3, [pc, #88]	; (2f10 <spi_cmd+0x168>)
    2eb6:	4798      	blx	r3
    2eb8:	4816      	ldr	r0, [pc, #88]	; (2f14 <spi_cmd+0x16c>)
    2eba:	4b17      	ldr	r3, [pc, #92]	; (2f18 <spi_cmd+0x170>)
    2ebc:	4798      	blx	r3
    2ebe:	200d      	movs	r0, #13
    2ec0:	4b16      	ldr	r3, [pc, #88]	; (2f1c <spi_cmd+0x174>)
    2ec2:	4798      	blx	r3
			result = N_FAIL;
    2ec4:	2300      	movs	r3, #0
    2ec6:	e017      	b.n	2ef8 <spi_cmd+0x150>
	switch (cmd) {
    2ec8:	2300      	movs	r3, #0
    2eca:	e015      	b.n	2ef8 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2ecc:	1e4e      	subs	r6, r1, #1
    2ece:	aa01      	add	r2, sp, #4
    2ed0:	1995      	adds	r5, r2, r6
    2ed2:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2ed4:	4c12      	ldr	r4, [pc, #72]	; (2f20 <spi_cmd+0x178>)
    2ed6:	005b      	lsls	r3, r3, #1
    2ed8:	7810      	ldrb	r0, [r2, #0]
    2eda:	4043      	eors	r3, r0
    2edc:	5ce3      	ldrb	r3, [r4, r3]
    2ede:	3201      	adds	r2, #1
	while (len--)
    2ee0:	42aa      	cmp	r2, r5
    2ee2:	d1f8      	bne.n	2ed6 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2ee4:	005b      	lsls	r3, r3, #1
    2ee6:	aa01      	add	r2, sp, #4
    2ee8:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2eea:	b289      	uxth	r1, r1
    2eec:	a801      	add	r0, sp, #4
    2eee:	4b0d      	ldr	r3, [pc, #52]	; (2f24 <spi_cmd+0x17c>)
    2ef0:	4798      	blx	r3
    2ef2:	2301      	movs	r3, #1
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d1d9      	bne.n	2eac <spi_cmd+0x104>
		}
	}

	return result;
}
    2ef8:	0018      	movs	r0, r3
    2efa:	b004      	add	sp, #16
    2efc:	bd70      	pop	{r4, r5, r6, pc}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	0000c05c 	.word	0x0000c05c
    2f04:	20000388 	.word	0x20000388
    2f08:	0000c09c 	.word	0x0000c09c
    2f0c:	0000b9d8 	.word	0x0000b9d8
    2f10:	0000a33d 	.word	0x0000a33d
    2f14:	0000c52c 	.word	0x0000c52c
    2f18:	0000a459 	.word	0x0000a459
    2f1c:	0000a371 	.word	0x0000a371
    2f20:	0000c128 	.word	0x0000c128
    2f24:	00002d89 	.word	0x00002d89

00002f28 <nmi_spi_read>:
{
    2f28:	b500      	push	{lr}
    2f2a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2f2c:	ab01      	add	r3, sp, #4
    2f2e:	2200      	movs	r2, #0
    2f30:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2f32:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2f34:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2f36:	0019      	movs	r1, r3
    2f38:	2003      	movs	r0, #3
    2f3a:	4b02      	ldr	r3, [pc, #8]	; (2f44 <nmi_spi_read+0x1c>)
    2f3c:	4798      	blx	r3
}
    2f3e:	b005      	add	sp, #20
    2f40:	bd00      	pop	{pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	00001431 	.word	0x00001431

00002f48 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4a:	46c6      	mov	lr, r8
    2f4c:	b500      	push	{lr}
    2f4e:	b082      	sub	sp, #8
    2f50:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2f52:	28cf      	cmp	r0, #207	; 0xcf
    2f54:	d02b      	beq.n	2fae <spi_cmd_rsp+0x66>
    2f56:	0003      	movs	r3, r0
    2f58:	333b      	adds	r3, #59	; 0x3b
    2f5a:	b2db      	uxtb	r3, r3
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d926      	bls.n	2fae <spi_cmd_rsp+0x66>
{
    2f60:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f62:	466b      	mov	r3, sp
    2f64:	1dde      	adds	r6, r3, #7
    2f66:	4b26      	ldr	r3, [pc, #152]	; (3000 <spi_cmd_rsp+0xb8>)
    2f68:	4698      	mov	r8, r3
    2f6a:	2101      	movs	r1, #1
    2f6c:	0030      	movs	r0, r6
    2f6e:	47c0      	blx	r8
    2f70:	1e05      	subs	r5, r0, #0
    2f72:	d125      	bne.n	2fc0 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2f74:	7833      	ldrb	r3, [r6, #0]
    2f76:	42bb      	cmp	r3, r7
    2f78:	d030      	beq.n	2fdc <spi_cmd_rsp+0x94>
    2f7a:	3c01      	subs	r4, #1
    2f7c:	b2e4      	uxtb	r4, r4
    2f7e:	2c00      	cmp	r4, #0
    2f80:	d1f3      	bne.n	2f6a <spi_cmd_rsp+0x22>
    2f82:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f84:	466b      	mov	r3, sp
    2f86:	1dde      	adds	r6, r3, #7
    2f88:	4f1d      	ldr	r7, [pc, #116]	; (3000 <spi_cmd_rsp+0xb8>)
    2f8a:	2101      	movs	r1, #1
    2f8c:	0030      	movs	r0, r6
    2f8e:	47b8      	blx	r7
    2f90:	2800      	cmp	r0, #0
    2f92:	d125      	bne.n	2fe0 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2f94:	7833      	ldrb	r3, [r6, #0]
    2f96:	2b00      	cmp	r3, #0
    2f98:	d02f      	beq.n	2ffa <spi_cmd_rsp+0xb2>
    2f9a:	3c01      	subs	r4, #1
    2f9c:	b2e4      	uxtb	r4, r4
    2f9e:	2c00      	cmp	r4, #0
    2fa0:	d1f3      	bne.n	2f8a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2fa2:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2fa4:	0028      	movs	r0, r5
    2fa6:	b002      	add	sp, #8
    2fa8:	bc04      	pop	{r2}
    2faa:	4690      	mov	r8, r2
    2fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fae:	2101      	movs	r1, #1
    2fb0:	466b      	mov	r3, sp
    2fb2:	1dd8      	adds	r0, r3, #7
    2fb4:	4b12      	ldr	r3, [pc, #72]	; (3000 <spi_cmd_rsp+0xb8>)
    2fb6:	4798      	blx	r3
			result = N_FAIL;
    2fb8:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fba:	2800      	cmp	r0, #0
    2fbc:	d0d0      	beq.n	2f60 <spi_cmd_rsp+0x18>
    2fbe:	e7f1      	b.n	2fa4 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2fc0:	22b1      	movs	r2, #177	; 0xb1
    2fc2:	0052      	lsls	r2, r2, #1
    2fc4:	490f      	ldr	r1, [pc, #60]	; (3004 <spi_cmd_rsp+0xbc>)
    2fc6:	4810      	ldr	r0, [pc, #64]	; (3008 <spi_cmd_rsp+0xc0>)
    2fc8:	4b10      	ldr	r3, [pc, #64]	; (300c <spi_cmd_rsp+0xc4>)
    2fca:	4798      	blx	r3
    2fcc:	4810      	ldr	r0, [pc, #64]	; (3010 <spi_cmd_rsp+0xc8>)
    2fce:	4b11      	ldr	r3, [pc, #68]	; (3014 <spi_cmd_rsp+0xcc>)
    2fd0:	4798      	blx	r3
    2fd2:	200d      	movs	r0, #13
    2fd4:	4b10      	ldr	r3, [pc, #64]	; (3018 <spi_cmd_rsp+0xd0>)
    2fd6:	4798      	blx	r3
			result = N_FAIL;
    2fd8:	2500      	movs	r5, #0
			goto _fail_;
    2fda:	e7e3      	b.n	2fa4 <spi_cmd_rsp+0x5c>
    2fdc:	240b      	movs	r4, #11
    2fde:	e7d1      	b.n	2f84 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2fe0:	22b8      	movs	r2, #184	; 0xb8
    2fe2:	0052      	lsls	r2, r2, #1
    2fe4:	4907      	ldr	r1, [pc, #28]	; (3004 <spi_cmd_rsp+0xbc>)
    2fe6:	4808      	ldr	r0, [pc, #32]	; (3008 <spi_cmd_rsp+0xc0>)
    2fe8:	4b08      	ldr	r3, [pc, #32]	; (300c <spi_cmd_rsp+0xc4>)
    2fea:	4798      	blx	r3
    2fec:	4808      	ldr	r0, [pc, #32]	; (3010 <spi_cmd_rsp+0xc8>)
    2fee:	4b09      	ldr	r3, [pc, #36]	; (3014 <spi_cmd_rsp+0xcc>)
    2ff0:	4798      	blx	r3
    2ff2:	200d      	movs	r0, #13
    2ff4:	4b08      	ldr	r3, [pc, #32]	; (3018 <spi_cmd_rsp+0xd0>)
    2ff6:	4798      	blx	r3
			goto _fail_;
    2ff8:	e7d4      	b.n	2fa4 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2ffa:	2501      	movs	r5, #1
    2ffc:	e7d2      	b.n	2fa4 <spi_cmd_rsp+0x5c>
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	00002f29 	.word	0x00002f29
    3004:	0000c0b4 	.word	0x0000c0b4
    3008:	0000b9d8 	.word	0x0000b9d8
    300c:	0000a33d 	.word	0x0000a33d
    3010:	0000c558 	.word	0x0000c558
    3014:	0000a459 	.word	0x0000a459
    3018:	0000a371 	.word	0x0000a371

0000301c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    301c:	b5f0      	push	{r4, r5, r6, r7, lr}
    301e:	46de      	mov	lr, fp
    3020:	4657      	mov	r7, sl
    3022:	464e      	mov	r6, r9
    3024:	4645      	mov	r5, r8
    3026:	b5e0      	push	{r5, r6, r7, lr}
    3028:	b087      	sub	sp, #28
    302a:	9001      	str	r0, [sp, #4]
    302c:	4689      	mov	r9, r1
    302e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3030:	2300      	movs	r3, #0
    3032:	469a      	mov	sl, r3
    3034:	2380      	movs	r3, #128	; 0x80
    3036:	019b      	lsls	r3, r3, #6
    3038:	469b      	mov	fp, r3
    303a:	466a      	mov	r2, sp
    303c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    303e:	4b3b      	ldr	r3, [pc, #236]	; (312c <spi_data_read+0x110>)
    3040:	4698      	mov	r8, r3
    3042:	e02e      	b.n	30a2 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3044:	4a3a      	ldr	r2, [pc, #232]	; (3130 <spi_data_read+0x114>)
    3046:	493b      	ldr	r1, [pc, #236]	; (3134 <spi_data_read+0x118>)
    3048:	483b      	ldr	r0, [pc, #236]	; (3138 <spi_data_read+0x11c>)
    304a:	4b3c      	ldr	r3, [pc, #240]	; (313c <spi_data_read+0x120>)
    304c:	4798      	blx	r3
    304e:	483c      	ldr	r0, [pc, #240]	; (3140 <spi_data_read+0x124>)
    3050:	4b3c      	ldr	r3, [pc, #240]	; (3144 <spi_data_read+0x128>)
    3052:	4798      	blx	r3
    3054:	200d      	movs	r0, #13
    3056:	4b3c      	ldr	r3, [pc, #240]	; (3148 <spi_data_read+0x12c>)
    3058:	4798      	blx	r3
    305a:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    305c:	0028      	movs	r0, r5
    305e:	b007      	add	sp, #28
    3060:	bc3c      	pop	{r2, r3, r4, r5}
    3062:	4690      	mov	r8, r2
    3064:	4699      	mov	r9, r3
    3066:	46a2      	mov	sl, r4
    3068:	46ab      	mov	fp, r5
    306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    306c:	2c00      	cmp	r4, #0
    306e:	dd2e      	ble.n	30ce <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3070:	9b01      	ldr	r3, [sp, #4]
    3072:	4453      	add	r3, sl
    3074:	0018      	movs	r0, r3
    3076:	0039      	movs	r1, r7
    3078:	4b2c      	ldr	r3, [pc, #176]	; (312c <spi_data_read+0x110>)
    307a:	4798      	blx	r3
    307c:	1e04      	subs	r4, r0, #0
    307e:	d133      	bne.n	30e8 <spi_data_read+0xcc>
		if(!clockless)
    3080:	9b02      	ldr	r3, [sp, #8]
    3082:	2b00      	cmp	r3, #0
    3084:	d103      	bne.n	308e <spi_data_read+0x72>
			if (!gu8Crc_off) {
    3086:	4b31      	ldr	r3, [pc, #196]	; (314c <spi_data_read+0x130>)
    3088:	781b      	ldrb	r3, [r3, #0]
    308a:	2b00      	cmp	r3, #0
    308c:	d039      	beq.n	3102 <spi_data_read+0xe6>
		ix += nbytes;
    308e:	4653      	mov	r3, sl
    3090:	18fb      	adds	r3, r7, r3
    3092:	b21b      	sxth	r3, r3
    3094:	469a      	mov	sl, r3
		sz -= nbytes;
    3096:	464b      	mov	r3, r9
    3098:	1bdf      	subs	r7, r3, r7
    309a:	b2bb      	uxth	r3, r7
    309c:	4699      	mov	r9, r3
	} while (sz);
    309e:	2b00      	cmp	r3, #0
    30a0:	d042      	beq.n	3128 <spi_data_read+0x10c>
    30a2:	464f      	mov	r7, r9
    30a4:	45d9      	cmp	r9, fp
    30a6:	d901      	bls.n	30ac <spi_data_read+0x90>
    30a8:	466b      	mov	r3, sp
    30aa:	89df      	ldrh	r7, [r3, #14]
    30ac:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    30ae:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30b0:	ab04      	add	r3, sp, #16
    30b2:	1cde      	adds	r6, r3, #3
    30b4:	2101      	movs	r1, #1
    30b6:	0030      	movs	r0, r6
    30b8:	47c0      	blx	r8
    30ba:	1e05      	subs	r5, r0, #0
    30bc:	d1c2      	bne.n	3044 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    30be:	7833      	ldrb	r3, [r6, #0]
    30c0:	091b      	lsrs	r3, r3, #4
    30c2:	2b0f      	cmp	r3, #15
    30c4:	d0d2      	beq.n	306c <spi_data_read+0x50>
    30c6:	3c01      	subs	r4, #1
    30c8:	b224      	sxth	r4, r4
		} while (retry--);
    30ca:	1c63      	adds	r3, r4, #1
    30cc:	d1f2      	bne.n	30b4 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    30ce:	4a20      	ldr	r2, [pc, #128]	; (3150 <spi_data_read+0x134>)
    30d0:	4918      	ldr	r1, [pc, #96]	; (3134 <spi_data_read+0x118>)
    30d2:	4819      	ldr	r0, [pc, #100]	; (3138 <spi_data_read+0x11c>)
    30d4:	4c19      	ldr	r4, [pc, #100]	; (313c <spi_data_read+0x120>)
    30d6:	47a0      	blx	r4
    30d8:	ab04      	add	r3, sp, #16
    30da:	78d9      	ldrb	r1, [r3, #3]
    30dc:	481d      	ldr	r0, [pc, #116]	; (3154 <spi_data_read+0x138>)
    30de:	47a0      	blx	r4
    30e0:	200d      	movs	r0, #13
    30e2:	4b19      	ldr	r3, [pc, #100]	; (3148 <spi_data_read+0x12c>)
    30e4:	4798      	blx	r3
			break;
    30e6:	e7b9      	b.n	305c <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    30e8:	22c5      	movs	r2, #197	; 0xc5
    30ea:	0092      	lsls	r2, r2, #2
    30ec:	4911      	ldr	r1, [pc, #68]	; (3134 <spi_data_read+0x118>)
    30ee:	4812      	ldr	r0, [pc, #72]	; (3138 <spi_data_read+0x11c>)
    30f0:	4b12      	ldr	r3, [pc, #72]	; (313c <spi_data_read+0x120>)
    30f2:	4798      	blx	r3
    30f4:	4818      	ldr	r0, [pc, #96]	; (3158 <spi_data_read+0x13c>)
    30f6:	4b13      	ldr	r3, [pc, #76]	; (3144 <spi_data_read+0x128>)
    30f8:	4798      	blx	r3
    30fa:	200d      	movs	r0, #13
    30fc:	4b12      	ldr	r3, [pc, #72]	; (3148 <spi_data_read+0x12c>)
    30fe:	4798      	blx	r3
			break;
    3100:	e7ac      	b.n	305c <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3102:	2102      	movs	r1, #2
    3104:	a805      	add	r0, sp, #20
    3106:	4b09      	ldr	r3, [pc, #36]	; (312c <spi_data_read+0x110>)
    3108:	4798      	blx	r3
    310a:	2800      	cmp	r0, #0
    310c:	d0bf      	beq.n	308e <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    310e:	4a13      	ldr	r2, [pc, #76]	; (315c <spi_data_read+0x140>)
    3110:	4908      	ldr	r1, [pc, #32]	; (3134 <spi_data_read+0x118>)
    3112:	4809      	ldr	r0, [pc, #36]	; (3138 <spi_data_read+0x11c>)
    3114:	4b09      	ldr	r3, [pc, #36]	; (313c <spi_data_read+0x120>)
    3116:	4798      	blx	r3
    3118:	4811      	ldr	r0, [pc, #68]	; (3160 <spi_data_read+0x144>)
    311a:	4b0a      	ldr	r3, [pc, #40]	; (3144 <spi_data_read+0x128>)
    311c:	4798      	blx	r3
    311e:	200d      	movs	r0, #13
    3120:	4b09      	ldr	r3, [pc, #36]	; (3148 <spi_data_read+0x12c>)
    3122:	4798      	blx	r3
					result = N_FAIL;
    3124:	0025      	movs	r5, r4
					break;
    3126:	e799      	b.n	305c <spi_data_read+0x40>
    3128:	2501      	movs	r5, #1
    312a:	e797      	b.n	305c <spi_data_read+0x40>
    312c:	00002f29 	.word	0x00002f29
    3130:	000002ff 	.word	0x000002ff
    3134:	0000c0c0 	.word	0x0000c0c0
    3138:	0000b9d8 	.word	0x0000b9d8
    313c:	0000a33d 	.word	0x0000a33d
    3140:	0000c58c 	.word	0x0000c58c
    3144:	0000a459 	.word	0x0000a459
    3148:	0000a371 	.word	0x0000a371
    314c:	20000388 	.word	0x20000388
    3150:	0000030b 	.word	0x0000030b
    3154:	0000c5c0 	.word	0x0000c5c0
    3158:	0000c5f0 	.word	0x0000c5f0
    315c:	0000031f 	.word	0x0000031f
    3160:	0000c620 	.word	0x0000c620

00003164 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3164:	b5f0      	push	{r4, r5, r6, r7, lr}
    3166:	46d6      	mov	lr, sl
    3168:	464f      	mov	r7, r9
    316a:	4646      	mov	r6, r8
    316c:	b5c0      	push	{r6, r7, lr}
    316e:	b086      	sub	sp, #24
    3170:	9003      	str	r0, [sp, #12]
    3172:	9104      	str	r1, [sp, #16]
    3174:	2830      	cmp	r0, #48	; 0x30
    3176:	d80f      	bhi.n	3198 <spi_write_reg+0x34>
    3178:	4b30      	ldr	r3, [pc, #192]	; (323c <spi_write_reg+0xd8>)
    317a:	781f      	ldrb	r7, [r3, #0]
    317c:	b2fb      	uxtb	r3, r7
    317e:	9305      	str	r3, [sp, #20]
    3180:	2300      	movs	r3, #0
    3182:	2230      	movs	r2, #48	; 0x30
    3184:	9903      	ldr	r1, [sp, #12]
    3186:	428a      	cmp	r2, r1
    3188:	415b      	adcs	r3, r3
    318a:	b2db      	uxtb	r3, r3
    318c:	469a      	mov	sl, r3
    318e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3190:	4b2b      	ldr	r3, [pc, #172]	; (3240 <spi_write_reg+0xdc>)
    3192:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3194:	46d1      	mov	r9, sl
    3196:	e033      	b.n	3200 <spi_write_reg+0x9c>
    3198:	4b2a      	ldr	r3, [pc, #168]	; (3244 <spi_write_reg+0xe0>)
    319a:	781f      	ldrb	r7, [r3, #0]
    319c:	e7ee      	b.n	317c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    319e:	9805      	ldr	r0, [sp, #20]
    31a0:	4b29      	ldr	r3, [pc, #164]	; (3248 <spi_write_reg+0xe4>)
    31a2:	4798      	blx	r3
    31a4:	0004      	movs	r4, r0
	if (result != N_OK) {
    31a6:	2801      	cmp	r0, #1
    31a8:	d041      	beq.n	322e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    31aa:	22e7      	movs	r2, #231	; 0xe7
    31ac:	0092      	lsls	r2, r2, #2
    31ae:	4927      	ldr	r1, [pc, #156]	; (324c <spi_write_reg+0xe8>)
    31b0:	4827      	ldr	r0, [pc, #156]	; (3250 <spi_write_reg+0xec>)
    31b2:	4e28      	ldr	r6, [pc, #160]	; (3254 <spi_write_reg+0xf0>)
    31b4:	47b0      	blx	r6
    31b6:	9903      	ldr	r1, [sp, #12]
    31b8:	4827      	ldr	r0, [pc, #156]	; (3258 <spi_write_reg+0xf4>)
    31ba:	47b0      	blx	r6
    31bc:	200d      	movs	r0, #13
    31be:	4b27      	ldr	r3, [pc, #156]	; (325c <spi_write_reg+0xf8>)
    31c0:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    31c2:	2001      	movs	r0, #1
    31c4:	4e26      	ldr	r6, [pc, #152]	; (3260 <spi_write_reg+0xfc>)
    31c6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31c8:	2300      	movs	r3, #0
    31ca:	9300      	str	r3, [sp, #0]
    31cc:	2200      	movs	r2, #0
    31ce:	2100      	movs	r1, #0
    31d0:	20cf      	movs	r0, #207	; 0xcf
    31d2:	4f1b      	ldr	r7, [pc, #108]	; (3240 <spi_write_reg+0xdc>)
    31d4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    31d6:	20cf      	movs	r0, #207	; 0xcf
    31d8:	4b1b      	ldr	r3, [pc, #108]	; (3248 <spi_write_reg+0xe4>)
    31da:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    31dc:	4a21      	ldr	r2, [pc, #132]	; (3264 <spi_write_reg+0x100>)
    31de:	491b      	ldr	r1, [pc, #108]	; (324c <spi_write_reg+0xe8>)
    31e0:	481b      	ldr	r0, [pc, #108]	; (3250 <spi_write_reg+0xec>)
    31e2:	4f1c      	ldr	r7, [pc, #112]	; (3254 <spi_write_reg+0xf0>)
    31e4:	47b8      	blx	r7
    31e6:	9b04      	ldr	r3, [sp, #16]
    31e8:	9a03      	ldr	r2, [sp, #12]
    31ea:	0029      	movs	r1, r5
    31ec:	481e      	ldr	r0, [pc, #120]	; (3268 <spi_write_reg+0x104>)
    31ee:	47b8      	blx	r7
    31f0:	200d      	movs	r0, #13
    31f2:	4b1a      	ldr	r3, [pc, #104]	; (325c <spi_write_reg+0xf8>)
    31f4:	4798      	blx	r3
		nm_bsp_sleep(1);
    31f6:	2001      	movs	r0, #1
    31f8:	47b0      	blx	r6
    31fa:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    31fc:	2d00      	cmp	r5, #0
    31fe:	d016      	beq.n	322e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3200:	464b      	mov	r3, r9
    3202:	9300      	str	r3, [sp, #0]
    3204:	2304      	movs	r3, #4
    3206:	9a04      	ldr	r2, [sp, #16]
    3208:	9f03      	ldr	r7, [sp, #12]
    320a:	0039      	movs	r1, r7
    320c:	9805      	ldr	r0, [sp, #20]
    320e:	47c0      	blx	r8
    3210:	0004      	movs	r4, r0
	if (result != N_OK) {
    3212:	2801      	cmp	r0, #1
    3214:	d0c3      	beq.n	319e <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3216:	4a15      	ldr	r2, [pc, #84]	; (326c <spi_write_reg+0x108>)
    3218:	490c      	ldr	r1, [pc, #48]	; (324c <spi_write_reg+0xe8>)
    321a:	480d      	ldr	r0, [pc, #52]	; (3250 <spi_write_reg+0xec>)
    321c:	4e0d      	ldr	r6, [pc, #52]	; (3254 <spi_write_reg+0xf0>)
    321e:	47b0      	blx	r6
    3220:	0039      	movs	r1, r7
    3222:	4813      	ldr	r0, [pc, #76]	; (3270 <spi_write_reg+0x10c>)
    3224:	47b0      	blx	r6
    3226:	200d      	movs	r0, #13
    3228:	4b0c      	ldr	r3, [pc, #48]	; (325c <spi_write_reg+0xf8>)
    322a:	4798      	blx	r3
		goto _FAIL_;
    322c:	e7c9      	b.n	31c2 <spi_write_reg+0x5e>
	}

	return result;
}
    322e:	0020      	movs	r0, r4
    3230:	b006      	add	sp, #24
    3232:	bc1c      	pop	{r2, r3, r4}
    3234:	4690      	mov	r8, r2
    3236:	4699      	mov	r9, r3
    3238:	46a2      	mov	sl, r4
    323a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    323c:	0000c098 	.word	0x0000c098
    3240:	00002da9 	.word	0x00002da9
    3244:	0000c099 	.word	0x0000c099
    3248:	00002f49 	.word	0x00002f49
    324c:	0000c0e0 	.word	0x0000c0e0
    3250:	0000b9d8 	.word	0x0000b9d8
    3254:	0000a33d 	.word	0x0000a33d
    3258:	0000c718 	.word	0x0000c718
    325c:	0000a371 	.word	0x0000a371
    3260:	000011f5 	.word	0x000011f5
    3264:	000003af 	.word	0x000003af
    3268:	0000c750 	.word	0x0000c750
    326c:	00000396 	.word	0x00000396
    3270:	0000c6ec 	.word	0x0000c6ec

00003274 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3274:	b5f0      	push	{r4, r5, r6, r7, lr}
    3276:	46de      	mov	lr, fp
    3278:	4657      	mov	r7, sl
    327a:	464e      	mov	r6, r9
    327c:	4645      	mov	r5, r8
    327e:	b5e0      	push	{r5, r6, r7, lr}
    3280:	b087      	sub	sp, #28
    3282:	9002      	str	r0, [sp, #8]
    3284:	468b      	mov	fp, r1
    3286:	28ff      	cmp	r0, #255	; 0xff
    3288:	d80f      	bhi.n	32aa <spi_read_reg+0x36>
    328a:	4b41      	ldr	r3, [pc, #260]	; (3390 <spi_read_reg+0x11c>)
    328c:	781f      	ldrb	r7, [r3, #0]
    328e:	b2fb      	uxtb	r3, r7
    3290:	9303      	str	r3, [sp, #12]
    3292:	2300      	movs	r3, #0
    3294:	22ff      	movs	r2, #255	; 0xff
    3296:	9902      	ldr	r1, [sp, #8]
    3298:	428a      	cmp	r2, r1
    329a:	415b      	adcs	r3, r3
    329c:	b2db      	uxtb	r3, r3
    329e:	469a      	mov	sl, r3
    32a0:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    32a2:	4b3c      	ldr	r3, [pc, #240]	; (3394 <spi_read_reg+0x120>)
    32a4:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    32a6:	46d1      	mov	r9, sl
    32a8:	e031      	b.n	330e <spi_read_reg+0x9a>
    32aa:	4b3b      	ldr	r3, [pc, #236]	; (3398 <spi_read_reg+0x124>)
    32ac:	781f      	ldrb	r7, [r3, #0]
    32ae:	e7ee      	b.n	328e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    32b0:	9803      	ldr	r0, [sp, #12]
    32b2:	4b3a      	ldr	r3, [pc, #232]	; (339c <spi_read_reg+0x128>)
    32b4:	4798      	blx	r3
    32b6:	0004      	movs	r4, r0
	if (result != N_OK) {
    32b8:	2801      	cmp	r0, #1
    32ba:	d03f      	beq.n	333c <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    32bc:	4a38      	ldr	r2, [pc, #224]	; (33a0 <spi_read_reg+0x12c>)
    32be:	4939      	ldr	r1, [pc, #228]	; (33a4 <spi_read_reg+0x130>)
    32c0:	4839      	ldr	r0, [pc, #228]	; (33a8 <spi_read_reg+0x134>)
    32c2:	4e3a      	ldr	r6, [pc, #232]	; (33ac <spi_read_reg+0x138>)
    32c4:	47b0      	blx	r6
    32c6:	9902      	ldr	r1, [sp, #8]
    32c8:	4839      	ldr	r0, [pc, #228]	; (33b0 <spi_read_reg+0x13c>)
    32ca:	47b0      	blx	r6
    32cc:	200d      	movs	r0, #13
    32ce:	4b39      	ldr	r3, [pc, #228]	; (33b4 <spi_read_reg+0x140>)
    32d0:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    32d2:	2001      	movs	r0, #1
    32d4:	4e38      	ldr	r6, [pc, #224]	; (33b8 <spi_read_reg+0x144>)
    32d6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    32d8:	2300      	movs	r3, #0
    32da:	9300      	str	r3, [sp, #0]
    32dc:	2200      	movs	r2, #0
    32de:	2100      	movs	r1, #0
    32e0:	20cf      	movs	r0, #207	; 0xcf
    32e2:	4f2c      	ldr	r7, [pc, #176]	; (3394 <spi_read_reg+0x120>)
    32e4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    32e6:	20cf      	movs	r0, #207	; 0xcf
    32e8:	4b2c      	ldr	r3, [pc, #176]	; (339c <spi_read_reg+0x128>)
    32ea:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    32ec:	4a33      	ldr	r2, [pc, #204]	; (33bc <spi_read_reg+0x148>)
    32ee:	492d      	ldr	r1, [pc, #180]	; (33a4 <spi_read_reg+0x130>)
    32f0:	482d      	ldr	r0, [pc, #180]	; (33a8 <spi_read_reg+0x134>)
    32f2:	4f2e      	ldr	r7, [pc, #184]	; (33ac <spi_read_reg+0x138>)
    32f4:	47b8      	blx	r7
    32f6:	9a02      	ldr	r2, [sp, #8]
    32f8:	0029      	movs	r1, r5
    32fa:	4831      	ldr	r0, [pc, #196]	; (33c0 <spi_read_reg+0x14c>)
    32fc:	47b8      	blx	r7
    32fe:	200d      	movs	r0, #13
    3300:	4b2c      	ldr	r3, [pc, #176]	; (33b4 <spi_read_reg+0x140>)
    3302:	4798      	blx	r3
		nm_bsp_sleep(1);
    3304:	2001      	movs	r0, #1
    3306:	47b0      	blx	r6
    3308:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    330a:	2d00      	cmp	r5, #0
    330c:	d037      	beq.n	337e <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    330e:	464b      	mov	r3, r9
    3310:	9300      	str	r3, [sp, #0]
    3312:	2304      	movs	r3, #4
    3314:	2200      	movs	r2, #0
    3316:	9f02      	ldr	r7, [sp, #8]
    3318:	0039      	movs	r1, r7
    331a:	9803      	ldr	r0, [sp, #12]
    331c:	47c0      	blx	r8
    331e:	0004      	movs	r4, r0
	if (result != N_OK) {
    3320:	2801      	cmp	r0, #1
    3322:	d0c5      	beq.n	32b0 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3324:	4a27      	ldr	r2, [pc, #156]	; (33c4 <spi_read_reg+0x150>)
    3326:	491f      	ldr	r1, [pc, #124]	; (33a4 <spi_read_reg+0x130>)
    3328:	481f      	ldr	r0, [pc, #124]	; (33a8 <spi_read_reg+0x134>)
    332a:	4e20      	ldr	r6, [pc, #128]	; (33ac <spi_read_reg+0x138>)
    332c:	47b0      	blx	r6
    332e:	0039      	movs	r1, r7
    3330:	4825      	ldr	r0, [pc, #148]	; (33c8 <spi_read_reg+0x154>)
    3332:	47b0      	blx	r6
    3334:	200d      	movs	r0, #13
    3336:	4b1f      	ldr	r3, [pc, #124]	; (33b4 <spi_read_reg+0x140>)
    3338:	4798      	blx	r3
		goto _FAIL_;
    333a:	e7ca      	b.n	32d2 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    333c:	464a      	mov	r2, r9
    333e:	2104      	movs	r1, #4
    3340:	a805      	add	r0, sp, #20
    3342:	4b22      	ldr	r3, [pc, #136]	; (33cc <spi_read_reg+0x158>)
    3344:	4798      	blx	r3
    3346:	0004      	movs	r4, r0
	if (result != N_OK) {
    3348:	2801      	cmp	r0, #1
    334a:	d00b      	beq.n	3364 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    334c:	4a20      	ldr	r2, [pc, #128]	; (33d0 <spi_read_reg+0x15c>)
    334e:	4915      	ldr	r1, [pc, #84]	; (33a4 <spi_read_reg+0x130>)
    3350:	4815      	ldr	r0, [pc, #84]	; (33a8 <spi_read_reg+0x134>)
    3352:	4b16      	ldr	r3, [pc, #88]	; (33ac <spi_read_reg+0x138>)
    3354:	4798      	blx	r3
    3356:	481f      	ldr	r0, [pc, #124]	; (33d4 <spi_read_reg+0x160>)
    3358:	4b1f      	ldr	r3, [pc, #124]	; (33d8 <spi_read_reg+0x164>)
    335a:	4798      	blx	r3
    335c:	200d      	movs	r0, #13
    335e:	4b15      	ldr	r3, [pc, #84]	; (33b4 <spi_read_reg+0x140>)
    3360:	4798      	blx	r3
		goto _FAIL_;
    3362:	e7b6      	b.n	32d2 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    3364:	aa05      	add	r2, sp, #20
    3366:	7853      	ldrb	r3, [r2, #1]
    3368:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    336a:	7891      	ldrb	r1, [r2, #2]
    336c:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    336e:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    3370:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    3372:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    3374:	78d2      	ldrb	r2, [r2, #3]
    3376:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    3378:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    337a:	465a      	mov	r2, fp
    337c:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    337e:	0020      	movs	r0, r4
    3380:	b007      	add	sp, #28
    3382:	bc3c      	pop	{r2, r3, r4, r5}
    3384:	4690      	mov	r8, r2
    3386:	4699      	mov	r9, r3
    3388:	46a2      	mov	sl, r4
    338a:	46ab      	mov	fp, r5
    338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	0000c09a 	.word	0x0000c09a
    3394:	00002da9 	.word	0x00002da9
    3398:	0000c09b 	.word	0x0000c09b
    339c:	00002f49 	.word	0x00002f49
    33a0:	0000041d 	.word	0x0000041d
    33a4:	0000c100 	.word	0x0000c100
    33a8:	0000b9d8 	.word	0x0000b9d8
    33ac:	0000a33d 	.word	0x0000a33d
    33b0:	0000c680 	.word	0x0000c680
    33b4:	0000a371 	.word	0x0000a371
    33b8:	000011f5 	.word	0x000011f5
    33bc:	0000043c 	.word	0x0000043c
    33c0:	0000c6d4 	.word	0x0000c6d4
    33c4:	00000417 	.word	0x00000417
    33c8:	0000c654 	.word	0x0000c654
    33cc:	0000301d 	.word	0x0000301d
    33d0:	00000424 	.word	0x00000424
    33d4:	0000c6b4 	.word	0x0000c6b4
    33d8:	0000a459 	.word	0x0000a459

000033dc <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    33dc:	b510      	push	{r4, lr}
    33de:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    33e0:	2300      	movs	r3, #0
    33e2:	9300      	str	r3, [sp, #0]
    33e4:	2200      	movs	r2, #0
    33e6:	2100      	movs	r1, #0
    33e8:	20cf      	movs	r0, #207	; 0xcf
    33ea:	4c04      	ldr	r4, [pc, #16]	; (33fc <nm_spi_reset+0x20>)
    33ec:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    33ee:	20cf      	movs	r0, #207	; 0xcf
    33f0:	4b03      	ldr	r3, [pc, #12]	; (3400 <nm_spi_reset+0x24>)
    33f2:	4798      	blx	r3
	return M2M_SUCCESS;
}
    33f4:	2000      	movs	r0, #0
    33f6:	b002      	add	sp, #8
    33f8:	bd10      	pop	{r4, pc}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	00002da9 	.word	0x00002da9
    3400:	00002f49 	.word	0x00002f49

00003404 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3404:	2200      	movs	r2, #0
    3406:	4b02      	ldr	r3, [pc, #8]	; (3410 <nm_spi_deinit+0xc>)
    3408:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    340a:	2000      	movs	r0, #0
    340c:	4770      	bx	lr
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	20000388 	.word	0x20000388

00003414 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3414:	b500      	push	{lr}
    3416:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3418:	a901      	add	r1, sp, #4
    341a:	4b02      	ldr	r3, [pc, #8]	; (3424 <nm_spi_read_reg+0x10>)
    341c:	4798      	blx	r3

	return u32Val;
}
    341e:	9801      	ldr	r0, [sp, #4]
    3420:	b003      	add	sp, #12
    3422:	bd00      	pop	{pc}
    3424:	00003275 	.word	0x00003275

00003428 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3428:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    342a:	4b04      	ldr	r3, [pc, #16]	; (343c <nm_spi_read_reg_with_ret+0x14>)
    342c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    342e:	2300      	movs	r3, #0
    3430:	2801      	cmp	r0, #1
    3432:	d101      	bne.n	3438 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3434:	0018      	movs	r0, r3
    3436:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3438:	3b06      	subs	r3, #6
    343a:	e7fb      	b.n	3434 <nm_spi_read_reg_with_ret+0xc>
    343c:	00003275 	.word	0x00003275

00003440 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3440:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    3442:	4b04      	ldr	r3, [pc, #16]	; (3454 <nm_spi_write_reg+0x14>)
    3444:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3446:	2300      	movs	r3, #0
    3448:	2801      	cmp	r0, #1
    344a:	d101      	bne.n	3450 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    344c:	0018      	movs	r0, r3
    344e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    3450:	3b06      	subs	r3, #6
    3452:	e7fb      	b.n	344c <nm_spi_write_reg+0xc>
    3454:	00003165 	.word	0x00003165

00003458 <nm_spi_init>:
{
    3458:	b510      	push	{r4, lr}
    345a:	b082      	sub	sp, #8
	uint32 reg = 0;
    345c:	2300      	movs	r3, #0
    345e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    3460:	4a35      	ldr	r2, [pc, #212]	; (3538 <nm_spi_init+0xe0>)
    3462:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3464:	4669      	mov	r1, sp
    3466:	4835      	ldr	r0, [pc, #212]	; (353c <nm_spi_init+0xe4>)
    3468:	4b35      	ldr	r3, [pc, #212]	; (3540 <nm_spi_init+0xe8>)
    346a:	4798      	blx	r3
    346c:	2800      	cmp	r0, #0
    346e:	d028      	beq.n	34c2 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    3470:	4b31      	ldr	r3, [pc, #196]	; (3538 <nm_spi_init+0xe0>)
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2b00      	cmp	r3, #0
    3476:	d10d      	bne.n	3494 <nm_spi_init+0x3c>
		reg &= ~0x70;
    3478:	337c      	adds	r3, #124	; 0x7c
    347a:	9900      	ldr	r1, [sp, #0]
    347c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    347e:	3b2c      	subs	r3, #44	; 0x2c
    3480:	4319      	orrs	r1, r3
    3482:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    3484:	482d      	ldr	r0, [pc, #180]	; (353c <nm_spi_init+0xe4>)
    3486:	4b2f      	ldr	r3, [pc, #188]	; (3544 <nm_spi_init+0xec>)
    3488:	4798      	blx	r3
    348a:	1e04      	subs	r4, r0, #0
    348c:	d039      	beq.n	3502 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    348e:	2201      	movs	r2, #1
    3490:	4b29      	ldr	r3, [pc, #164]	; (3538 <nm_spi_init+0xe0>)
    3492:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    3494:	a901      	add	r1, sp, #4
    3496:	2080      	movs	r0, #128	; 0x80
    3498:	0140      	lsls	r0, r0, #5
    349a:	4b29      	ldr	r3, [pc, #164]	; (3540 <nm_spi_init+0xe8>)
    349c:	4798      	blx	r3
    349e:	2800      	cmp	r0, #0
    34a0:	d03b      	beq.n	351a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    34a2:	4c26      	ldr	r4, [pc, #152]	; (353c <nm_spi_init+0xe4>)
    34a4:	0020      	movs	r0, r4
    34a6:	4b28      	ldr	r3, [pc, #160]	; (3548 <nm_spi_init+0xf0>)
    34a8:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    34aa:	2370      	movs	r3, #112	; 0x70
    34ac:	0001      	movs	r1, r0
    34ae:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    34b0:	2050      	movs	r0, #80	; 0x50
    34b2:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    34b4:	0020      	movs	r0, r4
    34b6:	4b25      	ldr	r3, [pc, #148]	; (354c <nm_spi_init+0xf4>)
    34b8:	4798      	blx	r3
	return M2M_SUCCESS;
    34ba:	2400      	movs	r4, #0
}
    34bc:	0020      	movs	r0, r4
    34be:	b002      	add	sp, #8
    34c0:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    34c2:	2201      	movs	r2, #1
    34c4:	4b1c      	ldr	r3, [pc, #112]	; (3538 <nm_spi_init+0xe0>)
    34c6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    34c8:	4a21      	ldr	r2, [pc, #132]	; (3550 <nm_spi_init+0xf8>)
    34ca:	4922      	ldr	r1, [pc, #136]	; (3554 <nm_spi_init+0xfc>)
    34cc:	4822      	ldr	r0, [pc, #136]	; (3558 <nm_spi_init+0x100>)
    34ce:	4b23      	ldr	r3, [pc, #140]	; (355c <nm_spi_init+0x104>)
    34d0:	4798      	blx	r3
    34d2:	4823      	ldr	r0, [pc, #140]	; (3560 <nm_spi_init+0x108>)
    34d4:	4b23      	ldr	r3, [pc, #140]	; (3564 <nm_spi_init+0x10c>)
    34d6:	4798      	blx	r3
    34d8:	200d      	movs	r0, #13
    34da:	4b23      	ldr	r3, [pc, #140]	; (3568 <nm_spi_init+0x110>)
    34dc:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    34de:	4669      	mov	r1, sp
    34e0:	4816      	ldr	r0, [pc, #88]	; (353c <nm_spi_init+0xe4>)
    34e2:	4b17      	ldr	r3, [pc, #92]	; (3540 <nm_spi_init+0xe8>)
    34e4:	4798      	blx	r3
    34e6:	1e04      	subs	r4, r0, #0
    34e8:	d1c2      	bne.n	3470 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    34ea:	4a20      	ldr	r2, [pc, #128]	; (356c <nm_spi_init+0x114>)
    34ec:	4919      	ldr	r1, [pc, #100]	; (3554 <nm_spi_init+0xfc>)
    34ee:	481a      	ldr	r0, [pc, #104]	; (3558 <nm_spi_init+0x100>)
    34f0:	4b1a      	ldr	r3, [pc, #104]	; (355c <nm_spi_init+0x104>)
    34f2:	4798      	blx	r3
    34f4:	481e      	ldr	r0, [pc, #120]	; (3570 <nm_spi_init+0x118>)
    34f6:	4b1b      	ldr	r3, [pc, #108]	; (3564 <nm_spi_init+0x10c>)
    34f8:	4798      	blx	r3
    34fa:	200d      	movs	r0, #13
    34fc:	4b1a      	ldr	r3, [pc, #104]	; (3568 <nm_spi_init+0x110>)
    34fe:	4798      	blx	r3
			return 0;
    3500:	e7dc      	b.n	34bc <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3502:	4a1c      	ldr	r2, [pc, #112]	; (3574 <nm_spi_init+0x11c>)
    3504:	4913      	ldr	r1, [pc, #76]	; (3554 <nm_spi_init+0xfc>)
    3506:	4814      	ldr	r0, [pc, #80]	; (3558 <nm_spi_init+0x100>)
    3508:	4b14      	ldr	r3, [pc, #80]	; (355c <nm_spi_init+0x104>)
    350a:	4798      	blx	r3
    350c:	481a      	ldr	r0, [pc, #104]	; (3578 <nm_spi_init+0x120>)
    350e:	4b15      	ldr	r3, [pc, #84]	; (3564 <nm_spi_init+0x10c>)
    3510:	4798      	blx	r3
    3512:	200d      	movs	r0, #13
    3514:	4b14      	ldr	r3, [pc, #80]	; (3568 <nm_spi_init+0x110>)
    3516:	4798      	blx	r3
			return 0;
    3518:	e7d0      	b.n	34bc <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    351a:	4a18      	ldr	r2, [pc, #96]	; (357c <nm_spi_init+0x124>)
    351c:	490d      	ldr	r1, [pc, #52]	; (3554 <nm_spi_init+0xfc>)
    351e:	480e      	ldr	r0, [pc, #56]	; (3558 <nm_spi_init+0x100>)
    3520:	4b0e      	ldr	r3, [pc, #56]	; (355c <nm_spi_init+0x104>)
    3522:	4798      	blx	r3
    3524:	4816      	ldr	r0, [pc, #88]	; (3580 <nm_spi_init+0x128>)
    3526:	4b0f      	ldr	r3, [pc, #60]	; (3564 <nm_spi_init+0x10c>)
    3528:	4798      	blx	r3
    352a:	200d      	movs	r0, #13
    352c:	4b0e      	ldr	r3, [pc, #56]	; (3568 <nm_spi_init+0x110>)
    352e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3530:	2406      	movs	r4, #6
    3532:	4264      	negs	r4, r4
    3534:	e7c2      	b.n	34bc <nm_spi_init+0x64>
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	20000388 	.word	0x20000388
    353c:	0000e824 	.word	0x0000e824
    3540:	00003275 	.word	0x00003275
    3544:	00003165 	.word	0x00003165
    3548:	00003415 	.word	0x00003415
    354c:	00003441 	.word	0x00003441
    3550:	000004c7 	.word	0x000004c7
    3554:	0000c11c 	.word	0x0000c11c
    3558:	0000b9d8 	.word	0x0000b9d8
    355c:	0000a33d 	.word	0x0000a33d
    3560:	0000c228 	.word	0x0000c228
    3564:	0000a459 	.word	0x0000a459
    3568:	0000a371 	.word	0x0000a371
    356c:	000004ca 	.word	0x000004ca
    3570:	0000c278 	.word	0x0000c278
    3574:	000004d4 	.word	0x000004d4
    3578:	0000c2a4 	.word	0x0000c2a4
    357c:	000004de 	.word	0x000004de
    3580:	0000c2d8 	.word	0x0000c2d8

00003584 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3584:	b5f0      	push	{r4, r5, r6, r7, lr}
    3586:	46de      	mov	lr, fp
    3588:	4657      	mov	r7, sl
    358a:	464e      	mov	r6, r9
    358c:	4645      	mov	r5, r8
    358e:	b5e0      	push	{r5, r6, r7, lr}
    3590:	b087      	sub	sp, #28
    3592:	9002      	str	r0, [sp, #8]
    3594:	9103      	str	r1, [sp, #12]
    3596:	0016      	movs	r6, r2
    3598:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    359a:	2300      	movs	r3, #0
    359c:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    359e:	2400      	movs	r4, #0
    35a0:	4b3e      	ldr	r3, [pc, #248]	; (369c <nm_spi_read_block+0x118>)
    35a2:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    35a4:	46a9      	mov	r9, r5
    35a6:	e037      	b.n	3618 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    35a8:	2301      	movs	r3, #1
    35aa:	469b      	mov	fp, r3
		size = 2;
    35ac:	3601      	adds	r6, #1
    35ae:	e035      	b.n	361c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    35b0:	20c8      	movs	r0, #200	; 0xc8
    35b2:	4b3b      	ldr	r3, [pc, #236]	; (36a0 <nm_spi_read_block+0x11c>)
    35b4:	4798      	blx	r3
	if (result != N_OK) {
    35b6:	2801      	cmp	r0, #1
    35b8:	d045      	beq.n	3646 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    35ba:	4a3a      	ldr	r2, [pc, #232]	; (36a4 <nm_spi_read_block+0x120>)
    35bc:	493a      	ldr	r1, [pc, #232]	; (36a8 <nm_spi_read_block+0x124>)
    35be:	483b      	ldr	r0, [pc, #236]	; (36ac <nm_spi_read_block+0x128>)
    35c0:	4f3b      	ldr	r7, [pc, #236]	; (36b0 <nm_spi_read_block+0x12c>)
    35c2:	47b8      	blx	r7
    35c4:	9902      	ldr	r1, [sp, #8]
    35c6:	483b      	ldr	r0, [pc, #236]	; (36b4 <nm_spi_read_block+0x130>)
    35c8:	47b8      	blx	r7
    35ca:	200d      	movs	r0, #13
    35cc:	4b3a      	ldr	r3, [pc, #232]	; (36b8 <nm_spi_read_block+0x134>)
    35ce:	4798      	blx	r3
		nm_bsp_sleep(1);
    35d0:	2001      	movs	r0, #1
    35d2:	4f3a      	ldr	r7, [pc, #232]	; (36bc <nm_spi_read_block+0x138>)
    35d4:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    35d6:	9400      	str	r4, [sp, #0]
    35d8:	0023      	movs	r3, r4
    35da:	0022      	movs	r2, r4
    35dc:	0021      	movs	r1, r4
    35de:	20cf      	movs	r0, #207	; 0xcf
    35e0:	4d2e      	ldr	r5, [pc, #184]	; (369c <nm_spi_read_block+0x118>)
    35e2:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    35e4:	20cf      	movs	r0, #207	; 0xcf
    35e6:	4b2e      	ldr	r3, [pc, #184]	; (36a0 <nm_spi_read_block+0x11c>)
    35e8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    35ea:	4a35      	ldr	r2, [pc, #212]	; (36c0 <nm_spi_read_block+0x13c>)
    35ec:	492e      	ldr	r1, [pc, #184]	; (36a8 <nm_spi_read_block+0x124>)
    35ee:	482f      	ldr	r0, [pc, #188]	; (36ac <nm_spi_read_block+0x128>)
    35f0:	4b2f      	ldr	r3, [pc, #188]	; (36b0 <nm_spi_read_block+0x12c>)
    35f2:	469a      	mov	sl, r3
    35f4:	4798      	blx	r3
    35f6:	0033      	movs	r3, r6
    35f8:	9a02      	ldr	r2, [sp, #8]
    35fa:	4649      	mov	r1, r9
    35fc:	4831      	ldr	r0, [pc, #196]	; (36c4 <nm_spi_read_block+0x140>)
    35fe:	47d0      	blx	sl
    3600:	200d      	movs	r0, #13
    3602:	4b2d      	ldr	r3, [pc, #180]	; (36b8 <nm_spi_read_block+0x134>)
    3604:	4798      	blx	r3
		nm_bsp_sleep(1);
    3606:	2001      	movs	r0, #1
    3608:	47b8      	blx	r7
    360a:	2301      	movs	r3, #1
    360c:	425b      	negs	r3, r3
    360e:	469c      	mov	ip, r3
    3610:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3612:	464b      	mov	r3, r9
    3614:	2b00      	cmp	r3, #0
    3616:	d038      	beq.n	368a <nm_spi_read_block+0x106>
	if (size == 1)
    3618:	2e01      	cmp	r6, #1
    361a:	d0c5      	beq.n	35a8 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    361c:	9400      	str	r4, [sp, #0]
    361e:	0033      	movs	r3, r6
    3620:	0022      	movs	r2, r4
    3622:	9d02      	ldr	r5, [sp, #8]
    3624:	0029      	movs	r1, r5
    3626:	20c8      	movs	r0, #200	; 0xc8
    3628:	47c0      	blx	r8
	if (result != N_OK) {
    362a:	2801      	cmp	r0, #1
    362c:	d0c0      	beq.n	35b0 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    362e:	4a26      	ldr	r2, [pc, #152]	; (36c8 <nm_spi_read_block+0x144>)
    3630:	491d      	ldr	r1, [pc, #116]	; (36a8 <nm_spi_read_block+0x124>)
    3632:	481e      	ldr	r0, [pc, #120]	; (36ac <nm_spi_read_block+0x128>)
    3634:	4f1e      	ldr	r7, [pc, #120]	; (36b0 <nm_spi_read_block+0x12c>)
    3636:	47b8      	blx	r7
    3638:	0029      	movs	r1, r5
    363a:	4824      	ldr	r0, [pc, #144]	; (36cc <nm_spi_read_block+0x148>)
    363c:	47b8      	blx	r7
    363e:	200d      	movs	r0, #13
    3640:	4b1d      	ldr	r3, [pc, #116]	; (36b8 <nm_spi_read_block+0x134>)
    3642:	4798      	blx	r3
    3644:	e7c4      	b.n	35d0 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    3646:	465b      	mov	r3, fp
    3648:	2b00      	cmp	r3, #0
    364a:	d016      	beq.n	367a <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    364c:	af05      	add	r7, sp, #20
    364e:	0022      	movs	r2, r4
    3650:	0031      	movs	r1, r6
    3652:	0038      	movs	r0, r7
    3654:	4b1e      	ldr	r3, [pc, #120]	; (36d0 <nm_spi_read_block+0x14c>)
    3656:	4798      	blx	r3
		buf[0] = tmp[0];
    3658:	783b      	ldrb	r3, [r7, #0]
    365a:	9a03      	ldr	r2, [sp, #12]
    365c:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    365e:	2801      	cmp	r0, #1
    3660:	d011      	beq.n	3686 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3662:	4a1c      	ldr	r2, [pc, #112]	; (36d4 <nm_spi_read_block+0x150>)
    3664:	4910      	ldr	r1, [pc, #64]	; (36a8 <nm_spi_read_block+0x124>)
    3666:	4811      	ldr	r0, [pc, #68]	; (36ac <nm_spi_read_block+0x128>)
    3668:	4b11      	ldr	r3, [pc, #68]	; (36b0 <nm_spi_read_block+0x12c>)
    366a:	4798      	blx	r3
    366c:	481a      	ldr	r0, [pc, #104]	; (36d8 <nm_spi_read_block+0x154>)
    366e:	4b1b      	ldr	r3, [pc, #108]	; (36dc <nm_spi_read_block+0x158>)
    3670:	4798      	blx	r3
    3672:	200d      	movs	r0, #13
    3674:	4b10      	ldr	r3, [pc, #64]	; (36b8 <nm_spi_read_block+0x134>)
    3676:	4798      	blx	r3
    3678:	e7aa      	b.n	35d0 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    367a:	0022      	movs	r2, r4
    367c:	0031      	movs	r1, r6
    367e:	9803      	ldr	r0, [sp, #12]
    3680:	4b13      	ldr	r3, [pc, #76]	; (36d0 <nm_spi_read_block+0x14c>)
    3682:	4798      	blx	r3
    3684:	e7eb      	b.n	365e <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3686:	2000      	movs	r0, #0
    3688:	e001      	b.n	368e <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    368a:	2006      	movs	r0, #6
    368c:	4240      	negs	r0, r0

	return s8Ret;
}
    368e:	b007      	add	sp, #28
    3690:	bc3c      	pop	{r2, r3, r4, r5}
    3692:	4690      	mov	r8, r2
    3694:	4699      	mov	r9, r3
    3696:	46a2      	mov	sl, r4
    3698:	46ab      	mov	fp, r5
    369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    369c:	00002da9 	.word	0x00002da9
    36a0:	00002f49 	.word	0x00002f49
    36a4:	00000463 	.word	0x00000463
    36a8:	0000c110 	.word	0x0000c110
    36ac:	0000b9d8 	.word	0x0000b9d8
    36b0:	0000a33d 	.word	0x0000a33d
    36b4:	0000c32c 	.word	0x0000c32c
    36b8:	0000a371 	.word	0x0000a371
    36bc:	000011f5 	.word	0x000011f5
    36c0:	00000484 	.word	0x00000484
    36c4:	0000c38c 	.word	0x0000c38c
    36c8:	0000045d 	.word	0x0000045d
    36cc:	0000c2fc 	.word	0x0000c2fc
    36d0:	0000301d 	.word	0x0000301d
    36d4:	00000473 	.word	0x00000473
    36d8:	0000c364 	.word	0x0000c364
    36dc:	0000a459 	.word	0x0000a459

000036e0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    36e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36e2:	46de      	mov	lr, fp
    36e4:	4647      	mov	r7, r8
    36e6:	b580      	push	{r7, lr}
    36e8:	b089      	sub	sp, #36	; 0x24
    36ea:	9004      	str	r0, [sp, #16]
    36ec:	468b      	mov	fp, r1
    36ee:	9203      	str	r2, [sp, #12]
    36f0:	260a      	movs	r6, #10
    36f2:	2780      	movs	r7, #128	; 0x80
    36f4:	01bf      	lsls	r7, r7, #6
    36f6:	466b      	mov	r3, sp
    36f8:	82df      	strh	r7, [r3, #22]
    36fa:	0035      	movs	r5, r6
    36fc:	e02d      	b.n	375a <nm_spi_write_block+0x7a>
		size = 2;
    36fe:	3301      	adds	r3, #1
    3700:	9303      	str	r3, [sp, #12]
    3702:	e02d      	b.n	3760 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3704:	4a83      	ldr	r2, [pc, #524]	; (3914 <nm_spi_write_block+0x234>)
    3706:	4984      	ldr	r1, [pc, #528]	; (3918 <nm_spi_write_block+0x238>)
    3708:	4884      	ldr	r0, [pc, #528]	; (391c <nm_spi_write_block+0x23c>)
    370a:	4c85      	ldr	r4, [pc, #532]	; (3920 <nm_spi_write_block+0x240>)
    370c:	47a0      	blx	r4
    370e:	0031      	movs	r1, r6
    3710:	4884      	ldr	r0, [pc, #528]	; (3924 <nm_spi_write_block+0x244>)
    3712:	47a0      	blx	r4
    3714:	200d      	movs	r0, #13
    3716:	4b84      	ldr	r3, [pc, #528]	; (3928 <nm_spi_write_block+0x248>)
    3718:	4798      	blx	r3
		nm_bsp_sleep(1);
    371a:	2001      	movs	r0, #1
    371c:	4c83      	ldr	r4, [pc, #524]	; (392c <nm_spi_write_block+0x24c>)
    371e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3720:	2300      	movs	r3, #0
    3722:	9300      	str	r3, [sp, #0]
    3724:	2200      	movs	r2, #0
    3726:	2100      	movs	r1, #0
    3728:	20cf      	movs	r0, #207	; 0xcf
    372a:	4e81      	ldr	r6, [pc, #516]	; (3930 <nm_spi_write_block+0x250>)
    372c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    372e:	20cf      	movs	r0, #207	; 0xcf
    3730:	4b80      	ldr	r3, [pc, #512]	; (3934 <nm_spi_write_block+0x254>)
    3732:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3734:	4a80      	ldr	r2, [pc, #512]	; (3938 <nm_spi_write_block+0x258>)
    3736:	4978      	ldr	r1, [pc, #480]	; (3918 <nm_spi_write_block+0x238>)
    3738:	4878      	ldr	r0, [pc, #480]	; (391c <nm_spi_write_block+0x23c>)
    373a:	4e79      	ldr	r6, [pc, #484]	; (3920 <nm_spi_write_block+0x240>)
    373c:	47b0      	blx	r6
    373e:	9b03      	ldr	r3, [sp, #12]
    3740:	9a04      	ldr	r2, [sp, #16]
    3742:	0029      	movs	r1, r5
    3744:	487d      	ldr	r0, [pc, #500]	; (393c <nm_spi_write_block+0x25c>)
    3746:	47b0      	blx	r6
    3748:	200d      	movs	r0, #13
    374a:	4b77      	ldr	r3, [pc, #476]	; (3928 <nm_spi_write_block+0x248>)
    374c:	4798      	blx	r3
		nm_bsp_sleep(1);
    374e:	2001      	movs	r0, #1
    3750:	47a0      	blx	r4
    3752:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    3754:	2d00      	cmp	r5, #0
    3756:	d100      	bne.n	375a <nm_spi_write_block+0x7a>
    3758:	e0d5      	b.n	3906 <nm_spi_write_block+0x226>
	if (size == 1)
    375a:	9b03      	ldr	r3, [sp, #12]
    375c:	2b01      	cmp	r3, #1
    375e:	d0ce      	beq.n	36fe <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    3760:	2300      	movs	r3, #0
    3762:	9300      	str	r3, [sp, #0]
    3764:	9b03      	ldr	r3, [sp, #12]
    3766:	2200      	movs	r2, #0
    3768:	9e04      	ldr	r6, [sp, #16]
    376a:	0031      	movs	r1, r6
    376c:	20c7      	movs	r0, #199	; 0xc7
    376e:	4c70      	ldr	r4, [pc, #448]	; (3930 <nm_spi_write_block+0x250>)
    3770:	47a0      	blx	r4
	if (result != N_OK) {
    3772:	2801      	cmp	r0, #1
    3774:	d1c6      	bne.n	3704 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    3776:	20c7      	movs	r0, #199	; 0xc7
    3778:	4b6e      	ldr	r3, [pc, #440]	; (3934 <nm_spi_write_block+0x254>)
    377a:	4798      	blx	r3
	if (result != N_OK) {
    377c:	2801      	cmp	r0, #1
    377e:	d00c      	beq.n	379a <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3780:	22f4      	movs	r2, #244	; 0xf4
    3782:	0092      	lsls	r2, r2, #2
    3784:	4964      	ldr	r1, [pc, #400]	; (3918 <nm_spi_write_block+0x238>)
    3786:	4865      	ldr	r0, [pc, #404]	; (391c <nm_spi_write_block+0x23c>)
    3788:	4c65      	ldr	r4, [pc, #404]	; (3920 <nm_spi_write_block+0x240>)
    378a:	47a0      	blx	r4
    378c:	9904      	ldr	r1, [sp, #16]
    378e:	486c      	ldr	r0, [pc, #432]	; (3940 <nm_spi_write_block+0x260>)
    3790:	47a0      	blx	r4
    3792:	200d      	movs	r0, #13
    3794:	4b64      	ldr	r3, [pc, #400]	; (3928 <nm_spi_write_block+0x248>)
    3796:	4798      	blx	r3
    3798:	e7bf      	b.n	371a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    379a:	2200      	movs	r2, #0
    379c:	ab07      	add	r3, sp, #28
    379e:	801a      	strh	r2, [r3, #0]
    37a0:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    37a2:	2600      	movs	r6, #0
				order = 0x1;
    37a4:	46a8      	mov	r8, r5
    37a6:	0035      	movs	r5, r6
    37a8:	0026      	movs	r6, r4
    37aa:	e021      	b.n	37f0 <nm_spi_write_block+0x110>
				order = 0x2;
    37ac:	2300      	movs	r3, #0
    37ae:	42b7      	cmp	r7, r6
    37b0:	415b      	adcs	r3, r3
    37b2:	3302      	adds	r3, #2
		cmd |= order;
    37b4:	200b      	movs	r0, #11
    37b6:	aa04      	add	r2, sp, #16
    37b8:	4694      	mov	ip, r2
    37ba:	4460      	add	r0, ip
    37bc:	2210      	movs	r2, #16
    37be:	4252      	negs	r2, r2
    37c0:	4313      	orrs	r3, r2
    37c2:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    37c4:	2101      	movs	r1, #1
    37c6:	4b5f      	ldr	r3, [pc, #380]	; (3944 <nm_spi_write_block+0x264>)
    37c8:	4798      	blx	r3
    37ca:	2800      	cmp	r0, #0
    37cc:	d11d      	bne.n	380a <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    37ce:	465b      	mov	r3, fp
    37d0:	1958      	adds	r0, r3, r5
    37d2:	0021      	movs	r1, r4
    37d4:	4b5b      	ldr	r3, [pc, #364]	; (3944 <nm_spi_write_block+0x264>)
    37d6:	4798      	blx	r3
    37d8:	2800      	cmp	r0, #0
    37da:	d130      	bne.n	383e <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    37dc:	4b5a      	ldr	r3, [pc, #360]	; (3948 <nm_spi_write_block+0x268>)
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d039      	beq.n	3858 <nm_spi_write_block+0x178>
		ix += nbytes;
    37e4:	1965      	adds	r5, r4, r5
    37e6:	b22d      	sxth	r5, r5
		sz -= nbytes;
    37e8:	1b36      	subs	r6, r6, r4
    37ea:	b2b6      	uxth	r6, r6
	} while (sz);
    37ec:	2e00      	cmp	r6, #0
    37ee:	d053      	beq.n	3898 <nm_spi_write_block+0x1b8>
    37f0:	1c34      	adds	r4, r6, #0
    37f2:	42be      	cmp	r6, r7
    37f4:	d901      	bls.n	37fa <nm_spi_write_block+0x11a>
    37f6:	466b      	mov	r3, sp
    37f8:	8adc      	ldrh	r4, [r3, #22]
    37fa:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    37fc:	2d00      	cmp	r5, #0
    37fe:	d1d5      	bne.n	37ac <nm_spi_write_block+0xcc>
				order = 0x3;
    3800:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3802:	42be      	cmp	r6, r7
    3804:	d9d6      	bls.n	37b4 <nm_spi_write_block+0xd4>
				order = 0x1;
    3806:	3b02      	subs	r3, #2
    3808:	e7d4      	b.n	37b4 <nm_spi_write_block+0xd4>
    380a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    380c:	22d4      	movs	r2, #212	; 0xd4
    380e:	0092      	lsls	r2, r2, #2
    3810:	494e      	ldr	r1, [pc, #312]	; (394c <nm_spi_write_block+0x26c>)
    3812:	4842      	ldr	r0, [pc, #264]	; (391c <nm_spi_write_block+0x23c>)
    3814:	4b42      	ldr	r3, [pc, #264]	; (3920 <nm_spi_write_block+0x240>)
    3816:	4798      	blx	r3
    3818:	484d      	ldr	r0, [pc, #308]	; (3950 <nm_spi_write_block+0x270>)
    381a:	4b4e      	ldr	r3, [pc, #312]	; (3954 <nm_spi_write_block+0x274>)
    381c:	4798      	blx	r3
    381e:	200d      	movs	r0, #13
    3820:	4b41      	ldr	r3, [pc, #260]	; (3928 <nm_spi_write_block+0x248>)
    3822:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3824:	22f8      	movs	r2, #248	; 0xf8
    3826:	0092      	lsls	r2, r2, #2
    3828:	493b      	ldr	r1, [pc, #236]	; (3918 <nm_spi_write_block+0x238>)
    382a:	483c      	ldr	r0, [pc, #240]	; (391c <nm_spi_write_block+0x23c>)
    382c:	4b3c      	ldr	r3, [pc, #240]	; (3920 <nm_spi_write_block+0x240>)
    382e:	4798      	blx	r3
    3830:	4849      	ldr	r0, [pc, #292]	; (3958 <nm_spi_write_block+0x278>)
    3832:	4b48      	ldr	r3, [pc, #288]	; (3954 <nm_spi_write_block+0x274>)
    3834:	4798      	blx	r3
    3836:	200d      	movs	r0, #13
    3838:	4b3b      	ldr	r3, [pc, #236]	; (3928 <nm_spi_write_block+0x248>)
    383a:	4798      	blx	r3
    383c:	e76d      	b.n	371a <nm_spi_write_block+0x3a>
    383e:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3840:	4a46      	ldr	r2, [pc, #280]	; (395c <nm_spi_write_block+0x27c>)
    3842:	4942      	ldr	r1, [pc, #264]	; (394c <nm_spi_write_block+0x26c>)
    3844:	4835      	ldr	r0, [pc, #212]	; (391c <nm_spi_write_block+0x23c>)
    3846:	4b36      	ldr	r3, [pc, #216]	; (3920 <nm_spi_write_block+0x240>)
    3848:	4798      	blx	r3
    384a:	4845      	ldr	r0, [pc, #276]	; (3960 <nm_spi_write_block+0x280>)
    384c:	4b41      	ldr	r3, [pc, #260]	; (3954 <nm_spi_write_block+0x274>)
    384e:	4798      	blx	r3
    3850:	200d      	movs	r0, #13
    3852:	4b35      	ldr	r3, [pc, #212]	; (3928 <nm_spi_write_block+0x248>)
    3854:	4798      	blx	r3
    3856:	e7e5      	b.n	3824 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3858:	2102      	movs	r1, #2
    385a:	a807      	add	r0, sp, #28
    385c:	4b39      	ldr	r3, [pc, #228]	; (3944 <nm_spi_write_block+0x264>)
    385e:	4798      	blx	r3
    3860:	2800      	cmp	r0, #0
    3862:	d0bf      	beq.n	37e4 <nm_spi_write_block+0x104>
    3864:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3866:	4a3f      	ldr	r2, [pc, #252]	; (3964 <nm_spi_write_block+0x284>)
    3868:	4938      	ldr	r1, [pc, #224]	; (394c <nm_spi_write_block+0x26c>)
    386a:	482c      	ldr	r0, [pc, #176]	; (391c <nm_spi_write_block+0x23c>)
    386c:	4b2c      	ldr	r3, [pc, #176]	; (3920 <nm_spi_write_block+0x240>)
    386e:	4798      	blx	r3
    3870:	483d      	ldr	r0, [pc, #244]	; (3968 <nm_spi_write_block+0x288>)
    3872:	4b38      	ldr	r3, [pc, #224]	; (3954 <nm_spi_write_block+0x274>)
    3874:	4798      	blx	r3
    3876:	200d      	movs	r0, #13
    3878:	4b2b      	ldr	r3, [pc, #172]	; (3928 <nm_spi_write_block+0x248>)
    387a:	4798      	blx	r3
    387c:	e7d2      	b.n	3824 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    387e:	223c      	movs	r2, #60	; 0x3c
    3880:	32ff      	adds	r2, #255	; 0xff
    3882:	493a      	ldr	r1, [pc, #232]	; (396c <nm_spi_write_block+0x28c>)
    3884:	4825      	ldr	r0, [pc, #148]	; (391c <nm_spi_write_block+0x23c>)
    3886:	4b26      	ldr	r3, [pc, #152]	; (3920 <nm_spi_write_block+0x240>)
    3888:	4798      	blx	r3
    388a:	4839      	ldr	r0, [pc, #228]	; (3970 <nm_spi_write_block+0x290>)
    388c:	4b31      	ldr	r3, [pc, #196]	; (3954 <nm_spi_write_block+0x274>)
    388e:	4798      	blx	r3
    3890:	200d      	movs	r0, #13
    3892:	4b25      	ldr	r3, [pc, #148]	; (3928 <nm_spi_write_block+0x248>)
    3894:	4798      	blx	r3
    3896:	e027      	b.n	38e8 <nm_spi_write_block+0x208>
    3898:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    389a:	4b2b      	ldr	r3, [pc, #172]	; (3948 <nm_spi_write_block+0x268>)
    389c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    389e:	1e63      	subs	r3, r4, #1
    38a0:	419c      	sbcs	r4, r3
    38a2:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    38a4:	b2a1      	uxth	r1, r4
    38a6:	a807      	add	r0, sp, #28
    38a8:	4b32      	ldr	r3, [pc, #200]	; (3974 <nm_spi_write_block+0x294>)
    38aa:	4798      	blx	r3
    38ac:	2800      	cmp	r0, #0
    38ae:	d1e6      	bne.n	387e <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    38b0:	ab08      	add	r3, sp, #32
    38b2:	191b      	adds	r3, r3, r4
    38b4:	3b05      	subs	r3, #5
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d106      	bne.n	38ca <nm_spi_write_block+0x1ea>
    38bc:	ab08      	add	r3, sp, #32
    38be:	469c      	mov	ip, r3
    38c0:	4464      	add	r4, ip
    38c2:	3c06      	subs	r4, #6
    38c4:	7823      	ldrb	r3, [r4, #0]
    38c6:	2bc3      	cmp	r3, #195	; 0xc3
    38c8:	d01b      	beq.n	3902 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    38ca:	22a1      	movs	r2, #161	; 0xa1
    38cc:	0052      	lsls	r2, r2, #1
    38ce:	4927      	ldr	r1, [pc, #156]	; (396c <nm_spi_write_block+0x28c>)
    38d0:	4812      	ldr	r0, [pc, #72]	; (391c <nm_spi_write_block+0x23c>)
    38d2:	4c13      	ldr	r4, [pc, #76]	; (3920 <nm_spi_write_block+0x240>)
    38d4:	47a0      	blx	r4
    38d6:	a907      	add	r1, sp, #28
    38d8:	788b      	ldrb	r3, [r1, #2]
    38da:	784a      	ldrb	r2, [r1, #1]
    38dc:	7809      	ldrb	r1, [r1, #0]
    38de:	4826      	ldr	r0, [pc, #152]	; (3978 <nm_spi_write_block+0x298>)
    38e0:	47a0      	blx	r4
    38e2:	200d      	movs	r0, #13
    38e4:	4b10      	ldr	r3, [pc, #64]	; (3928 <nm_spi_write_block+0x248>)
    38e6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    38e8:	22fa      	movs	r2, #250	; 0xfa
    38ea:	0092      	lsls	r2, r2, #2
    38ec:	490a      	ldr	r1, [pc, #40]	; (3918 <nm_spi_write_block+0x238>)
    38ee:	480b      	ldr	r0, [pc, #44]	; (391c <nm_spi_write_block+0x23c>)
    38f0:	4b0b      	ldr	r3, [pc, #44]	; (3920 <nm_spi_write_block+0x240>)
    38f2:	4798      	blx	r3
    38f4:	4818      	ldr	r0, [pc, #96]	; (3958 <nm_spi_write_block+0x278>)
    38f6:	4b17      	ldr	r3, [pc, #92]	; (3954 <nm_spi_write_block+0x274>)
    38f8:	4798      	blx	r3
    38fa:	200d      	movs	r0, #13
    38fc:	4b0a      	ldr	r3, [pc, #40]	; (3928 <nm_spi_write_block+0x248>)
    38fe:	4798      	blx	r3
    3900:	e70b      	b.n	371a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3902:	2000      	movs	r0, #0
    3904:	e001      	b.n	390a <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3906:	2006      	movs	r0, #6
    3908:	4240      	negs	r0, r0

	return s8Ret;
}
    390a:	b009      	add	sp, #36	; 0x24
    390c:	bc0c      	pop	{r2, r3}
    390e:	4690      	mov	r8, r2
    3910:	469b      	mov	fp, r3
    3912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3914:	000003ca 	.word	0x000003ca
    3918:	0000c0f0 	.word	0x0000c0f0
    391c:	0000b9d8 	.word	0x0000b9d8
    3920:	0000a33d 	.word	0x0000a33d
    3924:	0000c3a8 	.word	0x0000c3a8
    3928:	0000a371 	.word	0x0000a371
    392c:	000011f5 	.word	0x000011f5
    3930:	00002da9 	.word	0x00002da9
    3934:	00002f49 	.word	0x00002f49
    3938:	000003f2 	.word	0x000003f2
    393c:	0000c38c 	.word	0x0000c38c
    3940:	0000c3d8 	.word	0x0000c3d8
    3944:	00002d89 	.word	0x00002d89
    3948:	20000388 	.word	0x20000388
    394c:	0000c0d0 	.word	0x0000c0d0
    3950:	0000c410 	.word	0x0000c410
    3954:	0000a459 	.word	0x0000a459
    3958:	0000c504 	.word	0x0000c504
    395c:	00000359 	.word	0x00000359
    3960:	0000c448 	.word	0x0000c448
    3964:	00000363 	.word	0x00000363
    3968:	0000c47c 	.word	0x0000c47c
    396c:	0000c0a4 	.word	0x0000c0a4
    3970:	0000c4b4 	.word	0x0000c4b4
    3974:	00002f29 	.word	0x00002f29
    3978:	0000c4d4 	.word	0x0000c4d4

0000397c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    397c:	b5f0      	push	{r4, r5, r6, r7, lr}
    397e:	46de      	mov	lr, fp
    3980:	4657      	mov	r7, sl
    3982:	464e      	mov	r6, r9
    3984:	4645      	mov	r5, r8
    3986:	b5e0      	push	{r5, r6, r7, lr}
    3988:	b085      	sub	sp, #20
    398a:	9001      	str	r0, [sp, #4]
    398c:	000e      	movs	r6, r1
    398e:	9202      	str	r2, [sp, #8]
    3990:	001d      	movs	r5, r3
    3992:	ab0e      	add	r3, sp, #56	; 0x38
    3994:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    3996:	2c00      	cmp	r4, #0
    3998:	d064      	beq.n	3a64 <Socket_ReadSocketData+0xe8>
    399a:	0103      	lsls	r3, r0, #4
    399c:	4935      	ldr	r1, [pc, #212]	; (3a74 <Socket_ReadSocketData+0xf8>)
    399e:	585b      	ldr	r3, [r3, r1]
    39a0:	2b00      	cmp	r3, #0
    39a2:	d05f      	beq.n	3a64 <Socket_ReadSocketData+0xe8>
    39a4:	0101      	lsls	r1, r0, #4
    39a6:	4b33      	ldr	r3, [pc, #204]	; (3a74 <Socket_ReadSocketData+0xf8>)
    39a8:	185b      	adds	r3, r3, r1
    39aa:	889b      	ldrh	r3, [r3, #4]
    39ac:	b29b      	uxth	r3, r3
    39ae:	2b00      	cmp	r3, #0
    39b0:	d058      	beq.n	3a64 <Socket_ReadSocketData+0xe8>
    39b2:	4b30      	ldr	r3, [pc, #192]	; (3a74 <Socket_ReadSocketData+0xf8>)
    39b4:	185b      	adds	r3, r3, r1
    39b6:	7a9b      	ldrb	r3, [r3, #10]
    39b8:	2b01      	cmp	r3, #1
    39ba:	d153      	bne.n	3a64 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    39bc:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    39be:	4b2d      	ldr	r3, [pc, #180]	; (3a74 <Socket_ReadSocketData+0xf8>)
    39c0:	469b      	mov	fp, r3
    39c2:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    39c4:	465b      	mov	r3, fp
    39c6:	220a      	movs	r2, #10
    39c8:	4690      	mov	r8, r2
    39ca:	44d8      	add	r8, fp
    39cc:	468a      	mov	sl, r1
    39ce:	9500      	str	r5, [sp, #0]
    39d0:	9303      	str	r3, [sp, #12]
    39d2:	e015      	b.n	3a00 <Socket_ReadSocketData+0x84>
    39d4:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    39d6:	2301      	movs	r3, #1
    39d8:	e01c      	b.n	3a14 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    39da:	3301      	adds	r3, #1
    39dc:	2200      	movs	r2, #0
    39de:	2100      	movs	r1, #0
    39e0:	2000      	movs	r0, #0
    39e2:	4c25      	ldr	r4, [pc, #148]	; (3a78 <Socket_ReadSocketData+0xfc>)
    39e4:	47a0      	blx	r4
    39e6:	e03d      	b.n	3a64 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    39e8:	4824      	ldr	r0, [pc, #144]	; (3a7c <Socket_ReadSocketData+0x100>)
    39ea:	4d25      	ldr	r5, [pc, #148]	; (3a80 <Socket_ReadSocketData+0x104>)
    39ec:	47a8      	blx	r5
    39ee:	0021      	movs	r1, r4
    39f0:	4824      	ldr	r0, [pc, #144]	; (3a84 <Socket_ReadSocketData+0x108>)
    39f2:	47a8      	blx	r5
    39f4:	200d      	movs	r0, #13
    39f6:	4b24      	ldr	r3, [pc, #144]	; (3a88 <Socket_ReadSocketData+0x10c>)
    39f8:	4798      	blx	r3
				break;
    39fa:	e033      	b.n	3a64 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    39fc:	2c00      	cmp	r4, #0
    39fe:	d031      	beq.n	3a64 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3a00:	465b      	mov	r3, fp
    3a02:	889b      	ldrh	r3, [r3, #4]
    3a04:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3a06:	b21b      	sxth	r3, r3
    3a08:	2b00      	cmp	r3, #0
    3a0a:	dde3      	ble.n	39d4 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3a0c:	9b03      	ldr	r3, [sp, #12]
    3a0e:	889d      	ldrh	r5, [r3, #4]
    3a10:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3a12:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3a14:	4a17      	ldr	r2, [pc, #92]	; (3a74 <Socket_ReadSocketData+0xf8>)
    3a16:	4651      	mov	r1, sl
    3a18:	5889      	ldr	r1, [r1, r2]
    3a1a:	002a      	movs	r2, r5
    3a1c:	9800      	ldr	r0, [sp, #0]
    3a1e:	4f16      	ldr	r7, [pc, #88]	; (3a78 <Socket_ReadSocketData+0xfc>)
    3a20:	47b8      	blx	r7
    3a22:	2800      	cmp	r0, #0
    3a24:	d1e0      	bne.n	39e8 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3a26:	4b13      	ldr	r3, [pc, #76]	; (3a74 <Socket_ReadSocketData+0xf8>)
    3a28:	4652      	mov	r2, sl
    3a2a:	58d3      	ldr	r3, [r2, r3]
    3a2c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3a2e:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3a30:	88f3      	ldrh	r3, [r6, #6]
    3a32:	1b5b      	subs	r3, r3, r5
    3a34:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3a36:	4b15      	ldr	r3, [pc, #84]	; (3a8c <Socket_ReadSocketData+0x110>)
    3a38:	681b      	ldr	r3, [r3, #0]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d005      	beq.n	3a4a <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3a3e:	4b13      	ldr	r3, [pc, #76]	; (3a8c <Socket_ReadSocketData+0x110>)
    3a40:	681b      	ldr	r3, [r3, #0]
    3a42:	0032      	movs	r2, r6
    3a44:	9902      	ldr	r1, [sp, #8]
    3a46:	9801      	ldr	r0, [sp, #4]
    3a48:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3a4a:	1b64      	subs	r4, r4, r5
    3a4c:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3a4e:	9b00      	ldr	r3, [sp, #0]
    3a50:	469c      	mov	ip, r3
    3a52:	44ac      	add	ip, r5
    3a54:	4663      	mov	r3, ip
    3a56:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3a58:	4643      	mov	r3, r8
    3a5a:	781b      	ldrb	r3, [r3, #0]
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d1cd      	bne.n	39fc <Socket_ReadSocketData+0x80>
    3a60:	2c00      	cmp	r4, #0
    3a62:	d1ba      	bne.n	39da <Socket_ReadSocketData+0x5e>
	}
}
    3a64:	b005      	add	sp, #20
    3a66:	bc3c      	pop	{r2, r3, r4, r5}
    3a68:	4690      	mov	r8, r2
    3a6a:	4699      	mov	r9, r3
    3a6c:	46a2      	mov	sl, r4
    3a6e:	46ab      	mov	fp, r5
    3a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a72:	46c0      	nop			; (mov r8, r8)
    3a74:	200004ec 	.word	0x200004ec
    3a78:	00001d1d 	.word	0x00001d1d
    3a7c:	0000bd08 	.word	0x0000bd08
    3a80:	0000a33d 	.word	0x0000a33d
    3a84:	0000c76c 	.word	0x0000c76c
    3a88:	0000a371 	.word	0x0000a371
    3a8c:	2000059c 	.word	0x2000059c

00003a90 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a92:	46d6      	mov	lr, sl
    3a94:	464f      	mov	r7, r9
    3a96:	4646      	mov	r6, r8
    3a98:	b5c0      	push	{r6, r7, lr}
    3a9a:	b09a      	sub	sp, #104	; 0x68
    3a9c:	000d      	movs	r5, r1
    3a9e:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3aa0:	2841      	cmp	r0, #65	; 0x41
    3aa2:	d039      	beq.n	3b18 <m2m_ip_cb+0x88>
    3aa4:	2854      	cmp	r0, #84	; 0x54
    3aa6:	d037      	beq.n	3b18 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3aa8:	2842      	cmp	r0, #66	; 0x42
    3aaa:	d053      	beq.n	3b54 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3aac:	2843      	cmp	r0, #67	; 0x43
    3aae:	d06a      	beq.n	3b86 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3ab0:	2844      	cmp	r0, #68	; 0x44
    3ab2:	d100      	bne.n	3ab6 <m2m_ip_cb+0x26>
    3ab4:	e0af      	b.n	3c16 <m2m_ip_cb+0x186>
    3ab6:	284b      	cmp	r0, #75	; 0x4b
    3ab8:	d100      	bne.n	3abc <m2m_ip_cb+0x2c>
    3aba:	e0ac      	b.n	3c16 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3abc:	284a      	cmp	r0, #74	; 0x4a
    3abe:	d100      	bne.n	3ac2 <m2m_ip_cb+0x32>
    3ac0:	e0cf      	b.n	3c62 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3ac2:	2846      	cmp	r0, #70	; 0x46
    3ac4:	d100      	bne.n	3ac8 <m2m_ip_cb+0x38>
    3ac6:	e0e5      	b.n	3c94 <m2m_ip_cb+0x204>
    3ac8:	2848      	cmp	r0, #72	; 0x48
    3aca:	d100      	bne.n	3ace <m2m_ip_cb+0x3e>
    3acc:	e10e      	b.n	3cec <m2m_ip_cb+0x25c>
    3ace:	284d      	cmp	r0, #77	; 0x4d
    3ad0:	d100      	bne.n	3ad4 <m2m_ip_cb+0x44>
    3ad2:	e0dc      	b.n	3c8e <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3ad4:	2845      	cmp	r0, #69	; 0x45
    3ad6:	d100      	bne.n	3ada <m2m_ip_cb+0x4a>
    3ad8:	e12c      	b.n	3d34 <m2m_ip_cb+0x2a4>
    3ada:	2847      	cmp	r0, #71	; 0x47
    3adc:	d100      	bne.n	3ae0 <m2m_ip_cb+0x50>
    3ade:	e14d      	b.n	3d7c <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3ae0:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3ae2:	284c      	cmp	r0, #76	; 0x4c
    3ae4:	d100      	bne.n	3ae8 <m2m_ip_cb+0x58>
    3ae6:	e126      	b.n	3d36 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3ae8:	2852      	cmp	r0, #82	; 0x52
    3aea:	d12d      	bne.n	3b48 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3aec:	2301      	movs	r3, #1
    3aee:	2214      	movs	r2, #20
    3af0:	a909      	add	r1, sp, #36	; 0x24
    3af2:	0020      	movs	r0, r4
    3af4:	4ca2      	ldr	r4, [pc, #648]	; (3d80 <m2m_ip_cb+0x2f0>)
    3af6:	47a0      	blx	r4
    3af8:	2800      	cmp	r0, #0
    3afa:	d125      	bne.n	3b48 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3afc:	4ba1      	ldr	r3, [pc, #644]	; (3d84 <m2m_ip_cb+0x2f4>)
    3afe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b00:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3b02:	681b      	ldr	r3, [r3, #0]
    3b04:	2b00      	cmp	r3, #0
    3b06:	d01f      	beq.n	3b48 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3b08:	4b9e      	ldr	r3, [pc, #632]	; (3d84 <m2m_ip_cb+0x2f4>)
    3b0a:	681c      	ldr	r4, [r3, #0]
    3b0c:	ab09      	add	r3, sp, #36	; 0x24
    3b0e:	7c1a      	ldrb	r2, [r3, #16]
    3b10:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3b12:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b14:	47a0      	blx	r4
			}
		}
	}
}
    3b16:	e017      	b.n	3b48 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3b18:	2300      	movs	r3, #0
    3b1a:	2204      	movs	r2, #4
    3b1c:	a909      	add	r1, sp, #36	; 0x24
    3b1e:	0020      	movs	r0, r4
    3b20:	4c97      	ldr	r4, [pc, #604]	; (3d80 <m2m_ip_cb+0x2f0>)
    3b22:	47a0      	blx	r4
    3b24:	2800      	cmp	r0, #0
    3b26:	d10f      	bne.n	3b48 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3b28:	ab09      	add	r3, sp, #36	; 0x24
    3b2a:	785a      	ldrb	r2, [r3, #1]
    3b2c:	ab05      	add	r3, sp, #20
    3b2e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3b30:	4b95      	ldr	r3, [pc, #596]	; (3d88 <m2m_ip_cb+0x2f8>)
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	2b00      	cmp	r3, #0
    3b36:	d007      	beq.n	3b48 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3b38:	4b93      	ldr	r3, [pc, #588]	; (3d88 <m2m_ip_cb+0x2f8>)
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	aa09      	add	r2, sp, #36	; 0x24
    3b3e:	2000      	movs	r0, #0
    3b40:	5610      	ldrsb	r0, [r2, r0]
    3b42:	aa05      	add	r2, sp, #20
    3b44:	2101      	movs	r1, #1
    3b46:	4798      	blx	r3
}
    3b48:	b01a      	add	sp, #104	; 0x68
    3b4a:	bc1c      	pop	{r2, r3, r4}
    3b4c:	4690      	mov	r8, r2
    3b4e:	4699      	mov	r9, r3
    3b50:	46a2      	mov	sl, r4
    3b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3b54:	2300      	movs	r3, #0
    3b56:	2204      	movs	r2, #4
    3b58:	a909      	add	r1, sp, #36	; 0x24
    3b5a:	0020      	movs	r0, r4
    3b5c:	4c88      	ldr	r4, [pc, #544]	; (3d80 <m2m_ip_cb+0x2f0>)
    3b5e:	47a0      	blx	r4
    3b60:	2800      	cmp	r0, #0
    3b62:	d1f1      	bne.n	3b48 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3b64:	ab09      	add	r3, sp, #36	; 0x24
    3b66:	785a      	ldrb	r2, [r3, #1]
    3b68:	ab05      	add	r3, sp, #20
    3b6a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3b6c:	4b86      	ldr	r3, [pc, #536]	; (3d88 <m2m_ip_cb+0x2f8>)
    3b6e:	681b      	ldr	r3, [r3, #0]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d0e9      	beq.n	3b48 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3b74:	4b84      	ldr	r3, [pc, #528]	; (3d88 <m2m_ip_cb+0x2f8>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	aa09      	add	r2, sp, #36	; 0x24
    3b7a:	2000      	movs	r0, #0
    3b7c:	5610      	ldrsb	r0, [r2, r0]
    3b7e:	aa05      	add	r2, sp, #20
    3b80:	2102      	movs	r1, #2
    3b82:	4798      	blx	r3
    3b84:	e7e0      	b.n	3b48 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3b86:	2300      	movs	r3, #0
    3b88:	220c      	movs	r2, #12
    3b8a:	a905      	add	r1, sp, #20
    3b8c:	0020      	movs	r0, r4
    3b8e:	4c7c      	ldr	r4, [pc, #496]	; (3d80 <m2m_ip_cb+0x2f0>)
    3b90:	47a0      	blx	r4
    3b92:	2800      	cmp	r0, #0
    3b94:	d1d8      	bne.n	3b48 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3b96:	ab05      	add	r3, sp, #20
    3b98:	2209      	movs	r2, #9
    3b9a:	569a      	ldrsb	r2, [r3, r2]
    3b9c:	2a00      	cmp	r2, #0
    3b9e:	db24      	blt.n	3bea <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3ba0:	0018      	movs	r0, r3
    3ba2:	2108      	movs	r1, #8
    3ba4:	5659      	ldrsb	r1, [r3, r1]
    3ba6:	4b79      	ldr	r3, [pc, #484]	; (3d8c <m2m_ip_cb+0x2fc>)
    3ba8:	0109      	lsls	r1, r1, #4
    3baa:	1859      	adds	r1, r3, r1
    3bac:	7ac9      	ldrb	r1, [r1, #11]
    3bae:	b2c9      	uxtb	r1, r1
    3bb0:	0114      	lsls	r4, r2, #4
    3bb2:	191b      	adds	r3, r3, r4
    3bb4:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3bb6:	2101      	movs	r1, #1
    3bb8:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3bba:	8941      	ldrh	r1, [r0, #10]
    3bbc:	3908      	subs	r1, #8
    3bbe:	b289      	uxth	r1, r1
    3bc0:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3bc2:	4973      	ldr	r1, [pc, #460]	; (3d90 <m2m_ip_cb+0x300>)
    3bc4:	880b      	ldrh	r3, [r1, #0]
    3bc6:	3301      	adds	r3, #1
    3bc8:	b29b      	uxth	r3, r3
    3bca:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3bcc:	880b      	ldrh	r3, [r1, #0]
    3bce:	b29b      	uxth	r3, r3
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d103      	bne.n	3bdc <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3bd4:	880b      	ldrh	r3, [r1, #0]
    3bd6:	3301      	adds	r3, #1
    3bd8:	b29b      	uxth	r3, r3
    3bda:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3bdc:	4b6c      	ldr	r3, [pc, #432]	; (3d90 <m2m_ip_cb+0x300>)
    3bde:	8819      	ldrh	r1, [r3, #0]
    3be0:	b289      	uxth	r1, r1
    3be2:	0110      	lsls	r0, r2, #4
    3be4:	4b69      	ldr	r3, [pc, #420]	; (3d8c <m2m_ip_cb+0x2fc>)
    3be6:	181b      	adds	r3, r3, r0
    3be8:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3bea:	ab09      	add	r3, sp, #36	; 0x24
    3bec:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3bee:	2202      	movs	r2, #2
    3bf0:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3bf2:	aa05      	add	r2, sp, #20
    3bf4:	8851      	ldrh	r1, [r2, #2]
    3bf6:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3bf8:	9a06      	ldr	r2, [sp, #24]
    3bfa:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3bfc:	4b62      	ldr	r3, [pc, #392]	; (3d88 <m2m_ip_cb+0x2f8>)
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	2b00      	cmp	r3, #0
    3c02:	d0a1      	beq.n	3b48 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3c04:	4b60      	ldr	r3, [pc, #384]	; (3d88 <m2m_ip_cb+0x2f8>)
    3c06:	681b      	ldr	r3, [r3, #0]
    3c08:	aa05      	add	r2, sp, #20
    3c0a:	2008      	movs	r0, #8
    3c0c:	5610      	ldrsb	r0, [r2, r0]
    3c0e:	aa09      	add	r2, sp, #36	; 0x24
    3c10:	2104      	movs	r1, #4
    3c12:	4798      	blx	r3
    3c14:	e798      	b.n	3b48 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3c16:	2300      	movs	r3, #0
    3c18:	2204      	movs	r2, #4
    3c1a:	a909      	add	r1, sp, #36	; 0x24
    3c1c:	0020      	movs	r0, r4
    3c1e:	4c58      	ldr	r4, [pc, #352]	; (3d80 <m2m_ip_cb+0x2f0>)
    3c20:	47a0      	blx	r4
    3c22:	2800      	cmp	r0, #0
    3c24:	d000      	beq.n	3c28 <m2m_ip_cb+0x198>
    3c26:	e78f      	b.n	3b48 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3c28:	ab09      	add	r3, sp, #36	; 0x24
    3c2a:	2000      	movs	r0, #0
    3c2c:	5618      	ldrsb	r0, [r3, r0]
    3c2e:	aa05      	add	r2, sp, #20
    3c30:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3c32:	785b      	ldrb	r3, [r3, #1]
    3c34:	b25b      	sxtb	r3, r3
    3c36:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d107      	bne.n	3c4c <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3c3c:	ab09      	add	r3, sp, #36	; 0x24
    3c3e:	885b      	ldrh	r3, [r3, #2]
    3c40:	3b08      	subs	r3, #8
    3c42:	b29b      	uxth	r3, r3
    3c44:	0101      	lsls	r1, r0, #4
    3c46:	4a51      	ldr	r2, [pc, #324]	; (3d8c <m2m_ip_cb+0x2fc>)
    3c48:	1852      	adds	r2, r2, r1
    3c4a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3c4c:	4b4e      	ldr	r3, [pc, #312]	; (3d88 <m2m_ip_cb+0x2f8>)
    3c4e:	681b      	ldr	r3, [r3, #0]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d100      	bne.n	3c56 <m2m_ip_cb+0x1c6>
    3c54:	e778      	b.n	3b48 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3c56:	4b4c      	ldr	r3, [pc, #304]	; (3d88 <m2m_ip_cb+0x2f8>)
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	aa05      	add	r2, sp, #20
    3c5c:	2105      	movs	r1, #5
    3c5e:	4798      	blx	r3
	{
    3c60:	e772      	b.n	3b48 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3c62:	2300      	movs	r3, #0
    3c64:	2244      	movs	r2, #68	; 0x44
    3c66:	a909      	add	r1, sp, #36	; 0x24
    3c68:	0020      	movs	r0, r4
    3c6a:	4c45      	ldr	r4, [pc, #276]	; (3d80 <m2m_ip_cb+0x2f0>)
    3c6c:	47a0      	blx	r4
    3c6e:	2800      	cmp	r0, #0
    3c70:	d000      	beq.n	3c74 <m2m_ip_cb+0x1e4>
    3c72:	e769      	b.n	3b48 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3c74:	4b47      	ldr	r3, [pc, #284]	; (3d94 <m2m_ip_cb+0x304>)
    3c76:	681b      	ldr	r3, [r3, #0]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d100      	bne.n	3c7e <m2m_ip_cb+0x1ee>
    3c7c:	e764      	b.n	3b48 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3c7e:	4b45      	ldr	r3, [pc, #276]	; (3d94 <m2m_ip_cb+0x304>)
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3c84:	9203      	str	r2, [sp, #12]
    3c86:	0011      	movs	r1, r2
    3c88:	a809      	add	r0, sp, #36	; 0x24
    3c8a:	4798      	blx	r3
    3c8c:	e75c      	b.n	3b48 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3c8e:	2306      	movs	r3, #6
    3c90:	469a      	mov	sl, r3
    3c92:	e001      	b.n	3c98 <m2m_ip_cb+0x208>
    3c94:	2306      	movs	r3, #6
    3c96:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3c98:	2300      	movs	r3, #0
    3c9a:	2210      	movs	r2, #16
    3c9c:	a905      	add	r1, sp, #20
    3c9e:	0020      	movs	r0, r4
    3ca0:	4f37      	ldr	r7, [pc, #220]	; (3d80 <m2m_ip_cb+0x2f0>)
    3ca2:	47b8      	blx	r7
    3ca4:	2800      	cmp	r0, #0
    3ca6:	d000      	beq.n	3caa <m2m_ip_cb+0x21a>
    3ca8:	e74e      	b.n	3b48 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3caa:	aa05      	add	r2, sp, #20
    3cac:	200c      	movs	r0, #12
    3cae:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3cb0:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3cb2:	0107      	lsls	r7, r0, #4
    3cb4:	4935      	ldr	r1, [pc, #212]	; (3d8c <m2m_ip_cb+0x2fc>)
    3cb6:	19c9      	adds	r1, r1, r7
    3cb8:	2700      	movs	r7, #0
    3cba:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3cbc:	2608      	movs	r6, #8
    3cbe:	5f97      	ldrsh	r7, [r2, r6]
    3cc0:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3cc2:	8957      	ldrh	r7, [r2, #10]
    3cc4:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3cc6:	af09      	add	r7, sp, #36	; 0x24
    3cc8:	8856      	ldrh	r6, [r2, #2]
    3cca:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3ccc:	9a06      	ldr	r2, [sp, #24]
    3cce:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3cd0:	88ca      	ldrh	r2, [r1, #6]
    3cd2:	b292      	uxth	r2, r2
    3cd4:	4293      	cmp	r3, r2
    3cd6:	d00c      	beq.n	3cf2 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3cd8:	2d10      	cmp	r5, #16
    3cda:	d800      	bhi.n	3cde <m2m_ip_cb+0x24e>
    3cdc:	e734      	b.n	3b48 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3cde:	2301      	movs	r3, #1
    3ce0:	2200      	movs	r2, #0
    3ce2:	2100      	movs	r1, #0
    3ce4:	2000      	movs	r0, #0
    3ce6:	4c26      	ldr	r4, [pc, #152]	; (3d80 <m2m_ip_cb+0x2f0>)
    3ce8:	47a0      	blx	r4
	{
    3cea:	e72d      	b.n	3b48 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3cec:	2309      	movs	r3, #9
    3cee:	469a      	mov	sl, r3
    3cf0:	e7d2      	b.n	3c98 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3cf2:	4643      	mov	r3, r8
    3cf4:	2b00      	cmp	r3, #0
    3cf6:	dd01      	ble.n	3cfc <m2m_ip_cb+0x26c>
    3cf8:	45a8      	cmp	r8, r5
    3cfa:	db0f      	blt.n	3d1c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3cfc:	ab09      	add	r3, sp, #36	; 0x24
    3cfe:	4642      	mov	r2, r8
    3d00:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3d02:	2300      	movs	r3, #0
    3d04:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3d06:	4b20      	ldr	r3, [pc, #128]	; (3d88 <m2m_ip_cb+0x2f8>)
    3d08:	681b      	ldr	r3, [r3, #0]
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d100      	bne.n	3d10 <m2m_ip_cb+0x280>
    3d0e:	e71b      	b.n	3b48 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3d10:	4b1d      	ldr	r3, [pc, #116]	; (3d88 <m2m_ip_cb+0x2f8>)
    3d12:	681b      	ldr	r3, [r3, #0]
    3d14:	aa09      	add	r2, sp, #36	; 0x24
    3d16:	4651      	mov	r1, sl
    3d18:	4798      	blx	r3
    3d1a:	e715      	b.n	3b48 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3d1c:	0023      	movs	r3, r4
    3d1e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3d20:	4642      	mov	r2, r8
    3d22:	4669      	mov	r1, sp
    3d24:	818a      	strh	r2, [r1, #12]
    3d26:	898a      	ldrh	r2, [r1, #12]
    3d28:	9200      	str	r2, [sp, #0]
    3d2a:	4652      	mov	r2, sl
    3d2c:	0039      	movs	r1, r7
    3d2e:	4c1a      	ldr	r4, [pc, #104]	; (3d98 <m2m_ip_cb+0x308>)
    3d30:	47a0      	blx	r4
    3d32:	e709      	b.n	3b48 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3d34:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3d36:	2300      	movs	r3, #0
    3d38:	2208      	movs	r2, #8
    3d3a:	a909      	add	r1, sp, #36	; 0x24
    3d3c:	0020      	movs	r0, r4
    3d3e:	4c10      	ldr	r4, [pc, #64]	; (3d80 <m2m_ip_cb+0x2f0>)
    3d40:	47a0      	blx	r4
    3d42:	2800      	cmp	r0, #0
    3d44:	d000      	beq.n	3d48 <m2m_ip_cb+0x2b8>
    3d46:	e6ff      	b.n	3b48 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3d48:	ab09      	add	r3, sp, #36	; 0x24
    3d4a:	2000      	movs	r0, #0
    3d4c:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3d4e:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3d50:	8859      	ldrh	r1, [r3, #2]
    3d52:	ab05      	add	r3, sp, #20
    3d54:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3d56:	0101      	lsls	r1, r0, #4
    3d58:	4b0c      	ldr	r3, [pc, #48]	; (3d8c <m2m_ip_cb+0x2fc>)
    3d5a:	185b      	adds	r3, r3, r1
    3d5c:	88db      	ldrh	r3, [r3, #6]
    3d5e:	b29b      	uxth	r3, r3
    3d60:	429a      	cmp	r2, r3
    3d62:	d000      	beq.n	3d66 <m2m_ip_cb+0x2d6>
    3d64:	e6f0      	b.n	3b48 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3d66:	4b08      	ldr	r3, [pc, #32]	; (3d88 <m2m_ip_cb+0x2f8>)
    3d68:	681b      	ldr	r3, [r3, #0]
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d100      	bne.n	3d70 <m2m_ip_cb+0x2e0>
    3d6e:	e6eb      	b.n	3b48 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3d70:	4b05      	ldr	r3, [pc, #20]	; (3d88 <m2m_ip_cb+0x2f8>)
    3d72:	681b      	ldr	r3, [r3, #0]
    3d74:	aa05      	add	r2, sp, #20
    3d76:	0029      	movs	r1, r5
    3d78:	4798      	blx	r3
	{
    3d7a:	e6e5      	b.n	3b48 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3d7c:	2508      	movs	r5, #8
    3d7e:	e7da      	b.n	3d36 <m2m_ip_cb+0x2a6>
    3d80:	00001d1d 	.word	0x00001d1d
    3d84:	200005a0 	.word	0x200005a0
    3d88:	2000059c 	.word	0x2000059c
    3d8c:	200004ec 	.word	0x200004ec
    3d90:	2000038a 	.word	0x2000038a
    3d94:	200005a4 	.word	0x200005a4
    3d98:	0000397d 	.word	0x0000397d

00003d9c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3d9c:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3d9e:	4b0a      	ldr	r3, [pc, #40]	; (3dc8 <socketInit+0x2c>)
    3da0:	781b      	ldrb	r3, [r3, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d000      	beq.n	3da8 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3da6:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3da8:	22b0      	movs	r2, #176	; 0xb0
    3daa:	2100      	movs	r1, #0
    3dac:	4807      	ldr	r0, [pc, #28]	; (3dcc <socketInit+0x30>)
    3dae:	4b08      	ldr	r3, [pc, #32]	; (3dd0 <socketInit+0x34>)
    3db0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3db2:	4908      	ldr	r1, [pc, #32]	; (3dd4 <socketInit+0x38>)
    3db4:	2002      	movs	r0, #2
    3db6:	4b08      	ldr	r3, [pc, #32]	; (3dd8 <socketInit+0x3c>)
    3db8:	4798      	blx	r3
		gbSocketInit	= 1;
    3dba:	2201      	movs	r2, #1
    3dbc:	4b02      	ldr	r3, [pc, #8]	; (3dc8 <socketInit+0x2c>)
    3dbe:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3dc0:	2200      	movs	r2, #0
    3dc2:	4b06      	ldr	r3, [pc, #24]	; (3ddc <socketInit+0x40>)
    3dc4:	801a      	strh	r2, [r3, #0]
}
    3dc6:	e7ee      	b.n	3da6 <socketInit+0xa>
    3dc8:	20000389 	.word	0x20000389
    3dcc:	200004ec 	.word	0x200004ec
    3dd0:	000015fd 	.word	0x000015fd
    3dd4:	00003a91 	.word	0x00003a91
    3dd8:	00001e09 	.word	0x00001e09
    3ddc:	2000038a 	.word	0x2000038a

00003de0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3de0:	4b02      	ldr	r3, [pc, #8]	; (3dec <registerSocketCallback+0xc>)
    3de2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3de4:	4b02      	ldr	r3, [pc, #8]	; (3df0 <registerSocketCallback+0x10>)
    3de6:	6019      	str	r1, [r3, #0]
}
    3de8:	4770      	bx	lr
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	2000059c 	.word	0x2000059c
    3df0:	200005a4 	.word	0x200005a4

00003df4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3df6:	46d6      	mov	lr, sl
    3df8:	4647      	mov	r7, r8
    3dfa:	b580      	push	{r7, lr}
    3dfc:	b089      	sub	sp, #36	; 0x24
    3dfe:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3e00:	2802      	cmp	r0, #2
    3e02:	d000      	beq.n	3e06 <socket+0x12>
    3e04:	e09c      	b.n	3f40 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3e06:	2901      	cmp	r1, #1
    3e08:	d00a      	beq.n	3e20 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3e0a:	2902      	cmp	r1, #2
    3e0c:	d100      	bne.n	3e10 <socket+0x1c>
    3e0e:	e070      	b.n	3ef2 <socket+0xfe>
	SOCKET					sock = -1;
    3e10:	2501      	movs	r5, #1
    3e12:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3e14:	0028      	movs	r0, r5
    3e16:	b009      	add	sp, #36	; 0x24
    3e18:	bc0c      	pop	{r2, r3}
    3e1a:	4690      	mov	r8, r2
    3e1c:	469a      	mov	sl, r3
    3e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3e20:	4c49      	ldr	r4, [pc, #292]	; (3f48 <socket+0x154>)
    3e22:	7827      	ldrb	r7, [r4, #0]
    3e24:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3e26:	7826      	ldrb	r6, [r4, #0]
    3e28:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3e2a:	7820      	ldrb	r0, [r4, #0]
    3e2c:	3001      	adds	r0, #1
    3e2e:	3106      	adds	r1, #6
    3e30:	4b46      	ldr	r3, [pc, #280]	; (3f4c <socket+0x158>)
    3e32:	4798      	blx	r3
    3e34:	b2c9      	uxtb	r1, r1
    3e36:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3e38:	0132      	lsls	r2, r6, #4
    3e3a:	4b45      	ldr	r3, [pc, #276]	; (3f50 <socket+0x15c>)
    3e3c:	189b      	adds	r3, r3, r2
    3e3e:	7a9b      	ldrb	r3, [r3, #10]
    3e40:	2506      	movs	r5, #6
    3e42:	2b00      	cmp	r3, #0
    3e44:	d018      	beq.n	3e78 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3e46:	4e40      	ldr	r6, [pc, #256]	; (3f48 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3e48:	4b40      	ldr	r3, [pc, #256]	; (3f4c <socket+0x158>)
    3e4a:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3e4c:	4b40      	ldr	r3, [pc, #256]	; (3f50 <socket+0x15c>)
    3e4e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3e50:	7837      	ldrb	r7, [r6, #0]
    3e52:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3e54:	7834      	ldrb	r4, [r6, #0]
    3e56:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3e58:	7830      	ldrb	r0, [r6, #0]
    3e5a:	3001      	adds	r0, #1
    3e5c:	2107      	movs	r1, #7
    3e5e:	47d0      	blx	sl
    3e60:	b2c9      	uxtb	r1, r1
    3e62:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3e64:	0123      	lsls	r3, r4, #4
    3e66:	4443      	add	r3, r8
    3e68:	7a9b      	ldrb	r3, [r3, #10]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d007      	beq.n	3e7e <socket+0x8a>
    3e6e:	3d01      	subs	r5, #1
    3e70:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3e72:	2d00      	cmp	r5, #0
    3e74:	d1ec      	bne.n	3e50 <socket+0x5c>
    3e76:	e7cb      	b.n	3e10 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3e78:	4b35      	ldr	r3, [pc, #212]	; (3f50 <socket+0x15c>)
    3e7a:	18d4      	adds	r4, r2, r3
    3e7c:	e002      	b.n	3e84 <socket+0x90>
    3e7e:	0124      	lsls	r4, r4, #4
    3e80:	4b33      	ldr	r3, [pc, #204]	; (3f50 <socket+0x15c>)
    3e82:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3e84:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3e86:	2d00      	cmp	r5, #0
    3e88:	dbc4      	blt.n	3e14 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3e8a:	2210      	movs	r2, #16
    3e8c:	2100      	movs	r1, #0
    3e8e:	0020      	movs	r0, r4
    3e90:	4b30      	ldr	r3, [pc, #192]	; (3f54 <socket+0x160>)
    3e92:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3e94:	2301      	movs	r3, #1
    3e96:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3e98:	4a2f      	ldr	r2, [pc, #188]	; (3f58 <socket+0x164>)
    3e9a:	8813      	ldrh	r3, [r2, #0]
    3e9c:	3301      	adds	r3, #1
    3e9e:	b29b      	uxth	r3, r3
    3ea0:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3ea2:	8813      	ldrh	r3, [r2, #0]
    3ea4:	b29b      	uxth	r3, r3
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d103      	bne.n	3eb2 <socket+0xbe>
				++gu16SessionID;
    3eaa:	8813      	ldrh	r3, [r2, #0]
    3eac:	3301      	adds	r3, #1
    3eae:	b29b      	uxth	r3, r3
    3eb0:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3eb2:	4e29      	ldr	r6, [pc, #164]	; (3f58 <socket+0x164>)
    3eb4:	8833      	ldrh	r3, [r6, #0]
    3eb6:	b29b      	uxth	r3, r3
    3eb8:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3eba:	4828      	ldr	r0, [pc, #160]	; (3f5c <socket+0x168>)
    3ebc:	4f28      	ldr	r7, [pc, #160]	; (3f60 <socket+0x16c>)
    3ebe:	47b8      	blx	r7
    3ec0:	8832      	ldrh	r2, [r6, #0]
    3ec2:	b292      	uxth	r2, r2
    3ec4:	0029      	movs	r1, r5
    3ec6:	4827      	ldr	r0, [pc, #156]	; (3f64 <socket+0x170>)
    3ec8:	47b8      	blx	r7
    3eca:	200d      	movs	r0, #13
    3ecc:	4b26      	ldr	r3, [pc, #152]	; (3f68 <socket+0x174>)
    3ece:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3ed0:	9b05      	ldr	r3, [sp, #20]
    3ed2:	07db      	lsls	r3, r3, #31
    3ed4:	d59e      	bpl.n	3e14 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3ed6:	aa07      	add	r2, sp, #28
    3ed8:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3eda:	2321      	movs	r3, #33	; 0x21
    3edc:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3ede:	2300      	movs	r3, #0
    3ee0:	9302      	str	r3, [sp, #8]
    3ee2:	9301      	str	r3, [sp, #4]
    3ee4:	9300      	str	r3, [sp, #0]
    3ee6:	3304      	adds	r3, #4
    3ee8:	2150      	movs	r1, #80	; 0x50
    3eea:	2002      	movs	r0, #2
    3eec:	4c1f      	ldr	r4, [pc, #124]	; (3f6c <socket+0x178>)
    3eee:	47a0      	blx	r4
    3ef0:	e790      	b.n	3e14 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3ef2:	4b1f      	ldr	r3, [pc, #124]	; (3f70 <socket+0x17c>)
    3ef4:	781d      	ldrb	r5, [r3, #0]
    3ef6:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3ef8:	781c      	ldrb	r4, [r3, #0]
    3efa:	0124      	lsls	r4, r4, #4
    3efc:	4a1d      	ldr	r2, [pc, #116]	; (3f74 <socket+0x180>)
    3efe:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3f00:	7819      	ldrb	r1, [r3, #0]
    3f02:	3101      	adds	r1, #1
    3f04:	2203      	movs	r2, #3
    3f06:	400a      	ands	r2, r1
    3f08:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3f0a:	7aa3      	ldrb	r3, [r4, #10]
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d014      	beq.n	3f3a <socket+0x146>
    3f10:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3f12:	4917      	ldr	r1, [pc, #92]	; (3f70 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3f14:	4f17      	ldr	r7, [pc, #92]	; (3f74 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3f16:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3f18:	780d      	ldrb	r5, [r1, #0]
    3f1a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3f1c:	780c      	ldrb	r4, [r1, #0]
    3f1e:	0124      	lsls	r4, r4, #4
    3f20:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3f22:	780b      	ldrb	r3, [r1, #0]
    3f24:	3301      	adds	r3, #1
    3f26:	4003      	ands	r3, r0
    3f28:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3f2a:	7aa3      	ldrb	r3, [r4, #10]
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d004      	beq.n	3f3a <socket+0x146>
    3f30:	3a01      	subs	r2, #1
    3f32:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3f34:	2a00      	cmp	r2, #0
    3f36:	d1ef      	bne.n	3f18 <socket+0x124>
    3f38:	e76a      	b.n	3e10 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3f3a:	3507      	adds	r5, #7
    3f3c:	b26d      	sxtb	r5, r5
					break;
    3f3e:	e7a2      	b.n	3e86 <socket+0x92>
	SOCKET					sock = -1;
    3f40:	2501      	movs	r5, #1
    3f42:	426d      	negs	r5, r5
    3f44:	e766      	b.n	3e14 <socket+0x20>
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	2000038c 	.word	0x2000038c
    3f4c:	0000a0c9 	.word	0x0000a0c9
    3f50:	200004ec 	.word	0x200004ec
    3f54:	000015fd 	.word	0x000015fd
    3f58:	2000038a 	.word	0x2000038a
    3f5c:	0000bd08 	.word	0x0000bd08
    3f60:	0000a33d 	.word	0x0000a33d
    3f64:	0000c798 	.word	0x0000c798
    3f68:	0000a371 	.word	0x0000a371
    3f6c:	00001711 	.word	0x00001711
    3f70:	2000038d 	.word	0x2000038d
    3f74:	2000055c 	.word	0x2000055c

00003f78 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3f78:	b570      	push	{r4, r5, r6, lr}
    3f7a:	b088      	sub	sp, #32
    3f7c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3f7e:	db30      	blt.n	3fe2 <connect+0x6a>
    3f80:	2900      	cmp	r1, #0
    3f82:	d031      	beq.n	3fe8 <connect+0x70>
    3f84:	0100      	lsls	r0, r0, #4
    3f86:	4b1d      	ldr	r3, [pc, #116]	; (3ffc <connect+0x84>)
    3f88:	181b      	adds	r3, r3, r0
    3f8a:	7a9b      	ldrb	r3, [r3, #10]
    3f8c:	2b01      	cmp	r3, #1
    3f8e:	d12e      	bne.n	3fee <connect+0x76>
    3f90:	2a00      	cmp	r2, #0
    3f92:	d02f      	beq.n	3ff4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3f94:	4b19      	ldr	r3, [pc, #100]	; (3ffc <connect+0x84>)
    3f96:	181b      	adds	r3, r3, r0
    3f98:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3f9a:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3f9c:	07db      	lsls	r3, r3, #31
    3f9e:	d505      	bpl.n	3fac <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3fa0:	4b16      	ldr	r3, [pc, #88]	; (3ffc <connect+0x84>)
    3fa2:	181b      	adds	r3, r3, r0
    3fa4:	7ada      	ldrb	r2, [r3, #11]
    3fa6:	ab05      	add	r3, sp, #20
    3fa8:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3faa:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3fac:	ad05      	add	r5, sp, #20
    3fae:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3fb0:	2208      	movs	r2, #8
    3fb2:	0028      	movs	r0, r5
    3fb4:	4b12      	ldr	r3, [pc, #72]	; (4000 <connect+0x88>)
    3fb6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3fb8:	0124      	lsls	r4, r4, #4
    3fba:	4b10      	ldr	r3, [pc, #64]	; (3ffc <connect+0x84>)
    3fbc:	191c      	adds	r4, r3, r4
    3fbe:	88e3      	ldrh	r3, [r4, #6]
    3fc0:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3fc2:	2300      	movs	r3, #0
    3fc4:	9302      	str	r3, [sp, #8]
    3fc6:	9301      	str	r3, [sp, #4]
    3fc8:	9300      	str	r3, [sp, #0]
    3fca:	330c      	adds	r3, #12
    3fcc:	002a      	movs	r2, r5
    3fce:	0031      	movs	r1, r6
    3fd0:	2002      	movs	r0, #2
    3fd2:	4c0c      	ldr	r4, [pc, #48]	; (4004 <connect+0x8c>)
    3fd4:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d001      	beq.n	3fde <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3fda:	2009      	movs	r0, #9
    3fdc:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3fde:	b008      	add	sp, #32
    3fe0:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3fe2:	2006      	movs	r0, #6
    3fe4:	4240      	negs	r0, r0
    3fe6:	e7fa      	b.n	3fde <connect+0x66>
    3fe8:	2006      	movs	r0, #6
    3fea:	4240      	negs	r0, r0
    3fec:	e7f7      	b.n	3fde <connect+0x66>
    3fee:	2006      	movs	r0, #6
    3ff0:	4240      	negs	r0, r0
    3ff2:	e7f4      	b.n	3fde <connect+0x66>
    3ff4:	2006      	movs	r0, #6
    3ff6:	4240      	negs	r0, r0
    3ff8:	e7f1      	b.n	3fde <connect+0x66>
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	200004ec 	.word	0x200004ec
    4000:	000015e9 	.word	0x000015e9
    4004:	00001711 	.word	0x00001711

00004008 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    4008:	b530      	push	{r4, r5, lr}
    400a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    400c:	2800      	cmp	r0, #0
    400e:	db36      	blt.n	407e <send+0x76>
    4010:	2900      	cmp	r1, #0
    4012:	d037      	beq.n	4084 <send+0x7c>
    4014:	23af      	movs	r3, #175	; 0xaf
    4016:	00db      	lsls	r3, r3, #3
    4018:	429a      	cmp	r2, r3
    401a:	d836      	bhi.n	408a <send+0x82>
    401c:	0104      	lsls	r4, r0, #4
    401e:	4b1e      	ldr	r3, [pc, #120]	; (4098 <send+0x90>)
    4020:	191b      	adds	r3, r3, r4
    4022:	7a9b      	ldrb	r3, [r3, #10]
    4024:	2b01      	cmp	r3, #1
    4026:	d133      	bne.n	4090 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    4028:	ab04      	add	r3, sp, #16
    402a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    402c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    402e:	0025      	movs	r5, r4
    4030:	4c19      	ldr	r4, [pc, #100]	; (4098 <send+0x90>)
    4032:	1964      	adds	r4, r4, r5
    4034:	88e4      	ldrh	r4, [r4, #6]
    4036:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    4038:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    403a:	2806      	cmp	r0, #6
    403c:	dd00      	ble.n	4040 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    403e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4040:	0104      	lsls	r4, r0, #4
    4042:	4b15      	ldr	r3, [pc, #84]	; (4098 <send+0x90>)
    4044:	191b      	adds	r3, r3, r4
    4046:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    4048:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    404a:	07e4      	lsls	r4, r4, #31
    404c:	d505      	bpl.n	405a <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    404e:	0100      	lsls	r0, r0, #4
    4050:	4b11      	ldr	r3, [pc, #68]	; (4098 <send+0x90>)
    4052:	1818      	adds	r0, r3, r0
    4054:	8905      	ldrh	r5, [r0, #8]
    4056:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    4058:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    405a:	2080      	movs	r0, #128	; 0x80
    405c:	4318      	orrs	r0, r3
    405e:	9502      	str	r5, [sp, #8]
    4060:	9201      	str	r2, [sp, #4]
    4062:	9100      	str	r1, [sp, #0]
    4064:	2310      	movs	r3, #16
    4066:	aa04      	add	r2, sp, #16
    4068:	0001      	movs	r1, r0
    406a:	2002      	movs	r0, #2
    406c:	4c0b      	ldr	r4, [pc, #44]	; (409c <send+0x94>)
    406e:	47a0      	blx	r4
    4070:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    4072:	2800      	cmp	r0, #0
    4074:	d000      	beq.n	4078 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    4076:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    4078:	0018      	movs	r0, r3
    407a:	b009      	add	sp, #36	; 0x24
    407c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    407e:	2306      	movs	r3, #6
    4080:	425b      	negs	r3, r3
    4082:	e7f9      	b.n	4078 <send+0x70>
    4084:	2306      	movs	r3, #6
    4086:	425b      	negs	r3, r3
    4088:	e7f6      	b.n	4078 <send+0x70>
    408a:	2306      	movs	r3, #6
    408c:	425b      	negs	r3, r3
    408e:	e7f3      	b.n	4078 <send+0x70>
    4090:	2306      	movs	r3, #6
    4092:	425b      	negs	r3, r3
    4094:	e7f0      	b.n	4078 <send+0x70>
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	200004ec 	.word	0x200004ec
    409c:	00001711 	.word	0x00001711

000040a0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    40a0:	b530      	push	{r4, r5, lr}
    40a2:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    40a4:	2800      	cmp	r0, #0
    40a6:	db34      	blt.n	4112 <recv+0x72>
    40a8:	2900      	cmp	r1, #0
    40aa:	d035      	beq.n	4118 <recv+0x78>
    40ac:	2a00      	cmp	r2, #0
    40ae:	d036      	beq.n	411e <recv+0x7e>
    40b0:	0105      	lsls	r5, r0, #4
    40b2:	4c1e      	ldr	r4, [pc, #120]	; (412c <recv+0x8c>)
    40b4:	1964      	adds	r4, r4, r5
    40b6:	7aa4      	ldrb	r4, [r4, #10]
    40b8:	2c01      	cmp	r4, #1
    40ba:	d133      	bne.n	4124 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    40bc:	4c1b      	ldr	r4, [pc, #108]	; (412c <recv+0x8c>)
    40be:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    40c0:	1964      	adds	r4, r4, r5
    40c2:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    40c4:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    40c6:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    40c8:	2900      	cmp	r1, #0
    40ca:	d11d      	bne.n	4108 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    40cc:	2101      	movs	r1, #1
    40ce:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40d0:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    40d2:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40d4:	07d2      	lsls	r2, r2, #31
    40d6:	d500      	bpl.n	40da <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    40d8:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    40da:	2b00      	cmp	r3, #0
    40dc:	d117      	bne.n	410e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    40de:	3b01      	subs	r3, #1
    40e0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    40e2:	aa04      	add	r2, sp, #16
    40e4:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    40e6:	0100      	lsls	r0, r0, #4
    40e8:	4b10      	ldr	r3, [pc, #64]	; (412c <recv+0x8c>)
    40ea:	1818      	adds	r0, r3, r0
    40ec:	88c3      	ldrh	r3, [r0, #6]
    40ee:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    40f0:	2300      	movs	r3, #0
    40f2:	9302      	str	r3, [sp, #8]
    40f4:	9301      	str	r3, [sp, #4]
    40f6:	9300      	str	r3, [sp, #0]
    40f8:	3308      	adds	r3, #8
    40fa:	2002      	movs	r0, #2
    40fc:	4c0c      	ldr	r4, [pc, #48]	; (4130 <recv+0x90>)
    40fe:	47a0      	blx	r4
    4100:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4102:	2800      	cmp	r0, #0
    4104:	d000      	beq.n	4108 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    4106:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    4108:	0010      	movs	r0, r2
    410a:	b007      	add	sp, #28
    410c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    410e:	9304      	str	r3, [sp, #16]
    4110:	e7e7      	b.n	40e2 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4112:	2206      	movs	r2, #6
    4114:	4252      	negs	r2, r2
    4116:	e7f7      	b.n	4108 <recv+0x68>
    4118:	2206      	movs	r2, #6
    411a:	4252      	negs	r2, r2
    411c:	e7f4      	b.n	4108 <recv+0x68>
    411e:	2206      	movs	r2, #6
    4120:	4252      	negs	r2, r2
    4122:	e7f1      	b.n	4108 <recv+0x68>
    4124:	2206      	movs	r2, #6
    4126:	4252      	negs	r2, r2
    4128:	e7ee      	b.n	4108 <recv+0x68>
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	200004ec 	.word	0x200004ec
    4130:	00001711 	.word	0x00001711

00004134 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4134:	b530      	push	{r4, r5, lr}
    4136:	b087      	sub	sp, #28
    4138:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    413a:	481e      	ldr	r0, [pc, #120]	; (41b4 <close+0x80>)
    413c:	4d1e      	ldr	r5, [pc, #120]	; (41b8 <close+0x84>)
    413e:	47a8      	blx	r5
    4140:	0021      	movs	r1, r4
    4142:	481e      	ldr	r0, [pc, #120]	; (41bc <close+0x88>)
    4144:	47a8      	blx	r5
    4146:	200d      	movs	r0, #13
    4148:	4b1d      	ldr	r3, [pc, #116]	; (41c0 <close+0x8c>)
    414a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    414c:	2c00      	cmp	r4, #0
    414e:	db2a      	blt.n	41a6 <close+0x72>
    4150:	0122      	lsls	r2, r4, #4
    4152:	4b1c      	ldr	r3, [pc, #112]	; (41c4 <close+0x90>)
    4154:	189b      	adds	r3, r3, r2
    4156:	7a9b      	ldrb	r3, [r3, #10]
    4158:	2b01      	cmp	r3, #1
    415a:	d127      	bne.n	41ac <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    415c:	a905      	add	r1, sp, #20
    415e:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    4160:	4b18      	ldr	r3, [pc, #96]	; (41c4 <close+0x90>)
    4162:	189b      	adds	r3, r3, r2
    4164:	88da      	ldrh	r2, [r3, #6]
    4166:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    4168:	2200      	movs	r2, #0
    416a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    416c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    416e:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    4170:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4172:	07db      	lsls	r3, r3, #31
    4174:	d500      	bpl.n	4178 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    4176:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    4178:	2300      	movs	r3, #0
    417a:	9302      	str	r3, [sp, #8]
    417c:	9301      	str	r3, [sp, #4]
    417e:	9300      	str	r3, [sp, #0]
    4180:	3304      	adds	r3, #4
    4182:	aa05      	add	r2, sp, #20
    4184:	2002      	movs	r0, #2
    4186:	4d10      	ldr	r5, [pc, #64]	; (41c8 <close+0x94>)
    4188:	47a8      	blx	r5
    418a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    418c:	d001      	beq.n	4192 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    418e:	2509      	movs	r5, #9
    4190:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    4192:	0124      	lsls	r4, r4, #4
    4194:	480b      	ldr	r0, [pc, #44]	; (41c4 <close+0x90>)
    4196:	1820      	adds	r0, r4, r0
    4198:	2210      	movs	r2, #16
    419a:	2100      	movs	r1, #0
    419c:	4b0b      	ldr	r3, [pc, #44]	; (41cc <close+0x98>)
    419e:	4798      	blx	r3
	}
	return s8Ret;
}
    41a0:	0028      	movs	r0, r5
    41a2:	b007      	add	sp, #28
    41a4:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    41a6:	2506      	movs	r5, #6
    41a8:	426d      	negs	r5, r5
    41aa:	e7f9      	b.n	41a0 <close+0x6c>
    41ac:	2506      	movs	r5, #6
    41ae:	426d      	negs	r5, r5
    41b0:	e7f6      	b.n	41a0 <close+0x6c>
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	0000bd08 	.word	0x0000bd08
    41b8:	0000a33d 	.word	0x0000a33d
    41bc:	0000c780 	.word	0x0000c780
    41c0:	0000a371 	.word	0x0000a371
    41c4:	200004ec 	.word	0x200004ec
    41c8:	00001711 	.word	0x00001711
    41cc:	000015fd 	.word	0x000015fd

000041d0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    41d4:	2300      	movs	r3, #0
    41d6:	9301      	str	r3, [sp, #4]
    41d8:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    41da:	2100      	movs	r1, #0
    41dc:	7802      	ldrb	r2, [r0, #0]
    41de:	1c44      	adds	r4, r0, #1
    41e0:	3005      	adds	r0, #5
    41e2:	000b      	movs	r3, r1
    41e4:	e009      	b.n	41fa <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    41e6:	009d      	lsls	r5, r3, #2
    41e8:	195b      	adds	r3, r3, r5
    41ea:	005b      	lsls	r3, r3, #1
    41ec:	189b      	adds	r3, r3, r2
    41ee:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    41f0:	0022      	movs	r2, r4
    41f2:	3401      	adds	r4, #1
			if(j > 4)
    41f4:	42a0      	cmp	r0, r4
    41f6:	d00a      	beq.n	420e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    41f8:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    41fa:	2a2e      	cmp	r2, #46	; 0x2e
    41fc:	d00a      	beq.n	4214 <nmi_inet_addr+0x44>
    41fe:	2a00      	cmp	r2, #0
    4200:	d00c      	beq.n	421c <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4202:	3a30      	subs	r2, #48	; 0x30
    4204:	b2d2      	uxtb	r2, r2
    4206:	2a09      	cmp	r2, #9
    4208:	d9ed      	bls.n	41e6 <nmi_inet_addr+0x16>
				return 0;
    420a:	2000      	movs	r0, #0
    420c:	e000      	b.n	4210 <nmi_inet_addr+0x40>
				return 0;
    420e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    4210:	b002      	add	sp, #8
    4212:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    4214:	466a      	mov	r2, sp
    4216:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4218:	0020      	movs	r0, r4
    421a:	e002      	b.n	4222 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    421c:	466a      	mov	r2, sp
    421e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    4220:	0020      	movs	r0, r4
    4222:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    4224:	2e04      	cmp	r6, #4
    4226:	d1d9      	bne.n	41dc <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    4228:	2204      	movs	r2, #4
    422a:	4669      	mov	r1, sp
    422c:	a801      	add	r0, sp, #4
    422e:	4b02      	ldr	r3, [pc, #8]	; (4238 <nmi_inet_addr+0x68>)
    4230:	4798      	blx	r3
	return u32IP;
    4232:	9801      	ldr	r0, [sp, #4]
    4234:	e7ec      	b.n	4210 <nmi_inet_addr+0x40>
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	000015e9 	.word	0x000015e9

0000423c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    423c:	b510      	push	{r4, lr}
    423e:	b084      	sub	sp, #16
    4240:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    4242:	4b0b      	ldr	r3, [pc, #44]	; (4270 <gethostbyname+0x34>)
    4244:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    4246:	b2c3      	uxtb	r3, r0
    4248:	2b40      	cmp	r3, #64	; 0x40
    424a:	d80d      	bhi.n	4268 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    424c:	23ff      	movs	r3, #255	; 0xff
    424e:	4003      	ands	r3, r0
    4250:	3301      	adds	r3, #1
    4252:	2200      	movs	r2, #0
    4254:	9202      	str	r2, [sp, #8]
    4256:	9201      	str	r2, [sp, #4]
    4258:	9200      	str	r2, [sp, #0]
    425a:	0022      	movs	r2, r4
    425c:	214a      	movs	r1, #74	; 0x4a
    425e:	2002      	movs	r0, #2
    4260:	4c04      	ldr	r4, [pc, #16]	; (4274 <gethostbyname+0x38>)
    4262:	47a0      	blx	r4
	}
	return s8Err;
}
    4264:	b004      	add	sp, #16
    4266:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    4268:	2006      	movs	r0, #6
    426a:	4240      	negs	r0, r0
    426c:	e7fa      	b.n	4264 <gethostbyname+0x28>
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	0000160d 	.word	0x0000160d
    4274:	00001711 	.word	0x00001711

00004278 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    4278:	b570      	push	{r4, r5, r6, lr}
    427a:	b082      	sub	sp, #8
    427c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    427e:	4b2a      	ldr	r3, [pc, #168]	; (4328 <spi_flash_enable+0xb0>)
    4280:	4798      	blx	r3
    4282:	0500      	lsls	r0, r0, #20
    4284:	0d00      	lsrs	r0, r0, #20
    4286:	4b29      	ldr	r3, [pc, #164]	; (432c <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    4288:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    428a:	4298      	cmp	r0, r3
    428c:	d802      	bhi.n	4294 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    428e:	0028      	movs	r0, r5
    4290:	b002      	add	sp, #8
    4292:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    4294:	a901      	add	r1, sp, #4
    4296:	4826      	ldr	r0, [pc, #152]	; (4330 <spi_flash_enable+0xb8>)
    4298:	4b26      	ldr	r3, [pc, #152]	; (4334 <spi_flash_enable+0xbc>)
    429a:	4798      	blx	r3
    429c:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    429e:	d1f6      	bne.n	428e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    42a0:	4b25      	ldr	r3, [pc, #148]	; (4338 <spi_flash_enable+0xc0>)
    42a2:	9a01      	ldr	r2, [sp, #4]
    42a4:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    42a6:	4925      	ldr	r1, [pc, #148]	; (433c <spi_flash_enable+0xc4>)
    42a8:	4319      	orrs	r1, r3
    42aa:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    42ac:	4820      	ldr	r0, [pc, #128]	; (4330 <spi_flash_enable+0xb8>)
    42ae:	4b24      	ldr	r3, [pc, #144]	; (4340 <spi_flash_enable+0xc8>)
    42b0:	4798      	blx	r3
		if(enable) {
    42b2:	2c00      	cmp	r4, #0
    42b4:	d020      	beq.n	42f8 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    42b6:	2100      	movs	r1, #0
    42b8:	4822      	ldr	r0, [pc, #136]	; (4344 <spi_flash_enable+0xcc>)
    42ba:	4c21      	ldr	r4, [pc, #132]	; (4340 <spi_flash_enable+0xc8>)
    42bc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    42be:	21ab      	movs	r1, #171	; 0xab
    42c0:	4821      	ldr	r0, [pc, #132]	; (4348 <spi_flash_enable+0xd0>)
    42c2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    42c4:	2101      	movs	r1, #1
    42c6:	4821      	ldr	r0, [pc, #132]	; (434c <spi_flash_enable+0xd4>)
    42c8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    42ca:	2100      	movs	r1, #0
    42cc:	4820      	ldr	r0, [pc, #128]	; (4350 <spi_flash_enable+0xd8>)
    42ce:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    42d0:	2181      	movs	r1, #129	; 0x81
    42d2:	4820      	ldr	r0, [pc, #128]	; (4354 <spi_flash_enable+0xdc>)
    42d4:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    42d6:	4e20      	ldr	r6, [pc, #128]	; (4358 <spi_flash_enable+0xe0>)
    42d8:	4c20      	ldr	r4, [pc, #128]	; (435c <spi_flash_enable+0xe4>)
    42da:	0030      	movs	r0, r6
    42dc:	47a0      	blx	r4
    42de:	2801      	cmp	r0, #1
    42e0:	d1fb      	bne.n	42da <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    42e2:	4b15      	ldr	r3, [pc, #84]	; (4338 <spi_flash_enable+0xc0>)
    42e4:	9a01      	ldr	r2, [sp, #4]
    42e6:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    42e8:	2180      	movs	r1, #128	; 0x80
    42ea:	0249      	lsls	r1, r1, #9
    42ec:	4319      	orrs	r1, r3
    42ee:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    42f0:	480f      	ldr	r0, [pc, #60]	; (4330 <spi_flash_enable+0xb8>)
    42f2:	4b13      	ldr	r3, [pc, #76]	; (4340 <spi_flash_enable+0xc8>)
    42f4:	4798      	blx	r3
    42f6:	e7ca      	b.n	428e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    42f8:	2100      	movs	r1, #0
    42fa:	4812      	ldr	r0, [pc, #72]	; (4344 <spi_flash_enable+0xcc>)
    42fc:	4c10      	ldr	r4, [pc, #64]	; (4340 <spi_flash_enable+0xc8>)
    42fe:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4300:	21b9      	movs	r1, #185	; 0xb9
    4302:	4811      	ldr	r0, [pc, #68]	; (4348 <spi_flash_enable+0xd0>)
    4304:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4306:	2101      	movs	r1, #1
    4308:	4810      	ldr	r0, [pc, #64]	; (434c <spi_flash_enable+0xd4>)
    430a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    430c:	2100      	movs	r1, #0
    430e:	4810      	ldr	r0, [pc, #64]	; (4350 <spi_flash_enable+0xd8>)
    4310:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    4312:	2181      	movs	r1, #129	; 0x81
    4314:	480f      	ldr	r0, [pc, #60]	; (4354 <spi_flash_enable+0xdc>)
    4316:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    4318:	4e0f      	ldr	r6, [pc, #60]	; (4358 <spi_flash_enable+0xe0>)
    431a:	4c10      	ldr	r4, [pc, #64]	; (435c <spi_flash_enable+0xe4>)
    431c:	0030      	movs	r0, r6
    431e:	47a0      	blx	r4
    4320:	2801      	cmp	r0, #1
    4322:	d1fb      	bne.n	431c <spi_flash_enable+0xa4>
    4324:	e7dd      	b.n	42e2 <spi_flash_enable+0x6a>
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	000025f5 	.word	0x000025f5
    432c:	0000039f 	.word	0x0000039f
    4330:	00001410 	.word	0x00001410
    4334:	00002a45 	.word	0x00002a45
    4338:	f8888fff 	.word	0xf8888fff
    433c:	01111000 	.word	0x01111000
    4340:	00002a51 	.word	0x00002a51
    4344:	00010208 	.word	0x00010208
    4348:	0001020c 	.word	0x0001020c
    434c:	00010214 	.word	0x00010214
    4350:	0001021c 	.word	0x0001021c
    4354:	00010204 	.word	0x00010204
    4358:	00010218 	.word	0x00010218
    435c:	00002a39 	.word	0x00002a39

00004360 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    4360:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4362:	2301      	movs	r3, #1
    4364:	2800      	cmp	r0, #0
    4366:	d001      	beq.n	436c <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4368:	0018      	movs	r0, r3
    436a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    436c:	4b01      	ldr	r3, [pc, #4]	; (4374 <mem_test_unit_ready+0x14>)
    436e:	4798      	blx	r3
    4370:	0003      	movs	r3, r0
    4372:	e7f9      	b.n	4368 <mem_test_unit_ready+0x8>
    4374:	00000a61 	.word	0x00000a61

00004378 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4378:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    437a:	2301      	movs	r3, #1
    437c:	2800      	cmp	r0, #0
    437e:	d001      	beq.n	4384 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4380:	0018      	movs	r0, r3
    4382:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4384:	0008      	movs	r0, r1
    4386:	4b02      	ldr	r3, [pc, #8]	; (4390 <mem_read_capacity+0x18>)
    4388:	4798      	blx	r3
    438a:	0003      	movs	r3, r0
    438c:	e7f8      	b.n	4380 <mem_read_capacity+0x8>
    438e:	46c0      	nop			; (mov r8, r8)
    4390:	00000a91 	.word	0x00000a91

00004394 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    4394:	4243      	negs	r3, r0
    4396:	4158      	adcs	r0, r3
    4398:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    439a:	4770      	bx	lr

0000439c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    439c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    439e:	2301      	movs	r3, #1
    43a0:	2800      	cmp	r0, #0
    43a2:	d001      	beq.n	43a8 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    43a4:	0018      	movs	r0, r3
    43a6:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    43a8:	4b01      	ldr	r3, [pc, #4]	; (43b0 <mem_wr_protect+0x14>)
    43aa:	4798      	blx	r3
    43ac:	0003      	movs	r3, r0
    43ae:	e7f9      	b.n	43a4 <mem_wr_protect+0x8>
    43b0:	00000aa1 	.word	0x00000aa1

000043b4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    43b4:	b510      	push	{r4, lr}
    43b6:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    43b8:	2301      	movs	r3, #1
    43ba:	2800      	cmp	r0, #0
    43bc:	d001      	beq.n	43c2 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    43be:	0018      	movs	r0, r3
    43c0:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    43c2:	0011      	movs	r1, r2
    43c4:	0020      	movs	r0, r4
    43c6:	4b02      	ldr	r3, [pc, #8]	; (43d0 <memory_2_ram+0x1c>)
    43c8:	4798      	blx	r3
    43ca:	0003      	movs	r3, r0
    43cc:	e7f7      	b.n	43be <memory_2_ram+0xa>
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	00000af5 	.word	0x00000af5

000043d4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    43d4:	b510      	push	{r4, lr}
    43d6:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    43d8:	2301      	movs	r3, #1
    43da:	2800      	cmp	r0, #0
    43dc:	d001      	beq.n	43e2 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    43de:	0018      	movs	r0, r3
    43e0:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    43e2:	0011      	movs	r1, r2
    43e4:	0020      	movs	r0, r4
    43e6:	4b02      	ldr	r3, [pc, #8]	; (43f0 <ram_2_memory+0x1c>)
    43e8:	4798      	blx	r3
    43ea:	0003      	movs	r3, r0
    43ec:	e7f7      	b.n	43de <ram_2_memory+0xa>
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	00000b4d 	.word	0x00000b4d

000043f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    43f4:	4b0c      	ldr	r3, [pc, #48]	; (4428 <cpu_irq_enter_critical+0x34>)
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	2b00      	cmp	r3, #0
    43fa:	d106      	bne.n	440a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43fc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4400:	2b00      	cmp	r3, #0
    4402:	d007      	beq.n	4414 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4404:	2200      	movs	r2, #0
    4406:	4b09      	ldr	r3, [pc, #36]	; (442c <cpu_irq_enter_critical+0x38>)
    4408:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    440a:	4a07      	ldr	r2, [pc, #28]	; (4428 <cpu_irq_enter_critical+0x34>)
    440c:	6813      	ldr	r3, [r2, #0]
    440e:	3301      	adds	r3, #1
    4410:	6013      	str	r3, [r2, #0]
}
    4412:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4414:	b672      	cpsid	i
    4416:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    441a:	2200      	movs	r2, #0
    441c:	4b04      	ldr	r3, [pc, #16]	; (4430 <cpu_irq_enter_critical+0x3c>)
    441e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4420:	3201      	adds	r2, #1
    4422:	4b02      	ldr	r3, [pc, #8]	; (442c <cpu_irq_enter_critical+0x38>)
    4424:	701a      	strb	r2, [r3, #0]
    4426:	e7f0      	b.n	440a <cpu_irq_enter_critical+0x16>
    4428:	20000390 	.word	0x20000390
    442c:	20000394 	.word	0x20000394
    4430:	2000002e 	.word	0x2000002e

00004434 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4434:	4b08      	ldr	r3, [pc, #32]	; (4458 <cpu_irq_leave_critical+0x24>)
    4436:	681a      	ldr	r2, [r3, #0]
    4438:	3a01      	subs	r2, #1
    443a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	2b00      	cmp	r3, #0
    4440:	d109      	bne.n	4456 <cpu_irq_leave_critical+0x22>
    4442:	4b06      	ldr	r3, [pc, #24]	; (445c <cpu_irq_leave_critical+0x28>)
    4444:	781b      	ldrb	r3, [r3, #0]
    4446:	2b00      	cmp	r3, #0
    4448:	d005      	beq.n	4456 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    444a:	2201      	movs	r2, #1
    444c:	4b04      	ldr	r3, [pc, #16]	; (4460 <cpu_irq_leave_critical+0x2c>)
    444e:	701a      	strb	r2, [r3, #0]
    4450:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4454:	b662      	cpsie	i
	}
}
    4456:	4770      	bx	lr
    4458:	20000390 	.word	0x20000390
    445c:	20000394 	.word	0x20000394
    4460:	2000002e 	.word	0x2000002e

00004464 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4464:	b5f0      	push	{r4, r5, r6, r7, lr}
    4466:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4468:	ac01      	add	r4, sp, #4
    446a:	2501      	movs	r5, #1
    446c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    446e:	2700      	movs	r7, #0
    4470:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4472:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4474:	0021      	movs	r1, r4
    4476:	2017      	movs	r0, #23
    4478:	4e06      	ldr	r6, [pc, #24]	; (4494 <system_board_init+0x30>)
    447a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    447c:	2280      	movs	r2, #128	; 0x80
    447e:	0412      	lsls	r2, r2, #16
    4480:	4b05      	ldr	r3, [pc, #20]	; (4498 <system_board_init+0x34>)
    4482:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4484:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4486:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4488:	0021      	movs	r1, r4
    448a:	2037      	movs	r0, #55	; 0x37
    448c:	47b0      	blx	r6
}
    448e:	b003      	add	sp, #12
    4490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	0000466d 	.word	0x0000466d
    4498:	41004400 	.word	0x41004400

0000449c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    449c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    449e:	2a00      	cmp	r2, #0
    44a0:	d001      	beq.n	44a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    44a2:	0018      	movs	r0, r3
    44a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    44a6:	008b      	lsls	r3, r1, #2
    44a8:	4a06      	ldr	r2, [pc, #24]	; (44c4 <extint_register_callback+0x28>)
    44aa:	589b      	ldr	r3, [r3, r2]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d003      	beq.n	44b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    44b0:	4283      	cmp	r3, r0
    44b2:	d005      	beq.n	44c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    44b4:	231d      	movs	r3, #29
    44b6:	e7f4      	b.n	44a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    44b8:	0089      	lsls	r1, r1, #2
    44ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    44bc:	2300      	movs	r3, #0
    44be:	e7f0      	b.n	44a2 <extint_register_callback+0x6>
		return STATUS_OK;
    44c0:	2300      	movs	r3, #0
    44c2:	e7ee      	b.n	44a2 <extint_register_callback+0x6>
    44c4:	200005ac 	.word	0x200005ac

000044c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    44c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    44ca:	2900      	cmp	r1, #0
    44cc:	d001      	beq.n	44d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    44ce:	0018      	movs	r0, r3
    44d0:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    44d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    44d4:	281f      	cmp	r0, #31
    44d6:	d800      	bhi.n	44da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    44d8:	4a02      	ldr	r2, [pc, #8]	; (44e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    44da:	2301      	movs	r3, #1
    44dc:	4083      	lsls	r3, r0
    44de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    44e0:	2300      	movs	r3, #0
    44e2:	e7f4      	b.n	44ce <extint_chan_enable_callback+0x6>
    44e4:	40001800 	.word	0x40001800

000044e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    44e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    44ea:	2900      	cmp	r1, #0
    44ec:	d001      	beq.n	44f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    44ee:	0018      	movs	r0, r3
    44f0:	4770      	bx	lr
		return NULL;
    44f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    44f4:	281f      	cmp	r0, #31
    44f6:	d800      	bhi.n	44fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    44f8:	4a02      	ldr	r2, [pc, #8]	; (4504 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    44fa:	2301      	movs	r3, #1
    44fc:	4083      	lsls	r3, r0
    44fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4500:	2300      	movs	r3, #0
    4502:	e7f4      	b.n	44ee <extint_chan_disable_callback+0x6>
    4504:	40001800 	.word	0x40001800

00004508 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4508:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    450a:	2200      	movs	r2, #0
    450c:	4b10      	ldr	r3, [pc, #64]	; (4550 <EIC_Handler+0x48>)
    450e:	701a      	strb	r2, [r3, #0]
    4510:	2300      	movs	r3, #0
    4512:	4910      	ldr	r1, [pc, #64]	; (4554 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4514:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4516:	4e10      	ldr	r6, [pc, #64]	; (4558 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4518:	4c0d      	ldr	r4, [pc, #52]	; (4550 <EIC_Handler+0x48>)
    451a:	e00a      	b.n	4532 <EIC_Handler+0x2a>
		return eics[eic_index];
    451c:	490d      	ldr	r1, [pc, #52]	; (4554 <EIC_Handler+0x4c>)
    451e:	e008      	b.n	4532 <EIC_Handler+0x2a>
    4520:	7823      	ldrb	r3, [r4, #0]
    4522:	3301      	adds	r3, #1
    4524:	b2db      	uxtb	r3, r3
    4526:	7023      	strb	r3, [r4, #0]
    4528:	2b0f      	cmp	r3, #15
    452a:	d810      	bhi.n	454e <EIC_Handler+0x46>
		return NULL;
    452c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    452e:	2b1f      	cmp	r3, #31
    4530:	d9f4      	bls.n	451c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4532:	0028      	movs	r0, r5
    4534:	4018      	ands	r0, r3
    4536:	2201      	movs	r2, #1
    4538:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    453a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    453c:	4210      	tst	r0, r2
    453e:	d0ef      	beq.n	4520 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4540:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4542:	009b      	lsls	r3, r3, #2
    4544:	599b      	ldr	r3, [r3, r6]
    4546:	2b00      	cmp	r3, #0
    4548:	d0ea      	beq.n	4520 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    454a:	4798      	blx	r3
    454c:	e7e8      	b.n	4520 <EIC_Handler+0x18>
			}
		}
	}
}
    454e:	bd70      	pop	{r4, r5, r6, pc}
    4550:	200005a8 	.word	0x200005a8
    4554:	40001800 	.word	0x40001800
    4558:	200005ac 	.word	0x200005ac

0000455c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    455c:	4a04      	ldr	r2, [pc, #16]	; (4570 <_extint_enable+0x14>)
    455e:	7813      	ldrb	r3, [r2, #0]
    4560:	2102      	movs	r1, #2
    4562:	430b      	orrs	r3, r1
    4564:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4566:	7853      	ldrb	r3, [r2, #1]
    4568:	b25b      	sxtb	r3, r3
    456a:	2b00      	cmp	r3, #0
    456c:	dbfb      	blt.n	4566 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    456e:	4770      	bx	lr
    4570:	40001800 	.word	0x40001800

00004574 <_system_extint_init>:
{
    4574:	b500      	push	{lr}
    4576:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4578:	4a12      	ldr	r2, [pc, #72]	; (45c4 <_system_extint_init+0x50>)
    457a:	6993      	ldr	r3, [r2, #24]
    457c:	2140      	movs	r1, #64	; 0x40
    457e:	430b      	orrs	r3, r1
    4580:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4582:	a901      	add	r1, sp, #4
    4584:	2300      	movs	r3, #0
    4586:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4588:	2005      	movs	r0, #5
    458a:	4b0f      	ldr	r3, [pc, #60]	; (45c8 <_system_extint_init+0x54>)
    458c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    458e:	2005      	movs	r0, #5
    4590:	4b0e      	ldr	r3, [pc, #56]	; (45cc <_system_extint_init+0x58>)
    4592:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4594:	4a0e      	ldr	r2, [pc, #56]	; (45d0 <_system_extint_init+0x5c>)
    4596:	7813      	ldrb	r3, [r2, #0]
    4598:	2101      	movs	r1, #1
    459a:	430b      	orrs	r3, r1
    459c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    459e:	7853      	ldrb	r3, [r2, #1]
    45a0:	b25b      	sxtb	r3, r3
    45a2:	2b00      	cmp	r3, #0
    45a4:	dbfb      	blt.n	459e <_system_extint_init+0x2a>
    45a6:	4b0b      	ldr	r3, [pc, #44]	; (45d4 <_system_extint_init+0x60>)
    45a8:	0019      	movs	r1, r3
    45aa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    45ac:	2200      	movs	r2, #0
    45ae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    45b0:	4299      	cmp	r1, r3
    45b2:	d1fc      	bne.n	45ae <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    45b4:	2210      	movs	r2, #16
    45b6:	4b08      	ldr	r3, [pc, #32]	; (45d8 <_system_extint_init+0x64>)
    45b8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    45ba:	4b08      	ldr	r3, [pc, #32]	; (45dc <_system_extint_init+0x68>)
    45bc:	4798      	blx	r3
}
    45be:	b003      	add	sp, #12
    45c0:	bd00      	pop	{pc}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	40000400 	.word	0x40000400
    45c8:	00005fbd 	.word	0x00005fbd
    45cc:	00005f31 	.word	0x00005f31
    45d0:	40001800 	.word	0x40001800
    45d4:	200005ac 	.word	0x200005ac
    45d8:	e000e100 	.word	0xe000e100
    45dc:	0000455d 	.word	0x0000455d

000045e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    45e0:	2300      	movs	r3, #0
    45e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    45e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    45e6:	2201      	movs	r2, #1
    45e8:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    45ea:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    45ec:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    45ee:	3302      	adds	r3, #2
    45f0:	72c3      	strb	r3, [r0, #11]
}
    45f2:	4770      	bx	lr

000045f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    45f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45f6:	b083      	sub	sp, #12
    45f8:	0005      	movs	r5, r0
    45fa:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    45fc:	a901      	add	r1, sp, #4
    45fe:	2300      	movs	r3, #0
    4600:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    4602:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4604:	7923      	ldrb	r3, [r4, #4]
    4606:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4608:	7a23      	ldrb	r3, [r4, #8]
    460a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    460c:	7820      	ldrb	r0, [r4, #0]
    460e:	4b15      	ldr	r3, [pc, #84]	; (4664 <extint_chan_set_config+0x70>)
    4610:	4798      	blx	r3
		return NULL;
    4612:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4614:	2d1f      	cmp	r5, #31
    4616:	d800      	bhi.n	461a <extint_chan_set_config+0x26>
		return eics[eic_index];
    4618:	4813      	ldr	r0, [pc, #76]	; (4668 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    461a:	2207      	movs	r2, #7
    461c:	402a      	ands	r2, r5
    461e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4620:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4622:	7aa3      	ldrb	r3, [r4, #10]
    4624:	2b00      	cmp	r3, #0
    4626:	d001      	beq.n	462c <extint_chan_set_config+0x38>
    4628:	2308      	movs	r3, #8
    462a:	431f      	orrs	r7, r3
    462c:	08eb      	lsrs	r3, r5, #3
    462e:	009b      	lsls	r3, r3, #2
    4630:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4632:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4634:	260f      	movs	r6, #15
    4636:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4638:	43b1      	bics	r1, r6
			(new_config << config_pos);
    463a:	4097      	lsls	r7, r2
    463c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    463e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    4640:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    4642:	7a63      	ldrb	r3, [r4, #9]
    4644:	2b00      	cmp	r3, #0
    4646:	d106      	bne.n	4656 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4648:	6943      	ldr	r3, [r0, #20]
    464a:	2201      	movs	r2, #1
    464c:	40aa      	lsls	r2, r5
    464e:	4393      	bics	r3, r2
    4650:	6143      	str	r3, [r0, #20]
	}
}
    4652:	b003      	add	sp, #12
    4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4656:	6942      	ldr	r2, [r0, #20]
    4658:	2301      	movs	r3, #1
    465a:	40ab      	lsls	r3, r5
    465c:	4313      	orrs	r3, r2
    465e:	6143      	str	r3, [r0, #20]
    4660:	e7f7      	b.n	4652 <extint_chan_set_config+0x5e>
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	000060b5 	.word	0x000060b5
    4668:	40001800 	.word	0x40001800

0000466c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    466c:	b500      	push	{lr}
    466e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4670:	ab01      	add	r3, sp, #4
    4672:	2280      	movs	r2, #128	; 0x80
    4674:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4676:	780a      	ldrb	r2, [r1, #0]
    4678:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    467a:	784a      	ldrb	r2, [r1, #1]
    467c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    467e:	788a      	ldrb	r2, [r1, #2]
    4680:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4682:	0019      	movs	r1, r3
    4684:	4b01      	ldr	r3, [pc, #4]	; (468c <port_pin_set_config+0x20>)
    4686:	4798      	blx	r3
}
    4688:	b003      	add	sp, #12
    468a:	bd00      	pop	{pc}
    468c:	000060b5 	.word	0x000060b5

00004690 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4690:	6801      	ldr	r1, [r0, #0]
    4692:	2208      	movs	r2, #8
    4694:	4b05      	ldr	r3, [pc, #20]	; (46ac <rtc_calendar_enable+0x1c>)
    4696:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4698:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    469a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    469c:	b25b      	sxtb	r3, r3
    469e:	2b00      	cmp	r3, #0
    46a0:	dbfb      	blt.n	469a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    46a2:	880b      	ldrh	r3, [r1, #0]
    46a4:	2202      	movs	r2, #2
    46a6:	4313      	orrs	r3, r2
    46a8:	800b      	strh	r3, [r1, #0]
}
    46aa:	4770      	bx	lr
    46ac:	e000e100 	.word	0xe000e100

000046b0 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    46b0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    46b2:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    46b4:	2408      	movs	r4, #8
    46b6:	2380      	movs	r3, #128	; 0x80
    46b8:	4907      	ldr	r1, [pc, #28]	; (46d8 <rtc_calendar_disable+0x28>)
    46ba:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    46bc:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    46be:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    46c0:	b25b      	sxtb	r3, r3
    46c2:	2b00      	cmp	r3, #0
    46c4:	dbfb      	blt.n	46be <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    46c6:	23c1      	movs	r3, #193	; 0xc1
    46c8:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    46ca:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    46cc:	8813      	ldrh	r3, [r2, #0]
    46ce:	2102      	movs	r1, #2
    46d0:	438b      	bics	r3, r1
    46d2:	8013      	strh	r3, [r2, #0]
}
    46d4:	bd10      	pop	{r4, pc}
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	e000e100 	.word	0xe000e100

000046dc <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    46e0:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    46e2:	4b07      	ldr	r3, [pc, #28]	; (4700 <rtc_calendar_reset+0x24>)
    46e4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    46e6:	2300      	movs	r3, #0
    46e8:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    46ea:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    46ec:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    46ee:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    46f0:	b25b      	sxtb	r3, r3
    46f2:	2b00      	cmp	r3, #0
    46f4:	dbfb      	blt.n	46ee <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    46f6:	882b      	ldrh	r3, [r5, #0]
    46f8:	2201      	movs	r2, #1
    46fa:	4313      	orrs	r3, r2
    46fc:	802b      	strh	r3, [r5, #0]
}
    46fe:	bd70      	pop	{r4, r5, r6, pc}
    4700:	000046b1 	.word	0x000046b1

00004704 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    4704:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    4706:	88cb      	ldrh	r3, [r1, #6]
    4708:	88c2      	ldrh	r2, [r0, #6]
    470a:	1a9a      	subs	r2, r3, r2
    470c:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    470e:	794b      	ldrb	r3, [r1, #5]
    4710:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    4712:	790c      	ldrb	r4, [r1, #4]
    4714:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    4716:	4323      	orrs	r3, r4
    4718:	788c      	ldrb	r4, [r1, #2]
    471a:	0324      	lsls	r4, r4, #12
    471c:	4323      	orrs	r3, r4
    471e:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    4720:	7902      	ldrb	r2, [r0, #4]
    4722:	2a00      	cmp	r2, #0
    4724:	d105      	bne.n	4732 <rtc_calendar_time_to_register_value+0x2e>
    4726:	78ca      	ldrb	r2, [r1, #3]
    4728:	2a00      	cmp	r2, #0
    472a:	d002      	beq.n	4732 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    472c:	2280      	movs	r2, #128	; 0x80
    472e:	0252      	lsls	r2, r2, #9
    4730:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    4732:	7848      	ldrb	r0, [r1, #1]
    4734:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    4736:	780a      	ldrb	r2, [r1, #0]
    4738:	4310      	orrs	r0, r2
    473a:	4318      	orrs	r0, r3

	return register_value;
}
    473c:	bd10      	pop	{r4, pc}

0000473e <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    473e:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    4740:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    4742:	88c4      	ldrh	r4, [r0, #6]
    4744:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    4746:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    4748:	018b      	lsls	r3, r1, #6
    474a:	0f1b      	lsrs	r3, r3, #28
    474c:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    474e:	028b      	lsls	r3, r1, #10
    4750:	0edb      	lsrs	r3, r3, #27
    4752:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    4754:	7903      	ldrb	r3, [r0, #4]
    4756:	2b00      	cmp	r3, #0
    4758:	d10c      	bne.n	4774 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    475a:	040b      	lsls	r3, r1, #16
    475c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    475e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    4760:	03cb      	lsls	r3, r1, #15
    4762:	0fdb      	lsrs	r3, r3, #31
    4764:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    4766:	0988      	lsrs	r0, r1, #6
    4768:	233f      	movs	r3, #63	; 0x3f
    476a:	4018      	ands	r0, r3
    476c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    476e:	4019      	ands	r1, r3
    4770:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    4772:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    4774:	03cb      	lsls	r3, r1, #15
    4776:	0edb      	lsrs	r3, r3, #27
    4778:	7093      	strb	r3, [r2, #2]
    477a:	e7f4      	b.n	4766 <rtc_calendar_register_value_to_time+0x28>

0000477c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    477c:	b510      	push	{r4, lr}
    477e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4780:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    4782:	7941      	ldrb	r1, [r0, #5]
    4784:	2900      	cmp	r1, #0
    4786:	d006      	beq.n	4796 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    4788:	8859      	ldrh	r1, [r3, #2]
    478a:	0449      	lsls	r1, r1, #17
    478c:	d50b      	bpl.n	47a6 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    478e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    4790:	4b0a      	ldr	r3, [pc, #40]	; (47bc <rtc_calendar_get_time+0x40>)
    4792:	4798      	blx	r3
}
    4794:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    4796:	490a      	ldr	r1, [pc, #40]	; (47c0 <rtc_calendar_get_time+0x44>)
    4798:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    479a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    479c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    479e:	b249      	sxtb	r1, r1
    47a0:	2900      	cmp	r1, #0
    47a2:	dbfb      	blt.n	479c <rtc_calendar_get_time+0x20>
    47a4:	e7f3      	b.n	478e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    47a6:	8859      	ldrh	r1, [r3, #2]
    47a8:	24c0      	movs	r4, #192	; 0xc0
    47aa:	0224      	lsls	r4, r4, #8
    47ac:	4321      	orrs	r1, r4
    47ae:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    47b0:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    47b2:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    47b4:	b249      	sxtb	r1, r1
    47b6:	2900      	cmp	r1, #0
    47b8:	dbfb      	blt.n	47b2 <rtc_calendar_get_time+0x36>
    47ba:	e7e8      	b.n	478e <rtc_calendar_get_time+0x12>
    47bc:	0000473f 	.word	0x0000473f
    47c0:	ffff8000 	.word	0xffff8000

000047c4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    47c4:	b570      	push	{r4, r5, r6, lr}
    47c6:	000d      	movs	r5, r1
    47c8:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    47ca:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    47cc:	2a01      	cmp	r2, #1
    47ce:	d901      	bls.n	47d4 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    47d0:	0018      	movs	r0, r3
    47d2:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    47d4:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    47d6:	4b06      	ldr	r3, [pc, #24]	; (47f0 <rtc_calendar_set_alarm+0x2c>)
    47d8:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    47da:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    47dc:	b25b      	sxtb	r3, r3
    47de:	2b00      	cmp	r3, #0
    47e0:	dbfb      	blt.n	47da <rtc_calendar_set_alarm+0x16>
    47e2:	00e4      	lsls	r4, r4, #3
    47e4:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    47e6:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    47e8:	7a2b      	ldrb	r3, [r5, #8]
    47ea:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    47ec:	2300      	movs	r3, #0
    47ee:	e7ef      	b.n	47d0 <rtc_calendar_set_alarm+0xc>
    47f0:	00004705 	.word	0x00004705

000047f4 <rtc_calendar_init>:
{
    47f4:	b530      	push	{r4, r5, lr}
    47f6:	b083      	sub	sp, #12
    47f8:	0005      	movs	r5, r0
    47fa:	0014      	movs	r4, r2
	module->hw = hw;
    47fc:	6001      	str	r1, [r0, #0]
    47fe:	4a1c      	ldr	r2, [pc, #112]	; (4870 <rtc_calendar_init+0x7c>)
    4800:	6993      	ldr	r3, [r2, #24]
    4802:	2120      	movs	r1, #32
    4804:	430b      	orrs	r3, r1
    4806:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    4808:	a901      	add	r1, sp, #4
    480a:	2302      	movs	r3, #2
    480c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    480e:	2004      	movs	r0, #4
    4810:	4b18      	ldr	r3, [pc, #96]	; (4874 <rtc_calendar_init+0x80>)
    4812:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    4814:	2004      	movs	r0, #4
    4816:	4b18      	ldr	r3, [pc, #96]	; (4878 <rtc_calendar_init+0x84>)
    4818:	4798      	blx	r3
	rtc_calendar_reset(module);
    481a:	0028      	movs	r0, r5
    481c:	4b17      	ldr	r3, [pc, #92]	; (487c <rtc_calendar_init+0x88>)
    481e:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    4820:	7923      	ldrb	r3, [r4, #4]
    4822:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    4824:	78e3      	ldrb	r3, [r4, #3]
    4826:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    4828:	88e3      	ldrh	r3, [r4, #6]
    482a:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    482c:	4b14      	ldr	r3, [pc, #80]	; (4880 <rtc_calendar_init+0x8c>)
    482e:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4830:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    4832:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    4834:	7921      	ldrb	r1, [r4, #4]
    4836:	2900      	cmp	r1, #0
    4838:	d017      	beq.n	486a <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    483a:	2108      	movs	r1, #8
    483c:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    483e:	78a1      	ldrb	r1, [r4, #2]
    4840:	2900      	cmp	r1, #0
    4842:	d001      	beq.n	4848 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    4844:	2180      	movs	r1, #128	; 0x80
    4846:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    4848:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    484a:	78e3      	ldrb	r3, [r4, #3]
    484c:	2b00      	cmp	r3, #0
    484e:	d004      	beq.n	485a <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    4850:	8853      	ldrh	r3, [r2, #2]
    4852:	2180      	movs	r1, #128	; 0x80
    4854:	01c9      	lsls	r1, r1, #7
    4856:	430b      	orrs	r3, r1
    4858:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    485a:	0021      	movs	r1, r4
    485c:	3108      	adds	r1, #8
    485e:	2200      	movs	r2, #0
    4860:	0028      	movs	r0, r5
    4862:	4b08      	ldr	r3, [pc, #32]	; (4884 <rtc_calendar_init+0x90>)
    4864:	4798      	blx	r3
}
    4866:	b003      	add	sp, #12
    4868:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    486a:	2148      	movs	r1, #72	; 0x48
    486c:	430b      	orrs	r3, r1
    486e:	e7e6      	b.n	483e <rtc_calendar_init+0x4a>
    4870:	40000400 	.word	0x40000400
    4874:	00005fbd 	.word	0x00005fbd
    4878:	00005f31 	.word	0x00005f31
    487c:	000046dd 	.word	0x000046dd
    4880:	200005ec 	.word	0x200005ec
    4884:	000047c5 	.word	0x000047c5

00004888 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4888:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    488a:	4b0f      	ldr	r3, [pc, #60]	; (48c8 <RTC_Handler+0x40>)
    488c:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    488e:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    4890:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    4892:	8a13      	ldrh	r3, [r2, #16]
    4894:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4896:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    4898:	79e3      	ldrb	r3, [r4, #7]
    489a:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    489c:	b258      	sxtb	r0, r3
    489e:	2800      	cmp	r0, #0
    48a0:	db06      	blt.n	48b0 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    48a2:	07db      	lsls	r3, r3, #31
    48a4:	d503      	bpl.n	48ae <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    48a6:	07cb      	lsls	r3, r1, #31
    48a8:	d40a      	bmi.n	48c0 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    48aa:	2301      	movs	r3, #1
    48ac:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    48ae:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    48b0:	078b      	lsls	r3, r1, #30
    48b2:	d402      	bmi.n	48ba <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    48b4:	2380      	movs	r3, #128	; 0x80
    48b6:	7223      	strb	r3, [r4, #8]
    48b8:	e7f9      	b.n	48ae <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    48ba:	68d3      	ldr	r3, [r2, #12]
    48bc:	4798      	blx	r3
    48be:	e7f9      	b.n	48b4 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    48c0:	6893      	ldr	r3, [r2, #8]
    48c2:	4798      	blx	r3
    48c4:	e7f1      	b.n	48aa <RTC_Handler+0x22>
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	200005ec 	.word	0x200005ec

000048cc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    48cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ce:	46de      	mov	lr, fp
    48d0:	4657      	mov	r7, sl
    48d2:	464e      	mov	r6, r9
    48d4:	4645      	mov	r5, r8
    48d6:	b5e0      	push	{r5, r6, r7, lr}
    48d8:	b087      	sub	sp, #28
    48da:	4680      	mov	r8, r0
    48dc:	9104      	str	r1, [sp, #16]
    48de:	0016      	movs	r6, r2
    48e0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    48e2:	2200      	movs	r2, #0
    48e4:	2300      	movs	r3, #0
    48e6:	2100      	movs	r1, #0
    48e8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    48ea:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    48ec:	2001      	movs	r0, #1
    48ee:	0021      	movs	r1, r4
    48f0:	9600      	str	r6, [sp, #0]
    48f2:	9701      	str	r7, [sp, #4]
    48f4:	465c      	mov	r4, fp
    48f6:	9403      	str	r4, [sp, #12]
    48f8:	4644      	mov	r4, r8
    48fa:	9405      	str	r4, [sp, #20]
    48fc:	e013      	b.n	4926 <long_division+0x5a>
    48fe:	2420      	movs	r4, #32
    4900:	1a64      	subs	r4, r4, r1
    4902:	0005      	movs	r5, r0
    4904:	40e5      	lsrs	r5, r4
    4906:	46a8      	mov	r8, r5
    4908:	e014      	b.n	4934 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    490a:	9c00      	ldr	r4, [sp, #0]
    490c:	9d01      	ldr	r5, [sp, #4]
    490e:	1b12      	subs	r2, r2, r4
    4910:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4912:	465c      	mov	r4, fp
    4914:	464d      	mov	r5, r9
    4916:	432c      	orrs	r4, r5
    4918:	46a3      	mov	fp, r4
    491a:	9c03      	ldr	r4, [sp, #12]
    491c:	4645      	mov	r5, r8
    491e:	432c      	orrs	r4, r5
    4920:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4922:	3901      	subs	r1, #1
    4924:	d325      	bcc.n	4972 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4926:	2420      	movs	r4, #32
    4928:	4264      	negs	r4, r4
    492a:	190c      	adds	r4, r1, r4
    492c:	d4e7      	bmi.n	48fe <long_division+0x32>
    492e:	0005      	movs	r5, r0
    4930:	40a5      	lsls	r5, r4
    4932:	46a8      	mov	r8, r5
    4934:	0004      	movs	r4, r0
    4936:	408c      	lsls	r4, r1
    4938:	46a1      	mov	r9, r4
		r = r << 1;
    493a:	1892      	adds	r2, r2, r2
    493c:	415b      	adcs	r3, r3
    493e:	0014      	movs	r4, r2
    4940:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4942:	9e05      	ldr	r6, [sp, #20]
    4944:	464f      	mov	r7, r9
    4946:	403e      	ands	r6, r7
    4948:	46b4      	mov	ip, r6
    494a:	9e04      	ldr	r6, [sp, #16]
    494c:	4647      	mov	r7, r8
    494e:	403e      	ands	r6, r7
    4950:	46b2      	mov	sl, r6
    4952:	4666      	mov	r6, ip
    4954:	4657      	mov	r7, sl
    4956:	433e      	orrs	r6, r7
    4958:	d003      	beq.n	4962 <long_division+0x96>
			r |= 0x01;
    495a:	0006      	movs	r6, r0
    495c:	4326      	orrs	r6, r4
    495e:	0032      	movs	r2, r6
    4960:	002b      	movs	r3, r5
		if (r >= d) {
    4962:	9c00      	ldr	r4, [sp, #0]
    4964:	9d01      	ldr	r5, [sp, #4]
    4966:	429d      	cmp	r5, r3
    4968:	d8db      	bhi.n	4922 <long_division+0x56>
    496a:	d1ce      	bne.n	490a <long_division+0x3e>
    496c:	4294      	cmp	r4, r2
    496e:	d8d8      	bhi.n	4922 <long_division+0x56>
    4970:	e7cb      	b.n	490a <long_division+0x3e>
    4972:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4974:	4658      	mov	r0, fp
    4976:	0019      	movs	r1, r3
    4978:	b007      	add	sp, #28
    497a:	bc3c      	pop	{r2, r3, r4, r5}
    497c:	4690      	mov	r8, r2
    497e:	4699      	mov	r9, r3
    4980:	46a2      	mov	sl, r4
    4982:	46ab      	mov	fp, r5
    4984:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004986 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4986:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4988:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    498a:	2340      	movs	r3, #64	; 0x40
    498c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    498e:	4281      	cmp	r1, r0
    4990:	d202      	bcs.n	4998 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4992:	0018      	movs	r0, r3
    4994:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4996:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4998:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    499a:	1c63      	adds	r3, r4, #1
    499c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    499e:	4288      	cmp	r0, r1
    49a0:	d9f9      	bls.n	4996 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    49a2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    49a4:	2cff      	cmp	r4, #255	; 0xff
    49a6:	d8f4      	bhi.n	4992 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    49a8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    49aa:	2300      	movs	r3, #0
    49ac:	e7f1      	b.n	4992 <_sercom_get_sync_baud_val+0xc>
	...

000049b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    49b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49b2:	b083      	sub	sp, #12
    49b4:	000f      	movs	r7, r1
    49b6:	0016      	movs	r6, r2
    49b8:	aa08      	add	r2, sp, #32
    49ba:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    49bc:	0004      	movs	r4, r0
    49be:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    49c0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    49c2:	42bc      	cmp	r4, r7
    49c4:	d902      	bls.n	49cc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    49c6:	0010      	movs	r0, r2
    49c8:	b003      	add	sp, #12
    49ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    49cc:	2b00      	cmp	r3, #0
    49ce:	d114      	bne.n	49fa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    49d0:	0002      	movs	r2, r0
    49d2:	0008      	movs	r0, r1
    49d4:	2100      	movs	r1, #0
    49d6:	4c19      	ldr	r4, [pc, #100]	; (4a3c <_sercom_get_async_baud_val+0x8c>)
    49d8:	47a0      	blx	r4
    49da:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    49dc:	003a      	movs	r2, r7
    49de:	2300      	movs	r3, #0
    49e0:	2000      	movs	r0, #0
    49e2:	4c17      	ldr	r4, [pc, #92]	; (4a40 <_sercom_get_async_baud_val+0x90>)
    49e4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    49e6:	2200      	movs	r2, #0
    49e8:	2301      	movs	r3, #1
    49ea:	1a12      	subs	r2, r2, r0
    49ec:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    49ee:	0c12      	lsrs	r2, r2, #16
    49f0:	041b      	lsls	r3, r3, #16
    49f2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    49f4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    49f6:	2200      	movs	r2, #0
    49f8:	e7e5      	b.n	49c6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    49fa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    49fc:	2b01      	cmp	r3, #1
    49fe:	d1f9      	bne.n	49f4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4a00:	000a      	movs	r2, r1
    4a02:	2300      	movs	r3, #0
    4a04:	2100      	movs	r1, #0
    4a06:	4c0d      	ldr	r4, [pc, #52]	; (4a3c <_sercom_get_async_baud_val+0x8c>)
    4a08:	47a0      	blx	r4
    4a0a:	0002      	movs	r2, r0
    4a0c:	000b      	movs	r3, r1
    4a0e:	9200      	str	r2, [sp, #0]
    4a10:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4a12:	0038      	movs	r0, r7
    4a14:	2100      	movs	r1, #0
    4a16:	4c0a      	ldr	r4, [pc, #40]	; (4a40 <_sercom_get_async_baud_val+0x90>)
    4a18:	47a0      	blx	r4
    4a1a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4a1c:	2380      	movs	r3, #128	; 0x80
    4a1e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a20:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4a22:	4298      	cmp	r0, r3
    4a24:	d8cf      	bhi.n	49c6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4a26:	0f79      	lsrs	r1, r7, #29
    4a28:	00f8      	lsls	r0, r7, #3
    4a2a:	9a00      	ldr	r2, [sp, #0]
    4a2c:	9b01      	ldr	r3, [sp, #4]
    4a2e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4a30:	00ea      	lsls	r2, r5, #3
    4a32:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4a34:	b2d2      	uxtb	r2, r2
    4a36:	0352      	lsls	r2, r2, #13
    4a38:	432a      	orrs	r2, r5
    4a3a:	e7db      	b.n	49f4 <_sercom_get_async_baud_val+0x44>
    4a3c:	0000a0d5 	.word	0x0000a0d5
    4a40:	000048cd 	.word	0x000048cd

00004a44 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4a44:	b510      	push	{r4, lr}
    4a46:	b082      	sub	sp, #8
    4a48:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4a4a:	4b0e      	ldr	r3, [pc, #56]	; (4a84 <sercom_set_gclk_generator+0x40>)
    4a4c:	781b      	ldrb	r3, [r3, #0]
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d007      	beq.n	4a62 <sercom_set_gclk_generator+0x1e>
    4a52:	2900      	cmp	r1, #0
    4a54:	d105      	bne.n	4a62 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4a56:	4b0b      	ldr	r3, [pc, #44]	; (4a84 <sercom_set_gclk_generator+0x40>)
    4a58:	785b      	ldrb	r3, [r3, #1]
    4a5a:	4283      	cmp	r3, r0
    4a5c:	d010      	beq.n	4a80 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4a5e:	201d      	movs	r0, #29
    4a60:	e00c      	b.n	4a7c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4a62:	a901      	add	r1, sp, #4
    4a64:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4a66:	2013      	movs	r0, #19
    4a68:	4b07      	ldr	r3, [pc, #28]	; (4a88 <sercom_set_gclk_generator+0x44>)
    4a6a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4a6c:	2013      	movs	r0, #19
    4a6e:	4b07      	ldr	r3, [pc, #28]	; (4a8c <sercom_set_gclk_generator+0x48>)
    4a70:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4a72:	4b04      	ldr	r3, [pc, #16]	; (4a84 <sercom_set_gclk_generator+0x40>)
    4a74:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4a76:	2201      	movs	r2, #1
    4a78:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4a7a:	2000      	movs	r0, #0
}
    4a7c:	b002      	add	sp, #8
    4a7e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4a80:	2000      	movs	r0, #0
    4a82:	e7fb      	b.n	4a7c <sercom_set_gclk_generator+0x38>
    4a84:	20000398 	.word	0x20000398
    4a88:	00005fbd 	.word	0x00005fbd
    4a8c:	00005f31 	.word	0x00005f31

00004a90 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4a90:	4b40      	ldr	r3, [pc, #256]	; (4b94 <_sercom_get_default_pad+0x104>)
    4a92:	4298      	cmp	r0, r3
    4a94:	d031      	beq.n	4afa <_sercom_get_default_pad+0x6a>
    4a96:	d90a      	bls.n	4aae <_sercom_get_default_pad+0x1e>
    4a98:	4b3f      	ldr	r3, [pc, #252]	; (4b98 <_sercom_get_default_pad+0x108>)
    4a9a:	4298      	cmp	r0, r3
    4a9c:	d04d      	beq.n	4b3a <_sercom_get_default_pad+0xaa>
    4a9e:	4b3f      	ldr	r3, [pc, #252]	; (4b9c <_sercom_get_default_pad+0x10c>)
    4aa0:	4298      	cmp	r0, r3
    4aa2:	d05a      	beq.n	4b5a <_sercom_get_default_pad+0xca>
    4aa4:	4b3e      	ldr	r3, [pc, #248]	; (4ba0 <_sercom_get_default_pad+0x110>)
    4aa6:	4298      	cmp	r0, r3
    4aa8:	d037      	beq.n	4b1a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4aaa:	2000      	movs	r0, #0
}
    4aac:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4aae:	4b3d      	ldr	r3, [pc, #244]	; (4ba4 <_sercom_get_default_pad+0x114>)
    4ab0:	4298      	cmp	r0, r3
    4ab2:	d00c      	beq.n	4ace <_sercom_get_default_pad+0x3e>
    4ab4:	4b3c      	ldr	r3, [pc, #240]	; (4ba8 <_sercom_get_default_pad+0x118>)
    4ab6:	4298      	cmp	r0, r3
    4ab8:	d1f7      	bne.n	4aaa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4aba:	2901      	cmp	r1, #1
    4abc:	d017      	beq.n	4aee <_sercom_get_default_pad+0x5e>
    4abe:	2900      	cmp	r1, #0
    4ac0:	d05d      	beq.n	4b7e <_sercom_get_default_pad+0xee>
    4ac2:	2902      	cmp	r1, #2
    4ac4:	d015      	beq.n	4af2 <_sercom_get_default_pad+0x62>
    4ac6:	2903      	cmp	r1, #3
    4ac8:	d015      	beq.n	4af6 <_sercom_get_default_pad+0x66>
	return 0;
    4aca:	2000      	movs	r0, #0
    4acc:	e7ee      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ace:	2901      	cmp	r1, #1
    4ad0:	d007      	beq.n	4ae2 <_sercom_get_default_pad+0x52>
    4ad2:	2900      	cmp	r1, #0
    4ad4:	d051      	beq.n	4b7a <_sercom_get_default_pad+0xea>
    4ad6:	2902      	cmp	r1, #2
    4ad8:	d005      	beq.n	4ae6 <_sercom_get_default_pad+0x56>
    4ada:	2903      	cmp	r1, #3
    4adc:	d005      	beq.n	4aea <_sercom_get_default_pad+0x5a>
	return 0;
    4ade:	2000      	movs	r0, #0
    4ae0:	e7e4      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ae2:	4832      	ldr	r0, [pc, #200]	; (4bac <_sercom_get_default_pad+0x11c>)
    4ae4:	e7e2      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4ae6:	4832      	ldr	r0, [pc, #200]	; (4bb0 <_sercom_get_default_pad+0x120>)
    4ae8:	e7e0      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4aea:	4832      	ldr	r0, [pc, #200]	; (4bb4 <_sercom_get_default_pad+0x124>)
    4aec:	e7de      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4aee:	4832      	ldr	r0, [pc, #200]	; (4bb8 <_sercom_get_default_pad+0x128>)
    4af0:	e7dc      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4af2:	4832      	ldr	r0, [pc, #200]	; (4bbc <_sercom_get_default_pad+0x12c>)
    4af4:	e7da      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4af6:	4832      	ldr	r0, [pc, #200]	; (4bc0 <_sercom_get_default_pad+0x130>)
    4af8:	e7d8      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4afa:	2901      	cmp	r1, #1
    4afc:	d007      	beq.n	4b0e <_sercom_get_default_pad+0x7e>
    4afe:	2900      	cmp	r1, #0
    4b00:	d03f      	beq.n	4b82 <_sercom_get_default_pad+0xf2>
    4b02:	2902      	cmp	r1, #2
    4b04:	d005      	beq.n	4b12 <_sercom_get_default_pad+0x82>
    4b06:	2903      	cmp	r1, #3
    4b08:	d005      	beq.n	4b16 <_sercom_get_default_pad+0x86>
	return 0;
    4b0a:	2000      	movs	r0, #0
    4b0c:	e7ce      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b0e:	482d      	ldr	r0, [pc, #180]	; (4bc4 <_sercom_get_default_pad+0x134>)
    4b10:	e7cc      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b12:	482d      	ldr	r0, [pc, #180]	; (4bc8 <_sercom_get_default_pad+0x138>)
    4b14:	e7ca      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b16:	482d      	ldr	r0, [pc, #180]	; (4bcc <_sercom_get_default_pad+0x13c>)
    4b18:	e7c8      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b1a:	2901      	cmp	r1, #1
    4b1c:	d007      	beq.n	4b2e <_sercom_get_default_pad+0x9e>
    4b1e:	2900      	cmp	r1, #0
    4b20:	d031      	beq.n	4b86 <_sercom_get_default_pad+0xf6>
    4b22:	2902      	cmp	r1, #2
    4b24:	d005      	beq.n	4b32 <_sercom_get_default_pad+0xa2>
    4b26:	2903      	cmp	r1, #3
    4b28:	d005      	beq.n	4b36 <_sercom_get_default_pad+0xa6>
	return 0;
    4b2a:	2000      	movs	r0, #0
    4b2c:	e7be      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b2e:	4828      	ldr	r0, [pc, #160]	; (4bd0 <_sercom_get_default_pad+0x140>)
    4b30:	e7bc      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b32:	4828      	ldr	r0, [pc, #160]	; (4bd4 <_sercom_get_default_pad+0x144>)
    4b34:	e7ba      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b36:	4828      	ldr	r0, [pc, #160]	; (4bd8 <_sercom_get_default_pad+0x148>)
    4b38:	e7b8      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b3a:	2901      	cmp	r1, #1
    4b3c:	d007      	beq.n	4b4e <_sercom_get_default_pad+0xbe>
    4b3e:	2900      	cmp	r1, #0
    4b40:	d023      	beq.n	4b8a <_sercom_get_default_pad+0xfa>
    4b42:	2902      	cmp	r1, #2
    4b44:	d005      	beq.n	4b52 <_sercom_get_default_pad+0xc2>
    4b46:	2903      	cmp	r1, #3
    4b48:	d005      	beq.n	4b56 <_sercom_get_default_pad+0xc6>
	return 0;
    4b4a:	2000      	movs	r0, #0
    4b4c:	e7ae      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b4e:	4823      	ldr	r0, [pc, #140]	; (4bdc <_sercom_get_default_pad+0x14c>)
    4b50:	e7ac      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b52:	4823      	ldr	r0, [pc, #140]	; (4be0 <_sercom_get_default_pad+0x150>)
    4b54:	e7aa      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b56:	4823      	ldr	r0, [pc, #140]	; (4be4 <_sercom_get_default_pad+0x154>)
    4b58:	e7a8      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b5a:	2901      	cmp	r1, #1
    4b5c:	d007      	beq.n	4b6e <_sercom_get_default_pad+0xde>
    4b5e:	2900      	cmp	r1, #0
    4b60:	d015      	beq.n	4b8e <_sercom_get_default_pad+0xfe>
    4b62:	2902      	cmp	r1, #2
    4b64:	d005      	beq.n	4b72 <_sercom_get_default_pad+0xe2>
    4b66:	2903      	cmp	r1, #3
    4b68:	d005      	beq.n	4b76 <_sercom_get_default_pad+0xe6>
	return 0;
    4b6a:	2000      	movs	r0, #0
    4b6c:	e79e      	b.n	4aac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b6e:	481e      	ldr	r0, [pc, #120]	; (4be8 <_sercom_get_default_pad+0x158>)
    4b70:	e79c      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b72:	481e      	ldr	r0, [pc, #120]	; (4bec <_sercom_get_default_pad+0x15c>)
    4b74:	e79a      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b76:	481e      	ldr	r0, [pc, #120]	; (4bf0 <_sercom_get_default_pad+0x160>)
    4b78:	e798      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b7a:	481e      	ldr	r0, [pc, #120]	; (4bf4 <_sercom_get_default_pad+0x164>)
    4b7c:	e796      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b7e:	2003      	movs	r0, #3
    4b80:	e794      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b82:	481d      	ldr	r0, [pc, #116]	; (4bf8 <_sercom_get_default_pad+0x168>)
    4b84:	e792      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b86:	481d      	ldr	r0, [pc, #116]	; (4bfc <_sercom_get_default_pad+0x16c>)
    4b88:	e790      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b8a:	481d      	ldr	r0, [pc, #116]	; (4c00 <_sercom_get_default_pad+0x170>)
    4b8c:	e78e      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b8e:	481d      	ldr	r0, [pc, #116]	; (4c04 <_sercom_get_default_pad+0x174>)
    4b90:	e78c      	b.n	4aac <_sercom_get_default_pad+0x1c>
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	42001000 	.word	0x42001000
    4b98:	42001800 	.word	0x42001800
    4b9c:	42001c00 	.word	0x42001c00
    4ba0:	42001400 	.word	0x42001400
    4ba4:	42000800 	.word	0x42000800
    4ba8:	42000c00 	.word	0x42000c00
    4bac:	00050003 	.word	0x00050003
    4bb0:	00060003 	.word	0x00060003
    4bb4:	00070003 	.word	0x00070003
    4bb8:	00010003 	.word	0x00010003
    4bbc:	001e0003 	.word	0x001e0003
    4bc0:	001f0003 	.word	0x001f0003
    4bc4:	00090003 	.word	0x00090003
    4bc8:	000a0003 	.word	0x000a0003
    4bcc:	000b0003 	.word	0x000b0003
    4bd0:	00110003 	.word	0x00110003
    4bd4:	00120003 	.word	0x00120003
    4bd8:	00130003 	.word	0x00130003
    4bdc:	000d0003 	.word	0x000d0003
    4be0:	000e0003 	.word	0x000e0003
    4be4:	000f0003 	.word	0x000f0003
    4be8:	00170003 	.word	0x00170003
    4bec:	00180003 	.word	0x00180003
    4bf0:	00190003 	.word	0x00190003
    4bf4:	00040003 	.word	0x00040003
    4bf8:	00080003 	.word	0x00080003
    4bfc:	00100003 	.word	0x00100003
    4c00:	000c0003 	.word	0x000c0003
    4c04:	00160003 	.word	0x00160003

00004c08 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4c08:	b530      	push	{r4, r5, lr}
    4c0a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4c0c:	4b0b      	ldr	r3, [pc, #44]	; (4c3c <_sercom_get_sercom_inst_index+0x34>)
    4c0e:	466a      	mov	r2, sp
    4c10:	cb32      	ldmia	r3!, {r1, r4, r5}
    4c12:	c232      	stmia	r2!, {r1, r4, r5}
    4c14:	cb32      	ldmia	r3!, {r1, r4, r5}
    4c16:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4c18:	9b00      	ldr	r3, [sp, #0]
    4c1a:	4283      	cmp	r3, r0
    4c1c:	d00b      	beq.n	4c36 <_sercom_get_sercom_inst_index+0x2e>
    4c1e:	2301      	movs	r3, #1
    4c20:	009a      	lsls	r2, r3, #2
    4c22:	4669      	mov	r1, sp
    4c24:	5852      	ldr	r2, [r2, r1]
    4c26:	4282      	cmp	r2, r0
    4c28:	d006      	beq.n	4c38 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4c2a:	3301      	adds	r3, #1
    4c2c:	2b06      	cmp	r3, #6
    4c2e:	d1f7      	bne.n	4c20 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4c30:	2000      	movs	r0, #0
}
    4c32:	b007      	add	sp, #28
    4c34:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4c36:	2300      	movs	r3, #0
			return i;
    4c38:	b2d8      	uxtb	r0, r3
    4c3a:	e7fa      	b.n	4c32 <_sercom_get_sercom_inst_index+0x2a>
    4c3c:	0000c7b4 	.word	0x0000c7b4

00004c40 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4c40:	4770      	bx	lr
	...

00004c44 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4c46:	4b0a      	ldr	r3, [pc, #40]	; (4c70 <_sercom_set_handler+0x2c>)
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d10c      	bne.n	4c68 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4c4e:	4f09      	ldr	r7, [pc, #36]	; (4c74 <_sercom_set_handler+0x30>)
    4c50:	4e09      	ldr	r6, [pc, #36]	; (4c78 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4c52:	4d0a      	ldr	r5, [pc, #40]	; (4c7c <_sercom_set_handler+0x38>)
    4c54:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4c56:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4c58:	195a      	adds	r2, r3, r5
    4c5a:	6014      	str	r4, [r2, #0]
    4c5c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4c5e:	2b18      	cmp	r3, #24
    4c60:	d1f9      	bne.n	4c56 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4c62:	2201      	movs	r2, #1
    4c64:	4b02      	ldr	r3, [pc, #8]	; (4c70 <_sercom_set_handler+0x2c>)
    4c66:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4c68:	0080      	lsls	r0, r0, #2
    4c6a:	4b02      	ldr	r3, [pc, #8]	; (4c74 <_sercom_set_handler+0x30>)
    4c6c:	50c1      	str	r1, [r0, r3]
}
    4c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c70:	2000039a 	.word	0x2000039a
    4c74:	2000039c 	.word	0x2000039c
    4c78:	00004c41 	.word	0x00004c41
    4c7c:	200005f0 	.word	0x200005f0

00004c80 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4c80:	b500      	push	{lr}
    4c82:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4c84:	2309      	movs	r3, #9
    4c86:	466a      	mov	r2, sp
    4c88:	7013      	strb	r3, [r2, #0]
    4c8a:	3301      	adds	r3, #1
    4c8c:	7053      	strb	r3, [r2, #1]
    4c8e:	3301      	adds	r3, #1
    4c90:	7093      	strb	r3, [r2, #2]
    4c92:	3301      	adds	r3, #1
    4c94:	70d3      	strb	r3, [r2, #3]
    4c96:	3301      	adds	r3, #1
    4c98:	7113      	strb	r3, [r2, #4]
    4c9a:	3301      	adds	r3, #1
    4c9c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4c9e:	4b03      	ldr	r3, [pc, #12]	; (4cac <_sercom_get_interrupt_vector+0x2c>)
    4ca0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4ca2:	466b      	mov	r3, sp
    4ca4:	5618      	ldrsb	r0, [r3, r0]
}
    4ca6:	b003      	add	sp, #12
    4ca8:	bd00      	pop	{pc}
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	00004c09 	.word	0x00004c09

00004cb0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4cb0:	b510      	push	{r4, lr}
    4cb2:	4b02      	ldr	r3, [pc, #8]	; (4cbc <SERCOM0_Handler+0xc>)
    4cb4:	681b      	ldr	r3, [r3, #0]
    4cb6:	2000      	movs	r0, #0
    4cb8:	4798      	blx	r3
    4cba:	bd10      	pop	{r4, pc}
    4cbc:	2000039c 	.word	0x2000039c

00004cc0 <SERCOM1_Handler>:
    4cc0:	b510      	push	{r4, lr}
    4cc2:	4b02      	ldr	r3, [pc, #8]	; (4ccc <SERCOM1_Handler+0xc>)
    4cc4:	685b      	ldr	r3, [r3, #4]
    4cc6:	2001      	movs	r0, #1
    4cc8:	4798      	blx	r3
    4cca:	bd10      	pop	{r4, pc}
    4ccc:	2000039c 	.word	0x2000039c

00004cd0 <SERCOM2_Handler>:
    4cd0:	b510      	push	{r4, lr}
    4cd2:	4b02      	ldr	r3, [pc, #8]	; (4cdc <SERCOM2_Handler+0xc>)
    4cd4:	689b      	ldr	r3, [r3, #8]
    4cd6:	2002      	movs	r0, #2
    4cd8:	4798      	blx	r3
    4cda:	bd10      	pop	{r4, pc}
    4cdc:	2000039c 	.word	0x2000039c

00004ce0 <SERCOM3_Handler>:
    4ce0:	b510      	push	{r4, lr}
    4ce2:	4b02      	ldr	r3, [pc, #8]	; (4cec <SERCOM3_Handler+0xc>)
    4ce4:	68db      	ldr	r3, [r3, #12]
    4ce6:	2003      	movs	r0, #3
    4ce8:	4798      	blx	r3
    4cea:	bd10      	pop	{r4, pc}
    4cec:	2000039c 	.word	0x2000039c

00004cf0 <SERCOM4_Handler>:
    4cf0:	b510      	push	{r4, lr}
    4cf2:	4b02      	ldr	r3, [pc, #8]	; (4cfc <SERCOM4_Handler+0xc>)
    4cf4:	691b      	ldr	r3, [r3, #16]
    4cf6:	2004      	movs	r0, #4
    4cf8:	4798      	blx	r3
    4cfa:	bd10      	pop	{r4, pc}
    4cfc:	2000039c 	.word	0x2000039c

00004d00 <SERCOM5_Handler>:
    4d00:	b510      	push	{r4, lr}
    4d02:	4b02      	ldr	r3, [pc, #8]	; (4d0c <SERCOM5_Handler+0xc>)
    4d04:	695b      	ldr	r3, [r3, #20]
    4d06:	2005      	movs	r0, #5
    4d08:	4798      	blx	r3
    4d0a:	bd10      	pop	{r4, pc}
    4d0c:	2000039c 	.word	0x2000039c

00004d10 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4d10:	b570      	push	{r4, r5, r6, lr}
    4d12:	b082      	sub	sp, #8
    4d14:	0005      	movs	r5, r0
    4d16:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4d18:	2200      	movs	r2, #0
    4d1a:	466b      	mov	r3, sp
    4d1c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4d1e:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4d20:	0030      	movs	r0, r6
    4d22:	4b24      	ldr	r3, [pc, #144]	; (4db4 <spi_set_baudrate+0xa4>)
    4d24:	4798      	blx	r3
    4d26:	231f      	movs	r3, #31
    4d28:	4018      	ands	r0, r3
    4d2a:	3b1e      	subs	r3, #30
    4d2c:	4083      	lsls	r3, r0
    4d2e:	2280      	movs	r2, #128	; 0x80
    4d30:	4921      	ldr	r1, [pc, #132]	; (4db8 <spi_set_baudrate+0xa8>)
    4d32:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d34:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d36:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d1fc      	bne.n	4d36 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4d3c:	338f      	adds	r3, #143	; 0x8f
    4d3e:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4d40:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4d42:	6833      	ldr	r3, [r6, #0]
    4d44:	2202      	movs	r2, #2
    4d46:	4393      	bics	r3, r2
    4d48:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d4a:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d4c:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d1fc      	bne.n	4d4c <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d52:	4b1a      	ldr	r3, [pc, #104]	; (4dbc <spi_set_baudrate+0xac>)
    4d54:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d56:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4d58:	b2c0      	uxtb	r0, r0
    4d5a:	4b19      	ldr	r3, [pc, #100]	; (4dc0 <spi_set_baudrate+0xb0>)
    4d5c:	4798      	blx	r3
    4d5e:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4d60:	466b      	mov	r3, sp
    4d62:	1d9a      	adds	r2, r3, #6
    4d64:	0020      	movs	r0, r4
    4d66:	4b17      	ldr	r3, [pc, #92]	; (4dc4 <spi_set_baudrate+0xb4>)
    4d68:	4798      	blx	r3
    4d6a:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4d6c:	d003      	beq.n	4d76 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4d6e:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4d70:	0020      	movs	r0, r4
    4d72:	b002      	add	sp, #8
    4d74:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4d76:	466b      	mov	r3, sp
    4d78:	3306      	adds	r3, #6
    4d7a:	781b      	ldrb	r3, [r3, #0]
    4d7c:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d7e:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d80:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    4d82:	2b00      	cmp	r3, #0
    4d84:	d1fc      	bne.n	4d80 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4d86:	0030      	movs	r0, r6
    4d88:	4b0a      	ldr	r3, [pc, #40]	; (4db4 <spi_set_baudrate+0xa4>)
    4d8a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4d8c:	231f      	movs	r3, #31
    4d8e:	4018      	ands	r0, r3
    4d90:	3b1e      	subs	r3, #30
    4d92:	4083      	lsls	r3, r0
    4d94:	4a08      	ldr	r2, [pc, #32]	; (4db8 <spi_set_baudrate+0xa8>)
    4d96:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d98:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d9a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d1fc      	bne.n	4d9a <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4da0:	6833      	ldr	r3, [r6, #0]
    4da2:	2202      	movs	r2, #2
    4da4:	4313      	orrs	r3, r2
    4da6:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4da8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4daa:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4dac:	2b00      	cmp	r3, #0
    4dae:	d1fc      	bne.n	4daa <spi_set_baudrate+0x9a>
    4db0:	e7de      	b.n	4d70 <spi_set_baudrate+0x60>
    4db2:	46c0      	nop			; (mov r8, r8)
    4db4:	00004c81 	.word	0x00004c81
    4db8:	e000e100 	.word	0xe000e100
    4dbc:	00004c09 	.word	0x00004c09
    4dc0:	00005fd9 	.word	0x00005fd9
    4dc4:	00004987 	.word	0x00004987

00004dc8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dca:	b08b      	sub	sp, #44	; 0x2c
    4dcc:	0005      	movs	r5, r0
    4dce:	000c      	movs	r4, r1
    4dd0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4dd2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4dd4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4dd6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4dd8:	079b      	lsls	r3, r3, #30
    4dda:	d501      	bpl.n	4de0 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4ddc:	b00b      	add	sp, #44	; 0x2c
    4dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4de0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4de2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4de4:	07db      	lsls	r3, r3, #31
    4de6:	d4f9      	bmi.n	4ddc <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4de8:	0008      	movs	r0, r1
    4dea:	4b60      	ldr	r3, [pc, #384]	; (4f6c <spi_init+0x1a4>)
    4dec:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4dee:	4a60      	ldr	r2, [pc, #384]	; (4f70 <spi_init+0x1a8>)
    4df0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4df2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4df4:	2301      	movs	r3, #1
    4df6:	40bb      	lsls	r3, r7
    4df8:	430b      	orrs	r3, r1
    4dfa:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4dfc:	a909      	add	r1, sp, #36	; 0x24
    4dfe:	2724      	movs	r7, #36	; 0x24
    4e00:	5df3      	ldrb	r3, [r6, r7]
    4e02:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e04:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e06:	b2c3      	uxtb	r3, r0
    4e08:	9301      	str	r3, [sp, #4]
    4e0a:	0018      	movs	r0, r3
    4e0c:	4b59      	ldr	r3, [pc, #356]	; (4f74 <spi_init+0x1ac>)
    4e0e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e10:	9801      	ldr	r0, [sp, #4]
    4e12:	4b59      	ldr	r3, [pc, #356]	; (4f78 <spi_init+0x1b0>)
    4e14:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e16:	5df0      	ldrb	r0, [r6, r7]
    4e18:	2100      	movs	r1, #0
    4e1a:	4b58      	ldr	r3, [pc, #352]	; (4f7c <spi_init+0x1b4>)
    4e1c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4e1e:	7833      	ldrb	r3, [r6, #0]
    4e20:	2b01      	cmp	r3, #1
    4e22:	d038      	beq.n	4e96 <spi_init+0xce>
    4e24:	002b      	movs	r3, r5
    4e26:	330c      	adds	r3, #12
    4e28:	0029      	movs	r1, r5
    4e2a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4e2c:	2200      	movs	r2, #0
    4e2e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4e30:	428b      	cmp	r3, r1
    4e32:	d1fc      	bne.n	4e2e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4e34:	2300      	movs	r3, #0
    4e36:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4e38:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4e3a:	2400      	movs	r4, #0
    4e3c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4e3e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4e40:	3336      	adds	r3, #54	; 0x36
    4e42:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4e44:	3301      	adds	r3, #1
    4e46:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4e48:	3301      	adds	r3, #1
    4e4a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4e4c:	3b35      	subs	r3, #53	; 0x35
    4e4e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4e50:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4e52:	6828      	ldr	r0, [r5, #0]
    4e54:	4b45      	ldr	r3, [pc, #276]	; (4f6c <spi_init+0x1a4>)
    4e56:	4798      	blx	r3
    4e58:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4e5a:	4949      	ldr	r1, [pc, #292]	; (4f80 <spi_init+0x1b8>)
    4e5c:	4b49      	ldr	r3, [pc, #292]	; (4f84 <spi_init+0x1bc>)
    4e5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4e60:	00bf      	lsls	r7, r7, #2
    4e62:	4b49      	ldr	r3, [pc, #292]	; (4f88 <spi_init+0x1c0>)
    4e64:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e66:	682f      	ldr	r7, [r5, #0]
    4e68:	ab04      	add	r3, sp, #16
    4e6a:	2280      	movs	r2, #128	; 0x80
    4e6c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e6e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e70:	3a7f      	subs	r2, #127	; 0x7f
    4e72:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4e74:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4e76:	7833      	ldrb	r3, [r6, #0]
    4e78:	2b00      	cmp	r3, #0
    4e7a:	d102      	bne.n	4e82 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4e7c:	2200      	movs	r2, #0
    4e7e:	ab04      	add	r3, sp, #16
    4e80:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4e82:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4e84:	9305      	str	r3, [sp, #20]
    4e86:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4e88:	9306      	str	r3, [sp, #24]
    4e8a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4e8c:	9307      	str	r3, [sp, #28]
    4e8e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4e90:	9308      	str	r3, [sp, #32]
    4e92:	2400      	movs	r4, #0
    4e94:	e00b      	b.n	4eae <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4e96:	6823      	ldr	r3, [r4, #0]
    4e98:	220c      	movs	r2, #12
    4e9a:	4313      	orrs	r3, r2
    4e9c:	6023      	str	r3, [r4, #0]
    4e9e:	e7c1      	b.n	4e24 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4ea0:	0038      	movs	r0, r7
    4ea2:	4b3a      	ldr	r3, [pc, #232]	; (4f8c <spi_init+0x1c4>)
    4ea4:	4798      	blx	r3
    4ea6:	e00a      	b.n	4ebe <spi_init+0xf6>
    4ea8:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4eaa:	2c04      	cmp	r4, #4
    4eac:	d010      	beq.n	4ed0 <spi_init+0x108>
    4eae:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4eb0:	00a3      	lsls	r3, r4, #2
    4eb2:	aa02      	add	r2, sp, #8
    4eb4:	200c      	movs	r0, #12
    4eb6:	1812      	adds	r2, r2, r0
    4eb8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4eba:	2800      	cmp	r0, #0
    4ebc:	d0f0      	beq.n	4ea0 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4ebe:	1c43      	adds	r3, r0, #1
    4ec0:	d0f2      	beq.n	4ea8 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4ec2:	a904      	add	r1, sp, #16
    4ec4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4ec6:	0c00      	lsrs	r0, r0, #16
    4ec8:	b2c0      	uxtb	r0, r0
    4eca:	4b31      	ldr	r3, [pc, #196]	; (4f90 <spi_init+0x1c8>)
    4ecc:	4798      	blx	r3
    4ece:	e7eb      	b.n	4ea8 <spi_init+0xe0>
	module->mode             = config->mode;
    4ed0:	7833      	ldrb	r3, [r6, #0]
    4ed2:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4ed4:	7c33      	ldrb	r3, [r6, #16]
    4ed6:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4ed8:	7cb3      	ldrb	r3, [r6, #18]
    4eda:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4edc:	7d33      	ldrb	r3, [r6, #20]
    4ede:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4ee0:	2200      	movs	r2, #0
    4ee2:	ab02      	add	r3, sp, #8
    4ee4:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4ee6:	7833      	ldrb	r3, [r6, #0]
    4ee8:	2b01      	cmp	r3, #1
    4eea:	d028      	beq.n	4f3e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4eec:	6873      	ldr	r3, [r6, #4]
    4eee:	68b2      	ldr	r2, [r6, #8]
    4ef0:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4ef2:	68f2      	ldr	r2, [r6, #12]
    4ef4:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4ef6:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4ef8:	7c72      	ldrb	r2, [r6, #17]
    4efa:	2a00      	cmp	r2, #0
    4efc:	d103      	bne.n	4f06 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4efe:	4a25      	ldr	r2, [pc, #148]	; (4f94 <spi_init+0x1cc>)
    4f00:	7892      	ldrb	r2, [r2, #2]
    4f02:	0792      	lsls	r2, r2, #30
    4f04:	d501      	bpl.n	4f0a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4f06:	2280      	movs	r2, #128	; 0x80
    4f08:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4f0a:	7cb2      	ldrb	r2, [r6, #18]
    4f0c:	2a00      	cmp	r2, #0
    4f0e:	d002      	beq.n	4f16 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4f10:	2280      	movs	r2, #128	; 0x80
    4f12:	0292      	lsls	r2, r2, #10
    4f14:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4f16:	7cf2      	ldrb	r2, [r6, #19]
    4f18:	2a00      	cmp	r2, #0
    4f1a:	d002      	beq.n	4f22 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4f1c:	2280      	movs	r2, #128	; 0x80
    4f1e:	0092      	lsls	r2, r2, #2
    4f20:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4f22:	7d32      	ldrb	r2, [r6, #20]
    4f24:	2a00      	cmp	r2, #0
    4f26:	d002      	beq.n	4f2e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4f28:	2280      	movs	r2, #128	; 0x80
    4f2a:	0192      	lsls	r2, r2, #6
    4f2c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4f2e:	683a      	ldr	r2, [r7, #0]
    4f30:	4313      	orrs	r3, r2
    4f32:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	430b      	orrs	r3, r1
    4f38:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4f3a:	2000      	movs	r0, #0
    4f3c:	e74e      	b.n	4ddc <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f3e:	6828      	ldr	r0, [r5, #0]
    4f40:	4b0a      	ldr	r3, [pc, #40]	; (4f6c <spi_init+0x1a4>)
    4f42:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f44:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4f46:	b2c0      	uxtb	r0, r0
    4f48:	4b13      	ldr	r3, [pc, #76]	; (4f98 <spi_init+0x1d0>)
    4f4a:	4798      	blx	r3
    4f4c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4f4e:	ab02      	add	r3, sp, #8
    4f50:	1d9a      	adds	r2, r3, #6
    4f52:	69b0      	ldr	r0, [r6, #24]
    4f54:	4b11      	ldr	r3, [pc, #68]	; (4f9c <spi_init+0x1d4>)
    4f56:	4798      	blx	r3
    4f58:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4f5a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	d000      	beq.n	4f62 <spi_init+0x19a>
    4f60:	e73c      	b.n	4ddc <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4f62:	ab02      	add	r3, sp, #8
    4f64:	3306      	adds	r3, #6
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	733b      	strb	r3, [r7, #12]
    4f6a:	e7bf      	b.n	4eec <spi_init+0x124>
    4f6c:	00004c09 	.word	0x00004c09
    4f70:	40000400 	.word	0x40000400
    4f74:	00005fbd 	.word	0x00005fbd
    4f78:	00005f31 	.word	0x00005f31
    4f7c:	00004a45 	.word	0x00004a45
    4f80:	00005235 	.word	0x00005235
    4f84:	00004c45 	.word	0x00004c45
    4f88:	200005f0 	.word	0x200005f0
    4f8c:	00004a91 	.word	0x00004a91
    4f90:	000060b5 	.word	0x000060b5
    4f94:	41002000 	.word	0x41002000
    4f98:	00005fd9 	.word	0x00005fd9
    4f9c:	00004987 	.word	0x00004987

00004fa0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fa2:	46d6      	mov	lr, sl
    4fa4:	4647      	mov	r7, r8
    4fa6:	b580      	push	{r7, lr}
    4fa8:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4faa:	2438      	movs	r4, #56	; 0x38
    4fac:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4fae:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4fb0:	2d05      	cmp	r5, #5
    4fb2:	d002      	beq.n	4fba <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4fb4:	3412      	adds	r4, #18
	if (length == 0) {
    4fb6:	2a00      	cmp	r2, #0
    4fb8:	d105      	bne.n	4fc6 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    4fba:	0020      	movs	r0, r4
    4fbc:	b003      	add	sp, #12
    4fbe:	bc0c      	pop	{r2, r3}
    4fc0:	4690      	mov	r8, r2
    4fc2:	469a      	mov	sl, r3
    4fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4fc6:	79c4      	ldrb	r4, [r0, #7]
    4fc8:	2c00      	cmp	r4, #0
    4fca:	d144      	bne.n	5056 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    4fcc:	341c      	adds	r4, #28
    4fce:	e7f4      	b.n	4fba <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fd0:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fd2:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    4fd4:	423c      	tst	r4, r7
    4fd6:	d0fc      	beq.n	4fd2 <spi_read_buffer_wait+0x32>
    4fd8:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    4fda:	423c      	tst	r4, r7
    4fdc:	d01a      	beq.n	5014 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fde:	4644      	mov	r4, r8
    4fe0:	62ac      	str	r4, [r5, #40]	; 0x28
    4fe2:	e017      	b.n	5014 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4fe4:	7984      	ldrb	r4, [r0, #6]
    4fe6:	2c01      	cmp	r4, #1
    4fe8:	d026      	beq.n	5038 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4fea:	6aad      	ldr	r5, [r5, #40]	; 0x28
    4fec:	b2ec      	uxtb	r4, r5
    4fee:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    4ff0:	9c01      	ldr	r4, [sp, #4]
    4ff2:	2c00      	cmp	r4, #0
    4ff4:	d13a      	bne.n	506c <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    4ff6:	1c75      	adds	r5, r6, #1
    4ff8:	b2ad      	uxth	r5, r5
    4ffa:	4664      	mov	r4, ip
    4ffc:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ffe:	7984      	ldrb	r4, [r0, #6]
    5000:	2c01      	cmp	r4, #1
    5002:	d01e      	beq.n	5042 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    5004:	002e      	movs	r6, r5
	while (length--) {
    5006:	3a01      	subs	r2, #1
    5008:	b292      	uxth	r2, r2
    500a:	4552      	cmp	r2, sl
    500c:	d01f      	beq.n	504e <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    500e:	7944      	ldrb	r4, [r0, #5]
    5010:	2c01      	cmp	r4, #1
    5012:	d0dd      	beq.n	4fd0 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5014:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5016:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    5018:	421c      	tst	r4, r3
    501a:	d0fc      	beq.n	5016 <spi_read_buffer_wait+0x76>
    501c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    501e:	421c      	tst	r4, r3
    5020:	d017      	beq.n	5052 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5022:	8b6c      	ldrh	r4, [r5, #26]
    5024:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    5026:	2400      	movs	r4, #0
    5028:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    502a:	4664      	mov	r4, ip
    502c:	421c      	tst	r4, r3
    502e:	d0d9      	beq.n	4fe4 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5030:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    5032:	241e      	movs	r4, #30
    5034:	9401      	str	r4, [sp, #4]
    5036:	e7d5      	b.n	4fe4 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5038:	6aac      	ldr	r4, [r5, #40]	; 0x28
    503a:	05e4      	lsls	r4, r4, #23
    503c:	0de4      	lsrs	r4, r4, #23
    503e:	46a4      	mov	ip, r4
    5040:	e7d6      	b.n	4ff0 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    5042:	3602      	adds	r6, #2
    5044:	b2b6      	uxth	r6, r6
    5046:	4664      	mov	r4, ip
    5048:	0a24      	lsrs	r4, r4, #8
    504a:	554c      	strb	r4, [r1, r5]
    504c:	e7db      	b.n	5006 <spi_read_buffer_wait+0x66>
    504e:	9c01      	ldr	r4, [sp, #4]
    5050:	e7b3      	b.n	4fba <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    5052:	2410      	movs	r4, #16
    5054:	e7b1      	b.n	4fba <spi_read_buffer_wait+0x1a>
	while (length--) {
    5056:	3a01      	subs	r2, #1
    5058:	b292      	uxth	r2, r2
    505a:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    505c:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    505e:	05db      	lsls	r3, r3, #23
    5060:	0ddb      	lsrs	r3, r3, #23
    5062:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    5064:	2304      	movs	r3, #4
	while (length--) {
    5066:	4c02      	ldr	r4, [pc, #8]	; (5070 <spi_read_buffer_wait+0xd0>)
    5068:	46a2      	mov	sl, r4
    506a:	e7d0      	b.n	500e <spi_read_buffer_wait+0x6e>
    506c:	9c01      	ldr	r4, [sp, #4]
    506e:	e7a4      	b.n	4fba <spi_read_buffer_wait+0x1a>
    5070:	0000ffff 	.word	0x0000ffff

00005074 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5074:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5076:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5078:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    507a:	2c01      	cmp	r4, #1
    507c:	d001      	beq.n	5082 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    507e:	0018      	movs	r0, r3
    5080:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5082:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5084:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5086:	2c00      	cmp	r4, #0
    5088:	d1f9      	bne.n	507e <spi_select_slave+0xa>
		if (select) {
    508a:	2a00      	cmp	r2, #0
    508c:	d058      	beq.n	5140 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    508e:	784b      	ldrb	r3, [r1, #1]
    5090:	2b00      	cmp	r3, #0
    5092:	d044      	beq.n	511e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5094:	6803      	ldr	r3, [r0, #0]
    5096:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5098:	07db      	lsls	r3, r3, #31
    509a:	d410      	bmi.n	50be <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    509c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    509e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    50a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    50a2:	2900      	cmp	r1, #0
    50a4:	d104      	bne.n	50b0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    50a6:	0953      	lsrs	r3, r2, #5
    50a8:	01db      	lsls	r3, r3, #7
    50aa:	492e      	ldr	r1, [pc, #184]	; (5164 <spi_select_slave+0xf0>)
    50ac:	468c      	mov	ip, r1
    50ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    50b0:	211f      	movs	r1, #31
    50b2:	4011      	ands	r1, r2
    50b4:	2201      	movs	r2, #1
    50b6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    50b8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    50ba:	2305      	movs	r3, #5
    50bc:	e7df      	b.n	507e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    50be:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    50c0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    50c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    50c4:	2c00      	cmp	r4, #0
    50c6:	d104      	bne.n	50d2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    50c8:	0953      	lsrs	r3, r2, #5
    50ca:	01db      	lsls	r3, r3, #7
    50cc:	4c25      	ldr	r4, [pc, #148]	; (5164 <spi_select_slave+0xf0>)
    50ce:	46a4      	mov	ip, r4
    50d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    50d2:	241f      	movs	r4, #31
    50d4:	4014      	ands	r4, r2
    50d6:	2201      	movs	r2, #1
    50d8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    50da:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    50dc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50de:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    50e0:	07d2      	lsls	r2, r2, #31
    50e2:	d501      	bpl.n	50e8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50e4:	788a      	ldrb	r2, [r1, #2]
    50e6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    50e8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    50ea:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    50ec:	2a00      	cmp	r2, #0
    50ee:	d1c6      	bne.n	507e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    50f0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    50f2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    50f4:	7e13      	ldrb	r3, [r2, #24]
    50f6:	420b      	tst	r3, r1
    50f8:	d0fc      	beq.n	50f4 <spi_select_slave+0x80>
    50fa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    50fc:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    50fe:	0749      	lsls	r1, r1, #29
    5100:	d5bd      	bpl.n	507e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5102:	8b53      	ldrh	r3, [r2, #26]
    5104:	075b      	lsls	r3, r3, #29
    5106:	d501      	bpl.n	510c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5108:	2304      	movs	r3, #4
    510a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    510c:	7983      	ldrb	r3, [r0, #6]
    510e:	2b01      	cmp	r3, #1
    5110:	d002      	beq.n	5118 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5112:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5114:	2300      	movs	r3, #0
    5116:	e7b2      	b.n	507e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5118:	6a93      	ldr	r3, [r2, #40]	; 0x28
    511a:	2300      	movs	r3, #0
    511c:	e7af      	b.n	507e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    511e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5120:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5122:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5124:	2900      	cmp	r1, #0
    5126:	d104      	bne.n	5132 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5128:	0953      	lsrs	r3, r2, #5
    512a:	01db      	lsls	r3, r3, #7
    512c:	490d      	ldr	r1, [pc, #52]	; (5164 <spi_select_slave+0xf0>)
    512e:	468c      	mov	ip, r1
    5130:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5132:	211f      	movs	r1, #31
    5134:	4011      	ands	r1, r2
    5136:	2201      	movs	r2, #1
    5138:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    513a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    513c:	2300      	movs	r3, #0
    513e:	e79e      	b.n	507e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5140:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5142:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5144:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5146:	2900      	cmp	r1, #0
    5148:	d104      	bne.n	5154 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    514a:	0953      	lsrs	r3, r2, #5
    514c:	01db      	lsls	r3, r3, #7
    514e:	4905      	ldr	r1, [pc, #20]	; (5164 <spi_select_slave+0xf0>)
    5150:	468c      	mov	ip, r1
    5152:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5154:	211f      	movs	r1, #31
    5156:	4011      	ands	r1, r2
    5158:	2201      	movs	r2, #1
    515a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    515c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    515e:	2300      	movs	r3, #0
    5160:	e78d      	b.n	507e <spi_select_slave+0xa>
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	41004400 	.word	0x41004400

00005168 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5168:	b5f0      	push	{r4, r5, r6, r7, lr}
    516a:	46de      	mov	lr, fp
    516c:	4657      	mov	r7, sl
    516e:	464e      	mov	r6, r9
    5170:	4645      	mov	r5, r8
    5172:	b5e0      	push	{r5, r6, r7, lr}
    5174:	b083      	sub	sp, #12
    5176:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5178:	2338      	movs	r3, #56	; 0x38
    517a:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    517c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    517e:	2c05      	cmp	r4, #5
    5180:	d002      	beq.n	5188 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5182:	3312      	adds	r3, #18
	if (length == 0) {
    5184:	2a00      	cmp	r2, #0
    5186:	d14b      	bne.n	5220 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5188:	0018      	movs	r0, r3
    518a:	b003      	add	sp, #12
    518c:	bc3c      	pop	{r2, r3, r4, r5}
    518e:	4690      	mov	r8, r2
    5190:	4699      	mov	r9, r3
    5192:	46a2      	mov	sl, r4
    5194:	46ab      	mov	fp, r5
    5196:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    5198:	3702      	adds	r7, #2
    519a:	b2bf      	uxth	r7, r7
    519c:	4641      	mov	r1, r8
    519e:	4653      	mov	r3, sl
    51a0:	5c59      	ldrb	r1, [r3, r1]
    51a2:	0209      	lsls	r1, r1, #8
    51a4:	465b      	mov	r3, fp
    51a6:	430b      	orrs	r3, r1
    51a8:	e018      	b.n	51dc <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51aa:	7983      	ldrb	r3, [r0, #6]
    51ac:	2b01      	cmp	r3, #1
    51ae:	d02a      	beq.n	5206 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    51b2:	3e01      	subs	r6, #1
    51b4:	b2b6      	uxth	r6, r6
    51b6:	4566      	cmp	r6, ip
    51b8:	d027      	beq.n	520a <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51ba:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    51bc:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    51be:	4223      	tst	r3, r4
    51c0:	d0fc      	beq.n	51bc <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    51c2:	1c7b      	adds	r3, r7, #1
    51c4:	b29b      	uxth	r3, r3
    51c6:	4698      	mov	r8, r3
    51c8:	4653      	mov	r3, sl
    51ca:	5ddb      	ldrb	r3, [r3, r7]
    51cc:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51ce:	7981      	ldrb	r1, [r0, #6]
    51d0:	2901      	cmp	r1, #1
    51d2:	d0e1      	beq.n	5198 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    51d4:	4669      	mov	r1, sp
    51d6:	80cb      	strh	r3, [r1, #6]
    51d8:	88cb      	ldrh	r3, [r1, #6]
    51da:	4647      	mov	r7, r8
    51dc:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    51de:	4221      	tst	r1, r4
    51e0:	d002      	beq.n	51e8 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51e2:	05db      	lsls	r3, r3, #23
    51e4:	0ddb      	lsrs	r3, r3, #23
    51e6:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    51e8:	79c3      	ldrb	r3, [r0, #7]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d0e1      	beq.n	51b2 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51ee:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51f0:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    51f2:	422b      	tst	r3, r5
    51f4:	d0fc      	beq.n	51f0 <spi_write_buffer_wait+0x88>
    51f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    51f8:	422b      	tst	r3, r5
    51fa:	d0da      	beq.n	51b2 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    51fc:	8b53      	ldrh	r3, [r2, #26]
    51fe:	422b      	tst	r3, r5
    5200:	d0d3      	beq.n	51aa <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5202:	8355      	strh	r5, [r2, #26]
    5204:	e7d1      	b.n	51aa <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5206:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5208:	e7d3      	b.n	51b2 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    520a:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    520c:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    520e:	2a01      	cmp	r2, #1
    5210:	d1ba      	bne.n	5188 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5212:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5214:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5216:	7e0b      	ldrb	r3, [r1, #24]
    5218:	4213      	tst	r3, r2
    521a:	d0fc      	beq.n	5216 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    521c:	2300      	movs	r3, #0
    521e:	e7b3      	b.n	5188 <spi_write_buffer_wait+0x20>
	while (length--) {
    5220:	3a01      	subs	r2, #1
    5222:	b296      	uxth	r6, r2
    5224:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    5226:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    5228:	2504      	movs	r5, #4
	while (length--) {
    522a:	4b01      	ldr	r3, [pc, #4]	; (5230 <spi_write_buffer_wait+0xc8>)
    522c:	469c      	mov	ip, r3
    522e:	e7c4      	b.n	51ba <spi_write_buffer_wait+0x52>
    5230:	0000ffff 	.word	0x0000ffff

00005234 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    5236:	0080      	lsls	r0, r0, #2
    5238:	4b70      	ldr	r3, [pc, #448]	; (53fc <_spi_interrupt_handler+0x1c8>)
    523a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    523c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    523e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    5240:	5ce7      	ldrb	r7, [r4, r3]
    5242:	2236      	movs	r2, #54	; 0x36
    5244:	5ca2      	ldrb	r2, [r4, r2]
    5246:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5248:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    524a:	7db5      	ldrb	r5, [r6, #22]
    524c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    524e:	07eb      	lsls	r3, r5, #31
    5250:	d502      	bpl.n	5258 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5252:	7963      	ldrb	r3, [r4, #5]
    5254:	2b01      	cmp	r3, #1
    5256:	d01e      	beq.n	5296 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5258:	076b      	lsls	r3, r5, #29
    525a:	d511      	bpl.n	5280 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    525c:	8b73      	ldrh	r3, [r6, #26]
    525e:	075b      	lsls	r3, r3, #29
    5260:	d55a      	bpl.n	5318 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    5262:	7a63      	ldrb	r3, [r4, #9]
    5264:	2b01      	cmp	r3, #1
    5266:	d008      	beq.n	527a <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5268:	221e      	movs	r2, #30
    526a:	2338      	movs	r3, #56	; 0x38
    526c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    526e:	3b35      	subs	r3, #53	; 0x35
    5270:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5272:	3302      	adds	r3, #2
    5274:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5276:	073b      	lsls	r3, r7, #28
    5278:	d44a      	bmi.n	5310 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    527a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    527c:	2304      	movs	r3, #4
    527e:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5280:	07ab      	lsls	r3, r5, #30
    5282:	d503      	bpl.n	528c <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5284:	7963      	ldrb	r3, [r4, #5]
    5286:	2b01      	cmp	r3, #1
    5288:	d100      	bne.n	528c <_spi_interrupt_handler+0x58>
    528a:	e097      	b.n	53bc <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    528c:	b26d      	sxtb	r5, r5
    528e:	2d00      	cmp	r5, #0
    5290:	da00      	bge.n	5294 <_spi_interrupt_handler+0x60>
    5292:	e0a9      	b.n	53e8 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    5294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    5296:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    5298:	2b00      	cmp	r3, #0
    529a:	d022      	beq.n	52e2 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    529c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    529e:	2b00      	cmp	r3, #0
    52a0:	d0da      	beq.n	5258 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    52a2:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    52a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52a6:	7813      	ldrb	r3, [r2, #0]
    52a8:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    52aa:	1c50      	adds	r0, r2, #1
    52ac:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52ae:	79a0      	ldrb	r0, [r4, #6]
    52b0:	2801      	cmp	r0, #1
    52b2:	d027      	beq.n	5304 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    52b4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    52b6:	05db      	lsls	r3, r3, #23
    52b8:	0ddb      	lsrs	r3, r3, #23
    52ba:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    52bc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    52be:	3b01      	subs	r3, #1
    52c0:	b29b      	uxth	r3, r3
    52c2:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    52c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    52c6:	b29b      	uxth	r3, r3
    52c8:	2b00      	cmp	r3, #0
    52ca:	d1c5      	bne.n	5258 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    52cc:	3301      	adds	r3, #1
    52ce:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    52d0:	7a63      	ldrb	r3, [r4, #9]
    52d2:	2b01      	cmp	r3, #1
    52d4:	d1c0      	bne.n	5258 <_spi_interrupt_handler+0x24>
    52d6:	79e3      	ldrb	r3, [r4, #7]
    52d8:	2b00      	cmp	r3, #0
    52da:	d1bd      	bne.n	5258 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    52dc:	3302      	adds	r3, #2
    52de:	75b3      	strb	r3, [r6, #22]
    52e0:	e7ba      	b.n	5258 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    52e2:	4b47      	ldr	r3, [pc, #284]	; (5400 <_spi_interrupt_handler+0x1cc>)
    52e4:	881b      	ldrh	r3, [r3, #0]
    52e6:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    52e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52ea:	3b01      	subs	r3, #1
    52ec:	b29b      	uxth	r3, r3
    52ee:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    52f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52f2:	b29b      	uxth	r3, r3
    52f4:	2b00      	cmp	r3, #0
    52f6:	d101      	bne.n	52fc <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    52f8:	3301      	adds	r3, #1
    52fa:	7533      	strb	r3, [r6, #20]
		if (0
    52fc:	7963      	ldrb	r3, [r4, #5]
    52fe:	2b01      	cmp	r3, #1
    5300:	d0cc      	beq.n	529c <_spi_interrupt_handler+0x68>
    5302:	e7a9      	b.n	5258 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5304:	7850      	ldrb	r0, [r2, #1]
    5306:	0200      	lsls	r0, r0, #8
    5308:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    530a:	3202      	adds	r2, #2
    530c:	62e2      	str	r2, [r4, #44]	; 0x2c
    530e:	e7d2      	b.n	52b6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5310:	0020      	movs	r0, r4
    5312:	69a3      	ldr	r3, [r4, #24]
    5314:	4798      	blx	r3
    5316:	e7b0      	b.n	527a <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    5318:	7a63      	ldrb	r3, [r4, #9]
    531a:	2b01      	cmp	r3, #1
    531c:	d028      	beq.n	5370 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    531e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5322:	05db      	lsls	r3, r3, #23
    5324:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    5326:	b2da      	uxtb	r2, r3
    5328:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    532a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    532c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    532e:	1c51      	adds	r1, r2, #1
    5330:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5332:	79a1      	ldrb	r1, [r4, #6]
    5334:	2901      	cmp	r1, #1
    5336:	d034      	beq.n	53a2 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    5338:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    533a:	3b01      	subs	r3, #1
    533c:	b29b      	uxth	r3, r3
    533e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    5340:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5342:	b29b      	uxth	r3, r3
    5344:	2b00      	cmp	r3, #0
    5346:	d000      	beq.n	534a <_spi_interrupt_handler+0x116>
    5348:	e79a      	b.n	5280 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    534a:	2200      	movs	r2, #0
    534c:	3338      	adds	r3, #56	; 0x38
    534e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5350:	3b34      	subs	r3, #52	; 0x34
    5352:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5354:	7a63      	ldrb	r3, [r4, #9]
    5356:	2b02      	cmp	r3, #2
    5358:	d029      	beq.n	53ae <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    535a:	7a63      	ldrb	r3, [r4, #9]
    535c:	2b00      	cmp	r3, #0
    535e:	d000      	beq.n	5362 <_spi_interrupt_handler+0x12e>
    5360:	e78e      	b.n	5280 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5362:	07bb      	lsls	r3, r7, #30
    5364:	d400      	bmi.n	5368 <_spi_interrupt_handler+0x134>
    5366:	e78b      	b.n	5280 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5368:	0020      	movs	r0, r4
    536a:	6923      	ldr	r3, [r4, #16]
    536c:	4798      	blx	r3
    536e:	e787      	b.n	5280 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5370:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    5372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5374:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5376:	3b01      	subs	r3, #1
    5378:	b29b      	uxth	r3, r3
    537a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    537c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    537e:	b29b      	uxth	r3, r3
    5380:	2b00      	cmp	r3, #0
    5382:	d000      	beq.n	5386 <_spi_interrupt_handler+0x152>
    5384:	e77c      	b.n	5280 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5386:	3304      	adds	r3, #4
    5388:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    538a:	2200      	movs	r2, #0
    538c:	3334      	adds	r3, #52	; 0x34
    538e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    5390:	3b35      	subs	r3, #53	; 0x35
    5392:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    5394:	07fb      	lsls	r3, r7, #31
    5396:	d400      	bmi.n	539a <_spi_interrupt_handler+0x166>
    5398:	e772      	b.n	5280 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    539a:	0020      	movs	r0, r4
    539c:	68e3      	ldr	r3, [r4, #12]
    539e:	4798      	blx	r3
    53a0:	e76e      	b.n	5280 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    53a2:	0a1b      	lsrs	r3, r3, #8
    53a4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    53a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53a8:	3301      	adds	r3, #1
    53aa:	62a3      	str	r3, [r4, #40]	; 0x28
    53ac:	e7c4      	b.n	5338 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    53ae:	077b      	lsls	r3, r7, #29
    53b0:	d400      	bmi.n	53b4 <_spi_interrupt_handler+0x180>
    53b2:	e765      	b.n	5280 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    53b4:	0020      	movs	r0, r4
    53b6:	6963      	ldr	r3, [r4, #20]
    53b8:	4798      	blx	r3
    53ba:	e761      	b.n	5280 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    53bc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    53be:	2b01      	cmp	r3, #1
    53c0:	d000      	beq.n	53c4 <_spi_interrupt_handler+0x190>
    53c2:	e763      	b.n	528c <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    53c4:	79e3      	ldrb	r3, [r4, #7]
    53c6:	2b00      	cmp	r3, #0
    53c8:	d000      	beq.n	53cc <_spi_interrupt_handler+0x198>
    53ca:	e75f      	b.n	528c <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    53cc:	3302      	adds	r3, #2
    53ce:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    53d0:	3301      	adds	r3, #1
    53d2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    53d4:	2200      	movs	r2, #0
    53d6:	3335      	adds	r3, #53	; 0x35
    53d8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    53da:	07fb      	lsls	r3, r7, #31
    53dc:	d400      	bmi.n	53e0 <_spi_interrupt_handler+0x1ac>
    53de:	e755      	b.n	528c <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    53e0:	0020      	movs	r0, r4
    53e2:	68e3      	ldr	r3, [r4, #12]
    53e4:	4798      	blx	r3
    53e6:	e751      	b.n	528c <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    53e8:	2380      	movs	r3, #128	; 0x80
    53ea:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    53ec:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    53ee:	067b      	lsls	r3, r7, #25
    53f0:	d400      	bmi.n	53f4 <_spi_interrupt_handler+0x1c0>
    53f2:	e74f      	b.n	5294 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    53f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53f6:	0020      	movs	r0, r4
    53f8:	4798      	blx	r3
}
    53fa:	e74b      	b.n	5294 <_spi_interrupt_handler+0x60>
    53fc:	200005f0 	.word	0x200005f0
    5400:	20000608 	.word	0x20000608

00005404 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5404:	b5f0      	push	{r4, r5, r6, r7, lr}
    5406:	46de      	mov	lr, fp
    5408:	4657      	mov	r7, sl
    540a:	464e      	mov	r6, r9
    540c:	4645      	mov	r5, r8
    540e:	b5e0      	push	{r5, r6, r7, lr}
    5410:	b091      	sub	sp, #68	; 0x44
    5412:	0005      	movs	r5, r0
    5414:	000c      	movs	r4, r1
    5416:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5418:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    541a:	0008      	movs	r0, r1
    541c:	4bbc      	ldr	r3, [pc, #752]	; (5710 <usart_init+0x30c>)
    541e:	4798      	blx	r3
    5420:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5422:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5424:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5426:	07db      	lsls	r3, r3, #31
    5428:	d506      	bpl.n	5438 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    542a:	b011      	add	sp, #68	; 0x44
    542c:	bc3c      	pop	{r2, r3, r4, r5}
    542e:	4690      	mov	r8, r2
    5430:	4699      	mov	r9, r3
    5432:	46a2      	mov	sl, r4
    5434:	46ab      	mov	fp, r5
    5436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5438:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    543a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    543c:	079b      	lsls	r3, r3, #30
    543e:	d4f4      	bmi.n	542a <usart_init+0x26>
    5440:	49b4      	ldr	r1, [pc, #720]	; (5714 <usart_init+0x310>)
    5442:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5444:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5446:	2301      	movs	r3, #1
    5448:	40bb      	lsls	r3, r7
    544a:	4303      	orrs	r3, r0
    544c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    544e:	a90f      	add	r1, sp, #60	; 0x3c
    5450:	272d      	movs	r7, #45	; 0x2d
    5452:	5df3      	ldrb	r3, [r6, r7]
    5454:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5456:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5458:	b2d3      	uxtb	r3, r2
    545a:	9302      	str	r3, [sp, #8]
    545c:	0018      	movs	r0, r3
    545e:	4bae      	ldr	r3, [pc, #696]	; (5718 <usart_init+0x314>)
    5460:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5462:	9802      	ldr	r0, [sp, #8]
    5464:	4bad      	ldr	r3, [pc, #692]	; (571c <usart_init+0x318>)
    5466:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5468:	5df0      	ldrb	r0, [r6, r7]
    546a:	2100      	movs	r1, #0
    546c:	4bac      	ldr	r3, [pc, #688]	; (5720 <usart_init+0x31c>)
    546e:	4798      	blx	r3
	module->character_size = config->character_size;
    5470:	7af3      	ldrb	r3, [r6, #11]
    5472:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5474:	2324      	movs	r3, #36	; 0x24
    5476:	5cf3      	ldrb	r3, [r6, r3]
    5478:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    547a:	2325      	movs	r3, #37	; 0x25
    547c:	5cf3      	ldrb	r3, [r6, r3]
    547e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5480:	7ef3      	ldrb	r3, [r6, #27]
    5482:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5484:	7f33      	ldrb	r3, [r6, #28]
    5486:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5488:	682b      	ldr	r3, [r5, #0]
    548a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    548c:	0018      	movs	r0, r3
    548e:	4ba0      	ldr	r3, [pc, #640]	; (5710 <usart_init+0x30c>)
    5490:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5492:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    5494:	2200      	movs	r2, #0
    5496:	230e      	movs	r3, #14
    5498:	a906      	add	r1, sp, #24
    549a:	468c      	mov	ip, r1
    549c:	4463      	add	r3, ip
    549e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    54a0:	8a32      	ldrh	r2, [r6, #16]
    54a2:	9202      	str	r2, [sp, #8]
    54a4:	2380      	movs	r3, #128	; 0x80
    54a6:	01db      	lsls	r3, r3, #7
    54a8:	429a      	cmp	r2, r3
    54aa:	d100      	bne.n	54ae <usart_init+0xaa>
    54ac:	e09e      	b.n	55ec <usart_init+0x1e8>
    54ae:	d90f      	bls.n	54d0 <usart_init+0xcc>
    54b0:	23c0      	movs	r3, #192	; 0xc0
    54b2:	01db      	lsls	r3, r3, #7
    54b4:	9a02      	ldr	r2, [sp, #8]
    54b6:	429a      	cmp	r2, r3
    54b8:	d100      	bne.n	54bc <usart_init+0xb8>
    54ba:	e092      	b.n	55e2 <usart_init+0x1de>
    54bc:	2380      	movs	r3, #128	; 0x80
    54be:	021b      	lsls	r3, r3, #8
    54c0:	429a      	cmp	r2, r3
    54c2:	d000      	beq.n	54c6 <usart_init+0xc2>
    54c4:	e11f      	b.n	5706 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    54c6:	2303      	movs	r3, #3
    54c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    54ca:	2300      	movs	r3, #0
    54cc:	9307      	str	r3, [sp, #28]
    54ce:	e008      	b.n	54e2 <usart_init+0xde>
	switch (config->sample_rate) {
    54d0:	2380      	movs	r3, #128	; 0x80
    54d2:	019b      	lsls	r3, r3, #6
    54d4:	429a      	cmp	r2, r3
    54d6:	d000      	beq.n	54da <usart_init+0xd6>
    54d8:	e115      	b.n	5706 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    54da:	2310      	movs	r3, #16
    54dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    54de:	3b0f      	subs	r3, #15
    54e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    54e2:	6833      	ldr	r3, [r6, #0]
    54e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    54e6:	68f3      	ldr	r3, [r6, #12]
    54e8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    54ea:	6973      	ldr	r3, [r6, #20]
    54ec:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    54ee:	7e33      	ldrb	r3, [r6, #24]
    54f0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    54f2:	2326      	movs	r3, #38	; 0x26
    54f4:	5cf3      	ldrb	r3, [r6, r3]
    54f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    54f8:	6873      	ldr	r3, [r6, #4]
    54fa:	4699      	mov	r9, r3
	switch (transfer_mode)
    54fc:	2b00      	cmp	r3, #0
    54fe:	d100      	bne.n	5502 <usart_init+0xfe>
    5500:	e0a0      	b.n	5644 <usart_init+0x240>
    5502:	2380      	movs	r3, #128	; 0x80
    5504:	055b      	lsls	r3, r3, #21
    5506:	4599      	cmp	r9, r3
    5508:	d100      	bne.n	550c <usart_init+0x108>
    550a:	e084      	b.n	5616 <usart_init+0x212>
	if(config->encoding_format_enable) {
    550c:	7e73      	ldrb	r3, [r6, #25]
    550e:	2b00      	cmp	r3, #0
    5510:	d002      	beq.n	5518 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5512:	7eb3      	ldrb	r3, [r6, #26]
    5514:	4642      	mov	r2, r8
    5516:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5518:	682a      	ldr	r2, [r5, #0]
    551a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    551c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    551e:	2b00      	cmp	r3, #0
    5520:	d1fc      	bne.n	551c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    5522:	330e      	adds	r3, #14
    5524:	aa06      	add	r2, sp, #24
    5526:	4694      	mov	ip, r2
    5528:	4463      	add	r3, ip
    552a:	881b      	ldrh	r3, [r3, #0]
    552c:	4642      	mov	r2, r8
    552e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5530:	9b05      	ldr	r3, [sp, #20]
    5532:	9a03      	ldr	r2, [sp, #12]
    5534:	4313      	orrs	r3, r2
    5536:	9a04      	ldr	r2, [sp, #16]
    5538:	4313      	orrs	r3, r2
    553a:	464a      	mov	r2, r9
    553c:	4313      	orrs	r3, r2
    553e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5540:	465b      	mov	r3, fp
    5542:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5544:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5546:	4653      	mov	r3, sl
    5548:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    554a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    554c:	2327      	movs	r3, #39	; 0x27
    554e:	5cf3      	ldrb	r3, [r6, r3]
    5550:	2b00      	cmp	r3, #0
    5552:	d101      	bne.n	5558 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5554:	3304      	adds	r3, #4
    5556:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5558:	7e73      	ldrb	r3, [r6, #25]
    555a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    555c:	7f32      	ldrb	r2, [r6, #28]
    555e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5560:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5562:	7f72      	ldrb	r2, [r6, #29]
    5564:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5566:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5568:	2224      	movs	r2, #36	; 0x24
    556a:	5cb2      	ldrb	r2, [r6, r2]
    556c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    556e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5570:	2225      	movs	r2, #37	; 0x25
    5572:	5cb2      	ldrb	r2, [r6, r2]
    5574:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5576:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5578:	7ab1      	ldrb	r1, [r6, #10]
    557a:	7af2      	ldrb	r2, [r6, #11]
    557c:	4311      	orrs	r1, r2
    557e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5580:	8933      	ldrh	r3, [r6, #8]
    5582:	2bff      	cmp	r3, #255	; 0xff
    5584:	d100      	bne.n	5588 <usart_init+0x184>
    5586:	e081      	b.n	568c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5588:	2280      	movs	r2, #128	; 0x80
    558a:	0452      	lsls	r2, r2, #17
    558c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    558e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5590:	232c      	movs	r3, #44	; 0x2c
    5592:	5cf3      	ldrb	r3, [r6, r3]
    5594:	2b00      	cmp	r3, #0
    5596:	d103      	bne.n	55a0 <usart_init+0x19c>
    5598:	4b62      	ldr	r3, [pc, #392]	; (5724 <usart_init+0x320>)
    559a:	789b      	ldrb	r3, [r3, #2]
    559c:	079b      	lsls	r3, r3, #30
    559e:	d501      	bpl.n	55a4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    55a0:	2380      	movs	r3, #128	; 0x80
    55a2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    55a4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    55a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    55a8:	2b00      	cmp	r3, #0
    55aa:	d1fc      	bne.n	55a6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    55ac:	4643      	mov	r3, r8
    55ae:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    55b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    55b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    55b4:	2b00      	cmp	r3, #0
    55b6:	d1fc      	bne.n	55b2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    55b8:	4643      	mov	r3, r8
    55ba:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    55bc:	ab0e      	add	r3, sp, #56	; 0x38
    55be:	2280      	movs	r2, #128	; 0x80
    55c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    55c2:	2200      	movs	r2, #0
    55c4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    55c6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    55c8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    55ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
    55cc:	930a      	str	r3, [sp, #40]	; 0x28
    55ce:	6b73      	ldr	r3, [r6, #52]	; 0x34
    55d0:	930b      	str	r3, [sp, #44]	; 0x2c
    55d2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    55d4:	930c      	str	r3, [sp, #48]	; 0x30
    55d6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    55d8:	9302      	str	r3, [sp, #8]
    55da:	930d      	str	r3, [sp, #52]	; 0x34
    55dc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    55de:	ae0a      	add	r6, sp, #40	; 0x28
    55e0:	e063      	b.n	56aa <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    55e2:	2308      	movs	r3, #8
    55e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    55e6:	3b07      	subs	r3, #7
    55e8:	9307      	str	r3, [sp, #28]
    55ea:	e77a      	b.n	54e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    55ec:	6833      	ldr	r3, [r6, #0]
    55ee:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    55f0:	68f3      	ldr	r3, [r6, #12]
    55f2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    55f4:	6973      	ldr	r3, [r6, #20]
    55f6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    55f8:	7e33      	ldrb	r3, [r6, #24]
    55fa:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    55fc:	2326      	movs	r3, #38	; 0x26
    55fe:	5cf3      	ldrb	r3, [r6, r3]
    5600:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5602:	6873      	ldr	r3, [r6, #4]
    5604:	4699      	mov	r9, r3
	switch (transfer_mode)
    5606:	2b00      	cmp	r3, #0
    5608:	d018      	beq.n	563c <usart_init+0x238>
    560a:	2380      	movs	r3, #128	; 0x80
    560c:	055b      	lsls	r3, r3, #21
    560e:	4599      	cmp	r9, r3
    5610:	d001      	beq.n	5616 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    5612:	2000      	movs	r0, #0
    5614:	e025      	b.n	5662 <usart_init+0x25e>
			if (!config->use_external_clock) {
    5616:	2327      	movs	r3, #39	; 0x27
    5618:	5cf3      	ldrb	r3, [r6, r3]
    561a:	2b00      	cmp	r3, #0
    561c:	d000      	beq.n	5620 <usart_init+0x21c>
    561e:	e775      	b.n	550c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5620:	6a33      	ldr	r3, [r6, #32]
    5622:	001f      	movs	r7, r3
    5624:	b2c0      	uxtb	r0, r0
    5626:	4b40      	ldr	r3, [pc, #256]	; (5728 <usart_init+0x324>)
    5628:	4798      	blx	r3
    562a:	0001      	movs	r1, r0
    562c:	220e      	movs	r2, #14
    562e:	ab06      	add	r3, sp, #24
    5630:	469c      	mov	ip, r3
    5632:	4462      	add	r2, ip
    5634:	0038      	movs	r0, r7
    5636:	4b3d      	ldr	r3, [pc, #244]	; (572c <usart_init+0x328>)
    5638:	4798      	blx	r3
    563a:	e012      	b.n	5662 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    563c:	2308      	movs	r3, #8
    563e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5640:	2300      	movs	r3, #0
    5642:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5644:	2327      	movs	r3, #39	; 0x27
    5646:	5cf3      	ldrb	r3, [r6, r3]
    5648:	2b00      	cmp	r3, #0
    564a:	d00e      	beq.n	566a <usart_init+0x266>
				status_code =
    564c:	9b06      	ldr	r3, [sp, #24]
    564e:	9300      	str	r3, [sp, #0]
    5650:	9b07      	ldr	r3, [sp, #28]
    5652:	220e      	movs	r2, #14
    5654:	a906      	add	r1, sp, #24
    5656:	468c      	mov	ip, r1
    5658:	4462      	add	r2, ip
    565a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    565c:	6a30      	ldr	r0, [r6, #32]
    565e:	4f34      	ldr	r7, [pc, #208]	; (5730 <usart_init+0x32c>)
    5660:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5662:	2800      	cmp	r0, #0
    5664:	d000      	beq.n	5668 <usart_init+0x264>
    5666:	e6e0      	b.n	542a <usart_init+0x26>
    5668:	e750      	b.n	550c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    566a:	6a33      	ldr	r3, [r6, #32]
    566c:	001f      	movs	r7, r3
    566e:	b2c0      	uxtb	r0, r0
    5670:	4b2d      	ldr	r3, [pc, #180]	; (5728 <usart_init+0x324>)
    5672:	4798      	blx	r3
    5674:	0001      	movs	r1, r0
				status_code =
    5676:	9b06      	ldr	r3, [sp, #24]
    5678:	9300      	str	r3, [sp, #0]
    567a:	9b07      	ldr	r3, [sp, #28]
    567c:	220e      	movs	r2, #14
    567e:	a806      	add	r0, sp, #24
    5680:	4684      	mov	ip, r0
    5682:	4462      	add	r2, ip
    5684:	0038      	movs	r0, r7
    5686:	4f2a      	ldr	r7, [pc, #168]	; (5730 <usart_init+0x32c>)
    5688:	47b8      	blx	r7
    568a:	e7ea      	b.n	5662 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    568c:	7ef3      	ldrb	r3, [r6, #27]
    568e:	2b00      	cmp	r3, #0
    5690:	d100      	bne.n	5694 <usart_init+0x290>
    5692:	e77d      	b.n	5590 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5694:	2380      	movs	r3, #128	; 0x80
    5696:	04db      	lsls	r3, r3, #19
    5698:	431f      	orrs	r7, r3
    569a:	e779      	b.n	5590 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    569c:	0020      	movs	r0, r4
    569e:	4b25      	ldr	r3, [pc, #148]	; (5734 <usart_init+0x330>)
    56a0:	4798      	blx	r3
    56a2:	e007      	b.n	56b4 <usart_init+0x2b0>
    56a4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    56a6:	2f04      	cmp	r7, #4
    56a8:	d00d      	beq.n	56c6 <usart_init+0x2c2>
    56aa:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    56ac:	00bb      	lsls	r3, r7, #2
    56ae:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    56b0:	2800      	cmp	r0, #0
    56b2:	d0f3      	beq.n	569c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    56b4:	1c43      	adds	r3, r0, #1
    56b6:	d0f5      	beq.n	56a4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    56b8:	a90e      	add	r1, sp, #56	; 0x38
    56ba:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    56bc:	0c00      	lsrs	r0, r0, #16
    56be:	b2c0      	uxtb	r0, r0
    56c0:	4b1d      	ldr	r3, [pc, #116]	; (5738 <usart_init+0x334>)
    56c2:	4798      	blx	r3
    56c4:	e7ee      	b.n	56a4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    56c6:	2300      	movs	r3, #0
    56c8:	60eb      	str	r3, [r5, #12]
    56ca:	612b      	str	r3, [r5, #16]
    56cc:	616b      	str	r3, [r5, #20]
    56ce:	61ab      	str	r3, [r5, #24]
    56d0:	61eb      	str	r3, [r5, #28]
    56d2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    56d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    56d6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    56d8:	2200      	movs	r2, #0
    56da:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    56dc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    56de:	3330      	adds	r3, #48	; 0x30
    56e0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    56e2:	3301      	adds	r3, #1
    56e4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    56e6:	3301      	adds	r3, #1
    56e8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    56ea:	3301      	adds	r3, #1
    56ec:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    56ee:	6828      	ldr	r0, [r5, #0]
    56f0:	4b07      	ldr	r3, [pc, #28]	; (5710 <usart_init+0x30c>)
    56f2:	4798      	blx	r3
    56f4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    56f6:	4911      	ldr	r1, [pc, #68]	; (573c <usart_init+0x338>)
    56f8:	4b11      	ldr	r3, [pc, #68]	; (5740 <usart_init+0x33c>)
    56fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    56fc:	00a4      	lsls	r4, r4, #2
    56fe:	4b11      	ldr	r3, [pc, #68]	; (5744 <usart_init+0x340>)
    5700:	50e5      	str	r5, [r4, r3]
	return status_code;
    5702:	2000      	movs	r0, #0
    5704:	e691      	b.n	542a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5706:	2310      	movs	r3, #16
    5708:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    570a:	2300      	movs	r3, #0
    570c:	9307      	str	r3, [sp, #28]
    570e:	e6e8      	b.n	54e2 <usart_init+0xde>
    5710:	00004c09 	.word	0x00004c09
    5714:	40000400 	.word	0x40000400
    5718:	00005fbd 	.word	0x00005fbd
    571c:	00005f31 	.word	0x00005f31
    5720:	00004a45 	.word	0x00004a45
    5724:	41002000 	.word	0x41002000
    5728:	00005fd9 	.word	0x00005fd9
    572c:	00004987 	.word	0x00004987
    5730:	000049b1 	.word	0x000049b1
    5734:	00004a91 	.word	0x00004a91
    5738:	000060b5 	.word	0x000060b5
    573c:	000057e5 	.word	0x000057e5
    5740:	00004c45 	.word	0x00004c45
    5744:	200005f0 	.word	0x200005f0

00005748 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5748:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    574a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    574c:	2a00      	cmp	r2, #0
    574e:	d101      	bne.n	5754 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5750:	0018      	movs	r0, r3
    5752:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    5754:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    5756:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5758:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    575a:	2a00      	cmp	r2, #0
    575c:	d1f8      	bne.n	5750 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    575e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    5760:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5762:	2a00      	cmp	r2, #0
    5764:	d1fc      	bne.n	5760 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5766:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5768:	2102      	movs	r1, #2
    576a:	7e1a      	ldrb	r2, [r3, #24]
    576c:	420a      	tst	r2, r1
    576e:	d0fc      	beq.n	576a <usart_write_wait+0x22>
	return STATUS_OK;
    5770:	2300      	movs	r3, #0
    5772:	e7ed      	b.n	5750 <usart_write_wait+0x8>

00005774 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5774:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5776:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5778:	2a00      	cmp	r2, #0
    577a:	d101      	bne.n	5780 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    577c:	0018      	movs	r0, r3
    577e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    5780:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    5782:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5784:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5786:	2a00      	cmp	r2, #0
    5788:	d1f8      	bne.n	577c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    578a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    578c:	7e10      	ldrb	r0, [r2, #24]
    578e:	0740      	lsls	r0, r0, #29
    5790:	d5f4      	bpl.n	577c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    5792:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5794:	2b00      	cmp	r3, #0
    5796:	d1fc      	bne.n	5792 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5798:	8b53      	ldrh	r3, [r2, #26]
    579a:	b2db      	uxtb	r3, r3
	if (error_code) {
    579c:	0698      	lsls	r0, r3, #26
    579e:	d01d      	beq.n	57dc <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    57a0:	0798      	lsls	r0, r3, #30
    57a2:	d503      	bpl.n	57ac <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    57a4:	2302      	movs	r3, #2
    57a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    57a8:	3318      	adds	r3, #24
    57aa:	e7e7      	b.n	577c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    57ac:	0758      	lsls	r0, r3, #29
    57ae:	d503      	bpl.n	57b8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    57b0:	2304      	movs	r3, #4
    57b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    57b4:	331a      	adds	r3, #26
    57b6:	e7e1      	b.n	577c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    57b8:	07d8      	lsls	r0, r3, #31
    57ba:	d503      	bpl.n	57c4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    57bc:	2301      	movs	r3, #1
    57be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    57c0:	3312      	adds	r3, #18
    57c2:	e7db      	b.n	577c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    57c4:	06d8      	lsls	r0, r3, #27
    57c6:	d503      	bpl.n	57d0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    57c8:	2310      	movs	r3, #16
    57ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    57cc:	3332      	adds	r3, #50	; 0x32
    57ce:	e7d5      	b.n	577c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    57d0:	069b      	lsls	r3, r3, #26
    57d2:	d503      	bpl.n	57dc <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    57d4:	2320      	movs	r3, #32
    57d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    57d8:	3321      	adds	r3, #33	; 0x21
    57da:	e7cf      	b.n	577c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    57dc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    57de:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    57e0:	2300      	movs	r3, #0
    57e2:	e7cb      	b.n	577c <usart_read_wait+0x8>

000057e4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    57e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    57e6:	0080      	lsls	r0, r0, #2
    57e8:	4b62      	ldr	r3, [pc, #392]	; (5974 <_usart_interrupt_handler+0x190>)
    57ea:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    57ec:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    57ee:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    57f0:	2b00      	cmp	r3, #0
    57f2:	d1fc      	bne.n	57ee <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    57f4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    57f6:	7da6      	ldrb	r6, [r4, #22]
    57f8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    57fa:	2330      	movs	r3, #48	; 0x30
    57fc:	5ceb      	ldrb	r3, [r5, r3]
    57fe:	2231      	movs	r2, #49	; 0x31
    5800:	5caf      	ldrb	r7, [r5, r2]
    5802:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5804:	07f3      	lsls	r3, r6, #31
    5806:	d522      	bpl.n	584e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5808:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    580a:	b29b      	uxth	r3, r3
    580c:	2b00      	cmp	r3, #0
    580e:	d01c      	beq.n	584a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5810:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5812:	7813      	ldrb	r3, [r2, #0]
    5814:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5816:	1c51      	adds	r1, r2, #1
    5818:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    581a:	7969      	ldrb	r1, [r5, #5]
    581c:	2901      	cmp	r1, #1
    581e:	d00e      	beq.n	583e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5820:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5822:	05db      	lsls	r3, r3, #23
    5824:	0ddb      	lsrs	r3, r3, #23
    5826:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5828:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    582a:	3b01      	subs	r3, #1
    582c:	b29b      	uxth	r3, r3
    582e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5830:	2b00      	cmp	r3, #0
    5832:	d10c      	bne.n	584e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5834:	3301      	adds	r3, #1
    5836:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5838:	3301      	adds	r3, #1
    583a:	75a3      	strb	r3, [r4, #22]
    583c:	e007      	b.n	584e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    583e:	7851      	ldrb	r1, [r2, #1]
    5840:	0209      	lsls	r1, r1, #8
    5842:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5844:	3202      	adds	r2, #2
    5846:	62aa      	str	r2, [r5, #40]	; 0x28
    5848:	e7eb      	b.n	5822 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    584a:	2301      	movs	r3, #1
    584c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    584e:	07b3      	lsls	r3, r6, #30
    5850:	d506      	bpl.n	5860 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5852:	2302      	movs	r3, #2
    5854:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    5856:	2200      	movs	r2, #0
    5858:	3331      	adds	r3, #49	; 0x31
    585a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    585c:	07fb      	lsls	r3, r7, #31
    585e:	d41a      	bmi.n	5896 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5860:	0773      	lsls	r3, r6, #29
    5862:	d565      	bpl.n	5930 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5864:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5866:	b29b      	uxth	r3, r3
    5868:	2b00      	cmp	r3, #0
    586a:	d05f      	beq.n	592c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    586c:	8b63      	ldrh	r3, [r4, #26]
    586e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5870:	071a      	lsls	r2, r3, #28
    5872:	d414      	bmi.n	589e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5874:	223f      	movs	r2, #63	; 0x3f
    5876:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5878:	2b00      	cmp	r3, #0
    587a:	d034      	beq.n	58e6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    587c:	079a      	lsls	r2, r3, #30
    587e:	d511      	bpl.n	58a4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5880:	221a      	movs	r2, #26
    5882:	2332      	movs	r3, #50	; 0x32
    5884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5886:	3b30      	subs	r3, #48	; 0x30
    5888:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    588a:	077b      	lsls	r3, r7, #29
    588c:	d550      	bpl.n	5930 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    588e:	0028      	movs	r0, r5
    5890:	696b      	ldr	r3, [r5, #20]
    5892:	4798      	blx	r3
    5894:	e04c      	b.n	5930 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5896:	0028      	movs	r0, r5
    5898:	68eb      	ldr	r3, [r5, #12]
    589a:	4798      	blx	r3
    589c:	e7e0      	b.n	5860 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    589e:	2237      	movs	r2, #55	; 0x37
    58a0:	4013      	ands	r3, r2
    58a2:	e7e9      	b.n	5878 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    58a4:	075a      	lsls	r2, r3, #29
    58a6:	d505      	bpl.n	58b4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    58a8:	221e      	movs	r2, #30
    58aa:	2332      	movs	r3, #50	; 0x32
    58ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    58ae:	3b2e      	subs	r3, #46	; 0x2e
    58b0:	8363      	strh	r3, [r4, #26]
    58b2:	e7ea      	b.n	588a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    58b4:	07da      	lsls	r2, r3, #31
    58b6:	d505      	bpl.n	58c4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    58b8:	2213      	movs	r2, #19
    58ba:	2332      	movs	r3, #50	; 0x32
    58bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    58be:	3b31      	subs	r3, #49	; 0x31
    58c0:	8363      	strh	r3, [r4, #26]
    58c2:	e7e2      	b.n	588a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    58c4:	06da      	lsls	r2, r3, #27
    58c6:	d505      	bpl.n	58d4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    58c8:	2242      	movs	r2, #66	; 0x42
    58ca:	2332      	movs	r3, #50	; 0x32
    58cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    58ce:	3b22      	subs	r3, #34	; 0x22
    58d0:	8363      	strh	r3, [r4, #26]
    58d2:	e7da      	b.n	588a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    58d4:	2220      	movs	r2, #32
    58d6:	421a      	tst	r2, r3
    58d8:	d0d7      	beq.n	588a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    58da:	3221      	adds	r2, #33	; 0x21
    58dc:	2332      	movs	r3, #50	; 0x32
    58de:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    58e0:	3b12      	subs	r3, #18
    58e2:	8363      	strh	r3, [r4, #26]
    58e4:	e7d1      	b.n	588a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    58e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    58e8:	05db      	lsls	r3, r3, #23
    58ea:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    58ec:	b2da      	uxtb	r2, r3
    58ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
    58f0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    58f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    58f4:	1c51      	adds	r1, r2, #1
    58f6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    58f8:	7969      	ldrb	r1, [r5, #5]
    58fa:	2901      	cmp	r1, #1
    58fc:	d010      	beq.n	5920 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    58fe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5900:	3b01      	subs	r3, #1
    5902:	b29b      	uxth	r3, r3
    5904:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5906:	2b00      	cmp	r3, #0
    5908:	d112      	bne.n	5930 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    590a:	3304      	adds	r3, #4
    590c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    590e:	2200      	movs	r2, #0
    5910:	332e      	adds	r3, #46	; 0x2e
    5912:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5914:	07bb      	lsls	r3, r7, #30
    5916:	d50b      	bpl.n	5930 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5918:	0028      	movs	r0, r5
    591a:	692b      	ldr	r3, [r5, #16]
    591c:	4798      	blx	r3
    591e:	e007      	b.n	5930 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5920:	0a1b      	lsrs	r3, r3, #8
    5922:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5924:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5926:	3301      	adds	r3, #1
    5928:	626b      	str	r3, [r5, #36]	; 0x24
    592a:	e7e8      	b.n	58fe <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    592c:	2304      	movs	r3, #4
    592e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5930:	06f3      	lsls	r3, r6, #27
    5932:	d504      	bpl.n	593e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5934:	2310      	movs	r3, #16
    5936:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5938:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    593a:	06fb      	lsls	r3, r7, #27
    593c:	d40e      	bmi.n	595c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    593e:	06b3      	lsls	r3, r6, #26
    5940:	d504      	bpl.n	594c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5942:	2320      	movs	r3, #32
    5944:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5946:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5948:	073b      	lsls	r3, r7, #28
    594a:	d40b      	bmi.n	5964 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    594c:	0733      	lsls	r3, r6, #28
    594e:	d504      	bpl.n	595a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5950:	2308      	movs	r3, #8
    5952:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5954:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5956:	06bb      	lsls	r3, r7, #26
    5958:	d408      	bmi.n	596c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    595a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    595c:	0028      	movs	r0, r5
    595e:	69eb      	ldr	r3, [r5, #28]
    5960:	4798      	blx	r3
    5962:	e7ec      	b.n	593e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5964:	0028      	movs	r0, r5
    5966:	69ab      	ldr	r3, [r5, #24]
    5968:	4798      	blx	r3
    596a:	e7ef      	b.n	594c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    596c:	6a2b      	ldr	r3, [r5, #32]
    596e:	0028      	movs	r0, r5
    5970:	4798      	blx	r3
}
    5972:	e7f2      	b.n	595a <_usart_interrupt_handler+0x176>
    5974:	200005f0 	.word	0x200005f0

00005978 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5978:	b510      	push	{r4, lr}
	switch (clock_source) {
    597a:	2808      	cmp	r0, #8
    597c:	d803      	bhi.n	5986 <system_clock_source_get_hz+0xe>
    597e:	0080      	lsls	r0, r0, #2
    5980:	4b1b      	ldr	r3, [pc, #108]	; (59f0 <system_clock_source_get_hz+0x78>)
    5982:	581b      	ldr	r3, [r3, r0]
    5984:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    5986:	2000      	movs	r0, #0
    5988:	e030      	b.n	59ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    598a:	4b1a      	ldr	r3, [pc, #104]	; (59f4 <system_clock_source_get_hz+0x7c>)
    598c:	6918      	ldr	r0, [r3, #16]
    598e:	e02d      	b.n	59ec <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5990:	4b19      	ldr	r3, [pc, #100]	; (59f8 <system_clock_source_get_hz+0x80>)
    5992:	6a1b      	ldr	r3, [r3, #32]
    5994:	059b      	lsls	r3, r3, #22
    5996:	0f9b      	lsrs	r3, r3, #30
    5998:	4818      	ldr	r0, [pc, #96]	; (59fc <system_clock_source_get_hz+0x84>)
    599a:	40d8      	lsrs	r0, r3
    599c:	e026      	b.n	59ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    599e:	4b15      	ldr	r3, [pc, #84]	; (59f4 <system_clock_source_get_hz+0x7c>)
    59a0:	6958      	ldr	r0, [r3, #20]
    59a2:	e023      	b.n	59ec <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    59a4:	4b13      	ldr	r3, [pc, #76]	; (59f4 <system_clock_source_get_hz+0x7c>)
    59a6:	681b      	ldr	r3, [r3, #0]
			return 0;
    59a8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    59aa:	079b      	lsls	r3, r3, #30
    59ac:	d51e      	bpl.n	59ec <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    59ae:	4912      	ldr	r1, [pc, #72]	; (59f8 <system_clock_source_get_hz+0x80>)
    59b0:	2210      	movs	r2, #16
    59b2:	68cb      	ldr	r3, [r1, #12]
    59b4:	421a      	tst	r2, r3
    59b6:	d0fc      	beq.n	59b2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    59b8:	4b0e      	ldr	r3, [pc, #56]	; (59f4 <system_clock_source_get_hz+0x7c>)
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	075b      	lsls	r3, r3, #29
    59be:	d401      	bmi.n	59c4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    59c0:	480f      	ldr	r0, [pc, #60]	; (5a00 <system_clock_source_get_hz+0x88>)
    59c2:	e013      	b.n	59ec <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    59c4:	2000      	movs	r0, #0
    59c6:	4b0f      	ldr	r3, [pc, #60]	; (5a04 <system_clock_source_get_hz+0x8c>)
    59c8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    59ca:	4b0a      	ldr	r3, [pc, #40]	; (59f4 <system_clock_source_get_hz+0x7c>)
    59cc:	689b      	ldr	r3, [r3, #8]
    59ce:	041b      	lsls	r3, r3, #16
    59d0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    59d2:	4358      	muls	r0, r3
    59d4:	e00a      	b.n	59ec <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    59d6:	2350      	movs	r3, #80	; 0x50
    59d8:	4a07      	ldr	r2, [pc, #28]	; (59f8 <system_clock_source_get_hz+0x80>)
    59da:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    59dc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    59de:	075b      	lsls	r3, r3, #29
    59e0:	d504      	bpl.n	59ec <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    59e2:	4b04      	ldr	r3, [pc, #16]	; (59f4 <system_clock_source_get_hz+0x7c>)
    59e4:	68d8      	ldr	r0, [r3, #12]
    59e6:	e001      	b.n	59ec <system_clock_source_get_hz+0x74>
		return 32768UL;
    59e8:	2080      	movs	r0, #128	; 0x80
    59ea:	0200      	lsls	r0, r0, #8
	}
}
    59ec:	bd10      	pop	{r4, pc}
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	0000c7cc 	.word	0x0000c7cc
    59f4:	200003b4 	.word	0x200003b4
    59f8:	40000800 	.word	0x40000800
    59fc:	007a1200 	.word	0x007a1200
    5a00:	02dc6c00 	.word	0x02dc6c00
    5a04:	00005fd9 	.word	0x00005fd9

00005a08 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5a08:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5a0a:	490c      	ldr	r1, [pc, #48]	; (5a3c <system_clock_source_osc8m_set_config+0x34>)
    5a0c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5a0e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5a10:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5a12:	7840      	ldrb	r0, [r0, #1]
    5a14:	2201      	movs	r2, #1
    5a16:	4010      	ands	r0, r2
    5a18:	0180      	lsls	r0, r0, #6
    5a1a:	2640      	movs	r6, #64	; 0x40
    5a1c:	43b3      	bics	r3, r6
    5a1e:	4303      	orrs	r3, r0
    5a20:	402a      	ands	r2, r5
    5a22:	01d2      	lsls	r2, r2, #7
    5a24:	2080      	movs	r0, #128	; 0x80
    5a26:	4383      	bics	r3, r0
    5a28:	4313      	orrs	r3, r2
    5a2a:	2203      	movs	r2, #3
    5a2c:	4022      	ands	r2, r4
    5a2e:	0212      	lsls	r2, r2, #8
    5a30:	4803      	ldr	r0, [pc, #12]	; (5a40 <system_clock_source_osc8m_set_config+0x38>)
    5a32:	4003      	ands	r3, r0
    5a34:	4313      	orrs	r3, r2
    5a36:	620b      	str	r3, [r1, #32]
}
    5a38:	bd70      	pop	{r4, r5, r6, pc}
    5a3a:	46c0      	nop			; (mov r8, r8)
    5a3c:	40000800 	.word	0x40000800
    5a40:	fffffcff 	.word	0xfffffcff

00005a44 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a46:	46de      	mov	lr, fp
    5a48:	4657      	mov	r7, sl
    5a4a:	464e      	mov	r6, r9
    5a4c:	4645      	mov	r5, r8
    5a4e:	b5e0      	push	{r5, r6, r7, lr}
    5a50:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5a52:	4b26      	ldr	r3, [pc, #152]	; (5aec <system_clock_source_xosc32k_set_config+0xa8>)
    5a54:	469b      	mov	fp, r3
    5a56:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5a58:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5a5a:	7800      	ldrb	r0, [r0, #0]
    5a5c:	4242      	negs	r2, r0
    5a5e:	4142      	adcs	r2, r0
    5a60:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5a62:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5a64:	78ca      	ldrb	r2, [r1, #3]
    5a66:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5a68:	790a      	ldrb	r2, [r1, #4]
    5a6a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5a6c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5a6e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5a70:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5a72:	688a      	ldr	r2, [r1, #8]
    5a74:	491e      	ldr	r1, [pc, #120]	; (5af0 <system_clock_source_xosc32k_set_config+0xac>)
    5a76:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    5a78:	2101      	movs	r1, #1
    5a7a:	464a      	mov	r2, r9
    5a7c:	0092      	lsls	r2, r2, #2
    5a7e:	4691      	mov	r9, r2
    5a80:	2204      	movs	r2, #4
    5a82:	4393      	bics	r3, r2
    5a84:	464a      	mov	r2, r9
    5a86:	4313      	orrs	r3, r2
    5a88:	4642      	mov	r2, r8
    5a8a:	400a      	ands	r2, r1
    5a8c:	00d2      	lsls	r2, r2, #3
    5a8e:	4690      	mov	r8, r2
    5a90:	2208      	movs	r2, #8
    5a92:	4393      	bics	r3, r2
    5a94:	4642      	mov	r2, r8
    5a96:	4313      	orrs	r3, r2
    5a98:	4662      	mov	r2, ip
    5a9a:	400a      	ands	r2, r1
    5a9c:	0112      	lsls	r2, r2, #4
    5a9e:	4694      	mov	ip, r2
    5aa0:	2210      	movs	r2, #16
    5aa2:	4393      	bics	r3, r2
    5aa4:	4662      	mov	r2, ip
    5aa6:	4313      	orrs	r3, r2
    5aa8:	4008      	ands	r0, r1
    5aaa:	0140      	lsls	r0, r0, #5
    5aac:	2220      	movs	r2, #32
    5aae:	4393      	bics	r3, r2
    5ab0:	4303      	orrs	r3, r0
    5ab2:	400f      	ands	r7, r1
    5ab4:	01bf      	lsls	r7, r7, #6
    5ab6:	2040      	movs	r0, #64	; 0x40
    5ab8:	4383      	bics	r3, r0
    5aba:	433b      	orrs	r3, r7
    5abc:	400e      	ands	r6, r1
    5abe:	01f6      	lsls	r6, r6, #7
    5ac0:	3040      	adds	r0, #64	; 0x40
    5ac2:	4383      	bics	r3, r0
    5ac4:	4333      	orrs	r3, r6
    5ac6:	3879      	subs	r0, #121	; 0x79
    5ac8:	4005      	ands	r5, r0
    5aca:	022d      	lsls	r5, r5, #8
    5acc:	4809      	ldr	r0, [pc, #36]	; (5af4 <system_clock_source_xosc32k_set_config+0xb0>)
    5ace:	4003      	ands	r3, r0
    5ad0:	432b      	orrs	r3, r5
    5ad2:	4021      	ands	r1, r4
    5ad4:	0309      	lsls	r1, r1, #12
    5ad6:	4808      	ldr	r0, [pc, #32]	; (5af8 <system_clock_source_xosc32k_set_config+0xb4>)
    5ad8:	4003      	ands	r3, r0
    5ada:	430b      	orrs	r3, r1
    5adc:	465a      	mov	r2, fp
    5ade:	8293      	strh	r3, [r2, #20]
}
    5ae0:	bc3c      	pop	{r2, r3, r4, r5}
    5ae2:	4690      	mov	r8, r2
    5ae4:	4699      	mov	r9, r3
    5ae6:	46a2      	mov	sl, r4
    5ae8:	46ab      	mov	fp, r5
    5aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aec:	40000800 	.word	0x40000800
    5af0:	200003b4 	.word	0x200003b4
    5af4:	fffff8ff 	.word	0xfffff8ff
    5af8:	ffffefff 	.word	0xffffefff

00005afc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5afc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5afe:	7a03      	ldrb	r3, [r0, #8]
    5b00:	069b      	lsls	r3, r3, #26
    5b02:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5b04:	8942      	ldrh	r2, [r0, #10]
    5b06:	0592      	lsls	r2, r2, #22
    5b08:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5b0a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5b0c:	4918      	ldr	r1, [pc, #96]	; (5b70 <system_clock_source_dfll_set_config+0x74>)
    5b0e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5b10:	7983      	ldrb	r3, [r0, #6]
    5b12:	79c2      	ldrb	r2, [r0, #7]
    5b14:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5b16:	8842      	ldrh	r2, [r0, #2]
    5b18:	8884      	ldrh	r4, [r0, #4]
    5b1a:	4322      	orrs	r2, r4
    5b1c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5b1e:	7842      	ldrb	r2, [r0, #1]
    5b20:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5b22:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5b24:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5b26:	7803      	ldrb	r3, [r0, #0]
    5b28:	2b04      	cmp	r3, #4
    5b2a:	d011      	beq.n	5b50 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5b2c:	2b20      	cmp	r3, #32
    5b2e:	d10e      	bne.n	5b4e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5b30:	7b03      	ldrb	r3, [r0, #12]
    5b32:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5b34:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5b36:	4313      	orrs	r3, r2
    5b38:	89c2      	ldrh	r2, [r0, #14]
    5b3a:	0412      	lsls	r2, r2, #16
    5b3c:	490d      	ldr	r1, [pc, #52]	; (5b74 <system_clock_source_dfll_set_config+0x78>)
    5b3e:	400a      	ands	r2, r1
    5b40:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5b42:	4a0b      	ldr	r2, [pc, #44]	; (5b70 <system_clock_source_dfll_set_config+0x74>)
    5b44:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5b46:	6811      	ldr	r1, [r2, #0]
    5b48:	4b0b      	ldr	r3, [pc, #44]	; (5b78 <system_clock_source_dfll_set_config+0x7c>)
    5b4a:	430b      	orrs	r3, r1
    5b4c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5b4e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5b50:	7b03      	ldrb	r3, [r0, #12]
    5b52:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5b54:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5b56:	4313      	orrs	r3, r2
    5b58:	89c2      	ldrh	r2, [r0, #14]
    5b5a:	0412      	lsls	r2, r2, #16
    5b5c:	4905      	ldr	r1, [pc, #20]	; (5b74 <system_clock_source_dfll_set_config+0x78>)
    5b5e:	400a      	ands	r2, r1
    5b60:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5b62:	4a03      	ldr	r2, [pc, #12]	; (5b70 <system_clock_source_dfll_set_config+0x74>)
    5b64:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5b66:	6813      	ldr	r3, [r2, #0]
    5b68:	2104      	movs	r1, #4
    5b6a:	430b      	orrs	r3, r1
    5b6c:	6013      	str	r3, [r2, #0]
    5b6e:	e7ee      	b.n	5b4e <system_clock_source_dfll_set_config+0x52>
    5b70:	200003b4 	.word	0x200003b4
    5b74:	03ff0000 	.word	0x03ff0000
    5b78:	00000424 	.word	0x00000424

00005b7c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5b7c:	2808      	cmp	r0, #8
    5b7e:	d803      	bhi.n	5b88 <system_clock_source_enable+0xc>
    5b80:	0080      	lsls	r0, r0, #2
    5b82:	4b25      	ldr	r3, [pc, #148]	; (5c18 <system_clock_source_enable+0x9c>)
    5b84:	581b      	ldr	r3, [r3, r0]
    5b86:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b88:	2017      	movs	r0, #23
    5b8a:	e044      	b.n	5c16 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5b8c:	4a23      	ldr	r2, [pc, #140]	; (5c1c <system_clock_source_enable+0xa0>)
    5b8e:	6a13      	ldr	r3, [r2, #32]
    5b90:	2102      	movs	r1, #2
    5b92:	430b      	orrs	r3, r1
    5b94:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5b96:	2000      	movs	r0, #0
    5b98:	e03d      	b.n	5c16 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5b9a:	4a20      	ldr	r2, [pc, #128]	; (5c1c <system_clock_source_enable+0xa0>)
    5b9c:	6993      	ldr	r3, [r2, #24]
    5b9e:	2102      	movs	r1, #2
    5ba0:	430b      	orrs	r3, r1
    5ba2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5ba4:	2000      	movs	r0, #0
		break;
    5ba6:	e036      	b.n	5c16 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5ba8:	4a1c      	ldr	r2, [pc, #112]	; (5c1c <system_clock_source_enable+0xa0>)
    5baa:	8a13      	ldrh	r3, [r2, #16]
    5bac:	2102      	movs	r1, #2
    5bae:	430b      	orrs	r3, r1
    5bb0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5bb2:	2000      	movs	r0, #0
		break;
    5bb4:	e02f      	b.n	5c16 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5bb6:	4a19      	ldr	r2, [pc, #100]	; (5c1c <system_clock_source_enable+0xa0>)
    5bb8:	8a93      	ldrh	r3, [r2, #20]
    5bba:	2102      	movs	r1, #2
    5bbc:	430b      	orrs	r3, r1
    5bbe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5bc0:	2000      	movs	r0, #0
		break;
    5bc2:	e028      	b.n	5c16 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5bc4:	4916      	ldr	r1, [pc, #88]	; (5c20 <system_clock_source_enable+0xa4>)
    5bc6:	680b      	ldr	r3, [r1, #0]
    5bc8:	2202      	movs	r2, #2
    5bca:	4313      	orrs	r3, r2
    5bcc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5bce:	4b13      	ldr	r3, [pc, #76]	; (5c1c <system_clock_source_enable+0xa0>)
    5bd0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5bd2:	0019      	movs	r1, r3
    5bd4:	320e      	adds	r2, #14
    5bd6:	68cb      	ldr	r3, [r1, #12]
    5bd8:	421a      	tst	r2, r3
    5bda:	d0fc      	beq.n	5bd6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5bdc:	4a10      	ldr	r2, [pc, #64]	; (5c20 <system_clock_source_enable+0xa4>)
    5bde:	6891      	ldr	r1, [r2, #8]
    5be0:	4b0e      	ldr	r3, [pc, #56]	; (5c1c <system_clock_source_enable+0xa0>)
    5be2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5be4:	6852      	ldr	r2, [r2, #4]
    5be6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5be8:	2200      	movs	r2, #0
    5bea:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5bec:	0019      	movs	r1, r3
    5bee:	3210      	adds	r2, #16
    5bf0:	68cb      	ldr	r3, [r1, #12]
    5bf2:	421a      	tst	r2, r3
    5bf4:	d0fc      	beq.n	5bf0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5bf6:	4b0a      	ldr	r3, [pc, #40]	; (5c20 <system_clock_source_enable+0xa4>)
    5bf8:	681b      	ldr	r3, [r3, #0]
    5bfa:	b29b      	uxth	r3, r3
    5bfc:	4a07      	ldr	r2, [pc, #28]	; (5c1c <system_clock_source_enable+0xa0>)
    5bfe:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5c00:	2000      	movs	r0, #0
    5c02:	e008      	b.n	5c16 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5c04:	4905      	ldr	r1, [pc, #20]	; (5c1c <system_clock_source_enable+0xa0>)
    5c06:	2244      	movs	r2, #68	; 0x44
    5c08:	5c8b      	ldrb	r3, [r1, r2]
    5c0a:	2002      	movs	r0, #2
    5c0c:	4303      	orrs	r3, r0
    5c0e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5c10:	2000      	movs	r0, #0
		break;
    5c12:	e000      	b.n	5c16 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5c14:	2000      	movs	r0, #0
}
    5c16:	4770      	bx	lr
    5c18:	0000c7f0 	.word	0x0000c7f0
    5c1c:	40000800 	.word	0x40000800
    5c20:	200003b4 	.word	0x200003b4

00005c24 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c26:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5c28:	22c2      	movs	r2, #194	; 0xc2
    5c2a:	00d2      	lsls	r2, r2, #3
    5c2c:	4b47      	ldr	r3, [pc, #284]	; (5d4c <system_clock_init+0x128>)
    5c2e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5c30:	4a47      	ldr	r2, [pc, #284]	; (5d50 <system_clock_init+0x12c>)
    5c32:	6853      	ldr	r3, [r2, #4]
    5c34:	211e      	movs	r1, #30
    5c36:	438b      	bics	r3, r1
    5c38:	391a      	subs	r1, #26
    5c3a:	430b      	orrs	r3, r1
    5c3c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5c3e:	2202      	movs	r2, #2
    5c40:	ab01      	add	r3, sp, #4
    5c42:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5c44:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5c46:	4d43      	ldr	r5, [pc, #268]	; (5d54 <system_clock_init+0x130>)
    5c48:	b2e0      	uxtb	r0, r4
    5c4a:	a901      	add	r1, sp, #4
    5c4c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5c4e:	3401      	adds	r4, #1
    5c50:	2c25      	cmp	r4, #37	; 0x25
    5c52:	d1f9      	bne.n	5c48 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5c54:	a80a      	add	r0, sp, #40	; 0x28
    5c56:	2300      	movs	r3, #0
    5c58:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5c5a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5c5c:	2280      	movs	r2, #128	; 0x80
    5c5e:	0212      	lsls	r2, r2, #8
    5c60:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5c62:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5c64:	2201      	movs	r2, #1
    5c66:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5c68:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5c6a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5c6c:	3202      	adds	r2, #2
    5c6e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5c70:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5c72:	4b39      	ldr	r3, [pc, #228]	; (5d58 <system_clock_init+0x134>)
    5c74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5c76:	2005      	movs	r0, #5
    5c78:	4b38      	ldr	r3, [pc, #224]	; (5d5c <system_clock_init+0x138>)
    5c7a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5c7c:	4933      	ldr	r1, [pc, #204]	; (5d4c <system_clock_init+0x128>)
    5c7e:	2202      	movs	r2, #2
    5c80:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5c82:	421a      	tst	r2, r3
    5c84:	d0fc      	beq.n	5c80 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5c86:	4a31      	ldr	r2, [pc, #196]	; (5d4c <system_clock_init+0x128>)
    5c88:	8a93      	ldrh	r3, [r2, #20]
    5c8a:	2180      	movs	r1, #128	; 0x80
    5c8c:	430b      	orrs	r3, r1
    5c8e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5c90:	ab05      	add	r3, sp, #20
    5c92:	2100      	movs	r1, #0
    5c94:	2200      	movs	r2, #0
    5c96:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5c98:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5c9a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5c9c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5c9e:	313f      	adds	r1, #63	; 0x3f
    5ca0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5ca2:	393b      	subs	r1, #59	; 0x3b
    5ca4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5ca6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5ca8:	4b2d      	ldr	r3, [pc, #180]	; (5d60 <system_clock_init+0x13c>)
    5caa:	681b      	ldr	r3, [r3, #0]
    5cac:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5cae:	2b3f      	cmp	r3, #63	; 0x3f
    5cb0:	d04a      	beq.n	5d48 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5cb2:	a805      	add	r0, sp, #20
    5cb4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5cb6:	4b2b      	ldr	r3, [pc, #172]	; (5d64 <system_clock_init+0x140>)
    5cb8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5cba:	2307      	movs	r3, #7
    5cbc:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5cbe:	3338      	adds	r3, #56	; 0x38
    5cc0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5cc2:	4b29      	ldr	r3, [pc, #164]	; (5d68 <system_clock_init+0x144>)
    5cc4:	4798      	blx	r3
	config->run_in_standby  = false;
    5cc6:	a804      	add	r0, sp, #16
    5cc8:	2500      	movs	r5, #0
    5cca:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5ccc:	2601      	movs	r6, #1
    5cce:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5cd0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5cd2:	4b26      	ldr	r3, [pc, #152]	; (5d6c <system_clock_init+0x148>)
    5cd4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5cd6:	2006      	movs	r0, #6
    5cd8:	4f20      	ldr	r7, [pc, #128]	; (5d5c <system_clock_init+0x138>)
    5cda:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5cdc:	4b24      	ldr	r3, [pc, #144]	; (5d70 <system_clock_init+0x14c>)
    5cde:	4798      	blx	r3
	config->division_factor    = 1;
    5ce0:	ac01      	add	r4, sp, #4
    5ce2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5ce4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5ce6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5ce8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5cea:	2305      	movs	r3, #5
    5cec:	7023      	strb	r3, [r4, #0]
    5cee:	0021      	movs	r1, r4
    5cf0:	2001      	movs	r0, #1
    5cf2:	4b20      	ldr	r3, [pc, #128]	; (5d74 <system_clock_init+0x150>)
    5cf4:	4798      	blx	r3
    5cf6:	2001      	movs	r0, #1
    5cf8:	4b1f      	ldr	r3, [pc, #124]	; (5d78 <system_clock_init+0x154>)
    5cfa:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5cfc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5cfe:	0021      	movs	r1, r4
    5d00:	2000      	movs	r0, #0
    5d02:	4b14      	ldr	r3, [pc, #80]	; (5d54 <system_clock_init+0x130>)
    5d04:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5d06:	2000      	movs	r0, #0
    5d08:	4b1c      	ldr	r3, [pc, #112]	; (5d7c <system_clock_init+0x158>)
    5d0a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5d0c:	2007      	movs	r0, #7
    5d0e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5d10:	490e      	ldr	r1, [pc, #56]	; (5d4c <system_clock_init+0x128>)
    5d12:	22d0      	movs	r2, #208	; 0xd0
    5d14:	68cb      	ldr	r3, [r1, #12]
    5d16:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5d18:	2bd0      	cmp	r3, #208	; 0xd0
    5d1a:	d1fb      	bne.n	5d14 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5d1c:	4a18      	ldr	r2, [pc, #96]	; (5d80 <system_clock_init+0x15c>)
    5d1e:	2300      	movs	r3, #0
    5d20:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5d22:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5d24:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5d26:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5d28:	a901      	add	r1, sp, #4
    5d2a:	2201      	movs	r2, #1
    5d2c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5d2e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5d30:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5d32:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5d34:	3307      	adds	r3, #7
    5d36:	700b      	strb	r3, [r1, #0]
    5d38:	2000      	movs	r0, #0
    5d3a:	4b0e      	ldr	r3, [pc, #56]	; (5d74 <system_clock_init+0x150>)
    5d3c:	4798      	blx	r3
    5d3e:	2000      	movs	r0, #0
    5d40:	4b0d      	ldr	r3, [pc, #52]	; (5d78 <system_clock_init+0x154>)
    5d42:	4798      	blx	r3
#endif
}
    5d44:	b00f      	add	sp, #60	; 0x3c
    5d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5d48:	3b20      	subs	r3, #32
    5d4a:	e7b2      	b.n	5cb2 <system_clock_init+0x8e>
    5d4c:	40000800 	.word	0x40000800
    5d50:	41004000 	.word	0x41004000
    5d54:	00005fbd 	.word	0x00005fbd
    5d58:	00005a45 	.word	0x00005a45
    5d5c:	00005b7d 	.word	0x00005b7d
    5d60:	00806024 	.word	0x00806024
    5d64:	000005b9 	.word	0x000005b9
    5d68:	00005afd 	.word	0x00005afd
    5d6c:	00005a09 	.word	0x00005a09
    5d70:	00005d85 	.word	0x00005d85
    5d74:	00005da9 	.word	0x00005da9
    5d78:	00005e61 	.word	0x00005e61
    5d7c:	00005f31 	.word	0x00005f31
    5d80:	40000400 	.word	0x40000400

00005d84 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5d84:	4a06      	ldr	r2, [pc, #24]	; (5da0 <system_gclk_init+0x1c>)
    5d86:	6993      	ldr	r3, [r2, #24]
    5d88:	2108      	movs	r1, #8
    5d8a:	430b      	orrs	r3, r1
    5d8c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5d8e:	2201      	movs	r2, #1
    5d90:	4b04      	ldr	r3, [pc, #16]	; (5da4 <system_gclk_init+0x20>)
    5d92:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5d94:	0019      	movs	r1, r3
    5d96:	780b      	ldrb	r3, [r1, #0]
    5d98:	4213      	tst	r3, r2
    5d9a:	d1fc      	bne.n	5d96 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5d9c:	4770      	bx	lr
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	40000400 	.word	0x40000400
    5da4:	40000c00 	.word	0x40000c00

00005da8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5da8:	b570      	push	{r4, r5, r6, lr}
    5daa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5dac:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5dae:	780d      	ldrb	r5, [r1, #0]
    5db0:	022d      	lsls	r5, r5, #8
    5db2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5db4:	784b      	ldrb	r3, [r1, #1]
    5db6:	2b00      	cmp	r3, #0
    5db8:	d002      	beq.n	5dc0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5dba:	2380      	movs	r3, #128	; 0x80
    5dbc:	02db      	lsls	r3, r3, #11
    5dbe:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5dc0:	7a4b      	ldrb	r3, [r1, #9]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d002      	beq.n	5dcc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5dc6:	2380      	movs	r3, #128	; 0x80
    5dc8:	031b      	lsls	r3, r3, #12
    5dca:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5dcc:	6848      	ldr	r0, [r1, #4]
    5dce:	2801      	cmp	r0, #1
    5dd0:	d910      	bls.n	5df4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5dd2:	1e43      	subs	r3, r0, #1
    5dd4:	4218      	tst	r0, r3
    5dd6:	d134      	bne.n	5e42 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5dd8:	2802      	cmp	r0, #2
    5dda:	d930      	bls.n	5e3e <system_gclk_gen_set_config+0x96>
    5ddc:	2302      	movs	r3, #2
    5dde:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5de0:	3201      	adds	r2, #1
						mask <<= 1) {
    5de2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5de4:	4298      	cmp	r0, r3
    5de6:	d8fb      	bhi.n	5de0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5de8:	0212      	lsls	r2, r2, #8
    5dea:	4332      	orrs	r2, r6
    5dec:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5dee:	2380      	movs	r3, #128	; 0x80
    5df0:	035b      	lsls	r3, r3, #13
    5df2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5df4:	7a0b      	ldrb	r3, [r1, #8]
    5df6:	2b00      	cmp	r3, #0
    5df8:	d002      	beq.n	5e00 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5dfa:	2380      	movs	r3, #128	; 0x80
    5dfc:	039b      	lsls	r3, r3, #14
    5dfe:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e00:	4a13      	ldr	r2, [pc, #76]	; (5e50 <system_gclk_gen_set_config+0xa8>)
    5e02:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5e04:	b25b      	sxtb	r3, r3
    5e06:	2b00      	cmp	r3, #0
    5e08:	dbfb      	blt.n	5e02 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5e0a:	4b12      	ldr	r3, [pc, #72]	; (5e54 <system_gclk_gen_set_config+0xac>)
    5e0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5e0e:	4b12      	ldr	r3, [pc, #72]	; (5e58 <system_gclk_gen_set_config+0xb0>)
    5e10:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e12:	4a0f      	ldr	r2, [pc, #60]	; (5e50 <system_gclk_gen_set_config+0xa8>)
    5e14:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5e16:	b25b      	sxtb	r3, r3
    5e18:	2b00      	cmp	r3, #0
    5e1a:	dbfb      	blt.n	5e14 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5e1c:	4b0c      	ldr	r3, [pc, #48]	; (5e50 <system_gclk_gen_set_config+0xa8>)
    5e1e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e20:	001a      	movs	r2, r3
    5e22:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5e24:	b25b      	sxtb	r3, r3
    5e26:	2b00      	cmp	r3, #0
    5e28:	dbfb      	blt.n	5e22 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5e2a:	4a09      	ldr	r2, [pc, #36]	; (5e50 <system_gclk_gen_set_config+0xa8>)
    5e2c:	6853      	ldr	r3, [r2, #4]
    5e2e:	2180      	movs	r1, #128	; 0x80
    5e30:	0249      	lsls	r1, r1, #9
    5e32:	400b      	ands	r3, r1
    5e34:	431d      	orrs	r5, r3
    5e36:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5e38:	4b08      	ldr	r3, [pc, #32]	; (5e5c <system_gclk_gen_set_config+0xb4>)
    5e3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5e3c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5e3e:	2200      	movs	r2, #0
    5e40:	e7d2      	b.n	5de8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5e42:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5e44:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5e46:	2380      	movs	r3, #128	; 0x80
    5e48:	029b      	lsls	r3, r3, #10
    5e4a:	431d      	orrs	r5, r3
    5e4c:	e7d2      	b.n	5df4 <system_gclk_gen_set_config+0x4c>
    5e4e:	46c0      	nop			; (mov r8, r8)
    5e50:	40000c00 	.word	0x40000c00
    5e54:	000043f5 	.word	0x000043f5
    5e58:	40000c08 	.word	0x40000c08
    5e5c:	00004435 	.word	0x00004435

00005e60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5e60:	b510      	push	{r4, lr}
    5e62:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e64:	4a0b      	ldr	r2, [pc, #44]	; (5e94 <system_gclk_gen_enable+0x34>)
    5e66:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e68:	b25b      	sxtb	r3, r3
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	dbfb      	blt.n	5e66 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5e6e:	4b0a      	ldr	r3, [pc, #40]	; (5e98 <system_gclk_gen_enable+0x38>)
    5e70:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e72:	4b0a      	ldr	r3, [pc, #40]	; (5e9c <system_gclk_gen_enable+0x3c>)
    5e74:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e76:	4a07      	ldr	r2, [pc, #28]	; (5e94 <system_gclk_gen_enable+0x34>)
    5e78:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e7a:	b25b      	sxtb	r3, r3
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	dbfb      	blt.n	5e78 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5e80:	4a04      	ldr	r2, [pc, #16]	; (5e94 <system_gclk_gen_enable+0x34>)
    5e82:	6851      	ldr	r1, [r2, #4]
    5e84:	2380      	movs	r3, #128	; 0x80
    5e86:	025b      	lsls	r3, r3, #9
    5e88:	430b      	orrs	r3, r1
    5e8a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5e8c:	4b04      	ldr	r3, [pc, #16]	; (5ea0 <system_gclk_gen_enable+0x40>)
    5e8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5e90:	bd10      	pop	{r4, pc}
    5e92:	46c0      	nop			; (mov r8, r8)
    5e94:	40000c00 	.word	0x40000c00
    5e98:	000043f5 	.word	0x000043f5
    5e9c:	40000c04 	.word	0x40000c04
    5ea0:	00004435 	.word	0x00004435

00005ea4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5ea4:	b570      	push	{r4, r5, r6, lr}
    5ea6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5ea8:	4a1a      	ldr	r2, [pc, #104]	; (5f14 <system_gclk_gen_get_hz+0x70>)
    5eaa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5eac:	b25b      	sxtb	r3, r3
    5eae:	2b00      	cmp	r3, #0
    5eb0:	dbfb      	blt.n	5eaa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5eb2:	4b19      	ldr	r3, [pc, #100]	; (5f18 <system_gclk_gen_get_hz+0x74>)
    5eb4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5eb6:	4b19      	ldr	r3, [pc, #100]	; (5f1c <system_gclk_gen_get_hz+0x78>)
    5eb8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5eba:	4a16      	ldr	r2, [pc, #88]	; (5f14 <system_gclk_gen_get_hz+0x70>)
    5ebc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ebe:	b25b      	sxtb	r3, r3
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	dbfb      	blt.n	5ebc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5ec4:	4e13      	ldr	r6, [pc, #76]	; (5f14 <system_gclk_gen_get_hz+0x70>)
    5ec6:	6870      	ldr	r0, [r6, #4]
    5ec8:	04c0      	lsls	r0, r0, #19
    5eca:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5ecc:	4b14      	ldr	r3, [pc, #80]	; (5f20 <system_gclk_gen_get_hz+0x7c>)
    5ece:	4798      	blx	r3
    5ed0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5ed2:	4b12      	ldr	r3, [pc, #72]	; (5f1c <system_gclk_gen_get_hz+0x78>)
    5ed4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5ed6:	6876      	ldr	r6, [r6, #4]
    5ed8:	02f6      	lsls	r6, r6, #11
    5eda:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5edc:	4b11      	ldr	r3, [pc, #68]	; (5f24 <system_gclk_gen_get_hz+0x80>)
    5ede:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5ee0:	4a0c      	ldr	r2, [pc, #48]	; (5f14 <system_gclk_gen_get_hz+0x70>)
    5ee2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ee4:	b25b      	sxtb	r3, r3
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	dbfb      	blt.n	5ee2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5eea:	4b0a      	ldr	r3, [pc, #40]	; (5f14 <system_gclk_gen_get_hz+0x70>)
    5eec:	689c      	ldr	r4, [r3, #8]
    5eee:	0224      	lsls	r4, r4, #8
    5ef0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5ef2:	4b0d      	ldr	r3, [pc, #52]	; (5f28 <system_gclk_gen_get_hz+0x84>)
    5ef4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5ef6:	2e00      	cmp	r6, #0
    5ef8:	d107      	bne.n	5f0a <system_gclk_gen_get_hz+0x66>
    5efa:	2c01      	cmp	r4, #1
    5efc:	d907      	bls.n	5f0e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5efe:	0021      	movs	r1, r4
    5f00:	0028      	movs	r0, r5
    5f02:	4b0a      	ldr	r3, [pc, #40]	; (5f2c <system_gclk_gen_get_hz+0x88>)
    5f04:	4798      	blx	r3
    5f06:	0005      	movs	r5, r0
    5f08:	e001      	b.n	5f0e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5f0a:	3401      	adds	r4, #1
    5f0c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5f0e:	0028      	movs	r0, r5
    5f10:	bd70      	pop	{r4, r5, r6, pc}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	40000c00 	.word	0x40000c00
    5f18:	000043f5 	.word	0x000043f5
    5f1c:	40000c04 	.word	0x40000c04
    5f20:	00005979 	.word	0x00005979
    5f24:	40000c08 	.word	0x40000c08
    5f28:	00004435 	.word	0x00004435
    5f2c:	00009de9 	.word	0x00009de9

00005f30 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5f30:	b510      	push	{r4, lr}
    5f32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f34:	4b06      	ldr	r3, [pc, #24]	; (5f50 <system_gclk_chan_enable+0x20>)
    5f36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f38:	4b06      	ldr	r3, [pc, #24]	; (5f54 <system_gclk_chan_enable+0x24>)
    5f3a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5f3c:	4a06      	ldr	r2, [pc, #24]	; (5f58 <system_gclk_chan_enable+0x28>)
    5f3e:	8853      	ldrh	r3, [r2, #2]
    5f40:	2180      	movs	r1, #128	; 0x80
    5f42:	01c9      	lsls	r1, r1, #7
    5f44:	430b      	orrs	r3, r1
    5f46:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5f48:	4b04      	ldr	r3, [pc, #16]	; (5f5c <system_gclk_chan_enable+0x2c>)
    5f4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5f4c:	bd10      	pop	{r4, pc}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	000043f5 	.word	0x000043f5
    5f54:	40000c02 	.word	0x40000c02
    5f58:	40000c00 	.word	0x40000c00
    5f5c:	00004435 	.word	0x00004435

00005f60 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5f60:	b510      	push	{r4, lr}
    5f62:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f64:	4b0f      	ldr	r3, [pc, #60]	; (5fa4 <system_gclk_chan_disable+0x44>)
    5f66:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f68:	4b0f      	ldr	r3, [pc, #60]	; (5fa8 <system_gclk_chan_disable+0x48>)
    5f6a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5f6c:	4a0f      	ldr	r2, [pc, #60]	; (5fac <system_gclk_chan_disable+0x4c>)
    5f6e:	8853      	ldrh	r3, [r2, #2]
    5f70:	051b      	lsls	r3, r3, #20
    5f72:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5f74:	8853      	ldrh	r3, [r2, #2]
    5f76:	490e      	ldr	r1, [pc, #56]	; (5fb0 <system_gclk_chan_disable+0x50>)
    5f78:	400b      	ands	r3, r1
    5f7a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5f7c:	8853      	ldrh	r3, [r2, #2]
    5f7e:	490d      	ldr	r1, [pc, #52]	; (5fb4 <system_gclk_chan_disable+0x54>)
    5f80:	400b      	ands	r3, r1
    5f82:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5f84:	0011      	movs	r1, r2
    5f86:	2280      	movs	r2, #128	; 0x80
    5f88:	01d2      	lsls	r2, r2, #7
    5f8a:	884b      	ldrh	r3, [r1, #2]
    5f8c:	4213      	tst	r3, r2
    5f8e:	d1fc      	bne.n	5f8a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5f90:	4906      	ldr	r1, [pc, #24]	; (5fac <system_gclk_chan_disable+0x4c>)
    5f92:	884a      	ldrh	r2, [r1, #2]
    5f94:	0203      	lsls	r3, r0, #8
    5f96:	4806      	ldr	r0, [pc, #24]	; (5fb0 <system_gclk_chan_disable+0x50>)
    5f98:	4002      	ands	r2, r0
    5f9a:	4313      	orrs	r3, r2
    5f9c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    5f9e:	4b06      	ldr	r3, [pc, #24]	; (5fb8 <system_gclk_chan_disable+0x58>)
    5fa0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5fa2:	bd10      	pop	{r4, pc}
    5fa4:	000043f5 	.word	0x000043f5
    5fa8:	40000c02 	.word	0x40000c02
    5fac:	40000c00 	.word	0x40000c00
    5fb0:	fffff0ff 	.word	0xfffff0ff
    5fb4:	ffffbfff 	.word	0xffffbfff
    5fb8:	00004435 	.word	0x00004435

00005fbc <system_gclk_chan_set_config>:
{
    5fbc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5fbe:	780c      	ldrb	r4, [r1, #0]
    5fc0:	0224      	lsls	r4, r4, #8
    5fc2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5fc4:	4b02      	ldr	r3, [pc, #8]	; (5fd0 <system_gclk_chan_set_config+0x14>)
    5fc6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5fc8:	b2a4      	uxth	r4, r4
    5fca:	4b02      	ldr	r3, [pc, #8]	; (5fd4 <system_gclk_chan_set_config+0x18>)
    5fcc:	805c      	strh	r4, [r3, #2]
}
    5fce:	bd10      	pop	{r4, pc}
    5fd0:	00005f61 	.word	0x00005f61
    5fd4:	40000c00 	.word	0x40000c00

00005fd8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5fd8:	b510      	push	{r4, lr}
    5fda:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5fdc:	4b06      	ldr	r3, [pc, #24]	; (5ff8 <system_gclk_chan_get_hz+0x20>)
    5fde:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5fe0:	4b06      	ldr	r3, [pc, #24]	; (5ffc <system_gclk_chan_get_hz+0x24>)
    5fe2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5fe4:	4b06      	ldr	r3, [pc, #24]	; (6000 <system_gclk_chan_get_hz+0x28>)
    5fe6:	885c      	ldrh	r4, [r3, #2]
    5fe8:	0524      	lsls	r4, r4, #20
    5fea:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5fec:	4b05      	ldr	r3, [pc, #20]	; (6004 <system_gclk_chan_get_hz+0x2c>)
    5fee:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5ff0:	0020      	movs	r0, r4
    5ff2:	4b05      	ldr	r3, [pc, #20]	; (6008 <system_gclk_chan_get_hz+0x30>)
    5ff4:	4798      	blx	r3
}
    5ff6:	bd10      	pop	{r4, pc}
    5ff8:	000043f5 	.word	0x000043f5
    5ffc:	40000c02 	.word	0x40000c02
    6000:	40000c00 	.word	0x40000c00
    6004:	00004435 	.word	0x00004435
    6008:	00005ea5 	.word	0x00005ea5

0000600c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    600c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    600e:	78d3      	ldrb	r3, [r2, #3]
    6010:	2b00      	cmp	r3, #0
    6012:	d135      	bne.n	6080 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6014:	7813      	ldrb	r3, [r2, #0]
    6016:	2b80      	cmp	r3, #128	; 0x80
    6018:	d029      	beq.n	606e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    601a:	061b      	lsls	r3, r3, #24
    601c:	2480      	movs	r4, #128	; 0x80
    601e:	0264      	lsls	r4, r4, #9
    6020:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6022:	7854      	ldrb	r4, [r2, #1]
    6024:	2502      	movs	r5, #2
    6026:	43ac      	bics	r4, r5
    6028:	d106      	bne.n	6038 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    602a:	7894      	ldrb	r4, [r2, #2]
    602c:	2c00      	cmp	r4, #0
    602e:	d120      	bne.n	6072 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6030:	2480      	movs	r4, #128	; 0x80
    6032:	02a4      	lsls	r4, r4, #10
    6034:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6036:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6038:	7854      	ldrb	r4, [r2, #1]
    603a:	3c01      	subs	r4, #1
    603c:	2c01      	cmp	r4, #1
    603e:	d91c      	bls.n	607a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6040:	040d      	lsls	r5, r1, #16
    6042:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6044:	24a0      	movs	r4, #160	; 0xa0
    6046:	05e4      	lsls	r4, r4, #23
    6048:	432c      	orrs	r4, r5
    604a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    604c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    604e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6050:	24d0      	movs	r4, #208	; 0xd0
    6052:	0624      	lsls	r4, r4, #24
    6054:	432c      	orrs	r4, r5
    6056:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6058:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    605a:	78d4      	ldrb	r4, [r2, #3]
    605c:	2c00      	cmp	r4, #0
    605e:	d122      	bne.n	60a6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6060:	035b      	lsls	r3, r3, #13
    6062:	d51c      	bpl.n	609e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6064:	7893      	ldrb	r3, [r2, #2]
    6066:	2b01      	cmp	r3, #1
    6068:	d01e      	beq.n	60a8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    606a:	6141      	str	r1, [r0, #20]
    606c:	e017      	b.n	609e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    606e:	2300      	movs	r3, #0
    6070:	e7d7      	b.n	6022 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6072:	24c0      	movs	r4, #192	; 0xc0
    6074:	02e4      	lsls	r4, r4, #11
    6076:	4323      	orrs	r3, r4
    6078:	e7dd      	b.n	6036 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    607a:	4c0d      	ldr	r4, [pc, #52]	; (60b0 <_system_pinmux_config+0xa4>)
    607c:	4023      	ands	r3, r4
    607e:	e7df      	b.n	6040 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6080:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6082:	040c      	lsls	r4, r1, #16
    6084:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6086:	23a0      	movs	r3, #160	; 0xa0
    6088:	05db      	lsls	r3, r3, #23
    608a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    608c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    608e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6090:	23d0      	movs	r3, #208	; 0xd0
    6092:	061b      	lsls	r3, r3, #24
    6094:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6096:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6098:	78d3      	ldrb	r3, [r2, #3]
    609a:	2b00      	cmp	r3, #0
    609c:	d103      	bne.n	60a6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    609e:	7853      	ldrb	r3, [r2, #1]
    60a0:	3b01      	subs	r3, #1
    60a2:	2b01      	cmp	r3, #1
    60a4:	d902      	bls.n	60ac <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    60a6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    60a8:	6181      	str	r1, [r0, #24]
    60aa:	e7f8      	b.n	609e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    60ac:	6081      	str	r1, [r0, #8]
}
    60ae:	e7fa      	b.n	60a6 <_system_pinmux_config+0x9a>
    60b0:	fffbffff 	.word	0xfffbffff

000060b4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    60b4:	b510      	push	{r4, lr}
    60b6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    60b8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    60ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60bc:	2900      	cmp	r1, #0
    60be:	d104      	bne.n	60ca <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    60c0:	0943      	lsrs	r3, r0, #5
    60c2:	01db      	lsls	r3, r3, #7
    60c4:	4905      	ldr	r1, [pc, #20]	; (60dc <system_pinmux_pin_set_config+0x28>)
    60c6:	468c      	mov	ip, r1
    60c8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    60ca:	241f      	movs	r4, #31
    60cc:	4020      	ands	r0, r4
    60ce:	2101      	movs	r1, #1
    60d0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    60d2:	0018      	movs	r0, r3
    60d4:	4b02      	ldr	r3, [pc, #8]	; (60e0 <system_pinmux_pin_set_config+0x2c>)
    60d6:	4798      	blx	r3
}
    60d8:	bd10      	pop	{r4, pc}
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	41004400 	.word	0x41004400
    60e0:	0000600d 	.word	0x0000600d

000060e4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    60e4:	4770      	bx	lr
	...

000060e8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    60e8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    60ea:	4b05      	ldr	r3, [pc, #20]	; (6100 <system_init+0x18>)
    60ec:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    60ee:	4b05      	ldr	r3, [pc, #20]	; (6104 <system_init+0x1c>)
    60f0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    60f2:	4b05      	ldr	r3, [pc, #20]	; (6108 <system_init+0x20>)
    60f4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    60f6:	4b05      	ldr	r3, [pc, #20]	; (610c <system_init+0x24>)
    60f8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    60fa:	4b05      	ldr	r3, [pc, #20]	; (6110 <system_init+0x28>)
    60fc:	4798      	blx	r3
}
    60fe:	bd10      	pop	{r4, pc}
    6100:	00005c25 	.word	0x00005c25
    6104:	00004465 	.word	0x00004465
    6108:	000060e5 	.word	0x000060e5
    610c:	00004575 	.word	0x00004575
    6110:	000060e5 	.word	0x000060e5

00006114 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    6114:	4b09      	ldr	r3, [pc, #36]	; (613c <_tcc_get_inst_index+0x28>)
    6116:	4298      	cmp	r0, r3
    6118:	d00c      	beq.n	6134 <_tcc_get_inst_index+0x20>
    611a:	4b09      	ldr	r3, [pc, #36]	; (6140 <_tcc_get_inst_index+0x2c>)
    611c:	4298      	cmp	r0, r3
    611e:	d007      	beq.n	6130 <_tcc_get_inst_index+0x1c>
    6120:	4a08      	ldr	r2, [pc, #32]	; (6144 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6122:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    6124:	4290      	cmp	r0, r2
    6126:	d001      	beq.n	612c <_tcc_get_inst_index+0x18>
}
    6128:	0018      	movs	r0, r3
    612a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    612c:	3302      	adds	r3, #2
    612e:	e002      	b.n	6136 <_tcc_get_inst_index+0x22>
    6130:	2301      	movs	r3, #1
    6132:	e000      	b.n	6136 <_tcc_get_inst_index+0x22>
    6134:	2300      	movs	r3, #0
			return i;
    6136:	b2db      	uxtb	r3, r3
    6138:	e7f6      	b.n	6128 <_tcc_get_inst_index+0x14>
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	42002000 	.word	0x42002000
    6140:	42002400 	.word	0x42002400
    6144:	42002800 	.word	0x42002800

00006148 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6148:	b510      	push	{r4, lr}
    614a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    614c:	0008      	movs	r0, r1
    614e:	4b4f      	ldr	r3, [pc, #316]	; (628c <tcc_get_config_defaults+0x144>)
    6150:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    6152:	2300      	movs	r3, #0
    6154:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6156:	0080      	lsls	r0, r0, #2
    6158:	4a4d      	ldr	r2, [pc, #308]	; (6290 <tcc_get_config_defaults+0x148>)
    615a:	5882      	ldr	r2, [r0, r2]
    615c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    615e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    6160:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    6162:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    6166:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6168:	61e3      	str	r3, [r4, #28]
    616a:	6223      	str	r3, [r4, #32]
    616c:	6263      	str	r3, [r4, #36]	; 0x24
    616e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6170:	7523      	strb	r3, [r4, #20]
    6172:	7563      	strb	r3, [r4, #21]
    6174:	75a3      	strb	r3, [r4, #22]
    6176:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    6178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    617a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    617c:	7423      	strb	r3, [r4, #16]
    617e:	7463      	strb	r3, [r4, #17]
    6180:	74a3      	strb	r3, [r4, #18]
    6182:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    6184:	222c      	movs	r2, #44	; 0x2c
    6186:	54a3      	strb	r3, [r4, r2]
    6188:	3201      	adds	r2, #1
    618a:	54a3      	strb	r3, [r4, r2]
    618c:	3201      	adds	r2, #1
    618e:	54a3      	strb	r3, [r4, r2]
    6190:	3201      	adds	r2, #1
    6192:	54a3      	strb	r3, [r4, r2]
    6194:	3201      	adds	r2, #1
    6196:	54a3      	strb	r3, [r4, r2]
    6198:	3201      	adds	r2, #1
    619a:	54a3      	strb	r3, [r4, r2]
    619c:	3201      	adds	r2, #1
    619e:	54a3      	strb	r3, [r4, r2]
    61a0:	3201      	adds	r2, #1
    61a2:	54a3      	strb	r3, [r4, r2]
    61a4:	3201      	adds	r2, #1
    61a6:	54a3      	strb	r3, [r4, r2]
    61a8:	3201      	adds	r2, #1
    61aa:	54a3      	strb	r3, [r4, r2]
    61ac:	3201      	adds	r2, #1
    61ae:	54a3      	strb	r3, [r4, r2]
    61b0:	3201      	adds	r2, #1
    61b2:	54a3      	strb	r3, [r4, r2]
    61b4:	3201      	adds	r2, #1
    61b6:	54a3      	strb	r3, [r4, r2]
    61b8:	3201      	adds	r2, #1
    61ba:	54a3      	strb	r3, [r4, r2]
    61bc:	3201      	adds	r2, #1
    61be:	54a3      	strb	r3, [r4, r2]
    61c0:	3201      	adds	r2, #1
    61c2:	54a3      	strb	r3, [r4, r2]
    61c4:	3201      	adds	r2, #1
    61c6:	54a3      	strb	r3, [r4, r2]
    61c8:	3201      	adds	r2, #1
    61ca:	54a3      	strb	r3, [r4, r2]
    61cc:	3201      	adds	r2, #1
    61ce:	54a3      	strb	r3, [r4, r2]
    61d0:	3201      	adds	r2, #1
    61d2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    61d4:	3201      	adds	r2, #1
    61d6:	54a3      	strb	r3, [r4, r2]
    61d8:	3201      	adds	r2, #1
    61da:	54a3      	strb	r3, [r4, r2]
    61dc:	3201      	adds	r2, #1
    61de:	54a3      	strb	r3, [r4, r2]
    61e0:	3201      	adds	r2, #1
    61e2:	54a3      	strb	r3, [r4, r2]
    61e4:	3201      	adds	r2, #1
    61e6:	54a3      	strb	r3, [r4, r2]
    61e8:	3201      	adds	r2, #1
    61ea:	54a3      	strb	r3, [r4, r2]
    61ec:	3201      	adds	r2, #1
    61ee:	54a3      	strb	r3, [r4, r2]
    61f0:	3201      	adds	r2, #1
    61f2:	54a3      	strb	r3, [r4, r2]
    61f4:	3201      	adds	r2, #1
    61f6:	54a3      	strb	r3, [r4, r2]
    61f8:	3201      	adds	r2, #1
    61fa:	54a3      	strb	r3, [r4, r2]
    61fc:	3201      	adds	r2, #1
    61fe:	54a3      	strb	r3, [r4, r2]
    6200:	3201      	adds	r2, #1
    6202:	54a3      	strb	r3, [r4, r2]
    6204:	3201      	adds	r2, #1
    6206:	54a3      	strb	r3, [r4, r2]
    6208:	3201      	adds	r2, #1
    620a:	54a3      	strb	r3, [r4, r2]
    620c:	3201      	adds	r2, #1
    620e:	54a3      	strb	r3, [r4, r2]
    6210:	3201      	adds	r2, #1
    6212:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6214:	3201      	adds	r2, #1
    6216:	54a3      	strb	r3, [r4, r2]
    6218:	3201      	adds	r2, #1
    621a:	54a3      	strb	r3, [r4, r2]
    621c:	3201      	adds	r2, #1
    621e:	54a3      	strb	r3, [r4, r2]
    6220:	3201      	adds	r2, #1
    6222:	54a3      	strb	r3, [r4, r2]
    6224:	3201      	adds	r2, #1
    6226:	54a3      	strb	r3, [r4, r2]
    6228:	3201      	adds	r2, #1
    622a:	54a3      	strb	r3, [r4, r2]
    622c:	3201      	adds	r2, #1
    622e:	54a3      	strb	r3, [r4, r2]
    6230:	3201      	adds	r2, #1
    6232:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6234:	3241      	adds	r2, #65	; 0x41
    6236:	54a3      	strb	r3, [r4, r2]
    6238:	65a3      	str	r3, [r4, #88]	; 0x58
    623a:	67a3      	str	r3, [r4, #120]	; 0x78
    623c:	3201      	adds	r2, #1
    623e:	54a3      	strb	r3, [r4, r2]
    6240:	65e3      	str	r3, [r4, #92]	; 0x5c
    6242:	67e3      	str	r3, [r4, #124]	; 0x7c
    6244:	3201      	adds	r2, #1
    6246:	54a3      	strb	r3, [r4, r2]
    6248:	6623      	str	r3, [r4, #96]	; 0x60
    624a:	3a1a      	subs	r2, #26
    624c:	50a3      	str	r3, [r4, r2]
    624e:	321b      	adds	r2, #27
    6250:	54a3      	strb	r3, [r4, r2]
    6252:	6663      	str	r3, [r4, #100]	; 0x64
    6254:	3a17      	subs	r2, #23
    6256:	50a3      	str	r3, [r4, r2]
    6258:	3218      	adds	r2, #24
    625a:	54a3      	strb	r3, [r4, r2]
    625c:	66a3      	str	r3, [r4, #104]	; 0x68
    625e:	3a14      	subs	r2, #20
    6260:	50a3      	str	r3, [r4, r2]
    6262:	3215      	adds	r2, #21
    6264:	54a3      	strb	r3, [r4, r2]
    6266:	66e3      	str	r3, [r4, #108]	; 0x6c
    6268:	3a11      	subs	r2, #17
    626a:	50a3      	str	r3, [r4, r2]
    626c:	3212      	adds	r2, #18
    626e:	54a3      	strb	r3, [r4, r2]
    6270:	6723      	str	r3, [r4, #112]	; 0x70
    6272:	3a0e      	subs	r2, #14
    6274:	50a3      	str	r3, [r4, r2]
    6276:	320f      	adds	r2, #15
    6278:	54a3      	strb	r3, [r4, r2]
    627a:	6763      	str	r3, [r4, #116]	; 0x74
    627c:	3a0b      	subs	r2, #11
    627e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    6280:	2101      	movs	r1, #1
    6282:	320c      	adds	r2, #12
    6284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    6286:	3201      	adds	r2, #1
    6288:	54a3      	strb	r3, [r4, r2]
}
    628a:	bd10      	pop	{r4, pc}
    628c:	00006115 	.word	0x00006115
    6290:	0000c828 	.word	0x0000c828

00006294 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    6294:	b5f0      	push	{r4, r5, r6, r7, lr}
    6296:	46de      	mov	lr, fp
    6298:	4657      	mov	r7, sl
    629a:	464e      	mov	r6, r9
    629c:	4645      	mov	r5, r8
    629e:	b5e0      	push	{r5, r6, r7, lr}
    62a0:	b091      	sub	sp, #68	; 0x44
    62a2:	9001      	str	r0, [sp, #4]
    62a4:	000c      	movs	r4, r1
    62a6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    62a8:	0008      	movs	r0, r1
    62aa:	4bc3      	ldr	r3, [pc, #780]	; (65b8 <tcc_init+0x324>)
    62ac:	4798      	blx	r3
    62ae:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    62b0:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    62b2:	48c2      	ldr	r0, [pc, #776]	; (65bc <tcc_init+0x328>)
    62b4:	6a02      	ldr	r2, [r0, #32]
    62b6:	009e      	lsls	r6, r3, #2
    62b8:	4fc1      	ldr	r7, [pc, #772]	; (65c0 <tcc_init+0x32c>)
    62ba:	59f7      	ldr	r7, [r6, r7]
    62bc:	433a      	orrs	r2, r7
    62be:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    62c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    62c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    62c4:	0792      	lsls	r2, r2, #30
    62c6:	d506      	bpl.n	62d6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    62c8:	b011      	add	sp, #68	; 0x44
    62ca:	bc3c      	pop	{r2, r3, r4, r5}
    62cc:	4690      	mov	r8, r2
    62ce:	4699      	mov	r9, r3
    62d0:	46a2      	mov	sl, r4
    62d2:	46ab      	mov	fp, r5
    62d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    62d6:	6822      	ldr	r2, [r4, #0]
    62d8:	2701      	movs	r7, #1
    62da:	4017      	ands	r7, r2
    62dc:	d1f4      	bne.n	62c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    62de:	48b9      	ldr	r0, [pc, #740]	; (65c4 <tcc_init+0x330>)
    62e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    62e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    62e4:	682e      	ldr	r6, [r5, #0]
    62e6:	42b2      	cmp	r2, r6
    62e8:	d3ee      	bcc.n	62c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    62ea:	686e      	ldr	r6, [r5, #4]
    62ec:	42b2      	cmp	r2, r6
    62ee:	d3eb      	bcc.n	62c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    62f0:	69e8      	ldr	r0, [r5, #28]
    62f2:	4282      	cmp	r2, r0
    62f4:	d200      	bcs.n	62f8 <tcc_init+0x64>
    62f6:	e1b9      	b.n	666c <tcc_init+0x3d8>
    62f8:	6a28      	ldr	r0, [r5, #32]
    62fa:	4282      	cmp	r2, r0
    62fc:	d200      	bcs.n	6300 <tcc_init+0x6c>
    62fe:	e1b7      	b.n	6670 <tcc_init+0x3dc>
    6300:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6302:	4282      	cmp	r2, r0
    6304:	d200      	bcs.n	6308 <tcc_init+0x74>
    6306:	e1b5      	b.n	6674 <tcc_init+0x3e0>
    6308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    630a:	4282      	cmp	r2, r0
    630c:	d200      	bcs.n	6310 <tcc_init+0x7c>
    630e:	e1b3      	b.n	6678 <tcc_init+0x3e4>
    6310:	2298      	movs	r2, #152	; 0x98
    6312:	4694      	mov	ip, r2
    6314:	44ac      	add	ip, r5
    6316:	4662      	mov	r2, ip
    6318:	9208      	str	r2, [sp, #32]
    631a:	2000      	movs	r0, #0
    631c:	e003      	b.n	6326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    631e:	3001      	adds	r0, #1
    6320:	3201      	adds	r2, #1
    6322:	2808      	cmp	r0, #8
    6324:	d008      	beq.n	6338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    6326:	7816      	ldrb	r6, [r2, #0]
    6328:	2e00      	cmp	r6, #0
    632a:	d0f8      	beq.n	631e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    632c:	4ea6      	ldr	r6, [pc, #664]	; (65c8 <tcc_init+0x334>)
    632e:	5c76      	ldrb	r6, [r6, r1]
    6330:	4286      	cmp	r6, r0
    6332:	dcf4      	bgt.n	631e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    6334:	2017      	movs	r0, #23
    6336:	e7c7      	b.n	62c8 <tcc_init+0x34>
    6338:	2200      	movs	r2, #0
    633a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    633c:	2080      	movs	r0, #128	; 0x80
    633e:	0440      	lsls	r0, r0, #17
    6340:	4684      	mov	ip, r0
    6342:	e002      	b.n	634a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6344:	3201      	adds	r2, #1
    6346:	2a04      	cmp	r2, #4
    6348:	d00e      	beq.n	6368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    634a:	18a8      	adds	r0, r5, r2
    634c:	7c00      	ldrb	r0, [r0, #16]
    634e:	2801      	cmp	r0, #1
    6350:	d1f8      	bne.n	6344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    6352:	489e      	ldr	r0, [pc, #632]	; (65cc <tcc_init+0x338>)
    6354:	5c40      	ldrb	r0, [r0, r1]
    6356:	4290      	cmp	r0, r2
    6358:	da00      	bge.n	635c <tcc_init+0xc8>
    635a:	e18f      	b.n	667c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    635c:	4660      	mov	r0, ip
    635e:	4090      	lsls	r0, r2
    6360:	9e02      	ldr	r6, [sp, #8]
    6362:	4306      	orrs	r6, r0
    6364:	9602      	str	r6, [sp, #8]
    6366:	e7ed      	b.n	6344 <tcc_init+0xb0>
	if (config->run_in_standby) {
    6368:	329d      	adds	r2, #157	; 0x9d
    636a:	5caa      	ldrb	r2, [r5, r2]
    636c:	2a00      	cmp	r2, #0
    636e:	d004      	beq.n	637a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    6370:	2280      	movs	r2, #128	; 0x80
    6372:	0112      	lsls	r2, r2, #4
    6374:	9902      	ldr	r1, [sp, #8]
    6376:	4311      	orrs	r1, r2
    6378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    637a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    637c:	1e51      	subs	r1, r2, #1
    637e:	418a      	sbcs	r2, r1
    6380:	0092      	lsls	r2, r2, #2
    6382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    6384:	7a6a      	ldrb	r2, [r5, #9]
    6386:	2a01      	cmp	r2, #1
    6388:	d022      	beq.n	63d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    638a:	4a90      	ldr	r2, [pc, #576]	; (65cc <tcc_init+0x338>)
    638c:	5cd2      	ldrb	r2, [r2, r3]
    638e:	0011      	movs	r1, r2
    6390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    6392:	2235      	movs	r2, #53	; 0x35
    6394:	5caa      	ldrb	r2, [r5, r2]
    6396:	428a      	cmp	r2, r1
    6398:	d300      	bcc.n	639c <tcc_init+0x108>
    639a:	e179      	b.n	6690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    639c:	212c      	movs	r1, #44	; 0x2c
    639e:	5c69      	ldrb	r1, [r5, r1]
    63a0:	290f      	cmp	r1, #15
    63a2:	d900      	bls.n	63a6 <tcc_init+0x112>
    63a4:	e174      	b.n	6690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    63a6:	7b28      	ldrb	r0, [r5, #12]
    63a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    63aa:	7ae8      	ldrb	r0, [r5, #11]
    63ac:	900b      	str	r0, [sp, #44]	; 0x2c
    63ae:	202d      	movs	r0, #45	; 0x2d
    63b0:	4682      	mov	sl, r0
    63b2:	44aa      	add	sl, r5
    63b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    63b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    63b8:	ae0e      	add	r6, sp, #56	; 0x38
    63ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    63bc:	26c0      	movs	r6, #192	; 0xc0
    63be:	0136      	lsls	r6, r6, #4
    63c0:	46b1      	mov	r9, r6
    63c2:	4684      	mov	ip, r0
    63c4:	46a0      	mov	r8, r4
    63c6:	0028      	movs	r0, r5
    63c8:	4655      	mov	r5, sl
    63ca:	9309      	str	r3, [sp, #36]	; 0x24
    63cc:	4682      	mov	sl, r0
    63ce:	e035      	b.n	643c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    63d0:	9906      	ldr	r1, [sp, #24]
    63d2:	4311      	orrs	r1, r2
    63d4:	9106      	str	r1, [sp, #24]
    63d6:	e7d8      	b.n	638a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    63d8:	0292      	lsls	r2, r2, #10
    63da:	464f      	mov	r7, r9
    63dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    63de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    63e0:	7919      	ldrb	r1, [r3, #4]
    63e2:	468b      	mov	fp, r1
    63e4:	2103      	movs	r1, #3
    63e6:	465f      	mov	r7, fp
    63e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    63ea:	430a      	orrs	r2, r1
    63ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    63ee:	795a      	ldrb	r2, [r3, #5]
    63f0:	0152      	lsls	r2, r2, #5
    63f2:	2160      	movs	r1, #96	; 0x60
    63f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    63f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    63f8:	7999      	ldrb	r1, [r3, #6]
    63fa:	0209      	lsls	r1, r1, #8
    63fc:	26c0      	movs	r6, #192	; 0xc0
    63fe:	00b6      	lsls	r6, r6, #2
    6400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    6404:	79da      	ldrb	r2, [r3, #7]
    6406:	0312      	lsls	r2, r2, #12
    6408:	21e0      	movs	r1, #224	; 0xe0
    640a:	01c9      	lsls	r1, r1, #7
    640c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    640e:	4316      	orrs	r6, r2
    6410:	4334      	orrs	r4, r6
    6412:	9a03      	ldr	r2, [sp, #12]
    6414:	4314      	orrs	r4, r2
    6416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    6418:	4662      	mov	r2, ip
    641a:	9907      	ldr	r1, [sp, #28]
    641c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    641e:	2a04      	cmp	r2, #4
    6420:	d02a      	beq.n	6478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    6422:	7c9a      	ldrb	r2, [r3, #18]
    6424:	9905      	ldr	r1, [sp, #20]
    6426:	4291      	cmp	r1, r2
    6428:	d800      	bhi.n	642c <tcc_init+0x198>
    642a:	e131      	b.n	6690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    642c:	7a59      	ldrb	r1, [r3, #9]
    642e:	350a      	adds	r5, #10
    6430:	2304      	movs	r3, #4
    6432:	469b      	mov	fp, r3
    6434:	44dc      	add	ip, fp
    6436:	290f      	cmp	r1, #15
    6438:	d900      	bls.n	643c <tcc_init+0x1a8>
    643a:	e129      	b.n	6690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    643c:	0609      	lsls	r1, r1, #24
    643e:	23f0      	movs	r3, #240	; 0xf0
    6440:	051b      	lsls	r3, r3, #20
    6442:	4019      	ands	r1, r3
    6444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    6446:	782e      	ldrb	r6, [r5, #0]
    6448:	0436      	lsls	r6, r6, #16
    644a:	20ff      	movs	r0, #255	; 0xff
    644c:	0400      	lsls	r0, r0, #16
    644e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    6450:	7868      	ldrb	r0, [r5, #1]
    6452:	2480      	movs	r4, #128	; 0x80
    6454:	2800      	cmp	r0, #0
    6456:	d100      	bne.n	645a <tcc_init+0x1c6>
    6458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    645a:	7898      	ldrb	r0, [r3, #2]
    645c:	2708      	movs	r7, #8
    645e:	9703      	str	r7, [sp, #12]
    6460:	2800      	cmp	r0, #0
    6462:	d101      	bne.n	6468 <tcc_init+0x1d4>
    6464:	9804      	ldr	r0, [sp, #16]
    6466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    6468:	78d8      	ldrb	r0, [r3, #3]
    646a:	4683      	mov	fp, r0
    646c:	2010      	movs	r0, #16
    646e:	465f      	mov	r7, fp
    6470:	2f00      	cmp	r7, #0
    6472:	d1b1      	bne.n	63d8 <tcc_init+0x144>
    6474:	9804      	ldr	r0, [sp, #16]
    6476:	e7af      	b.n	63d8 <tcc_init+0x144>
    6478:	4644      	mov	r4, r8
    647a:	4655      	mov	r5, sl
    647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    647e:	4a52      	ldr	r2, [pc, #328]	; (65c8 <tcc_init+0x334>)
    6480:	5cd2      	ldrb	r2, [r2, r3]
    6482:	4691      	mov	r9, r2
    6484:	4651      	mov	r1, sl
    6486:	3150      	adds	r1, #80	; 0x50
    6488:	4650      	mov	r0, sl
    648a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    648c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    648e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    6490:	2601      	movs	r6, #1
    6492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    6494:	2602      	movs	r6, #2
    6496:	36ff      	adds	r6, #255	; 0xff
    6498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    649a:	2680      	movs	r6, #128	; 0x80
    649c:	0276      	lsls	r6, r6, #9
    649e:	46b0      	mov	r8, r6
    64a0:	46a4      	mov	ip, r4
    64a2:	001c      	movs	r4, r3
    64a4:	464b      	mov	r3, r9
    64a6:	e00f      	b.n	64c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    64a8:	7806      	ldrb	r6, [r0, #0]
    64aa:	2e00      	cmp	r6, #0
    64ac:	d007      	beq.n	64be <tcc_init+0x22a>
			if (i >= ow_num) {
    64ae:	4293      	cmp	r3, r2
    64b0:	d800      	bhi.n	64b4 <tcc_init+0x220>
    64b2:	e0e7      	b.n	6684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    64b4:	2e02      	cmp	r6, #2
    64b6:	d014      	beq.n	64e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    64b8:	4656      	mov	r6, sl
    64ba:	4096      	lsls	r6, r2
    64bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    64be:	3201      	adds	r2, #1
    64c0:	3101      	adds	r1, #1
    64c2:	3002      	adds	r0, #2
    64c4:	2a08      	cmp	r2, #8
    64c6:	d010      	beq.n	64ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    64c8:	780e      	ldrb	r6, [r1, #0]
    64ca:	2e00      	cmp	r6, #0
    64cc:	d0ec      	beq.n	64a8 <tcc_init+0x214>
			if (i >= ow_num) {
    64ce:	4293      	cmp	r3, r2
    64d0:	d800      	bhi.n	64d4 <tcc_init+0x240>
    64d2:	e0d5      	b.n	6680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    64d4:	4646      	mov	r6, r8
    64d6:	4096      	lsls	r6, r2
    64d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    64da:	7806      	ldrb	r6, [r0, #0]
    64dc:	2e00      	cmp	r6, #0
    64de:	d1e9      	bne.n	64b4 <tcc_init+0x220>
    64e0:	e7ed      	b.n	64be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    64e2:	465e      	mov	r6, fp
    64e4:	4096      	lsls	r6, r2
    64e6:	4337      	orrs	r7, r6
    64e8:	e7e9      	b.n	64be <tcc_init+0x22a>
    64ea:	4699      	mov	r9, r3
    64ec:	0023      	movs	r3, r4
    64ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    64f0:	7e6a      	ldrb	r2, [r5, #25]
    64f2:	0112      	lsls	r2, r2, #4
    64f4:	2130      	movs	r1, #48	; 0x30
    64f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    64f8:	7e28      	ldrb	r0, [r5, #24]
    64fa:	2207      	movs	r2, #7
    64fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    64fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    6502:	2080      	movs	r0, #128	; 0x80
    6504:	0240      	lsls	r0, r0, #9
    6506:	000e      	movs	r6, r1
    6508:	e002      	b.n	6510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    650a:	3201      	adds	r2, #1
    650c:	2a04      	cmp	r2, #4
    650e:	d00b      	beq.n	6528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    6510:	18a9      	adds	r1, r5, r2
    6512:	7d09      	ldrb	r1, [r1, #20]
    6514:	2900      	cmp	r1, #0
    6516:	d0f8      	beq.n	650a <tcc_init+0x276>
			if (n >= cc_num) {
    6518:	9905      	ldr	r1, [sp, #20]
    651a:	4291      	cmp	r1, r2
    651c:	dc00      	bgt.n	6520 <tcc_init+0x28c>
    651e:	e0b3      	b.n	6688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    6520:	0001      	movs	r1, r0
    6522:	4091      	lsls	r1, r2
    6524:	430e      	orrs	r6, r1
    6526:	e7f0      	b.n	650a <tcc_init+0x276>
    6528:	46b2      	mov	sl, r6
    652a:	9801      	ldr	r0, [sp, #4]
    652c:	0002      	movs	r2, r0
    652e:	3204      	adds	r2, #4
    6530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    6532:	2100      	movs	r1, #0
    6534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6536:	4282      	cmp	r2, r0
    6538:	d1fc      	bne.n	6534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    653a:	2200      	movs	r2, #0
    653c:	9801      	ldr	r0, [sp, #4]
    653e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    6540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    6542:	0099      	lsls	r1, r3, #2
    6544:	4a22      	ldr	r2, [pc, #136]	; (65d0 <tcc_init+0x33c>)
    6546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    6548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    654a:	22a0      	movs	r2, #160	; 0xa0
    654c:	5ca9      	ldrb	r1, [r5, r2]
    654e:	3a64      	subs	r2, #100	; 0x64
    6550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    6552:	a90d      	add	r1, sp, #52	; 0x34
    6554:	7aaa      	ldrb	r2, [r5, #10]
    6556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6558:	4a1e      	ldr	r2, [pc, #120]	; (65d4 <tcc_init+0x340>)
    655a:	5cd6      	ldrb	r6, [r2, r3]
    655c:	0030      	movs	r0, r6
    655e:	4b1e      	ldr	r3, [pc, #120]	; (65d8 <tcc_init+0x344>)
    6560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    6562:	0030      	movs	r0, r6
    6564:	4b1d      	ldr	r3, [pc, #116]	; (65dc <tcc_init+0x348>)
    6566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6568:	464b      	mov	r3, r9
    656a:	2b00      	cmp	r3, #0
    656c:	dd3c      	ble.n	65e8 <tcc_init+0x354>
    656e:	002e      	movs	r6, r5
    6570:	3658      	adds	r6, #88	; 0x58
    6572:	3398      	adds	r3, #152	; 0x98
    6574:	4698      	mov	r8, r3
    6576:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6578:	2301      	movs	r3, #1
    657a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    657c:	46ab      	mov	fp, r5
    657e:	4645      	mov	r5, r8
    6580:	46a0      	mov	r8, r4
    6582:	9c08      	ldr	r4, [sp, #32]
    6584:	e003      	b.n	658e <tcc_init+0x2fa>
    6586:	3401      	adds	r4, #1
    6588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    658a:	42ac      	cmp	r4, r5
    658c:	d02a      	beq.n	65e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    658e:	7823      	ldrb	r3, [r4, #0]
    6590:	2b00      	cmp	r3, #0
    6592:	d0f8      	beq.n	6586 <tcc_init+0x2f2>
    6594:	ab0c      	add	r3, sp, #48	; 0x30
    6596:	464a      	mov	r2, r9
    6598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    659a:	2300      	movs	r3, #0
    659c:	aa0c      	add	r2, sp, #48	; 0x30
    659e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    65a0:	0013      	movs	r3, r2
    65a2:	2220      	movs	r2, #32
    65a4:	18b2      	adds	r2, r6, r2
    65a6:	7812      	ldrb	r2, [r2, #0]
    65a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    65aa:	464a      	mov	r2, r9
    65ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    65ae:	7830      	ldrb	r0, [r6, #0]
    65b0:	0019      	movs	r1, r3
    65b2:	4b0b      	ldr	r3, [pc, #44]	; (65e0 <tcc_init+0x34c>)
    65b4:	4798      	blx	r3
    65b6:	e7e6      	b.n	6586 <tcc_init+0x2f2>
    65b8:	00006115 	.word	0x00006115
    65bc:	40000400 	.word	0x40000400
    65c0:	0000c814 	.word	0x0000c814
    65c4:	0000c828 	.word	0x0000c828
    65c8:	0000c834 	.word	0x0000c834
    65cc:	0000c820 	.word	0x0000c820
    65d0:	2000060c 	.word	0x2000060c
    65d4:	0000c824 	.word	0x0000c824
    65d8:	00005fbd 	.word	0x00005fbd
    65dc:	00005f31 	.word	0x00005f31
    65e0:	000060b5 	.word	0x000060b5
    65e4:	4644      	mov	r4, r8
    65e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    65e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    65ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    65ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    65ee:	0212      	lsls	r2, r2, #8
    65f0:	4313      	orrs	r3, r2
    65f2:	9a02      	ldr	r2, [sp, #8]
    65f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    65f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    65f8:	2204      	movs	r2, #4
    65fa:	68a3      	ldr	r3, [r4, #8]
    65fc:	421a      	tst	r2, r3
    65fe:	d1fc      	bne.n	65fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6600:	23ff      	movs	r3, #255	; 0xff
    6602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6604:	2204      	movs	r2, #4
    6606:	68a3      	ldr	r3, [r4, #8]
    6608:	421a      	tst	r2, r3
    660a:	d1fc      	bne.n	6606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    660c:	466b      	mov	r3, sp
    660e:	7e1b      	ldrb	r3, [r3, #24]
    6610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    661a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    661c:	4a1d      	ldr	r2, [pc, #116]	; (6694 <tcc_init+0x400>)
    661e:	68a3      	ldr	r3, [r4, #8]
    6620:	4213      	tst	r3, r2
    6622:	d1fc      	bne.n	661e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6624:	4653      	mov	r3, sl
    6626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6628:	2210      	movs	r2, #16
    662a:	68a3      	ldr	r3, [r4, #8]
    662c:	421a      	tst	r2, r3
    662e:	d1fc      	bne.n	662a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6630:	682b      	ldr	r3, [r5, #0]
    6632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6634:	4a18      	ldr	r2, [pc, #96]	; (6698 <tcc_init+0x404>)
    6636:	68a3      	ldr	r3, [r4, #8]
    6638:	4213      	tst	r3, r2
    663a:	d1fc      	bne.n	6636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    663c:	686b      	ldr	r3, [r5, #4]
    663e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6640:	9805      	ldr	r0, [sp, #20]
    6642:	2800      	cmp	r0, #0
    6644:	dd22      	ble.n	668c <tcc_init+0x3f8>
    6646:	351c      	adds	r5, #28
    6648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    664a:	4e14      	ldr	r6, [pc, #80]	; (669c <tcc_init+0x408>)
    664c:	0032      	movs	r2, r6
    664e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    6650:	68a3      	ldr	r3, [r4, #8]
    6652:	421a      	tst	r2, r3
    6654:	d1fc      	bne.n	6650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    6656:	cd04      	ldmia	r5!, {r2}
    6658:	000b      	movs	r3, r1
    665a:	3310      	adds	r3, #16
    665c:	009b      	lsls	r3, r3, #2
    665e:	18e3      	adds	r3, r4, r3
    6660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6662:	3101      	adds	r1, #1
    6664:	4288      	cmp	r0, r1
    6666:	dcf1      	bgt.n	664c <tcc_init+0x3b8>
	return STATUS_OK;
    6668:	2000      	movs	r0, #0
    666a:	e62d      	b.n	62c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    666c:	2017      	movs	r0, #23
    666e:	e62b      	b.n	62c8 <tcc_init+0x34>
    6670:	2017      	movs	r0, #23
    6672:	e629      	b.n	62c8 <tcc_init+0x34>
    6674:	2017      	movs	r0, #23
    6676:	e627      	b.n	62c8 <tcc_init+0x34>
    6678:	2017      	movs	r0, #23
    667a:	e625      	b.n	62c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    667c:	2017      	movs	r0, #23
    667e:	e623      	b.n	62c8 <tcc_init+0x34>
			if (i >= ow_num) {
    6680:	2017      	movs	r0, #23
    6682:	e621      	b.n	62c8 <tcc_init+0x34>
			if (i >= ow_num) {
    6684:	2017      	movs	r0, #23
    6686:	e61f      	b.n	62c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6688:	2017      	movs	r0, #23
    668a:	e61d      	b.n	62c8 <tcc_init+0x34>
	return STATUS_OK;
    668c:	2000      	movs	r0, #0
    668e:	e61b      	b.n	62c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6690:	2017      	movs	r0, #23
    6692:	e619      	b.n	62c8 <tcc_init+0x34>
    6694:	00020040 	.word	0x00020040
    6698:	00040080 	.word	0x00040080
    669c:	00080100 	.word	0x00080100

000066a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    66a0:	0092      	lsls	r2, r2, #2
    66a2:	1883      	adds	r3, r0, r2
    66a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    66a6:	4b03      	ldr	r3, [pc, #12]	; (66b4 <tcc_register_callback+0x14>)
    66a8:	58d3      	ldr	r3, [r2, r3]
    66aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
    66ac:	4313      	orrs	r3, r2
    66ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    66b0:	2000      	movs	r0, #0
    66b2:	4770      	bx	lr
    66b4:	0000c838 	.word	0x0000c838

000066b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    66b8:	b570      	push	{r4, r5, r6, lr}
    66ba:	0004      	movs	r4, r0
    66bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    66be:	6800      	ldr	r0, [r0, #0]
    66c0:	4b09      	ldr	r3, [pc, #36]	; (66e8 <tcc_enable_callback+0x30>)
    66c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    66c4:	4b09      	ldr	r3, [pc, #36]	; (66ec <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    66c6:	5c1b      	ldrb	r3, [r3, r0]
    66c8:	221f      	movs	r2, #31
    66ca:	401a      	ands	r2, r3
    66cc:	2301      	movs	r3, #1
    66ce:	4093      	lsls	r3, r2
    66d0:	4a07      	ldr	r2, [pc, #28]	; (66f0 <tcc_enable_callback+0x38>)
    66d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    66d4:	00ad      	lsls	r5, r5, #2
    66d6:	4b07      	ldr	r3, [pc, #28]	; (66f4 <tcc_enable_callback+0x3c>)
    66d8:	58ea      	ldr	r2, [r5, r3]
    66da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    66dc:	4313      	orrs	r3, r2
    66de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    66e0:	6823      	ldr	r3, [r4, #0]
    66e2:	629a      	str	r2, [r3, #40]	; 0x28
}
    66e4:	bd70      	pop	{r4, r5, r6, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	00006115 	.word	0x00006115
    66ec:	0000c868 	.word	0x0000c868
    66f0:	e000e100 	.word	0xe000e100
    66f4:	0000c838 	.word	0x0000c838

000066f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    66f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66fa:	46c6      	mov	lr, r8
    66fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    66fe:	0080      	lsls	r0, r0, #2
    6700:	4b0e      	ldr	r3, [pc, #56]	; (673c <_tcc_interrupt_handler+0x44>)
    6702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6704:	683b      	ldr	r3, [r7, #0]
    6706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    670c:	4013      	ands	r3, r2
    670e:	401e      	ands	r6, r3
    6710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6712:	4b0b      	ldr	r3, [pc, #44]	; (6740 <_tcc_interrupt_handler+0x48>)
    6714:	4698      	mov	r8, r3
    6716:	e002      	b.n	671e <_tcc_interrupt_handler+0x26>
    6718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    671a:	2c30      	cmp	r4, #48	; 0x30
    671c:	d00a      	beq.n	6734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    671e:	4643      	mov	r3, r8
    6720:	58e5      	ldr	r5, [r4, r3]
    6722:	4235      	tst	r5, r6
    6724:	d0f8      	beq.n	6718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6726:	193b      	adds	r3, r7, r4
    6728:	685b      	ldr	r3, [r3, #4]
    672a:	0038      	movs	r0, r7
    672c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    672e:	683b      	ldr	r3, [r7, #0]
    6730:	62dd      	str	r5, [r3, #44]	; 0x2c
    6732:	e7f1      	b.n	6718 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6734:	bc04      	pop	{r2}
    6736:	4690      	mov	r8, r2
    6738:	bdf0      	pop	{r4, r5, r6, r7, pc}
    673a:	46c0      	nop			; (mov r8, r8)
    673c:	2000060c 	.word	0x2000060c
    6740:	0000c838 	.word	0x0000c838

00006744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6744:	b510      	push	{r4, lr}
    6746:	2000      	movs	r0, #0
    6748:	4b01      	ldr	r3, [pc, #4]	; (6750 <TCC0_Handler+0xc>)
    674a:	4798      	blx	r3
    674c:	bd10      	pop	{r4, pc}
    674e:	46c0      	nop			; (mov r8, r8)
    6750:	000066f9 	.word	0x000066f9

00006754 <TCC1_Handler>:
    6754:	b510      	push	{r4, lr}
    6756:	2001      	movs	r0, #1
    6758:	4b01      	ldr	r3, [pc, #4]	; (6760 <TCC1_Handler+0xc>)
    675a:	4798      	blx	r3
    675c:	bd10      	pop	{r4, pc}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	000066f9 	.word	0x000066f9

00006764 <TCC2_Handler>:
    6764:	b510      	push	{r4, lr}
    6766:	2002      	movs	r0, #2
    6768:	4b01      	ldr	r3, [pc, #4]	; (6770 <TCC2_Handler+0xc>)
    676a:	4798      	blx	r3
    676c:	bd10      	pop	{r4, pc}
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	000066f9 	.word	0x000066f9

00006774 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6774:	e7fe      	b.n	6774 <Dummy_Handler>
	...

00006778 <Reset_Handler>:
{
    6778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    677a:	4a2a      	ldr	r2, [pc, #168]	; (6824 <Reset_Handler+0xac>)
    677c:	4b2a      	ldr	r3, [pc, #168]	; (6828 <Reset_Handler+0xb0>)
    677e:	429a      	cmp	r2, r3
    6780:	d011      	beq.n	67a6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6782:	001a      	movs	r2, r3
    6784:	4b29      	ldr	r3, [pc, #164]	; (682c <Reset_Handler+0xb4>)
    6786:	429a      	cmp	r2, r3
    6788:	d20d      	bcs.n	67a6 <Reset_Handler+0x2e>
    678a:	4a29      	ldr	r2, [pc, #164]	; (6830 <Reset_Handler+0xb8>)
    678c:	3303      	adds	r3, #3
    678e:	1a9b      	subs	r3, r3, r2
    6790:	089b      	lsrs	r3, r3, #2
    6792:	3301      	adds	r3, #1
    6794:	009b      	lsls	r3, r3, #2
    6796:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6798:	4823      	ldr	r0, [pc, #140]	; (6828 <Reset_Handler+0xb0>)
    679a:	4922      	ldr	r1, [pc, #136]	; (6824 <Reset_Handler+0xac>)
    679c:	588c      	ldr	r4, [r1, r2]
    679e:	5084      	str	r4, [r0, r2]
    67a0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    67a2:	429a      	cmp	r2, r3
    67a4:	d1fa      	bne.n	679c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    67a6:	4a23      	ldr	r2, [pc, #140]	; (6834 <Reset_Handler+0xbc>)
    67a8:	4b23      	ldr	r3, [pc, #140]	; (6838 <Reset_Handler+0xc0>)
    67aa:	429a      	cmp	r2, r3
    67ac:	d20a      	bcs.n	67c4 <Reset_Handler+0x4c>
    67ae:	43d3      	mvns	r3, r2
    67b0:	4921      	ldr	r1, [pc, #132]	; (6838 <Reset_Handler+0xc0>)
    67b2:	185b      	adds	r3, r3, r1
    67b4:	2103      	movs	r1, #3
    67b6:	438b      	bics	r3, r1
    67b8:	3304      	adds	r3, #4
    67ba:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    67bc:	2100      	movs	r1, #0
    67be:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    67c0:	4293      	cmp	r3, r2
    67c2:	d1fc      	bne.n	67be <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    67c4:	4a1d      	ldr	r2, [pc, #116]	; (683c <Reset_Handler+0xc4>)
    67c6:	21ff      	movs	r1, #255	; 0xff
    67c8:	4b1d      	ldr	r3, [pc, #116]	; (6840 <Reset_Handler+0xc8>)
    67ca:	438b      	bics	r3, r1
    67cc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    67ce:	39fd      	subs	r1, #253	; 0xfd
    67d0:	2390      	movs	r3, #144	; 0x90
    67d2:	005b      	lsls	r3, r3, #1
    67d4:	4a1b      	ldr	r2, [pc, #108]	; (6844 <Reset_Handler+0xcc>)
    67d6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    67d8:	4a1b      	ldr	r2, [pc, #108]	; (6848 <Reset_Handler+0xd0>)
    67da:	78d3      	ldrb	r3, [r2, #3]
    67dc:	2503      	movs	r5, #3
    67de:	43ab      	bics	r3, r5
    67e0:	2402      	movs	r4, #2
    67e2:	4323      	orrs	r3, r4
    67e4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    67e6:	78d3      	ldrb	r3, [r2, #3]
    67e8:	270c      	movs	r7, #12
    67ea:	43bb      	bics	r3, r7
    67ec:	2608      	movs	r6, #8
    67ee:	4333      	orrs	r3, r6
    67f0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    67f2:	4b16      	ldr	r3, [pc, #88]	; (684c <Reset_Handler+0xd4>)
    67f4:	7b98      	ldrb	r0, [r3, #14]
    67f6:	2230      	movs	r2, #48	; 0x30
    67f8:	4390      	bics	r0, r2
    67fa:	2220      	movs	r2, #32
    67fc:	4310      	orrs	r0, r2
    67fe:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6800:	7b99      	ldrb	r1, [r3, #14]
    6802:	43b9      	bics	r1, r7
    6804:	4331      	orrs	r1, r6
    6806:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6808:	7b9a      	ldrb	r2, [r3, #14]
    680a:	43aa      	bics	r2, r5
    680c:	4322      	orrs	r2, r4
    680e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6810:	4a0f      	ldr	r2, [pc, #60]	; (6850 <Reset_Handler+0xd8>)
    6812:	6853      	ldr	r3, [r2, #4]
    6814:	2180      	movs	r1, #128	; 0x80
    6816:	430b      	orrs	r3, r1
    6818:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    681a:	4b0e      	ldr	r3, [pc, #56]	; (6854 <Reset_Handler+0xdc>)
    681c:	4798      	blx	r3
        main();
    681e:	4b0e      	ldr	r3, [pc, #56]	; (6858 <Reset_Handler+0xe0>)
    6820:	4798      	blx	r3
    6822:	e7fe      	b.n	6822 <Reset_Handler+0xaa>
    6824:	0000d748 	.word	0x0000d748
    6828:	20000000 	.word	0x20000000
    682c:	200002fc 	.word	0x200002fc
    6830:	20000004 	.word	0x20000004
    6834:	200002fc 	.word	0x200002fc
    6838:	2000077c 	.word	0x2000077c
    683c:	e000ed00 	.word	0xe000ed00
    6840:	00000000 	.word	0x00000000
    6844:	41007000 	.word	0x41007000
    6848:	41005000 	.word	0x41005000
    684c:	41004800 	.word	0x41004800
    6850:	41004000 	.word	0x41004000
    6854:	0000a135 	.word	0x0000a135
    6858:	00009ba9 	.word	0x00009ba9

0000685c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    685c:	b5f0      	push	{r4, r5, r6, r7, lr}
    685e:	46c6      	mov	lr, r8
    6860:	b500      	push	{lr}
    6862:	000c      	movs	r4, r1
    6864:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    6866:	2800      	cmp	r0, #0
    6868:	d10f      	bne.n	688a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    686a:	2a00      	cmp	r2, #0
    686c:	dd11      	ble.n	6892 <_read+0x36>
    686e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6870:	4e09      	ldr	r6, [pc, #36]	; (6898 <_read+0x3c>)
    6872:	4d0a      	ldr	r5, [pc, #40]	; (689c <_read+0x40>)
    6874:	6830      	ldr	r0, [r6, #0]
    6876:	0021      	movs	r1, r4
    6878:	682b      	ldr	r3, [r5, #0]
    687a:	4798      	blx	r3
		ptr++;
    687c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    687e:	42bc      	cmp	r4, r7
    6880:	d1f8      	bne.n	6874 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6882:	4640      	mov	r0, r8
    6884:	bc04      	pop	{r2}
    6886:	4690      	mov	r8, r2
    6888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    688a:	2301      	movs	r3, #1
    688c:	425b      	negs	r3, r3
    688e:	4698      	mov	r8, r3
    6890:	e7f7      	b.n	6882 <_read+0x26>
	for (; len > 0; --len) {
    6892:	4680      	mov	r8, r0
    6894:	e7f5      	b.n	6882 <_read+0x26>
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	20000620 	.word	0x20000620
    689c:	20000618 	.word	0x20000618

000068a0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    68a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68a2:	46c6      	mov	lr, r8
    68a4:	b500      	push	{lr}
    68a6:	000e      	movs	r6, r1
    68a8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    68aa:	3801      	subs	r0, #1
    68ac:	2802      	cmp	r0, #2
    68ae:	d810      	bhi.n	68d2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    68b0:	2a00      	cmp	r2, #0
    68b2:	d011      	beq.n	68d8 <_write+0x38>
    68b4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    68b6:	4b0c      	ldr	r3, [pc, #48]	; (68e8 <_write+0x48>)
    68b8:	4698      	mov	r8, r3
    68ba:	4f0c      	ldr	r7, [pc, #48]	; (68ec <_write+0x4c>)
    68bc:	4643      	mov	r3, r8
    68be:	6818      	ldr	r0, [r3, #0]
    68c0:	5d31      	ldrb	r1, [r6, r4]
    68c2:	683b      	ldr	r3, [r7, #0]
    68c4:	4798      	blx	r3
    68c6:	2800      	cmp	r0, #0
    68c8:	db08      	blt.n	68dc <_write+0x3c>
			return -1;
		}
		++nChars;
    68ca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    68cc:	42a5      	cmp	r5, r4
    68ce:	d1f5      	bne.n	68bc <_write+0x1c>
    68d0:	e006      	b.n	68e0 <_write+0x40>
		return -1;
    68d2:	2401      	movs	r4, #1
    68d4:	4264      	negs	r4, r4
    68d6:	e003      	b.n	68e0 <_write+0x40>
	for (; len != 0; --len) {
    68d8:	0014      	movs	r4, r2
    68da:	e001      	b.n	68e0 <_write+0x40>
			return -1;
    68dc:	2401      	movs	r4, #1
    68de:	4264      	negs	r4, r4
	}
	return nChars;
}
    68e0:	0020      	movs	r0, r4
    68e2:	bc04      	pop	{r2}
    68e4:	4690      	mov	r8, r2
    68e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68e8:	20000620 	.word	0x20000620
    68ec:	2000061c 	.word	0x2000061c

000068f0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    68f0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    68f2:	4a06      	ldr	r2, [pc, #24]	; (690c <_sbrk+0x1c>)
    68f4:	6812      	ldr	r2, [r2, #0]
    68f6:	2a00      	cmp	r2, #0
    68f8:	d004      	beq.n	6904 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    68fa:	4a04      	ldr	r2, [pc, #16]	; (690c <_sbrk+0x1c>)
    68fc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    68fe:	18c3      	adds	r3, r0, r3
    6900:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6902:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6904:	4902      	ldr	r1, [pc, #8]	; (6910 <_sbrk+0x20>)
    6906:	4a01      	ldr	r2, [pc, #4]	; (690c <_sbrk+0x1c>)
    6908:	6011      	str	r1, [r2, #0]
    690a:	e7f6      	b.n	68fa <_sbrk+0xa>
    690c:	200003cc 	.word	0x200003cc
    6910:	20002780 	.word	0x20002780

00006914 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6914:	2001      	movs	r0, #1
    6916:	4240      	negs	r0, r0
    6918:	4770      	bx	lr

0000691a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    691a:	2380      	movs	r3, #128	; 0x80
    691c:	019b      	lsls	r3, r3, #6
    691e:	604b      	str	r3, [r1, #4]

	return 0;
}
    6920:	2000      	movs	r0, #0
    6922:	4770      	bx	lr

00006924 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6924:	2001      	movs	r0, #1
    6926:	4770      	bx	lr

00006928 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6928:	2000      	movs	r0, #0
    692a:	4770      	bx	lr

0000692c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    692c:	b530      	push	{r4, r5, lr}
    692e:	b087      	sub	sp, #28
    6930:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6932:	aa01      	add	r2, sp, #4
    6934:	23a0      	movs	r3, #160	; 0xa0
    6936:	011b      	lsls	r3, r3, #4
    6938:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    693a:	2300      	movs	r3, #0
    693c:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    693e:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    6940:	21fa      	movs	r1, #250	; 0xfa
    6942:	00c9      	lsls	r1, r1, #3
    6944:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    6946:	2101      	movs	r1, #1
    6948:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    694a:	2004      	movs	r0, #4
    694c:	7210      	strb	r0, [r2, #8]
    694e:	7253      	strb	r3, [r2, #9]
    6950:	7293      	strb	r3, [r2, #10]
    6952:	72d3      	strb	r3, [r2, #11]
    6954:	7311      	strb	r1, [r2, #12]
    6956:	7351      	strb	r1, [r2, #13]
    6958:	4b14      	ldr	r3, [pc, #80]	; (69ac <disk_initialize+0x80>)
    695a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    695c:	2306      	movs	r3, #6
    695e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6960:	4d13      	ldr	r5, [pc, #76]	; (69b0 <disk_initialize+0x84>)
    6962:	4914      	ldr	r1, [pc, #80]	; (69b4 <disk_initialize+0x88>)
    6964:	0028      	movs	r0, r5
    6966:	4b14      	ldr	r3, [pc, #80]	; (69b8 <disk_initialize+0x8c>)
    6968:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    696a:	0028      	movs	r0, r5
    696c:	4b13      	ldr	r3, [pc, #76]	; (69bc <disk_initialize+0x90>)
    696e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6970:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    6972:	2c01      	cmp	r4, #1
    6974:	d901      	bls.n	697a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    6976:	b007      	add	sp, #28
    6978:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    697a:	0020      	movs	r0, r4
    697c:	4b10      	ldr	r3, [pc, #64]	; (69c0 <disk_initialize+0x94>)
    697e:	4798      	blx	r3
    6980:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    6982:	2803      	cmp	r0, #3
    6984:	d106      	bne.n	6994 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    6986:	0020      	movs	r0, r4
    6988:	4b0d      	ldr	r3, [pc, #52]	; (69c0 <disk_initialize+0x94>)
    698a:	4798      	blx	r3
    698c:	0003      	movs	r3, r0
		return STA_NOINIT;
    698e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    6990:	2b03      	cmp	r3, #3
    6992:	d0f0      	beq.n	6976 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    6994:	2b00      	cmp	r3, #0
    6996:	d106      	bne.n	69a6 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    6998:	0020      	movs	r0, r4
    699a:	4b0a      	ldr	r3, [pc, #40]	; (69c4 <disk_initialize+0x98>)
    699c:	4798      	blx	r3
	return 0;
    699e:	1e43      	subs	r3, r0, #1
    69a0:	4198      	sbcs	r0, r3
    69a2:	0080      	lsls	r0, r0, #2
    69a4:	e7e7      	b.n	6976 <disk_initialize+0x4a>
		return STA_NOINIT;
    69a6:	2001      	movs	r0, #1
    69a8:	e7e5      	b.n	6976 <disk_initialize+0x4a>
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	000007de 	.word	0x000007de
    69b0:	20000624 	.word	0x20000624
    69b4:	40001400 	.word	0x40001400
    69b8:	000047f5 	.word	0x000047f5
    69bc:	00004691 	.word	0x00004691
    69c0:	00004361 	.word	0x00004361
    69c4:	0000439d 	.word	0x0000439d

000069c8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    69c8:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    69ca:	4b05      	ldr	r3, [pc, #20]	; (69e0 <disk_status+0x18>)
    69cc:	4798      	blx	r3
    69ce:	1e03      	subs	r3, r0, #0
    69d0:	d004      	beq.n	69dc <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    69d2:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    69d4:	2b02      	cmp	r3, #2
    69d6:	d000      	beq.n	69da <disk_status+0x12>
	default:
		return STA_NOINIT;
    69d8:	3802      	subs	r0, #2
	}
}
    69da:	bd10      	pop	{r4, pc}
		return 0;
    69dc:	2000      	movs	r0, #0
    69de:	e7fc      	b.n	69da <disk_status+0x12>
    69e0:	00004361 	.word	0x00004361

000069e4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    69e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69e6:	46de      	mov	lr, fp
    69e8:	464f      	mov	r7, r9
    69ea:	4646      	mov	r6, r8
    69ec:	b5c0      	push	{r6, r7, lr}
    69ee:	b084      	sub	sp, #16
    69f0:	9001      	str	r0, [sp, #4]
    69f2:	000d      	movs	r5, r1
    69f4:	0014      	movs	r4, r2
    69f6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    69f8:	4b18      	ldr	r3, [pc, #96]	; (6a5c <disk_read+0x78>)
    69fa:	4798      	blx	r3
    69fc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    69fe:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6a00:	2e00      	cmp	r6, #0
    6a02:	d105      	bne.n	6a10 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6a04:	b004      	add	sp, #16
    6a06:	bc1c      	pop	{r2, r3, r4}
    6a08:	4690      	mov	r8, r2
    6a0a:	4699      	mov	r9, r3
    6a0c:	46a3      	mov	fp, r4
    6a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6a10:	a903      	add	r1, sp, #12
    6a12:	9801      	ldr	r0, [sp, #4]
    6a14:	4b12      	ldr	r3, [pc, #72]	; (6a60 <disk_read+0x7c>)
    6a16:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6a18:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6a1a:	0032      	movs	r2, r6
    6a1c:	437a      	muls	r2, r7
    6a1e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6a20:	9b03      	ldr	r3, [sp, #12]
    6a22:	3301      	adds	r3, #1
    6a24:	4373      	muls	r3, r6
		return RES_PARERR;
    6a26:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6a28:	429a      	cmp	r2, r3
    6a2a:	d8eb      	bhi.n	6a04 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    6a2c:	2f00      	cmp	r7, #0
    6a2e:	d011      	beq.n	6a54 <disk_read+0x70>
    6a30:	0273      	lsls	r3, r6, #9
    6a32:	4698      	mov	r8, r3
    6a34:	1c7b      	adds	r3, r7, #1
    6a36:	469b      	mov	fp, r3
    6a38:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6a3a:	4e0a      	ldr	r6, [pc, #40]	; (6a64 <disk_read+0x80>)
    6a3c:	002a      	movs	r2, r5
    6a3e:	0021      	movs	r1, r4
    6a40:	9801      	ldr	r0, [sp, #4]
    6a42:	47b0      	blx	r6
    6a44:	2800      	cmp	r0, #0
    6a46:	d107      	bne.n	6a58 <disk_read+0x74>
    6a48:	3701      	adds	r7, #1
    6a4a:	444c      	add	r4, r9
    6a4c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6a4e:	455f      	cmp	r7, fp
    6a50:	d1f4      	bne.n	6a3c <disk_read+0x58>
    6a52:	e7d7      	b.n	6a04 <disk_read+0x20>
	return RES_OK;
    6a54:	2000      	movs	r0, #0
    6a56:	e7d5      	b.n	6a04 <disk_read+0x20>
			return RES_ERROR;
    6a58:	2001      	movs	r0, #1
    6a5a:	e7d3      	b.n	6a04 <disk_read+0x20>
    6a5c:	00004395 	.word	0x00004395
    6a60:	00004379 	.word	0x00004379
    6a64:	000043b5 	.word	0x000043b5

00006a68 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a6a:	46de      	mov	lr, fp
    6a6c:	464f      	mov	r7, r9
    6a6e:	4646      	mov	r6, r8
    6a70:	b5c0      	push	{r6, r7, lr}
    6a72:	b084      	sub	sp, #16
    6a74:	9001      	str	r0, [sp, #4]
    6a76:	000d      	movs	r5, r1
    6a78:	0014      	movs	r4, r2
    6a7a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6a7c:	4b18      	ldr	r3, [pc, #96]	; (6ae0 <disk_write+0x78>)
    6a7e:	4798      	blx	r3
    6a80:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6a82:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6a84:	2e00      	cmp	r6, #0
    6a86:	d105      	bne.n	6a94 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6a88:	b004      	add	sp, #16
    6a8a:	bc1c      	pop	{r2, r3, r4}
    6a8c:	4690      	mov	r8, r2
    6a8e:	4699      	mov	r9, r3
    6a90:	46a3      	mov	fp, r4
    6a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6a94:	a903      	add	r1, sp, #12
    6a96:	9801      	ldr	r0, [sp, #4]
    6a98:	4b12      	ldr	r3, [pc, #72]	; (6ae4 <disk_write+0x7c>)
    6a9a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6a9c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6a9e:	0032      	movs	r2, r6
    6aa0:	437a      	muls	r2, r7
    6aa2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6aa4:	9b03      	ldr	r3, [sp, #12]
    6aa6:	3301      	adds	r3, #1
    6aa8:	4373      	muls	r3, r6
		return RES_PARERR;
    6aaa:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6aac:	429a      	cmp	r2, r3
    6aae:	d8eb      	bhi.n	6a88 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    6ab0:	2f00      	cmp	r7, #0
    6ab2:	d011      	beq.n	6ad8 <disk_write+0x70>
    6ab4:	0273      	lsls	r3, r6, #9
    6ab6:	4698      	mov	r8, r3
    6ab8:	1c7b      	adds	r3, r7, #1
    6aba:	469b      	mov	fp, r3
    6abc:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6abe:	4e0a      	ldr	r6, [pc, #40]	; (6ae8 <disk_write+0x80>)
    6ac0:	002a      	movs	r2, r5
    6ac2:	0021      	movs	r1, r4
    6ac4:	9801      	ldr	r0, [sp, #4]
    6ac6:	47b0      	blx	r6
    6ac8:	2800      	cmp	r0, #0
    6aca:	d107      	bne.n	6adc <disk_write+0x74>
    6acc:	3701      	adds	r7, #1
    6ace:	444c      	add	r4, r9
    6ad0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6ad2:	455f      	cmp	r7, fp
    6ad4:	d1f4      	bne.n	6ac0 <disk_write+0x58>
    6ad6:	e7d7      	b.n	6a88 <disk_write+0x20>
	return RES_OK;
    6ad8:	2000      	movs	r0, #0
    6ada:	e7d5      	b.n	6a88 <disk_write+0x20>
			return RES_ERROR;
    6adc:	2001      	movs	r0, #1
    6ade:	e7d3      	b.n	6a88 <disk_write+0x20>
    6ae0:	00004395 	.word	0x00004395
    6ae4:	00004379 	.word	0x00004379
    6ae8:	000043d5 	.word	0x000043d5

00006aec <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6aec:	b510      	push	{r4, lr}
    6aee:	b082      	sub	sp, #8
    6af0:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    6af2:	2901      	cmp	r1, #1
    6af4:	d00b      	beq.n	6b0e <disk_ioctl+0x22>
    6af6:	2900      	cmp	r1, #0
    6af8:	d020      	beq.n	6b3c <disk_ioctl+0x50>
    6afa:	2902      	cmp	r1, #2
    6afc:	d00f      	beq.n	6b1e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    6afe:	2004      	movs	r0, #4
	switch (ctrl) {
    6b00:	2903      	cmp	r1, #3
    6b02:	d102      	bne.n	6b0a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    6b04:	2301      	movs	r3, #1
    6b06:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    6b08:	2000      	movs	r0, #0
	}

	return res;
}
    6b0a:	b002      	add	sp, #8
    6b0c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    6b0e:	a901      	add	r1, sp, #4
    6b10:	4b0e      	ldr	r3, [pc, #56]	; (6b4c <disk_ioctl+0x60>)
    6b12:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    6b14:	9b01      	ldr	r3, [sp, #4]
    6b16:	3301      	adds	r3, #1
    6b18:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    6b1a:	2000      	movs	r0, #0
	break;
    6b1c:	e7f5      	b.n	6b0a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    6b1e:	4b0c      	ldr	r3, [pc, #48]	; (6b50 <disk_ioctl+0x64>)
    6b20:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6b22:	1e43      	subs	r3, r0, #1
    6b24:	b2db      	uxtb	r3, r3
    6b26:	2b01      	cmp	r3, #1
    6b28:	d904      	bls.n	6b34 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6b2a:	1f03      	subs	r3, r0, #4
    6b2c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    6b2e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6b30:	4213      	tst	r3, r2
    6b32:	d1ea      	bne.n	6b0a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6b34:	2300      	movs	r3, #0
    6b36:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    6b38:	2000      	movs	r0, #0
	break;
    6b3a:	e7e6      	b.n	6b0a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6b3c:	4b05      	ldr	r3, [pc, #20]	; (6b54 <disk_ioctl+0x68>)
    6b3e:	4798      	blx	r3
    6b40:	2800      	cmp	r0, #0
    6b42:	d001      	beq.n	6b48 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    6b44:	2003      	movs	r0, #3
    6b46:	e7e0      	b.n	6b0a <disk_ioctl+0x1e>
			res = RES_OK;
    6b48:	2000      	movs	r0, #0
    6b4a:	e7de      	b.n	6b0a <disk_ioctl+0x1e>
    6b4c:	00004379 	.word	0x00004379
    6b50:	00004395 	.word	0x00004395
    6b54:	00004361 	.word	0x00004361

00006b58 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6b58:	b500      	push	{lr}
    6b5a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6b5c:	4669      	mov	r1, sp
    6b5e:	480f      	ldr	r0, [pc, #60]	; (6b9c <get_fattime+0x44>)
    6b60:	4b0f      	ldr	r3, [pc, #60]	; (6ba0 <get_fattime+0x48>)
    6b62:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    6b64:	466b      	mov	r3, sp
    6b66:	7958      	ldrb	r0, [r3, #5]
    6b68:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    6b6a:	791b      	ldrb	r3, [r3, #4]
    6b6c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    6b6e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    6b70:	466b      	mov	r3, sp
    6b72:	789b      	ldrb	r3, [r3, #2]
    6b74:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    6b76:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    6b78:	466b      	mov	r3, sp
    6b7a:	785b      	ldrb	r3, [r3, #1]
    6b7c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    6b7e:	4318      	orrs	r0, r3
    6b80:	466b      	mov	r3, sp
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	085b      	lsrs	r3, r3, #1
    6b86:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    6b88:	466b      	mov	r3, sp
    6b8a:	88db      	ldrh	r3, [r3, #6]
    6b8c:	4a05      	ldr	r2, [pc, #20]	; (6ba4 <get_fattime+0x4c>)
    6b8e:	4694      	mov	ip, r2
    6b90:	4463      	add	r3, ip
    6b92:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    6b94:	4318      	orrs	r0, r3

	return ul_time;
}
    6b96:	b003      	add	sp, #12
    6b98:	bd00      	pop	{pc}
    6b9a:	46c0      	nop			; (mov r8, r8)
    6b9c:	20000624 	.word	0x20000624
    6ba0:	0000477d 	.word	0x0000477d
    6ba4:	fffff844 	.word	0xfffff844

00006ba8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    6ba8:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    6baa:	2a00      	cmp	r2, #0
    6bac:	d005      	beq.n	6bba <mem_cpy+0x12>
    6bae:	2300      	movs	r3, #0
		*d++ = *s++;
    6bb0:	5ccc      	ldrb	r4, [r1, r3]
    6bb2:	54c4      	strb	r4, [r0, r3]
    6bb4:	3301      	adds	r3, #1
	while (cnt--)
    6bb6:	4293      	cmp	r3, r2
    6bb8:	d1fa      	bne.n	6bb0 <mem_cpy+0x8>
}
    6bba:	bd10      	pop	{r4, pc}

00006bbc <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    6bbc:	2a00      	cmp	r2, #0
    6bbe:	d005      	beq.n	6bcc <mem_set+0x10>
    6bc0:	0003      	movs	r3, r0
    6bc2:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    6bc4:	7019      	strb	r1, [r3, #0]
    6bc6:	3301      	adds	r3, #1
	while (cnt--)
    6bc8:	4293      	cmp	r3, r2
    6bca:	d1fb      	bne.n	6bc4 <mem_set+0x8>
}
    6bcc:	4770      	bx	lr

00006bce <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    6bce:	0002      	movs	r2, r0
	clst -= 2;
    6bd0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6bd2:	6983      	ldr	r3, [r0, #24]
    6bd4:	3b02      	subs	r3, #2
    6bd6:	2000      	movs	r0, #0
    6bd8:	4299      	cmp	r1, r3
    6bda:	d203      	bcs.n	6be4 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    6bdc:	7890      	ldrb	r0, [r2, #2]
    6bde:	4341      	muls	r1, r0
    6be0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6be2:	1808      	adds	r0, r1, r0
}
    6be4:	4770      	bx	lr

00006be6 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    6be6:	0002      	movs	r2, r0
    6be8:	0001      	movs	r1, r0
    6bea:	310b      	adds	r1, #11
	BYTE sum = 0;
    6bec:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6bee:	0843      	lsrs	r3, r0, #1
    6bf0:	01c0      	lsls	r0, r0, #7
    6bf2:	4303      	orrs	r3, r0
    6bf4:	7810      	ldrb	r0, [r2, #0]
    6bf6:	1818      	adds	r0, r3, r0
    6bf8:	b2c0      	uxtb	r0, r0
    6bfa:	3201      	adds	r2, #1
    6bfc:	428a      	cmp	r2, r1
    6bfe:	d1f6      	bne.n	6bee <sum_sfn+0x8>
	return sum;
}
    6c00:	4770      	bx	lr
	...

00006c04 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6c04:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    6c06:	2800      	cmp	r0, #0
    6c08:	d010      	beq.n	6c2c <validate+0x28>
    6c0a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    6c0c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6c0e:	2a00      	cmp	r2, #0
    6c10:	d101      	bne.n	6c16 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    6c12:	0018      	movs	r0, r3
    6c14:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6c16:	88c2      	ldrh	r2, [r0, #6]
    6c18:	428a      	cmp	r2, r1
    6c1a:	d1fa      	bne.n	6c12 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    6c1c:	7840      	ldrb	r0, [r0, #1]
    6c1e:	4b04      	ldr	r3, [pc, #16]	; (6c30 <validate+0x2c>)
    6c20:	4798      	blx	r3
		return FR_NOT_READY;
    6c22:	2303      	movs	r3, #3
	return FR_OK;
    6c24:	07c0      	lsls	r0, r0, #31
    6c26:	17c0      	asrs	r0, r0, #31
    6c28:	4003      	ands	r3, r0
    6c2a:	e7f2      	b.n	6c12 <validate+0xe>
		return FR_INVALID_OBJECT;
    6c2c:	2309      	movs	r3, #9
    6c2e:	e7f0      	b.n	6c12 <validate+0xe>
    6c30:	000069c9 	.word	0x000069c9

00006c34 <check_fs>:
{
    6c34:	b570      	push	{r4, r5, r6, lr}
    6c36:	0004      	movs	r4, r0
    6c38:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c3a:	0001      	movs	r1, r0
    6c3c:	3130      	adds	r1, #48	; 0x30
    6c3e:	7840      	ldrb	r0, [r0, #1]
    6c40:	2301      	movs	r3, #1
    6c42:	4d1f      	ldr	r5, [pc, #124]	; (6cc0 <check_fs+0x8c>)
    6c44:	47a8      	blx	r5
		return 3;
    6c46:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c48:	2800      	cmp	r0, #0
    6c4a:	d001      	beq.n	6c50 <check_fs+0x1c>
}
    6c4c:	0018      	movs	r0, r3
    6c4e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c50:	4b1c      	ldr	r3, [pc, #112]	; (6cc4 <check_fs+0x90>)
    6c52:	5ce3      	ldrb	r3, [r4, r3]
    6c54:	021b      	lsls	r3, r3, #8
    6c56:	4a1c      	ldr	r2, [pc, #112]	; (6cc8 <check_fs+0x94>)
    6c58:	5ca2      	ldrb	r2, [r4, r2]
    6c5a:	431a      	orrs	r2, r3
    6c5c:	491b      	ldr	r1, [pc, #108]	; (6ccc <check_fs+0x98>)
    6c5e:	b212      	sxth	r2, r2
		return 2;
    6c60:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c62:	428a      	cmp	r2, r1
    6c64:	d1f2      	bne.n	6c4c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6c66:	3367      	adds	r3, #103	; 0x67
    6c68:	5ce3      	ldrb	r3, [r4, r3]
    6c6a:	061b      	lsls	r3, r3, #24
    6c6c:	2268      	movs	r2, #104	; 0x68
    6c6e:	5ca2      	ldrb	r2, [r4, r2]
    6c70:	0412      	lsls	r2, r2, #16
    6c72:	4313      	orrs	r3, r2
    6c74:	2266      	movs	r2, #102	; 0x66
    6c76:	5ca2      	ldrb	r2, [r4, r2]
    6c78:	4313      	orrs	r3, r2
    6c7a:	2267      	movs	r2, #103	; 0x67
    6c7c:	5ca2      	ldrb	r2, [r4, r2]
    6c7e:	0212      	lsls	r2, r2, #8
    6c80:	4313      	orrs	r3, r2
    6c82:	021b      	lsls	r3, r3, #8
    6c84:	0a1b      	lsrs	r3, r3, #8
    6c86:	4a12      	ldr	r2, [pc, #72]	; (6cd0 <check_fs+0x9c>)
    6c88:	4293      	cmp	r3, r2
    6c8a:	d016      	beq.n	6cba <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6c8c:	2385      	movs	r3, #133	; 0x85
    6c8e:	5ce3      	ldrb	r3, [r4, r3]
    6c90:	061b      	lsls	r3, r3, #24
    6c92:	2284      	movs	r2, #132	; 0x84
    6c94:	5ca2      	ldrb	r2, [r4, r2]
    6c96:	0412      	lsls	r2, r2, #16
    6c98:	4313      	orrs	r3, r2
    6c9a:	2282      	movs	r2, #130	; 0x82
    6c9c:	5ca2      	ldrb	r2, [r4, r2]
    6c9e:	4313      	orrs	r3, r2
    6ca0:	2283      	movs	r2, #131	; 0x83
    6ca2:	5ca2      	ldrb	r2, [r4, r2]
    6ca4:	0212      	lsls	r2, r2, #8
    6ca6:	4313      	orrs	r3, r2
    6ca8:	021b      	lsls	r3, r3, #8
    6caa:	0a1b      	lsrs	r3, r3, #8
    6cac:	4a09      	ldr	r2, [pc, #36]	; (6cd4 <check_fs+0xa0>)
    6cae:	4694      	mov	ip, r2
    6cb0:	4463      	add	r3, ip
    6cb2:	1e58      	subs	r0, r3, #1
    6cb4:	4183      	sbcs	r3, r0
		return 3;
    6cb6:	b2db      	uxtb	r3, r3
    6cb8:	e7c8      	b.n	6c4c <check_fs+0x18>
		return 0;
    6cba:	2300      	movs	r3, #0
    6cbc:	e7c6      	b.n	6c4c <check_fs+0x18>
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	000069e5 	.word	0x000069e5
    6cc4:	0000022f 	.word	0x0000022f
    6cc8:	0000022e 	.word	0x0000022e
    6ccc:	ffffaa55 	.word	0xffffaa55
    6cd0:	00544146 	.word	0x00544146
    6cd4:	ffabbeba 	.word	0xffabbeba

00006cd8 <chk_mounted>:
{
    6cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cda:	46d6      	mov	lr, sl
    6cdc:	464f      	mov	r7, r9
    6cde:	4646      	mov	r6, r8
    6ce0:	b5c0      	push	{r6, r7, lr}
    6ce2:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    6ce4:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    6ce6:	781c      	ldrb	r4, [r3, #0]
    6ce8:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    6cea:	2c09      	cmp	r4, #9
    6cec:	d80e      	bhi.n	6d0c <chk_mounted+0x34>
    6cee:	785a      	ldrb	r2, [r3, #1]
    6cf0:	2a3a      	cmp	r2, #58	; 0x3a
    6cf2:	d001      	beq.n	6cf8 <chk_mounted+0x20>
    6cf4:	2400      	movs	r4, #0
    6cf6:	e00a      	b.n	6d0e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    6cf8:	3302      	adds	r3, #2
    6cfa:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    6cfc:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    6cfe:	2c07      	cmp	r4, #7
    6d00:	d905      	bls.n	6d0e <chk_mounted+0x36>
}
    6d02:	bc1c      	pop	{r2, r3, r4}
    6d04:	4690      	mov	r8, r2
    6d06:	4699      	mov	r9, r3
    6d08:	46a2      	mov	sl, r4
    6d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d0c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    6d0e:	00a3      	lsls	r3, r4, #2
    6d10:	4ac5      	ldr	r2, [pc, #788]	; (7028 <chk_mounted+0x350>)
    6d12:	589e      	ldr	r6, [r3, r2]
    6d14:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6d16:	2e00      	cmp	r6, #0
    6d18:	d100      	bne.n	6d1c <chk_mounted+0x44>
    6d1a:	e0e8      	b.n	6eee <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    6d1c:	7833      	ldrb	r3, [r6, #0]
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d00d      	beq.n	6d3e <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    6d22:	7870      	ldrb	r0, [r6, #1]
    6d24:	4bc1      	ldr	r3, [pc, #772]	; (702c <chk_mounted+0x354>)
    6d26:	4798      	blx	r3
    6d28:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    6d2a:	07c2      	lsls	r2, r0, #31
    6d2c:	d407      	bmi.n	6d3e <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    6d2e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6d30:	2d00      	cmp	r5, #0
    6d32:	d0e6      	beq.n	6d02 <chk_mounted+0x2a>
    6d34:	075b      	lsls	r3, r3, #29
    6d36:	d400      	bmi.n	6d3a <chk_mounted+0x62>
    6d38:	e0db      	b.n	6ef2 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    6d3a:	300a      	adds	r0, #10
    6d3c:	e7e1      	b.n	6d02 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    6d3e:	2300      	movs	r3, #0
    6d40:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    6d42:	b2e0      	uxtb	r0, r4
    6d44:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    6d46:	4bba      	ldr	r3, [pc, #744]	; (7030 <chk_mounted+0x358>)
    6d48:	4798      	blx	r3
    6d4a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6d4c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6d4e:	07da      	lsls	r2, r3, #31
    6d50:	d4d7      	bmi.n	6d02 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d52:	2d00      	cmp	r5, #0
    6d54:	d002      	beq.n	6d5c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    6d56:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d58:	075b      	lsls	r3, r3, #29
    6d5a:	d4d2      	bmi.n	6d02 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    6d5c:	2100      	movs	r1, #0
    6d5e:	0030      	movs	r0, r6
    6d60:	4bb4      	ldr	r3, [pc, #720]	; (7034 <chk_mounted+0x35c>)
    6d62:	4798      	blx	r3
    6d64:	0003      	movs	r3, r0
    6d66:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    6d68:	2801      	cmp	r0, #1
    6d6a:	d100      	bne.n	6d6e <chk_mounted+0x96>
    6d6c:	e09a      	b.n	6ea4 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    6d6e:	2b03      	cmp	r3, #3
    6d70:	d100      	bne.n	6d74 <chk_mounted+0x9c>
    6d72:	e0c0      	b.n	6ef6 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6d74:	200d      	movs	r0, #13
    6d76:	2b00      	cmp	r3, #0
    6d78:	d1c3      	bne.n	6d02 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6d7a:	333c      	adds	r3, #60	; 0x3c
    6d7c:	5cf2      	ldrb	r2, [r6, r3]
    6d7e:	0212      	lsls	r2, r2, #8
    6d80:	3b01      	subs	r3, #1
    6d82:	5cf3      	ldrb	r3, [r6, r3]
    6d84:	4313      	orrs	r3, r2
    6d86:	2280      	movs	r2, #128	; 0x80
    6d88:	0092      	lsls	r2, r2, #2
    6d8a:	b21b      	sxth	r3, r3
    6d8c:	4293      	cmp	r3, r2
    6d8e:	d1b8      	bne.n	6d02 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6d90:	2347      	movs	r3, #71	; 0x47
    6d92:	5cf3      	ldrb	r3, [r6, r3]
    6d94:	021b      	lsls	r3, r3, #8
    6d96:	3abb      	subs	r2, #187	; 0xbb
    6d98:	3aff      	subs	r2, #255	; 0xff
    6d9a:	5cb5      	ldrb	r5, [r6, r2]
    6d9c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    6d9e:	d10d      	bne.n	6dbc <chk_mounted+0xe4>
    6da0:	2357      	movs	r3, #87	; 0x57
    6da2:	5cf5      	ldrb	r5, [r6, r3]
    6da4:	062d      	lsls	r5, r5, #24
    6da6:	3b01      	subs	r3, #1
    6da8:	5cf3      	ldrb	r3, [r6, r3]
    6daa:	041b      	lsls	r3, r3, #16
    6dac:	431d      	orrs	r5, r3
    6dae:	2354      	movs	r3, #84	; 0x54
    6db0:	5cf3      	ldrb	r3, [r6, r3]
    6db2:	431d      	orrs	r5, r3
    6db4:	2355      	movs	r3, #85	; 0x55
    6db6:	5cf3      	ldrb	r3, [r6, r3]
    6db8:	021b      	lsls	r3, r3, #8
    6dba:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    6dbc:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    6dbe:	2340      	movs	r3, #64	; 0x40
    6dc0:	5cf2      	ldrb	r2, [r6, r3]
    6dc2:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    6dc4:	1e53      	subs	r3, r2, #1
    6dc6:	200d      	movs	r0, #13
    6dc8:	2b01      	cmp	r3, #1
    6dca:	d89a      	bhi.n	6d02 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    6dcc:	233d      	movs	r3, #61	; 0x3d
    6dce:	5cf1      	ldrb	r1, [r6, r3]
    6dd0:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6dd2:	2900      	cmp	r1, #0
    6dd4:	d095      	beq.n	6d02 <chk_mounted+0x2a>
    6dd6:	1e4b      	subs	r3, r1, #1
    6dd8:	4219      	tst	r1, r3
    6dda:	d192      	bne.n	6d02 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    6ddc:	2342      	movs	r3, #66	; 0x42
    6dde:	5cf3      	ldrb	r3, [r6, r3]
    6de0:	021b      	lsls	r3, r3, #8
    6de2:	3034      	adds	r0, #52	; 0x34
    6de4:	5c30      	ldrb	r0, [r6, r0]
    6de6:	4318      	orrs	r0, r3
    6de8:	4680      	mov	r8, r0
    6dea:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6dec:	200d      	movs	r0, #13
    6dee:	4643      	mov	r3, r8
    6df0:	071b      	lsls	r3, r3, #28
    6df2:	d000      	beq.n	6df6 <chk_mounted+0x11e>
    6df4:	e785      	b.n	6d02 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6df6:	2344      	movs	r3, #68	; 0x44
    6df8:	5cf3      	ldrb	r3, [r6, r3]
    6dfa:	021b      	lsls	r3, r3, #8
    6dfc:	3036      	adds	r0, #54	; 0x36
    6dfe:	5c30      	ldrb	r0, [r6, r0]
    6e00:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6e02:	d10d      	bne.n	6e20 <chk_mounted+0x148>
    6e04:	3353      	adds	r3, #83	; 0x53
    6e06:	5cf3      	ldrb	r3, [r6, r3]
    6e08:	061b      	lsls	r3, r3, #24
    6e0a:	2052      	movs	r0, #82	; 0x52
    6e0c:	5c30      	ldrb	r0, [r6, r0]
    6e0e:	0400      	lsls	r0, r0, #16
    6e10:	4303      	orrs	r3, r0
    6e12:	2050      	movs	r0, #80	; 0x50
    6e14:	5c30      	ldrb	r0, [r6, r0]
    6e16:	4303      	orrs	r3, r0
    6e18:	2051      	movs	r0, #81	; 0x51
    6e1a:	5c30      	ldrb	r0, [r6, r0]
    6e1c:	0200      	lsls	r0, r0, #8
    6e1e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6e20:	203f      	movs	r0, #63	; 0x3f
    6e22:	5c30      	ldrb	r0, [r6, r0]
    6e24:	0200      	lsls	r0, r0, #8
    6e26:	273e      	movs	r7, #62	; 0x3e
    6e28:	5df7      	ldrb	r7, [r6, r7]
    6e2a:	4307      	orrs	r7, r0
    6e2c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6e2e:	200d      	movs	r0, #13
    6e30:	2f00      	cmp	r7, #0
    6e32:	d100      	bne.n	6e36 <chk_mounted+0x15e>
    6e34:	e765      	b.n	6d02 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    6e36:	436a      	muls	r2, r5
    6e38:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    6e3a:	4642      	mov	r2, r8
    6e3c:	0917      	lsrs	r7, r2, #4
    6e3e:	4457      	add	r7, sl
    6e40:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    6e42:	42bb      	cmp	r3, r7
    6e44:	d200      	bcs.n	6e48 <chk_mounted+0x170>
    6e46:	e75c      	b.n	6d02 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6e48:	1bd8      	subs	r0, r3, r7
    6e4a:	4b7b      	ldr	r3, [pc, #492]	; (7038 <chk_mounted+0x360>)
    6e4c:	4798      	blx	r3
    6e4e:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6e50:	200d      	movs	r0, #13
    6e52:	2b00      	cmp	r3, #0
    6e54:	d100      	bne.n	6e58 <chk_mounted+0x180>
    6e56:	e754      	b.n	6d02 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    6e58:	4a78      	ldr	r2, [pc, #480]	; (703c <chk_mounted+0x364>)
	fmt = FS_FAT12;
    6e5a:	429a      	cmp	r2, r3
    6e5c:	4192      	sbcs	r2, r2
    6e5e:	4252      	negs	r2, r2
    6e60:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6e62:	4977      	ldr	r1, [pc, #476]	; (7040 <chk_mounted+0x368>)
    6e64:	428b      	cmp	r3, r1
    6e66:	d848      	bhi.n	6efa <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6e68:	3302      	adds	r3, #2
    6e6a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6e6c:	19e7      	adds	r7, r4, r7
    6e6e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6e70:	4454      	add	r4, sl
    6e72:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6e74:	200d      	movs	r0, #13
    6e76:	4641      	mov	r1, r8
    6e78:	2900      	cmp	r1, #0
    6e7a:	d100      	bne.n	6e7e <chk_mounted+0x1a6>
    6e7c:	e741      	b.n	6d02 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6e7e:	444c      	add	r4, r9
    6e80:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6e82:	2a02      	cmp	r2, #2
    6e84:	d12c      	bne.n	6ee0 <chk_mounted+0x208>
    6e86:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6e88:	496e      	ldr	r1, [pc, #440]	; (7044 <chk_mounted+0x36c>)
    6e8a:	468c      	mov	ip, r1
    6e8c:	4463      	add	r3, ip
    6e8e:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6e90:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6e92:	429d      	cmp	r5, r3
    6e94:	d200      	bcs.n	6e98 <chk_mounted+0x1c0>
    6e96:	e734      	b.n	6d02 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6e98:	2301      	movs	r3, #1
    6e9a:	425b      	negs	r3, r3
    6e9c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6e9e:	2300      	movs	r3, #0
    6ea0:	60f3      	str	r3, [r6, #12]
    6ea2:	e0b6      	b.n	7012 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    6ea4:	33f2      	adds	r3, #242	; 0xf2
    6ea6:	33ff      	adds	r3, #255	; 0xff
    6ea8:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6eaa:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    6eac:	2b00      	cmp	r3, #0
    6eae:	d100      	bne.n	6eb2 <chk_mounted+0x1da>
    6eb0:	e727      	b.n	6d02 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6eb2:	23fa      	movs	r3, #250	; 0xfa
    6eb4:	33ff      	adds	r3, #255	; 0xff
    6eb6:	5cf4      	ldrb	r4, [r6, r3]
    6eb8:	0624      	lsls	r4, r4, #24
    6eba:	3b01      	subs	r3, #1
    6ebc:	5cf3      	ldrb	r3, [r6, r3]
    6ebe:	041b      	lsls	r3, r3, #16
    6ec0:	431c      	orrs	r4, r3
    6ec2:	23fb      	movs	r3, #251	; 0xfb
    6ec4:	005b      	lsls	r3, r3, #1
    6ec6:	5cf3      	ldrb	r3, [r6, r3]
    6ec8:	431c      	orrs	r4, r3
    6eca:	23f8      	movs	r3, #248	; 0xf8
    6ecc:	33ff      	adds	r3, #255	; 0xff
    6ece:	5cf2      	ldrb	r2, [r6, r3]
    6ed0:	0212      	lsls	r2, r2, #8
    6ed2:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    6ed4:	0021      	movs	r1, r4
    6ed6:	0030      	movs	r0, r6
    6ed8:	4b56      	ldr	r3, [pc, #344]	; (7034 <chk_mounted+0x35c>)
    6eda:	4798      	blx	r3
    6edc:	0003      	movs	r3, r0
    6ede:	e746      	b.n	6d6e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6ee0:	2103      	movs	r1, #3
    6ee2:	4359      	muls	r1, r3
    6ee4:	0849      	lsrs	r1, r1, #1
    6ee6:	2001      	movs	r0, #1
    6ee8:	4003      	ands	r3, r0
    6eea:	18cb      	adds	r3, r1, r3
    6eec:	e7cc      	b.n	6e88 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6eee:	200c      	movs	r0, #12
    6ef0:	e707      	b.n	6d02 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    6ef2:	2000      	movs	r0, #0
    6ef4:	e705      	b.n	6d02 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    6ef6:	2001      	movs	r0, #1
    6ef8:	e703      	b.n	6d02 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6efa:	3302      	adds	r3, #2
    6efc:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6efe:	19e7      	adds	r7, r4, r7
    6f00:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6f02:	4652      	mov	r2, sl
    6f04:	18a2      	adds	r2, r4, r2
    6f06:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    6f08:	200d      	movs	r0, #13
    6f0a:	4642      	mov	r2, r8
    6f0c:	2a00      	cmp	r2, #0
    6f0e:	d000      	beq.n	6f12 <chk_mounted+0x23a>
    6f10:	e6f7      	b.n	6d02 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6f12:	225f      	movs	r2, #95	; 0x5f
    6f14:	5cb2      	ldrb	r2, [r6, r2]
    6f16:	0612      	lsls	r2, r2, #24
    6f18:	215e      	movs	r1, #94	; 0x5e
    6f1a:	5c71      	ldrb	r1, [r6, r1]
    6f1c:	0409      	lsls	r1, r1, #16
    6f1e:	430a      	orrs	r2, r1
    6f20:	215c      	movs	r1, #92	; 0x5c
    6f22:	5c71      	ldrb	r1, [r6, r1]
    6f24:	430a      	orrs	r2, r1
    6f26:	215d      	movs	r1, #93	; 0x5d
    6f28:	5c71      	ldrb	r1, [r6, r1]
    6f2a:	0209      	lsls	r1, r1, #8
    6f2c:	430a      	orrs	r2, r1
    6f2e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6f30:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6f32:	4a44      	ldr	r2, [pc, #272]	; (7044 <chk_mounted+0x36c>)
    6f34:	4694      	mov	ip, r2
    6f36:	4463      	add	r3, ip
    6f38:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6f3a:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6f3c:	429d      	cmp	r5, r3
    6f3e:	d200      	bcs.n	6f42 <chk_mounted+0x26a>
    6f40:	e6df      	b.n	6d02 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6f42:	2301      	movs	r3, #1
    6f44:	425b      	negs	r3, r3
    6f46:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6f48:	2300      	movs	r3, #0
    6f4a:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    6f4c:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    6f4e:	3361      	adds	r3, #97	; 0x61
    6f50:	5cf3      	ldrb	r3, [r6, r3]
    6f52:	021b      	lsls	r3, r3, #8
    6f54:	2260      	movs	r2, #96	; 0x60
    6f56:	5cb2      	ldrb	r2, [r6, r2]
    6f58:	431a      	orrs	r2, r3
    6f5a:	1912      	adds	r2, r2, r4
    6f5c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f5e:	0031      	movs	r1, r6
    6f60:	3130      	adds	r1, #48	; 0x30
    6f62:	7870      	ldrb	r0, [r6, #1]
    6f64:	2301      	movs	r3, #1
    6f66:	4c38      	ldr	r4, [pc, #224]	; (7048 <chk_mounted+0x370>)
    6f68:	47a0      	blx	r4
    6f6a:	2203      	movs	r2, #3
    6f6c:	2800      	cmp	r0, #0
    6f6e:	d150      	bne.n	7012 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6f70:	4b36      	ldr	r3, [pc, #216]	; (704c <chk_mounted+0x374>)
    6f72:	5cf2      	ldrb	r2, [r6, r3]
    6f74:	0212      	lsls	r2, r2, #8
    6f76:	4b36      	ldr	r3, [pc, #216]	; (7050 <chk_mounted+0x378>)
    6f78:	5cf3      	ldrb	r3, [r6, r3]
    6f7a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f7c:	4935      	ldr	r1, [pc, #212]	; (7054 <chk_mounted+0x37c>)
    6f7e:	b21b      	sxth	r3, r3
    6f80:	2203      	movs	r2, #3
    6f82:	428b      	cmp	r3, r1
    6f84:	d145      	bne.n	7012 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6f86:	2333      	movs	r3, #51	; 0x33
    6f88:	5cf3      	ldrb	r3, [r6, r3]
    6f8a:	061b      	lsls	r3, r3, #24
    6f8c:	322f      	adds	r2, #47	; 0x2f
    6f8e:	5cb2      	ldrb	r2, [r6, r2]
    6f90:	0412      	lsls	r2, r2, #16
    6f92:	4313      	orrs	r3, r2
    6f94:	2230      	movs	r2, #48	; 0x30
    6f96:	5cb2      	ldrb	r2, [r6, r2]
    6f98:	4313      	orrs	r3, r2
    6f9a:	2231      	movs	r2, #49	; 0x31
    6f9c:	5cb2      	ldrb	r2, [r6, r2]
    6f9e:	0212      	lsls	r2, r2, #8
    6fa0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6fa2:	492d      	ldr	r1, [pc, #180]	; (7058 <chk_mounted+0x380>)
    6fa4:	2203      	movs	r2, #3
    6fa6:	428b      	cmp	r3, r1
    6fa8:	d133      	bne.n	7012 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    6faa:	4b2c      	ldr	r3, [pc, #176]	; (705c <chk_mounted+0x384>)
    6fac:	5cf3      	ldrb	r3, [r6, r3]
    6fae:	061b      	lsls	r3, r3, #24
    6fb0:	4a2b      	ldr	r2, [pc, #172]	; (7060 <chk_mounted+0x388>)
    6fb2:	5cb2      	ldrb	r2, [r6, r2]
    6fb4:	0412      	lsls	r2, r2, #16
    6fb6:	4313      	orrs	r3, r2
    6fb8:	2285      	movs	r2, #133	; 0x85
    6fba:	0092      	lsls	r2, r2, #2
    6fbc:	5cb2      	ldrb	r2, [r6, r2]
    6fbe:	4313      	orrs	r3, r2
    6fc0:	4a28      	ldr	r2, [pc, #160]	; (7064 <chk_mounted+0x38c>)
    6fc2:	5cb2      	ldrb	r2, [r6, r2]
    6fc4:	0212      	lsls	r2, r2, #8
    6fc6:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6fc8:	4927      	ldr	r1, [pc, #156]	; (7068 <chk_mounted+0x390>)
    6fca:	2203      	movs	r2, #3
    6fcc:	428b      	cmp	r3, r1
    6fce:	d120      	bne.n	7012 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6fd0:	4b26      	ldr	r3, [pc, #152]	; (706c <chk_mounted+0x394>)
    6fd2:	5cf3      	ldrb	r3, [r6, r3]
    6fd4:	061b      	lsls	r3, r3, #24
    6fd6:	4a26      	ldr	r2, [pc, #152]	; (7070 <chk_mounted+0x398>)
    6fd8:	5cb2      	ldrb	r2, [r6, r2]
    6fda:	0412      	lsls	r2, r2, #16
    6fdc:	4313      	orrs	r3, r2
    6fde:	2287      	movs	r2, #135	; 0x87
    6fe0:	0092      	lsls	r2, r2, #2
    6fe2:	5cb2      	ldrb	r2, [r6, r2]
    6fe4:	4313      	orrs	r3, r2
    6fe6:	4a23      	ldr	r2, [pc, #140]	; (7074 <chk_mounted+0x39c>)
    6fe8:	5cb2      	ldrb	r2, [r6, r2]
    6fea:	0212      	lsls	r2, r2, #8
    6fec:	4313      	orrs	r3, r2
    6fee:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    6ff0:	4b21      	ldr	r3, [pc, #132]	; (7078 <chk_mounted+0x3a0>)
    6ff2:	5cf3      	ldrb	r3, [r6, r3]
    6ff4:	061b      	lsls	r3, r3, #24
    6ff6:	4a21      	ldr	r2, [pc, #132]	; (707c <chk_mounted+0x3a4>)
    6ff8:	5cb2      	ldrb	r2, [r6, r2]
    6ffa:	0412      	lsls	r2, r2, #16
    6ffc:	4313      	orrs	r3, r2
    6ffe:	2286      	movs	r2, #134	; 0x86
    7000:	0092      	lsls	r2, r2, #2
    7002:	5cb2      	ldrb	r2, [r6, r2]
    7004:	4313      	orrs	r3, r2
    7006:	4a1e      	ldr	r2, [pc, #120]	; (7080 <chk_mounted+0x3a8>)
    7008:	5cb2      	ldrb	r2, [r6, r2]
    700a:	0212      	lsls	r2, r2, #8
    700c:	4313      	orrs	r3, r2
    700e:	6133      	str	r3, [r6, #16]
    7010:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    7012:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    7014:	4a1b      	ldr	r2, [pc, #108]	; (7084 <chk_mounted+0x3ac>)
    7016:	8813      	ldrh	r3, [r2, #0]
    7018:	3301      	adds	r3, #1
    701a:	b29b      	uxth	r3, r3
    701c:	8013      	strh	r3, [r2, #0]
    701e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    7020:	2000      	movs	r0, #0
    7022:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    7024:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    7026:	e66c      	b.n	6d02 <chk_mounted+0x2a>
    7028:	200003d0 	.word	0x200003d0
    702c:	000069c9 	.word	0x000069c9
    7030:	0000692d 	.word	0x0000692d
    7034:	00006c35 	.word	0x00006c35
    7038:	00009de9 	.word	0x00009de9
    703c:	00000ff5 	.word	0x00000ff5
    7040:	0000fff5 	.word	0x0000fff5
    7044:	000001ff 	.word	0x000001ff
    7048:	000069e5 	.word	0x000069e5
    704c:	0000022f 	.word	0x0000022f
    7050:	0000022e 	.word	0x0000022e
    7054:	ffffaa55 	.word	0xffffaa55
    7058:	41615252 	.word	0x41615252
    705c:	00000217 	.word	0x00000217
    7060:	00000216 	.word	0x00000216
    7064:	00000215 	.word	0x00000215
    7068:	61417272 	.word	0x61417272
    706c:	0000021f 	.word	0x0000021f
    7070:	0000021e 	.word	0x0000021e
    7074:	0000021d 	.word	0x0000021d
    7078:	0000021b 	.word	0x0000021b
    707c:	0000021a 	.word	0x0000021a
    7080:	00000219 	.word	0x00000219
    7084:	200003f0 	.word	0x200003f0

00007088 <move_window>:
{
    7088:	b5f0      	push	{r4, r5, r6, r7, lr}
    708a:	46ce      	mov	lr, r9
    708c:	b500      	push	{lr}
    708e:	b082      	sub	sp, #8
    7090:	0004      	movs	r4, r0
    7092:	000f      	movs	r7, r1
	wsect = fs->winsect;
    7094:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    7096:	428d      	cmp	r5, r1
    7098:	d03f      	beq.n	711a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    709a:	7903      	ldrb	r3, [r0, #4]
    709c:	2b00      	cmp	r3, #0
    709e:	d107      	bne.n	70b0 <move_window+0x28>
	return FR_OK;
    70a0:	2300      	movs	r3, #0
		if (sector) {
    70a2:	2f00      	cmp	r7, #0
    70a4:	d12c      	bne.n	7100 <move_window+0x78>
}
    70a6:	0018      	movs	r0, r3
    70a8:	b002      	add	sp, #8
    70aa:	bc04      	pop	{r2}
    70ac:	4691      	mov	r9, r2
    70ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    70b0:	2330      	movs	r3, #48	; 0x30
    70b2:	469c      	mov	ip, r3
    70b4:	4484      	add	ip, r0
    70b6:	4663      	mov	r3, ip
    70b8:	4661      	mov	r1, ip
    70ba:	9301      	str	r3, [sp, #4]
    70bc:	7840      	ldrb	r0, [r0, #1]
    70be:	2301      	movs	r3, #1
    70c0:	002a      	movs	r2, r5
    70c2:	4e17      	ldr	r6, [pc, #92]	; (7120 <move_window+0x98>)
    70c4:	47b0      	blx	r6
				return FR_DISK_ERR;
    70c6:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    70c8:	2800      	cmp	r0, #0
    70ca:	d1ec      	bne.n	70a6 <move_window+0x1e>
			fs->wflag = 0;
    70cc:	2300      	movs	r3, #0
    70ce:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    70d0:	6a23      	ldr	r3, [r4, #32]
    70d2:	69e2      	ldr	r2, [r4, #28]
    70d4:	4694      	mov	ip, r2
    70d6:	4463      	add	r3, ip
    70d8:	429d      	cmp	r5, r3
    70da:	d2e1      	bcs.n	70a0 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    70dc:	78e6      	ldrb	r6, [r4, #3]
    70de:	2e01      	cmp	r6, #1
    70e0:	d9de      	bls.n	70a0 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    70e2:	4b0f      	ldr	r3, [pc, #60]	; (7120 <move_window+0x98>)
    70e4:	4699      	mov	r9, r3
					wsect += fs->fsize;
    70e6:	69e3      	ldr	r3, [r4, #28]
    70e8:	469c      	mov	ip, r3
    70ea:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    70ec:	7860      	ldrb	r0, [r4, #1]
    70ee:	2301      	movs	r3, #1
    70f0:	002a      	movs	r2, r5
    70f2:	9901      	ldr	r1, [sp, #4]
    70f4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    70f6:	3e01      	subs	r6, #1
    70f8:	b2f6      	uxtb	r6, r6
    70fa:	2e01      	cmp	r6, #1
    70fc:	d1f3      	bne.n	70e6 <move_window+0x5e>
    70fe:	e7cf      	b.n	70a0 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7100:	0021      	movs	r1, r4
    7102:	3130      	adds	r1, #48	; 0x30
    7104:	7860      	ldrb	r0, [r4, #1]
    7106:	3301      	adds	r3, #1
    7108:	003a      	movs	r2, r7
    710a:	4d06      	ldr	r5, [pc, #24]	; (7124 <move_window+0x9c>)
    710c:	47a8      	blx	r5
				return FR_DISK_ERR;
    710e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7110:	2800      	cmp	r0, #0
    7112:	d1c8      	bne.n	70a6 <move_window+0x1e>
			fs->winsect = sector;
    7114:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    7116:	2300      	movs	r3, #0
    7118:	e7c5      	b.n	70a6 <move_window+0x1e>
    711a:	2300      	movs	r3, #0
    711c:	e7c3      	b.n	70a6 <move_window+0x1e>
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	00006a69 	.word	0x00006a69
    7124:	000069e5 	.word	0x000069e5

00007128 <get_fat>:
{
    7128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    712a:	0005      	movs	r5, r0
    712c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    712e:	2901      	cmp	r1, #1
    7130:	d974      	bls.n	721c <get_fat+0xf4>
		return 1;
    7132:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7134:	69ab      	ldr	r3, [r5, #24]
    7136:	4299      	cmp	r1, r3
    7138:	d271      	bcs.n	721e <get_fat+0xf6>
	switch (fs->fs_type) {
    713a:	782b      	ldrb	r3, [r5, #0]
    713c:	2b02      	cmp	r3, #2
    713e:	d034      	beq.n	71aa <get_fat+0x82>
    7140:	2b03      	cmp	r3, #3
    7142:	d049      	beq.n	71d8 <get_fat+0xb0>
    7144:	2b01      	cmp	r3, #1
    7146:	d002      	beq.n	714e <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7148:	2001      	movs	r0, #1
    714a:	4240      	negs	r0, r0
    714c:	e067      	b.n	721e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    714e:	084e      	lsrs	r6, r1, #1
    7150:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7152:	0a71      	lsrs	r1, r6, #9
    7154:	6a2b      	ldr	r3, [r5, #32]
    7156:	469c      	mov	ip, r3
    7158:	4461      	add	r1, ip
    715a:	0028      	movs	r0, r5
    715c:	4b30      	ldr	r3, [pc, #192]	; (7220 <get_fat+0xf8>)
    715e:	4798      	blx	r3
    7160:	2800      	cmp	r0, #0
    7162:	d002      	beq.n	716a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7164:	2001      	movs	r0, #1
    7166:	4240      	negs	r0, r0
    7168:	e059      	b.n	721e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    716a:	05f3      	lsls	r3, r6, #23
    716c:	0ddb      	lsrs	r3, r3, #23
    716e:	18eb      	adds	r3, r5, r3
    7170:	3330      	adds	r3, #48	; 0x30
    7172:	781f      	ldrb	r7, [r3, #0]
    7174:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7176:	0a71      	lsrs	r1, r6, #9
    7178:	6a2b      	ldr	r3, [r5, #32]
    717a:	469c      	mov	ip, r3
    717c:	4461      	add	r1, ip
    717e:	0028      	movs	r0, r5
    7180:	4b27      	ldr	r3, [pc, #156]	; (7220 <get_fat+0xf8>)
    7182:	4798      	blx	r3
    7184:	2800      	cmp	r0, #0
    7186:	d002      	beq.n	718e <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7188:	2001      	movs	r0, #1
    718a:	4240      	negs	r0, r0
    718c:	e047      	b.n	721e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    718e:	05f6      	lsls	r6, r6, #23
    7190:	0df6      	lsrs	r6, r6, #23
    7192:	19ad      	adds	r5, r5, r6
    7194:	3530      	adds	r5, #48	; 0x30
    7196:	7828      	ldrb	r0, [r5, #0]
    7198:	0200      	lsls	r0, r0, #8
    719a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    719c:	07e3      	lsls	r3, r4, #31
    719e:	d501      	bpl.n	71a4 <get_fat+0x7c>
    71a0:	0900      	lsrs	r0, r0, #4
    71a2:	e03c      	b.n	721e <get_fat+0xf6>
    71a4:	0500      	lsls	r0, r0, #20
    71a6:	0d00      	lsrs	r0, r0, #20
    71a8:	e039      	b.n	721e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    71aa:	0a09      	lsrs	r1, r1, #8
    71ac:	6a2b      	ldr	r3, [r5, #32]
    71ae:	469c      	mov	ip, r3
    71b0:	4461      	add	r1, ip
    71b2:	0028      	movs	r0, r5
    71b4:	4b1a      	ldr	r3, [pc, #104]	; (7220 <get_fat+0xf8>)
    71b6:	4798      	blx	r3
    71b8:	2800      	cmp	r0, #0
    71ba:	d002      	beq.n	71c2 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    71bc:	2001      	movs	r0, #1
    71be:	4240      	negs	r0, r0
    71c0:	e02d      	b.n	721e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    71c2:	0064      	lsls	r4, r4, #1
    71c4:	23ff      	movs	r3, #255	; 0xff
    71c6:	005b      	lsls	r3, r3, #1
    71c8:	401c      	ands	r4, r3
		return LD_WORD(p);
    71ca:	192d      	adds	r5, r5, r4
    71cc:	3530      	adds	r5, #48	; 0x30
    71ce:	786b      	ldrb	r3, [r5, #1]
    71d0:	021b      	lsls	r3, r3, #8
    71d2:	7828      	ldrb	r0, [r5, #0]
    71d4:	4318      	orrs	r0, r3
    71d6:	e022      	b.n	721e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    71d8:	09c9      	lsrs	r1, r1, #7
    71da:	6a2b      	ldr	r3, [r5, #32]
    71dc:	469c      	mov	ip, r3
    71de:	4461      	add	r1, ip
    71e0:	0028      	movs	r0, r5
    71e2:	4b0f      	ldr	r3, [pc, #60]	; (7220 <get_fat+0xf8>)
    71e4:	4798      	blx	r3
    71e6:	2800      	cmp	r0, #0
    71e8:	d002      	beq.n	71f0 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    71ea:	2001      	movs	r0, #1
    71ec:	4240      	negs	r0, r0
    71ee:	e016      	b.n	721e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    71f0:	00a4      	lsls	r4, r4, #2
    71f2:	23fe      	movs	r3, #254	; 0xfe
    71f4:	005b      	lsls	r3, r3, #1
    71f6:	401c      	ands	r4, r3
    71f8:	0023      	movs	r3, r4
    71fa:	3330      	adds	r3, #48	; 0x30
    71fc:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    71fe:	78d8      	ldrb	r0, [r3, #3]
    7200:	0600      	lsls	r0, r0, #24
    7202:	789a      	ldrb	r2, [r3, #2]
    7204:	0412      	lsls	r2, r2, #16
    7206:	4310      	orrs	r0, r2
    7208:	192c      	adds	r4, r5, r4
    720a:	3430      	adds	r4, #48	; 0x30
    720c:	7822      	ldrb	r2, [r4, #0]
    720e:	4310      	orrs	r0, r2
    7210:	785b      	ldrb	r3, [r3, #1]
    7212:	021b      	lsls	r3, r3, #8
    7214:	4318      	orrs	r0, r3
    7216:	0100      	lsls	r0, r0, #4
    7218:	0900      	lsrs	r0, r0, #4
    721a:	e000      	b.n	721e <get_fat+0xf6>
		return 1;
    721c:	2001      	movs	r0, #1
}
    721e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7220:	00007089 	.word	0x00007089

00007224 <dir_sdi>:
{
    7224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7226:	0004      	movs	r4, r0
    7228:	000d      	movs	r5, r1
	dj->index = idx;
    722a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    722c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    722e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7230:	2901      	cmp	r1, #1
    7232:	d003      	beq.n	723c <dir_sdi+0x18>
    7234:	6823      	ldr	r3, [r4, #0]
    7236:	699a      	ldr	r2, [r3, #24]
    7238:	4291      	cmp	r1, r2
    723a:	d300      	bcc.n	723e <dir_sdi+0x1a>
}
    723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    723e:	2900      	cmp	r1, #0
    7240:	d119      	bne.n	7276 <dir_sdi+0x52>
    7242:	781a      	ldrb	r2, [r3, #0]
    7244:	2a03      	cmp	r2, #3
    7246:	d013      	beq.n	7270 <dir_sdi+0x4c>
		dj->clust = clst;
    7248:	2200      	movs	r2, #0
    724a:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    724c:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    724e:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7250:	42aa      	cmp	r2, r5
    7252:	d9f3      	bls.n	723c <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7254:	092a      	lsrs	r2, r5, #4
    7256:	b292      	uxth	r2, r2
    7258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    725a:	189b      	adds	r3, r3, r2
    725c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    725e:	6823      	ldr	r3, [r4, #0]
    7260:	3330      	adds	r3, #48	; 0x30
    7262:	220f      	movs	r2, #15
    7264:	4015      	ands	r5, r2
    7266:	016d      	lsls	r5, r5, #5
    7268:	195d      	adds	r5, r3, r5
    726a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    726c:	2000      	movs	r0, #0
    726e:	e7e5      	b.n	723c <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    7270:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7272:	2900      	cmp	r1, #0
    7274:	d0e8      	beq.n	7248 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7276:	789e      	ldrb	r6, [r3, #2]
    7278:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    727a:	42b5      	cmp	r5, r6
    727c:	d313      	bcc.n	72a6 <dir_sdi+0x82>
    727e:	1bad      	subs	r5, r5, r6
    7280:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7282:	4f10      	ldr	r7, [pc, #64]	; (72c4 <dir_sdi+0xa0>)
    7284:	e000      	b.n	7288 <dir_sdi+0x64>
    7286:	001d      	movs	r5, r3
    7288:	6820      	ldr	r0, [r4, #0]
    728a:	47b8      	blx	r7
    728c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    728e:	1c43      	adds	r3, r0, #1
    7290:	d012      	beq.n	72b8 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7292:	2801      	cmp	r0, #1
    7294:	d912      	bls.n	72bc <dir_sdi+0x98>
    7296:	6823      	ldr	r3, [r4, #0]
    7298:	699b      	ldr	r3, [r3, #24]
    729a:	4298      	cmp	r0, r3
    729c:	d210      	bcs.n	72c0 <dir_sdi+0x9c>
    729e:	1bab      	subs	r3, r5, r6
    72a0:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    72a2:	42b5      	cmp	r5, r6
    72a4:	d2ef      	bcs.n	7286 <dir_sdi+0x62>
		dj->clust = clst;
    72a6:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    72a8:	6820      	ldr	r0, [r4, #0]
    72aa:	4b07      	ldr	r3, [pc, #28]	; (72c8 <dir_sdi+0xa4>)
    72ac:	4798      	blx	r3
    72ae:	092b      	lsrs	r3, r5, #4
    72b0:	b29b      	uxth	r3, r3
    72b2:	1818      	adds	r0, r3, r0
    72b4:	6120      	str	r0, [r4, #16]
    72b6:	e7d2      	b.n	725e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    72b8:	2001      	movs	r0, #1
    72ba:	e7bf      	b.n	723c <dir_sdi+0x18>
				return FR_INT_ERR;
    72bc:	2002      	movs	r0, #2
    72be:	e7bd      	b.n	723c <dir_sdi+0x18>
    72c0:	2002      	movs	r0, #2
    72c2:	e7bb      	b.n	723c <dir_sdi+0x18>
    72c4:	00007129 	.word	0x00007129
    72c8:	00006bcf 	.word	0x00006bcf

000072cc <put_fat>:
{
    72cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72ce:	46c6      	mov	lr, r8
    72d0:	b500      	push	{lr}
    72d2:	0007      	movs	r7, r0
    72d4:	000c      	movs	r4, r1
    72d6:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    72d8:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    72da:	2901      	cmp	r1, #1
    72dc:	d902      	bls.n	72e4 <put_fat+0x18>
    72de:	6983      	ldr	r3, [r0, #24]
    72e0:	4299      	cmp	r1, r3
    72e2:	d303      	bcc.n	72ec <put_fat+0x20>
}
    72e4:	0028      	movs	r0, r5
    72e6:	bc04      	pop	{r2}
    72e8:	4690      	mov	r8, r2
    72ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    72ec:	7803      	ldrb	r3, [r0, #0]
    72ee:	2b02      	cmp	r3, #2
    72f0:	d053      	beq.n	739a <put_fat+0xce>
    72f2:	2b03      	cmp	r3, #3
    72f4:	d063      	beq.n	73be <put_fat+0xf2>
			res = FR_INT_ERR;
    72f6:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    72f8:	2b01      	cmp	r3, #1
    72fa:	d002      	beq.n	7302 <put_fat+0x36>
		fs->wflag = 1;
    72fc:	2301      	movs	r3, #1
    72fe:	713b      	strb	r3, [r7, #4]
    7300:	e7f0      	b.n	72e4 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    7302:	084b      	lsrs	r3, r1, #1
    7304:	4698      	mov	r8, r3
    7306:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7308:	4643      	mov	r3, r8
    730a:	0a59      	lsrs	r1, r3, #9
    730c:	6a03      	ldr	r3, [r0, #32]
    730e:	469c      	mov	ip, r3
    7310:	4461      	add	r1, ip
    7312:	4b3b      	ldr	r3, [pc, #236]	; (7400 <put_fat+0x134>)
    7314:	4798      	blx	r3
    7316:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7318:	d1f0      	bne.n	72fc <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    731a:	4643      	mov	r3, r8
    731c:	05db      	lsls	r3, r3, #23
    731e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7320:	07e2      	lsls	r2, r4, #31
    7322:	d51f      	bpl.n	7364 <put_fat+0x98>
    7324:	18fb      	adds	r3, r7, r3
    7326:	3330      	adds	r3, #48	; 0x30
    7328:	7819      	ldrb	r1, [r3, #0]
    732a:	220f      	movs	r2, #15
    732c:	400a      	ands	r2, r1
    732e:	0131      	lsls	r1, r6, #4
    7330:	20ff      	movs	r0, #255	; 0xff
    7332:	0100      	lsls	r0, r0, #4
    7334:	4001      	ands	r1, r0
    7336:	430a      	orrs	r2, r1
    7338:	701a      	strb	r2, [r3, #0]
			bc++;
    733a:	4644      	mov	r4, r8
    733c:	3401      	adds	r4, #1
			fs->wflag = 1;
    733e:	2301      	movs	r3, #1
    7340:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7342:	0a61      	lsrs	r1, r4, #9
    7344:	6a3b      	ldr	r3, [r7, #32]
    7346:	469c      	mov	ip, r3
    7348:	4461      	add	r1, ip
    734a:	0038      	movs	r0, r7
    734c:	4b2c      	ldr	r3, [pc, #176]	; (7400 <put_fat+0x134>)
    734e:	4798      	blx	r3
			if (res != FR_OK) break;
    7350:	2800      	cmp	r0, #0
    7352:	d151      	bne.n	73f8 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    7354:	05e4      	lsls	r4, r4, #23
    7356:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7358:	0936      	lsrs	r6, r6, #4
    735a:	b2f6      	uxtb	r6, r6
    735c:	193c      	adds	r4, r7, r4
    735e:	3430      	adds	r4, #48	; 0x30
    7360:	7026      	strb	r6, [r4, #0]
			break;
    7362:	e7cb      	b.n	72fc <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7364:	18fb      	adds	r3, r7, r3
    7366:	3330      	adds	r3, #48	; 0x30
    7368:	701e      	strb	r6, [r3, #0]
			bc++;
    736a:	4644      	mov	r4, r8
    736c:	3401      	adds	r4, #1
			fs->wflag = 1;
    736e:	2301      	movs	r3, #1
    7370:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7372:	0a61      	lsrs	r1, r4, #9
    7374:	6a3b      	ldr	r3, [r7, #32]
    7376:	469c      	mov	ip, r3
    7378:	4461      	add	r1, ip
    737a:	0038      	movs	r0, r7
    737c:	4b20      	ldr	r3, [pc, #128]	; (7400 <put_fat+0x134>)
    737e:	4798      	blx	r3
			if (res != FR_OK) break;
    7380:	2800      	cmp	r0, #0
    7382:	d13b      	bne.n	73fc <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    7384:	05e4      	lsls	r4, r4, #23
    7386:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7388:	193b      	adds	r3, r7, r4
    738a:	3330      	adds	r3, #48	; 0x30
    738c:	781b      	ldrb	r3, [r3, #0]
    738e:	220f      	movs	r2, #15
    7390:	4393      	bics	r3, r2
    7392:	0536      	lsls	r6, r6, #20
    7394:	0f36      	lsrs	r6, r6, #28
    7396:	431e      	orrs	r6, r3
    7398:	e7e0      	b.n	735c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    739a:	0a09      	lsrs	r1, r1, #8
    739c:	6a03      	ldr	r3, [r0, #32]
    739e:	469c      	mov	ip, r3
    73a0:	4461      	add	r1, ip
    73a2:	4b17      	ldr	r3, [pc, #92]	; (7400 <put_fat+0x134>)
    73a4:	4798      	blx	r3
    73a6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    73a8:	d1a8      	bne.n	72fc <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    73aa:	0063      	lsls	r3, r4, #1
    73ac:	24ff      	movs	r4, #255	; 0xff
    73ae:	0064      	lsls	r4, r4, #1
    73b0:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	3330      	adds	r3, #48	; 0x30
    73b6:	701e      	strb	r6, [r3, #0]
    73b8:	0a36      	lsrs	r6, r6, #8
    73ba:	705e      	strb	r6, [r3, #1]
			break;
    73bc:	e79e      	b.n	72fc <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    73be:	09c9      	lsrs	r1, r1, #7
    73c0:	6a03      	ldr	r3, [r0, #32]
    73c2:	469c      	mov	ip, r3
    73c4:	4461      	add	r1, ip
    73c6:	4b0e      	ldr	r3, [pc, #56]	; (7400 <put_fat+0x134>)
    73c8:	4798      	blx	r3
    73ca:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    73cc:	d196      	bne.n	72fc <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    73ce:	00a4      	lsls	r4, r4, #2
    73d0:	23fe      	movs	r3, #254	; 0xfe
    73d2:	005b      	lsls	r3, r3, #1
    73d4:	401c      	ands	r4, r3
    73d6:	0022      	movs	r2, r4
    73d8:	3230      	adds	r2, #48	; 0x30
    73da:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    73dc:	78d3      	ldrb	r3, [r2, #3]
    73de:	193c      	adds	r4, r7, r4
    73e0:	3430      	adds	r4, #48	; 0x30
    73e2:	091b      	lsrs	r3, r3, #4
    73e4:	071b      	lsls	r3, r3, #28
    73e6:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    73e8:	7026      	strb	r6, [r4, #0]
    73ea:	0a33      	lsrs	r3, r6, #8
    73ec:	7053      	strb	r3, [r2, #1]
    73ee:	0c33      	lsrs	r3, r6, #16
    73f0:	7093      	strb	r3, [r2, #2]
    73f2:	0e36      	lsrs	r6, r6, #24
    73f4:	70d6      	strb	r6, [r2, #3]
			break;
    73f6:	e781      	b.n	72fc <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    73f8:	0005      	movs	r5, r0
    73fa:	e77f      	b.n	72fc <put_fat+0x30>
    73fc:	0005      	movs	r5, r0
    73fe:	e77d      	b.n	72fc <put_fat+0x30>
    7400:	00007089 	.word	0x00007089

00007404 <create_chain>:
{
    7404:	b5f0      	push	{r4, r5, r6, r7, lr}
    7406:	46c6      	mov	lr, r8
    7408:	b500      	push	{lr}
    740a:	0005      	movs	r5, r0
    740c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    740e:	2900      	cmp	r1, #0
    7410:	d107      	bne.n	7422 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    7412:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7414:	2e00      	cmp	r6, #0
    7416:	d00d      	beq.n	7434 <create_chain+0x30>
    7418:	6983      	ldr	r3, [r0, #24]
    741a:	429e      	cmp	r6, r3
    741c:	d30b      	bcc.n	7436 <create_chain+0x32>
    741e:	2601      	movs	r6, #1
    7420:	e009      	b.n	7436 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7422:	4b26      	ldr	r3, [pc, #152]	; (74bc <create_chain+0xb8>)
    7424:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7426:	2801      	cmp	r0, #1
    7428:	d93d      	bls.n	74a6 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    742a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    742c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    742e:	4298      	cmp	r0, r3
    7430:	d201      	bcs.n	7436 <create_chain+0x32>
    7432:	e03d      	b.n	74b0 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7434:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    7436:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7438:	4f20      	ldr	r7, [pc, #128]	; (74bc <create_chain+0xb8>)
    743a:	e00a      	b.n	7452 <create_chain+0x4e>
    743c:	0021      	movs	r1, r4
    743e:	0028      	movs	r0, r5
    7440:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    7442:	2800      	cmp	r0, #0
    7444:	d00d      	beq.n	7462 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7446:	1c43      	adds	r3, r0, #1
    7448:	d032      	beq.n	74b0 <create_chain+0xac>
    744a:	2801      	cmp	r0, #1
    744c:	d030      	beq.n	74b0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    744e:	42b4      	cmp	r4, r6
    7450:	d02d      	beq.n	74ae <create_chain+0xaa>
		ncl++;							/* Next cluster */
    7452:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7454:	69ab      	ldr	r3, [r5, #24]
    7456:	429c      	cmp	r4, r3
    7458:	d3f0      	bcc.n	743c <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    745a:	2e01      	cmp	r6, #1
    745c:	d925      	bls.n	74aa <create_chain+0xa6>
			ncl = 2;
    745e:	2402      	movs	r4, #2
    7460:	e7ec      	b.n	743c <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7462:	4a17      	ldr	r2, [pc, #92]	; (74c0 <create_chain+0xbc>)
    7464:	0021      	movs	r1, r4
    7466:	0028      	movs	r0, r5
    7468:	4b16      	ldr	r3, [pc, #88]	; (74c4 <create_chain+0xc0>)
    746a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    746c:	2800      	cmp	r0, #0
    746e:	d113      	bne.n	7498 <create_chain+0x94>
    7470:	4643      	mov	r3, r8
    7472:	2b00      	cmp	r3, #0
    7474:	d109      	bne.n	748a <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    7476:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7478:	692b      	ldr	r3, [r5, #16]
    747a:	1c5a      	adds	r2, r3, #1
    747c:	d01b      	beq.n	74b6 <create_chain+0xb2>
			fs->free_clust--;
    747e:	3b01      	subs	r3, #1
    7480:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    7482:	2301      	movs	r3, #1
    7484:	716b      	strb	r3, [r5, #5]
    7486:	0020      	movs	r0, r4
    7488:	e012      	b.n	74b0 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    748a:	0022      	movs	r2, r4
    748c:	4641      	mov	r1, r8
    748e:	0028      	movs	r0, r5
    7490:	4b0c      	ldr	r3, [pc, #48]	; (74c4 <create_chain+0xc0>)
    7492:	4798      	blx	r3
	if (res == FR_OK) {
    7494:	2800      	cmp	r0, #0
    7496:	d0ee      	beq.n	7476 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7498:	3801      	subs	r0, #1
    749a:	4242      	negs	r2, r0
    749c:	4142      	adcs	r2, r0
    749e:	4250      	negs	r0, r2
    74a0:	2301      	movs	r3, #1
    74a2:	4318      	orrs	r0, r3
    74a4:	e004      	b.n	74b0 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    74a6:	2001      	movs	r0, #1
    74a8:	e002      	b.n	74b0 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    74aa:	2000      	movs	r0, #0
    74ac:	e000      	b.n	74b0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    74ae:	2000      	movs	r0, #0
}
    74b0:	bc04      	pop	{r2}
    74b2:	4690      	mov	r8, r2
    74b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74b6:	0020      	movs	r0, r4
    74b8:	e7fa      	b.n	74b0 <create_chain+0xac>
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	00007129 	.word	0x00007129
    74c0:	0fffffff 	.word	0x0fffffff
    74c4:	000072cd 	.word	0x000072cd

000074c8 <remove_chain>:
{
    74c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ca:	46ce      	mov	lr, r9
    74cc:	4647      	mov	r7, r8
    74ce:	b580      	push	{r7, lr}
    74d0:	0004      	movs	r4, r0
    74d2:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    74d4:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    74d6:	2901      	cmp	r1, #1
    74d8:	d902      	bls.n	74e0 <remove_chain+0x18>
    74da:	69a3      	ldr	r3, [r4, #24]
    74dc:	4299      	cmp	r1, r3
    74de:	d303      	bcc.n	74e8 <remove_chain+0x20>
}
    74e0:	bc0c      	pop	{r2, r3}
    74e2:	4690      	mov	r8, r2
    74e4:	4699      	mov	r9, r3
    74e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    74e8:	4f13      	ldr	r7, [pc, #76]	; (7538 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    74ea:	4b14      	ldr	r3, [pc, #80]	; (753c <remove_chain+0x74>)
    74ec:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    74ee:	2301      	movs	r3, #1
    74f0:	4699      	mov	r9, r3
    74f2:	e003      	b.n	74fc <remove_chain+0x34>
    74f4:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    74f6:	69a3      	ldr	r3, [r4, #24]
    74f8:	42b3      	cmp	r3, r6
    74fa:	d9f1      	bls.n	74e0 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    74fc:	0029      	movs	r1, r5
    74fe:	0020      	movs	r0, r4
    7500:	47b8      	blx	r7
    7502:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    7504:	d011      	beq.n	752a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7506:	2801      	cmp	r0, #1
    7508:	d011      	beq.n	752e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    750a:	1c43      	adds	r3, r0, #1
    750c:	d011      	beq.n	7532 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    750e:	2200      	movs	r2, #0
    7510:	0029      	movs	r1, r5
    7512:	0020      	movs	r0, r4
    7514:	47c0      	blx	r8
			if (res != FR_OK) break;
    7516:	2800      	cmp	r0, #0
    7518:	d1e2      	bne.n	74e0 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    751a:	6923      	ldr	r3, [r4, #16]
    751c:	1c5a      	adds	r2, r3, #1
    751e:	d0e9      	beq.n	74f4 <remove_chain+0x2c>
				fs->free_clust++;
    7520:	3301      	adds	r3, #1
    7522:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    7524:	464b      	mov	r3, r9
    7526:	7163      	strb	r3, [r4, #5]
    7528:	e7e4      	b.n	74f4 <remove_chain+0x2c>
    752a:	2000      	movs	r0, #0
    752c:	e7d8      	b.n	74e0 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    752e:	2002      	movs	r0, #2
    7530:	e7d6      	b.n	74e0 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7532:	2001      	movs	r0, #1
    7534:	e7d4      	b.n	74e0 <remove_chain+0x18>
    7536:	46c0      	nop			; (mov r8, r8)
    7538:	00007129 	.word	0x00007129
    753c:	000072cd 	.word	0x000072cd

00007540 <dir_next>:
{
    7540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7542:	46d6      	mov	lr, sl
    7544:	4647      	mov	r7, r8
    7546:	b580      	push	{r7, lr}
    7548:	0006      	movs	r6, r0
    754a:	000d      	movs	r5, r1
	i = dj->index + 1;
    754c:	88c4      	ldrh	r4, [r0, #6]
    754e:	3401      	adds	r4, #1
    7550:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    7552:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7554:	2c00      	cmp	r4, #0
    7556:	d103      	bne.n	7560 <dir_next+0x20>
}
    7558:	bc0c      	pop	{r2, r3}
    755a:	4690      	mov	r8, r2
    755c:	469a      	mov	sl, r3
    755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7560:	6933      	ldr	r3, [r6, #16]
    7562:	2b00      	cmp	r3, #0
    7564:	d0f8      	beq.n	7558 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7566:	270f      	movs	r7, #15
    7568:	4027      	ands	r7, r4
    756a:	d10f      	bne.n	758c <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    756c:	3301      	adds	r3, #1
    756e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    7570:	68f1      	ldr	r1, [r6, #12]
    7572:	2900      	cmp	r1, #0
    7574:	d104      	bne.n	7580 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7576:	6833      	ldr	r3, [r6, #0]
    7578:	891b      	ldrh	r3, [r3, #8]
    757a:	42a3      	cmp	r3, r4
    757c:	d9ec      	bls.n	7558 <dir_next+0x18>
    757e:	e005      	b.n	758c <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7580:	6830      	ldr	r0, [r6, #0]
    7582:	7883      	ldrb	r3, [r0, #2]
    7584:	3b01      	subs	r3, #1
    7586:	0922      	lsrs	r2, r4, #4
    7588:	421a      	tst	r2, r3
    758a:	d007      	beq.n	759c <dir_next+0x5c>
	dj->index = i;
    758c:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    758e:	6833      	ldr	r3, [r6, #0]
    7590:	3330      	adds	r3, #48	; 0x30
    7592:	017f      	lsls	r7, r7, #5
    7594:	19df      	adds	r7, r3, r7
    7596:	6177      	str	r7, [r6, #20]
	return FR_OK;
    7598:	2000      	movs	r0, #0
    759a:	e7dd      	b.n	7558 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    759c:	4b2c      	ldr	r3, [pc, #176]	; (7650 <dir_next+0x110>)
    759e:	4798      	blx	r3
    75a0:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    75a2:	2002      	movs	r0, #2
    75a4:	4643      	mov	r3, r8
    75a6:	2b01      	cmp	r3, #1
    75a8:	d9d6      	bls.n	7558 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    75aa:	3301      	adds	r3, #1
    75ac:	d04b      	beq.n	7646 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    75ae:	6833      	ldr	r3, [r6, #0]
    75b0:	699a      	ldr	r2, [r3, #24]
    75b2:	4590      	cmp	r8, r2
    75b4:	d33f      	bcc.n	7636 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    75b6:	3002      	adds	r0, #2
    75b8:	2d00      	cmp	r5, #0
    75ba:	d0cd      	beq.n	7558 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    75bc:	68f1      	ldr	r1, [r6, #12]
    75be:	0018      	movs	r0, r3
    75c0:	4b24      	ldr	r3, [pc, #144]	; (7654 <dir_next+0x114>)
    75c2:	4798      	blx	r3
    75c4:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    75c6:	2007      	movs	r0, #7
    75c8:	4643      	mov	r3, r8
    75ca:	2b00      	cmp	r3, #0
    75cc:	d0c4      	beq.n	7558 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    75ce:	3805      	subs	r0, #5
    75d0:	2b01      	cmp	r3, #1
    75d2:	d0c1      	beq.n	7558 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    75d4:	3801      	subs	r0, #1
    75d6:	3301      	adds	r3, #1
    75d8:	d0be      	beq.n	7558 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    75da:	2100      	movs	r1, #0
    75dc:	6830      	ldr	r0, [r6, #0]
    75de:	4b1e      	ldr	r3, [pc, #120]	; (7658 <dir_next+0x118>)
    75e0:	4798      	blx	r3
    75e2:	0003      	movs	r3, r0
    75e4:	2001      	movs	r0, #1
    75e6:	2b00      	cmp	r3, #0
    75e8:	d1b6      	bne.n	7558 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    75ea:	6830      	ldr	r0, [r6, #0]
    75ec:	3030      	adds	r0, #48	; 0x30
    75ee:	2280      	movs	r2, #128	; 0x80
    75f0:	0092      	lsls	r2, r2, #2
    75f2:	2100      	movs	r1, #0
    75f4:	4b19      	ldr	r3, [pc, #100]	; (765c <dir_next+0x11c>)
    75f6:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    75f8:	6835      	ldr	r5, [r6, #0]
    75fa:	4641      	mov	r1, r8
    75fc:	0028      	movs	r0, r5
    75fe:	4b18      	ldr	r3, [pc, #96]	; (7660 <dir_next+0x120>)
    7600:	4798      	blx	r3
    7602:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7604:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    7606:	2301      	movs	r3, #1
    7608:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    760a:	6833      	ldr	r3, [r6, #0]
    760c:	789a      	ldrb	r2, [r3, #2]
    760e:	42aa      	cmp	r2, r5
    7610:	d90e      	bls.n	7630 <dir_next+0xf0>
						dj->fs->wflag = 1;
    7612:	4652      	mov	r2, sl
    7614:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7616:	2100      	movs	r1, #0
    7618:	6830      	ldr	r0, [r6, #0]
    761a:	4b0f      	ldr	r3, [pc, #60]	; (7658 <dir_next+0x118>)
    761c:	4798      	blx	r3
    761e:	2800      	cmp	r0, #0
    7620:	d113      	bne.n	764a <dir_next+0x10a>
						dj->fs->winsect++;
    7622:	6832      	ldr	r2, [r6, #0]
    7624:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7626:	3301      	adds	r3, #1
    7628:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    762a:	3501      	adds	r5, #1
    762c:	b2ed      	uxtb	r5, r5
    762e:	e7ec      	b.n	760a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    7630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7632:	1b52      	subs	r2, r2, r5
    7634:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    7636:	4643      	mov	r3, r8
    7638:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    763a:	4641      	mov	r1, r8
    763c:	6830      	ldr	r0, [r6, #0]
    763e:	4b08      	ldr	r3, [pc, #32]	; (7660 <dir_next+0x120>)
    7640:	4798      	blx	r3
    7642:	6130      	str	r0, [r6, #16]
    7644:	e7a2      	b.n	758c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7646:	2001      	movs	r0, #1
    7648:	e786      	b.n	7558 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    764a:	2001      	movs	r0, #1
    764c:	e784      	b.n	7558 <dir_next+0x18>
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	00007129 	.word	0x00007129
    7654:	00007405 	.word	0x00007405
    7658:	00007089 	.word	0x00007089
    765c:	00006bbd 	.word	0x00006bbd
    7660:	00006bcf 	.word	0x00006bcf

00007664 <dir_find>:
{
    7664:	b5f0      	push	{r4, r5, r6, r7, lr}
    7666:	46de      	mov	lr, fp
    7668:	4657      	mov	r7, sl
    766a:	464e      	mov	r6, r9
    766c:	4645      	mov	r5, r8
    766e:	b5e0      	push	{r5, r6, r7, lr}
    7670:	b083      	sub	sp, #12
    7672:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    7674:	2100      	movs	r1, #0
    7676:	4b5a      	ldr	r3, [pc, #360]	; (77e0 <dir_find+0x17c>)
    7678:	4798      	blx	r3
    767a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    767c:	d000      	beq.n	7680 <dir_find+0x1c>
    767e:	e09e      	b.n	77be <dir_find+0x15a>
    7680:	23ff      	movs	r3, #255	; 0xff
    7682:	4699      	mov	r9, r3
    7684:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    7686:	4b57      	ldr	r3, [pc, #348]	; (77e4 <dir_find+0x180>)
    7688:	469b      	mov	fp, r3
    768a:	e01b      	b.n	76c4 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    768c:	2b0f      	cmp	r3, #15
    768e:	d030      	beq.n	76f2 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    7690:	4653      	mov	r3, sl
    7692:	2b00      	cmp	r3, #0
    7694:	d105      	bne.n	76a2 <dir_find+0x3e>
    7696:	0020      	movs	r0, r4
    7698:	4b53      	ldr	r3, [pc, #332]	; (77e8 <dir_find+0x184>)
    769a:	4798      	blx	r3
    769c:	4581      	cmp	r9, r0
    769e:	d100      	bne.n	76a2 <dir_find+0x3e>
    76a0:	e08d      	b.n	77be <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76a2:	2301      	movs	r3, #1
    76a4:	425b      	negs	r3, r3
    76a6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    76a8:	69a8      	ldr	r0, [r5, #24]
    76aa:	7ac3      	ldrb	r3, [r0, #11]
    76ac:	07db      	lsls	r3, r3, #31
    76ae:	d400      	bmi.n	76b2 <dir_find+0x4e>
    76b0:	e07d      	b.n	77ae <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76b2:	23ff      	movs	r3, #255	; 0xff
    76b4:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    76b6:	2100      	movs	r1, #0
    76b8:	0028      	movs	r0, r5
    76ba:	4b4c      	ldr	r3, [pc, #304]	; (77ec <dir_find+0x188>)
    76bc:	4798      	blx	r3
    76be:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    76c0:	d000      	beq.n	76c4 <dir_find+0x60>
    76c2:	e07c      	b.n	77be <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    76c4:	6929      	ldr	r1, [r5, #16]
    76c6:	6828      	ldr	r0, [r5, #0]
    76c8:	47d8      	blx	fp
    76ca:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    76cc:	d177      	bne.n	77be <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    76ce:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    76d0:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    76d2:	2e00      	cmp	r6, #0
    76d4:	d100      	bne.n	76d8 <dir_find+0x74>
    76d6:	e080      	b.n	77da <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    76d8:	7ae2      	ldrb	r2, [r4, #11]
    76da:	233f      	movs	r3, #63	; 0x3f
    76dc:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    76de:	2ee5      	cmp	r6, #229	; 0xe5
    76e0:	d100      	bne.n	76e4 <dir_find+0x80>
    76e2:	e077      	b.n	77d4 <dir_find+0x170>
    76e4:	0712      	lsls	r2, r2, #28
    76e6:	d5d1      	bpl.n	768c <dir_find+0x28>
    76e8:	2b0f      	cmp	r3, #15
    76ea:	d002      	beq.n	76f2 <dir_find+0x8e>
			ord = 0xFF;
    76ec:	23ff      	movs	r3, #255	; 0xff
    76ee:	469a      	mov	sl, r3
    76f0:	e7e1      	b.n	76b6 <dir_find+0x52>
				if (dj->lfn) {
    76f2:	69ef      	ldr	r7, [r5, #28]
    76f4:	2f00      	cmp	r7, #0
    76f6:	d0de      	beq.n	76b6 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    76f8:	0673      	lsls	r3, r6, #25
    76fa:	d518      	bpl.n	772e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    76fc:	7b63      	ldrb	r3, [r4, #13]
    76fe:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    7700:	2340      	movs	r3, #64	; 0x40
    7702:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    7704:	88eb      	ldrh	r3, [r5, #6]
    7706:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7708:	7b63      	ldrb	r3, [r4, #13]
    770a:	9300      	str	r3, [sp, #0]
    770c:	22ff      	movs	r2, #255	; 0xff
    770e:	4692      	mov	sl, r2
    7710:	454b      	cmp	r3, r9
    7712:	d1d0      	bne.n	76b6 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7714:	7823      	ldrb	r3, [r4, #0]
    7716:	3abf      	subs	r2, #191	; 0xbf
    7718:	4393      	bics	r3, r2
    771a:	3b01      	subs	r3, #1
    771c:	005a      	lsls	r2, r3, #1
    771e:	18d2      	adds	r2, r2, r3
    7720:	0092      	lsls	r2, r2, #2
    7722:	4692      	mov	sl, r2
    7724:	449a      	add	sl, r3
	s = 0; wc = 1;
    7726:	2201      	movs	r2, #1
    7728:	2300      	movs	r3, #0
    772a:	4699      	mov	r9, r3
    772c:	e01d      	b.n	776a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    772e:	45b2      	cmp	sl, r6
    7730:	d0ea      	beq.n	7708 <dir_find+0xa4>
    7732:	23ff      	movs	r3, #255	; 0xff
    7734:	469a      	mov	sl, r3
    7736:	e7be      	b.n	76b6 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7738:	4b2d      	ldr	r3, [pc, #180]	; (77f0 <dir_find+0x18c>)
    773a:	4798      	blx	r3
    773c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    773e:	4653      	mov	r3, sl
    7740:	2bfe      	cmp	r3, #254	; 0xfe
    7742:	d81f      	bhi.n	7784 <dir_find+0x120>
    7744:	2301      	movs	r3, #1
    7746:	4453      	add	r3, sl
    7748:	4698      	mov	r8, r3
    774a:	4653      	mov	r3, sl
    774c:	005b      	lsls	r3, r3, #1
    774e:	5bd8      	ldrh	r0, [r3, r7]
    7750:	4b27      	ldr	r3, [pc, #156]	; (77f0 <dir_find+0x18c>)
    7752:	4798      	blx	r3
    7754:	0002      	movs	r2, r0
    7756:	9b01      	ldr	r3, [sp, #4]
    7758:	4283      	cmp	r3, r0
    775a:	d113      	bne.n	7784 <dir_find+0x120>
    775c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    775e:	2301      	movs	r3, #1
    7760:	469c      	mov	ip, r3
    7762:	44e1      	add	r9, ip
    7764:	464b      	mov	r3, r9
    7766:	2b0d      	cmp	r3, #13
    7768:	d011      	beq.n	778e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    776a:	4b22      	ldr	r3, [pc, #136]	; (77f4 <dir_find+0x190>)
    776c:	4649      	mov	r1, r9
    776e:	5cc9      	ldrb	r1, [r1, r3]
    7770:	1863      	adds	r3, r4, r1
    7772:	785b      	ldrb	r3, [r3, #1]
    7774:	021b      	lsls	r3, r3, #8
    7776:	5c60      	ldrb	r0, [r4, r1]
    7778:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    777a:	2a00      	cmp	r2, #0
    777c:	d1dc      	bne.n	7738 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    777e:	4b1e      	ldr	r3, [pc, #120]	; (77f8 <dir_find+0x194>)
    7780:	4298      	cmp	r0, r3
    7782:	d0ec      	beq.n	775e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7784:	9b00      	ldr	r3, [sp, #0]
    7786:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7788:	23ff      	movs	r3, #255	; 0xff
    778a:	469a      	mov	sl, r3
    778c:	e793      	b.n	76b6 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    778e:	7823      	ldrb	r3, [r4, #0]
    7790:	065b      	lsls	r3, r3, #25
    7792:	d506      	bpl.n	77a2 <dir_find+0x13e>
    7794:	2a00      	cmp	r2, #0
    7796:	d004      	beq.n	77a2 <dir_find+0x13e>
    7798:	4653      	mov	r3, sl
    779a:	005b      	lsls	r3, r3, #1
    779c:	5bdb      	ldrh	r3, [r3, r7]
    779e:	2b00      	cmp	r3, #0
    77a0:	d1f0      	bne.n	7784 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    77a2:	3e01      	subs	r6, #1
    77a4:	b2f3      	uxtb	r3, r6
    77a6:	469a      	mov	sl, r3
    77a8:	9b00      	ldr	r3, [sp, #0]
    77aa:	4699      	mov	r9, r3
    77ac:	e783      	b.n	76b6 <dir_find+0x52>
    77ae:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    77b0:	5ce1      	ldrb	r1, [r4, r3]
    77b2:	5cc2      	ldrb	r2, [r0, r3]
    77b4:	4291      	cmp	r1, r2
    77b6:	d10a      	bne.n	77ce <dir_find+0x16a>
    77b8:	3301      	adds	r3, #1
    77ba:	2b0b      	cmp	r3, #11
    77bc:	d1f8      	bne.n	77b0 <dir_find+0x14c>
}
    77be:	0038      	movs	r0, r7
    77c0:	b003      	add	sp, #12
    77c2:	bc3c      	pop	{r2, r3, r4, r5}
    77c4:	4690      	mov	r8, r2
    77c6:	4699      	mov	r9, r3
    77c8:	46a2      	mov	sl, r4
    77ca:	46ab      	mov	fp, r5
    77cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    77ce:	23ff      	movs	r3, #255	; 0xff
    77d0:	469a      	mov	sl, r3
    77d2:	e770      	b.n	76b6 <dir_find+0x52>
			ord = 0xFF;
    77d4:	23ff      	movs	r3, #255	; 0xff
    77d6:	469a      	mov	sl, r3
    77d8:	e76d      	b.n	76b6 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    77da:	2704      	movs	r7, #4
    77dc:	e7ef      	b.n	77be <dir_find+0x15a>
    77de:	46c0      	nop			; (mov r8, r8)
    77e0:	00007225 	.word	0x00007225
    77e4:	00007089 	.word	0x00007089
    77e8:	00006be7 	.word	0x00006be7
    77ec:	00007541 	.word	0x00007541
    77f0:	000083c5 	.word	0x000083c5
    77f4:	0000c86c 	.word	0x0000c86c
    77f8:	0000ffff 	.word	0x0000ffff

000077fc <dir_register>:
{
    77fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    77fe:	46de      	mov	lr, fp
    7800:	4657      	mov	r7, sl
    7802:	464e      	mov	r6, r9
    7804:	4645      	mov	r5, r8
    7806:	b5e0      	push	{r5, r6, r7, lr}
    7808:	b089      	sub	sp, #36	; 0x24
    780a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    780c:	6987      	ldr	r7, [r0, #24]
    780e:	69c3      	ldr	r3, [r0, #28]
    7810:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    7812:	ad05      	add	r5, sp, #20
    7814:	220c      	movs	r2, #12
    7816:	0039      	movs	r1, r7
    7818:	0028      	movs	r0, r5
    781a:	4ba7      	ldr	r3, [pc, #668]	; (7ab8 <dir_register+0x2bc>)
    781c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    781e:	7aeb      	ldrb	r3, [r5, #11]
    7820:	07db      	lsls	r3, r3, #31
    7822:	d400      	bmi.n	7826 <dir_register+0x2a>
    7824:	e070      	b.n	7908 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    7826:	2300      	movs	r3, #0
    7828:	72fb      	strb	r3, [r7, #11]
    782a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    782c:	220b      	movs	r2, #11
    782e:	a905      	add	r1, sp, #20
    7830:	0038      	movs	r0, r7
    7832:	4ba1      	ldr	r3, [pc, #644]	; (7ab8 <dir_register+0x2bc>)
    7834:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    7836:	2301      	movs	r3, #1
		ns[i--] = c;
    7838:	ad03      	add	r5, sp, #12
    783a:	001e      	movs	r6, r3
    783c:	46a0      	mov	r8, r4
    783e:	e049      	b.n	78d4 <dir_register+0xd8>
    7840:	3801      	subs	r0, #1
    7842:	1829      	adds	r1, r5, r0
    7844:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    7846:	091b      	lsrs	r3, r3, #4
    7848:	b29b      	uxth	r3, r3
	} while (seq);
    784a:	2b00      	cmp	r3, #0
    784c:	d007      	beq.n	785e <dir_register+0x62>
		c = (seq % 16) + '0';
    784e:	0021      	movs	r1, r4
    7850:	4019      	ands	r1, r3
    7852:	000a      	movs	r2, r1
    7854:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    7856:	2a39      	cmp	r2, #57	; 0x39
    7858:	d9f2      	bls.n	7840 <dir_register+0x44>
    785a:	3207      	adds	r2, #7
    785c:	e7f0      	b.n	7840 <dir_register+0x44>
	ns[i] = '~';
    785e:	337e      	adds	r3, #126	; 0x7e
    7860:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7862:	2800      	cmp	r0, #0
    7864:	d00a      	beq.n	787c <dir_register+0x80>
    7866:	783b      	ldrb	r3, [r7, #0]
    7868:	2b20      	cmp	r3, #32
    786a:	d009      	beq.n	7880 <dir_register+0x84>
    786c:	2300      	movs	r3, #0
    786e:	3301      	adds	r3, #1
    7870:	4298      	cmp	r0, r3
    7872:	d007      	beq.n	7884 <dir_register+0x88>
    7874:	5cfa      	ldrb	r2, [r7, r3]
    7876:	2a20      	cmp	r2, #32
    7878:	d1f9      	bne.n	786e <dir_register+0x72>
    787a:	e009      	b.n	7890 <dir_register+0x94>
    787c:	0003      	movs	r3, r0
    787e:	e007      	b.n	7890 <dir_register+0x94>
    7880:	2300      	movs	r3, #0
    7882:	e005      	b.n	7890 <dir_register+0x94>
    7884:	0003      	movs	r3, r0
    7886:	e003      	b.n	7890 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7888:	54fa      	strb	r2, [r7, r3]
    788a:	3301      	adds	r3, #1
	} while (j < 8);
    788c:	2b07      	cmp	r3, #7
    788e:	d805      	bhi.n	789c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7890:	2220      	movs	r2, #32
    7892:	2807      	cmp	r0, #7
    7894:	d8f8      	bhi.n	7888 <dir_register+0x8c>
    7896:	5c2a      	ldrb	r2, [r5, r0]
    7898:	3001      	adds	r0, #1
    789a:	e7f5      	b.n	7888 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    789c:	4640      	mov	r0, r8
    789e:	4b87      	ldr	r3, [pc, #540]	; (7abc <dir_register+0x2c0>)
    78a0:	4798      	blx	r3
			if (res != FR_OK) break;
    78a2:	2800      	cmp	r0, #0
    78a4:	d11c      	bne.n	78e0 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    78a6:	3601      	adds	r6, #1
    78a8:	b2b6      	uxth	r6, r6
    78aa:	2e64      	cmp	r6, #100	; 0x64
    78ac:	d015      	beq.n	78da <dir_register+0xde>
	mem_cpy(dst, src, 11);
    78ae:	220b      	movs	r2, #11
    78b0:	a905      	add	r1, sp, #20
    78b2:	0038      	movs	r0, r7
    78b4:	4b80      	ldr	r3, [pc, #512]	; (7ab8 <dir_register+0x2bc>)
    78b6:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    78b8:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    78ba:	2e05      	cmp	r6, #5
    78bc:	d90a      	bls.n	78d4 <dir_register+0xd8>
    78be:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    78c0:	085a      	lsrs	r2, r3, #1
    78c2:	03db      	lsls	r3, r3, #15
    78c4:	4313      	orrs	r3, r2
    78c6:	880a      	ldrh	r2, [r1, #0]
    78c8:	189b      	adds	r3, r3, r2
    78ca:	b29b      	uxth	r3, r3
    78cc:	3102      	adds	r1, #2
    78ce:	880a      	ldrh	r2, [r1, #0]
    78d0:	2a00      	cmp	r2, #0
    78d2:	d1f5      	bne.n	78c0 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    78d4:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    78d6:	240f      	movs	r4, #15
    78d8:	e7b9      	b.n	784e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    78da:	2307      	movs	r3, #7
    78dc:	4698      	mov	r8, r3
    78de:	e006      	b.n	78ee <dir_register+0xf2>
    78e0:	4644      	mov	r4, r8
    78e2:	4680      	mov	r8, r0
    78e4:	2e64      	cmp	r6, #100	; 0x64
    78e6:	d100      	bne.n	78ea <dir_register+0xee>
    78e8:	e0a5      	b.n	7a36 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    78ea:	2804      	cmp	r0, #4
    78ec:	d007      	beq.n	78fe <dir_register+0x102>
}
    78ee:	4640      	mov	r0, r8
    78f0:	b009      	add	sp, #36	; 0x24
    78f2:	bc3c      	pop	{r2, r3, r4, r5}
    78f4:	4690      	mov	r8, r2
    78f6:	4699      	mov	r9, r3
    78f8:	46a2      	mov	sl, r4
    78fa:	46ab      	mov	fp, r5
    78fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    78fe:	ab05      	add	r3, sp, #20
    7900:	7adb      	ldrb	r3, [r3, #11]
    7902:	72fb      	strb	r3, [r7, #11]
    7904:	4653      	mov	r3, sl
    7906:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7908:	ab05      	add	r3, sp, #20
    790a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    790c:	2201      	movs	r2, #1
    790e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7910:	079b      	lsls	r3, r3, #30
    7912:	d511      	bpl.n	7938 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    7914:	4653      	mov	r3, sl
    7916:	881b      	ldrh	r3, [r3, #0]
    7918:	2b00      	cmp	r3, #0
    791a:	d01b      	beq.n	7954 <dir_register+0x158>
    791c:	2000      	movs	r0, #0
    791e:	4652      	mov	r2, sl
    7920:	3001      	adds	r0, #1
    7922:	b280      	uxth	r0, r0
    7924:	0043      	lsls	r3, r0, #1
    7926:	5a9b      	ldrh	r3, [r3, r2]
    7928:	2b00      	cmp	r3, #0
    792a:	d1f9      	bne.n	7920 <dir_register+0x124>
		ne = (ne + 25) / 13;
    792c:	3019      	adds	r0, #25
    792e:	210d      	movs	r1, #13
    7930:	4b63      	ldr	r3, [pc, #396]	; (7ac0 <dir_register+0x2c4>)
    7932:	4798      	blx	r3
    7934:	b283      	uxth	r3, r0
    7936:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    7938:	2100      	movs	r1, #0
    793a:	0020      	movs	r0, r4
    793c:	4b61      	ldr	r3, [pc, #388]	; (7ac4 <dir_register+0x2c8>)
    793e:	4798      	blx	r3
    7940:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    7942:	2800      	cmp	r0, #0
    7944:	d1d3      	bne.n	78ee <dir_register+0xf2>
    7946:	4682      	mov	sl, r0
    7948:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    794a:	4f5f      	ldr	r7, [pc, #380]	; (7ac8 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    794c:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    794e:	4b5f      	ldr	r3, [pc, #380]	; (7acc <dir_register+0x2d0>)
    7950:	4699      	mov	r9, r3
    7952:	e00b      	b.n	796c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    7954:	2000      	movs	r0, #0
    7956:	e7e9      	b.n	792c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    7958:	1c6b      	adds	r3, r5, #1
    795a:	b29b      	uxth	r3, r3
    795c:	459b      	cmp	fp, r3
    795e:	d06d      	beq.n	7a3c <dir_register+0x240>
    7960:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    7962:	2101      	movs	r1, #1
    7964:	0020      	movs	r0, r4
    7966:	47c8      	blx	r9
	} while (res == FR_OK);
    7968:	2800      	cmp	r0, #0
    796a:	d112      	bne.n	7992 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    796c:	6921      	ldr	r1, [r4, #16]
    796e:	6820      	ldr	r0, [r4, #0]
    7970:	47b8      	blx	r7
		if (res != FR_OK) break;
    7972:	2800      	cmp	r0, #0
    7974:	d000      	beq.n	7978 <dir_register+0x17c>
    7976:	e098      	b.n	7aaa <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    7978:	6963      	ldr	r3, [r4, #20]
    797a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    797c:	2be5      	cmp	r3, #229	; 0xe5
    797e:	d001      	beq.n	7984 <dir_register+0x188>
    7980:	2b00      	cmp	r3, #0
    7982:	d104      	bne.n	798e <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    7984:	2d00      	cmp	r5, #0
    7986:	d1e7      	bne.n	7958 <dir_register+0x15c>
    7988:	88e3      	ldrh	r3, [r4, #6]
    798a:	469a      	mov	sl, r3
    798c:	e7e4      	b.n	7958 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    798e:	0035      	movs	r5, r6
    7990:	e7e7      	b.n	7962 <dir_register+0x166>
    7992:	4680      	mov	r8, r0
    7994:	e7ab      	b.n	78ee <dir_register+0xf2>
		res = dir_sdi(dj, is);
    7996:	4651      	mov	r1, sl
    7998:	0020      	movs	r0, r4
    799a:	4b4a      	ldr	r3, [pc, #296]	; (7ac4 <dir_register+0x2c8>)
    799c:	4798      	blx	r3
    799e:	4680      	mov	r8, r0
		if (res == FR_OK) {
    79a0:	2800      	cmp	r0, #0
    79a2:	d1a4      	bne.n	78ee <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    79a4:	69a0      	ldr	r0, [r4, #24]
    79a6:	4b4a      	ldr	r3, [pc, #296]	; (7ad0 <dir_register+0x2d4>)
    79a8:	4798      	blx	r3
    79aa:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    79ac:	46a8      	mov	r8, r5
    79ae:	e01f      	b.n	79f0 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    79b0:	0022      	movs	r2, r4
    79b2:	e067      	b.n	7a84 <dir_register+0x288>
    79b4:	465e      	mov	r6, fp
    79b6:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    79b8:	4946      	ldr	r1, [pc, #280]	; (7ad4 <dir_register+0x2d8>)
    79ba:	428b      	cmp	r3, r1
    79bc:	d003      	beq.n	79c6 <dir_register+0x1ca>
    79be:	0052      	lsls	r2, r2, #1
    79c0:	5b93      	ldrh	r3, [r2, r6]
    79c2:	2b00      	cmp	r3, #0
    79c4:	d103      	bne.n	79ce <dir_register+0x1d2>
    79c6:	2340      	movs	r3, #64	; 0x40
    79c8:	464a      	mov	r2, r9
    79ca:	431a      	orrs	r2, r3
    79cc:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    79ce:	464b      	mov	r3, r9
    79d0:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    79d2:	2301      	movs	r3, #1
    79d4:	6822      	ldr	r2, [r4, #0]
    79d6:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    79d8:	2100      	movs	r1, #0
    79da:	0020      	movs	r0, r4
    79dc:	4b3b      	ldr	r3, [pc, #236]	; (7acc <dir_register+0x2d0>)
    79de:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    79e0:	2800      	cmp	r0, #0
    79e2:	d166      	bne.n	7ab2 <dir_register+0x2b6>
    79e4:	4645      	mov	r5, r8
    79e6:	3d01      	subs	r5, #1
    79e8:	b2ab      	uxth	r3, r5
    79ea:	4698      	mov	r8, r3
    79ec:	2b00      	cmp	r3, #0
    79ee:	d027      	beq.n	7a40 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    79f0:	6921      	ldr	r1, [r4, #16]
    79f2:	6820      	ldr	r0, [r4, #0]
    79f4:	4b34      	ldr	r3, [pc, #208]	; (7ac8 <dir_register+0x2cc>)
    79f6:	4798      	blx	r3
				if (res != FR_OK) break;
    79f8:	2800      	cmp	r0, #0
    79fa:	d158      	bne.n	7aae <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    79fc:	69e6      	ldr	r6, [r4, #28]
    79fe:	6960      	ldr	r0, [r4, #20]
    7a00:	4643      	mov	r3, r8
    7a02:	466a      	mov	r2, sp
    7a04:	70d3      	strb	r3, [r2, #3]
    7a06:	78d3      	ldrb	r3, [r2, #3]
    7a08:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7a0a:	7913      	ldrb	r3, [r2, #4]
    7a0c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7a0e:	230f      	movs	r3, #15
    7a10:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    7a12:	2300      	movs	r3, #0
    7a14:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7a16:	7683      	strb	r3, [r0, #26]
    7a18:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7a1a:	464b      	mov	r3, r9
    7a1c:	3b01      	subs	r3, #1
    7a1e:	005a      	lsls	r2, r3, #1
    7a20:	18d2      	adds	r2, r2, r3
    7a22:	0092      	lsls	r2, r2, #2
    7a24:	18d2      	adds	r2, r2, r3
    7a26:	492c      	ldr	r1, [pc, #176]	; (7ad8 <dir_register+0x2dc>)
    7a28:	000d      	movs	r5, r1
    7a2a:	350d      	adds	r5, #13
	s = wc = 0;
    7a2c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7a2e:	4f29      	ldr	r7, [pc, #164]	; (7ad4 <dir_register+0x2d8>)
    7a30:	46b3      	mov	fp, r6
    7a32:	46a4      	mov	ip, r4
    7a34:	e029      	b.n	7a8a <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7a36:	2307      	movs	r3, #7
    7a38:	4698      	mov	r8, r3
    7a3a:	e758      	b.n	78ee <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    7a3c:	2b01      	cmp	r3, #1
    7a3e:	d8aa      	bhi.n	7996 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    7a40:	6921      	ldr	r1, [r4, #16]
    7a42:	6820      	ldr	r0, [r4, #0]
    7a44:	4b20      	ldr	r3, [pc, #128]	; (7ac8 <dir_register+0x2cc>)
    7a46:	4798      	blx	r3
    7a48:	4680      	mov	r8, r0
		if (res == FR_OK) {
    7a4a:	2800      	cmp	r0, #0
    7a4c:	d000      	beq.n	7a50 <dir_register+0x254>
    7a4e:	e74e      	b.n	78ee <dir_register+0xf2>
			dir = dj->dir;
    7a50:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    7a52:	2220      	movs	r2, #32
    7a54:	2100      	movs	r1, #0
    7a56:	0028      	movs	r0, r5
    7a58:	4b20      	ldr	r3, [pc, #128]	; (7adc <dir_register+0x2e0>)
    7a5a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    7a5c:	220b      	movs	r2, #11
    7a5e:	69a1      	ldr	r1, [r4, #24]
    7a60:	0028      	movs	r0, r5
    7a62:	4b15      	ldr	r3, [pc, #84]	; (7ab8 <dir_register+0x2bc>)
    7a64:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    7a66:	69a3      	ldr	r3, [r4, #24]
    7a68:	7ada      	ldrb	r2, [r3, #11]
    7a6a:	2318      	movs	r3, #24
    7a6c:	4013      	ands	r3, r2
    7a6e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    7a70:	6823      	ldr	r3, [r4, #0]
    7a72:	2201      	movs	r2, #1
    7a74:	711a      	strb	r2, [r3, #4]
    7a76:	e73a      	b.n	78ee <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7a78:	780c      	ldrb	r4, [r1, #0]
    7a7a:	26ff      	movs	r6, #255	; 0xff
    7a7c:	5506      	strb	r6, [r0, r4]
    7a7e:	1904      	adds	r4, r0, r4
    7a80:	26ff      	movs	r6, #255	; 0xff
    7a82:	7066      	strb	r6, [r4, #1]
    7a84:	3101      	adds	r1, #1
	} while (++s < 13);
    7a86:	42a9      	cmp	r1, r5
    7a88:	d094      	beq.n	79b4 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7a8a:	42bb      	cmp	r3, r7
    7a8c:	d0f4      	beq.n	7a78 <dir_register+0x27c>
    7a8e:	1c54      	adds	r4, r2, #1
    7a90:	0052      	lsls	r2, r2, #1
    7a92:	465b      	mov	r3, fp
    7a94:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7a96:	780a      	ldrb	r2, [r1, #0]
    7a98:	5483      	strb	r3, [r0, r2]
    7a9a:	1882      	adds	r2, r0, r2
    7a9c:	0a1e      	lsrs	r6, r3, #8
    7a9e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d185      	bne.n	79b0 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7aa4:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7aa6:	003b      	movs	r3, r7
    7aa8:	e7ec      	b.n	7a84 <dir_register+0x288>
    7aaa:	4680      	mov	r8, r0
    7aac:	e71f      	b.n	78ee <dir_register+0xf2>
    7aae:	4680      	mov	r8, r0
    7ab0:	e71d      	b.n	78ee <dir_register+0xf2>
    7ab2:	4680      	mov	r8, r0
    7ab4:	e71b      	b.n	78ee <dir_register+0xf2>
    7ab6:	46c0      	nop			; (mov r8, r8)
    7ab8:	00006ba9 	.word	0x00006ba9
    7abc:	00007665 	.word	0x00007665
    7ac0:	00009efd 	.word	0x00009efd
    7ac4:	00007225 	.word	0x00007225
    7ac8:	00007089 	.word	0x00007089
    7acc:	00007541 	.word	0x00007541
    7ad0:	00006be7 	.word	0x00006be7
    7ad4:	0000ffff 	.word	0x0000ffff
    7ad8:	0000c86c 	.word	0x0000c86c
    7adc:	00006bbd 	.word	0x00006bbd

00007ae0 <sync>:
{
    7ae0:	b570      	push	{r4, r5, r6, lr}
    7ae2:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    7ae4:	2100      	movs	r1, #0
    7ae6:	4b2c      	ldr	r3, [pc, #176]	; (7b98 <sync+0xb8>)
    7ae8:	4798      	blx	r3
	if (res == FR_OK) {
    7aea:	2800      	cmp	r0, #0
    7aec:	d10a      	bne.n	7b04 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7aee:	7823      	ldrb	r3, [r4, #0]
    7af0:	2b03      	cmp	r3, #3
    7af2:	d008      	beq.n	7b06 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7af4:	7860      	ldrb	r0, [r4, #1]
    7af6:	2200      	movs	r2, #0
    7af8:	2100      	movs	r1, #0
    7afa:	4b28      	ldr	r3, [pc, #160]	; (7b9c <sync+0xbc>)
    7afc:	4798      	blx	r3
    7afe:	1e43      	subs	r3, r0, #1
    7b00:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    7b02:	b2c0      	uxtb	r0, r0
}
    7b04:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7b06:	7963      	ldrb	r3, [r4, #5]
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d0f3      	beq.n	7af4 <sync+0x14>
			fs->winsect = 0;
    7b0c:	2600      	movs	r6, #0
    7b0e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    7b10:	0025      	movs	r5, r4
    7b12:	3530      	adds	r5, #48	; 0x30
    7b14:	2280      	movs	r2, #128	; 0x80
    7b16:	0092      	lsls	r2, r2, #2
    7b18:	2100      	movs	r1, #0
    7b1a:	0028      	movs	r0, r5
    7b1c:	4b20      	ldr	r3, [pc, #128]	; (7ba0 <sync+0xc0>)
    7b1e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7b20:	2255      	movs	r2, #85	; 0x55
    7b22:	4b20      	ldr	r3, [pc, #128]	; (7ba4 <sync+0xc4>)
    7b24:	54e2      	strb	r2, [r4, r3]
    7b26:	3255      	adds	r2, #85	; 0x55
    7b28:	4b1f      	ldr	r3, [pc, #124]	; (7ba8 <sync+0xc8>)
    7b2a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7b2c:	3bde      	subs	r3, #222	; 0xde
    7b2e:	3bff      	subs	r3, #255	; 0xff
    7b30:	3a7a      	subs	r2, #122	; 0x7a
    7b32:	54a3      	strb	r3, [r4, r2]
    7b34:	3201      	adds	r2, #1
    7b36:	54a3      	strb	r3, [r4, r2]
    7b38:	330f      	adds	r3, #15
    7b3a:	3201      	adds	r2, #1
    7b3c:	54a3      	strb	r3, [r4, r2]
    7b3e:	320f      	adds	r2, #15
    7b40:	2133      	movs	r1, #51	; 0x33
    7b42:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7b44:	313f      	adds	r1, #63	; 0x3f
    7b46:	2085      	movs	r0, #133	; 0x85
    7b48:	0080      	lsls	r0, r0, #2
    7b4a:	5421      	strb	r1, [r4, r0]
    7b4c:	4817      	ldr	r0, [pc, #92]	; (7bac <sync+0xcc>)
    7b4e:	5421      	strb	r1, [r4, r0]
    7b50:	4917      	ldr	r1, [pc, #92]	; (7bb0 <sync+0xd0>)
    7b52:	5462      	strb	r2, [r4, r1]
    7b54:	4a17      	ldr	r2, [pc, #92]	; (7bb4 <sync+0xd4>)
    7b56:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7b58:	6923      	ldr	r3, [r4, #16]
    7b5a:	3201      	adds	r2, #1
    7b5c:	54a3      	strb	r3, [r4, r2]
    7b5e:	0a19      	lsrs	r1, r3, #8
    7b60:	4a15      	ldr	r2, [pc, #84]	; (7bb8 <sync+0xd8>)
    7b62:	54a1      	strb	r1, [r4, r2]
    7b64:	0c19      	lsrs	r1, r3, #16
    7b66:	4a15      	ldr	r2, [pc, #84]	; (7bbc <sync+0xdc>)
    7b68:	54a1      	strb	r1, [r4, r2]
    7b6a:	0e1b      	lsrs	r3, r3, #24
    7b6c:	4a14      	ldr	r2, [pc, #80]	; (7bc0 <sync+0xe0>)
    7b6e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7b70:	68e3      	ldr	r3, [r4, #12]
    7b72:	3201      	adds	r2, #1
    7b74:	54a3      	strb	r3, [r4, r2]
    7b76:	0a19      	lsrs	r1, r3, #8
    7b78:	4a12      	ldr	r2, [pc, #72]	; (7bc4 <sync+0xe4>)
    7b7a:	54a1      	strb	r1, [r4, r2]
    7b7c:	0c19      	lsrs	r1, r3, #16
    7b7e:	4a12      	ldr	r2, [pc, #72]	; (7bc8 <sync+0xe8>)
    7b80:	54a1      	strb	r1, [r4, r2]
    7b82:	0e1b      	lsrs	r3, r3, #24
    7b84:	4a11      	ldr	r2, [pc, #68]	; (7bcc <sync+0xec>)
    7b86:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7b88:	7860      	ldrb	r0, [r4, #1]
    7b8a:	2301      	movs	r3, #1
    7b8c:	6962      	ldr	r2, [r4, #20]
    7b8e:	0029      	movs	r1, r5
    7b90:	4d0f      	ldr	r5, [pc, #60]	; (7bd0 <sync+0xf0>)
    7b92:	47a8      	blx	r5
			fs->fsi_flag = 0;
    7b94:	7166      	strb	r6, [r4, #5]
    7b96:	e7ad      	b.n	7af4 <sync+0x14>
    7b98:	00007089 	.word	0x00007089
    7b9c:	00006aed 	.word	0x00006aed
    7ba0:	00006bbd 	.word	0x00006bbd
    7ba4:	0000022e 	.word	0x0000022e
    7ba8:	0000022f 	.word	0x0000022f
    7bac:	00000215 	.word	0x00000215
    7bb0:	00000216 	.word	0x00000216
    7bb4:	00000217 	.word	0x00000217
    7bb8:	00000219 	.word	0x00000219
    7bbc:	0000021a 	.word	0x0000021a
    7bc0:	0000021b 	.word	0x0000021b
    7bc4:	0000021d 	.word	0x0000021d
    7bc8:	0000021e 	.word	0x0000021e
    7bcc:	0000021f 	.word	0x0000021f
    7bd0:	00006a69 	.word	0x00006a69

00007bd4 <follow_path>:
{
    7bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bd6:	46de      	mov	lr, fp
    7bd8:	4657      	mov	r7, sl
    7bda:	464e      	mov	r6, r9
    7bdc:	4645      	mov	r5, r8
    7bde:	b5e0      	push	{r5, r6, r7, lr}
    7be0:	b083      	sub	sp, #12
    7be2:	4682      	mov	sl, r0
    7be4:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    7be6:	780b      	ldrb	r3, [r1, #0]
    7be8:	2b2f      	cmp	r3, #47	; 0x2f
    7bea:	d00f      	beq.n	7c0c <follow_path+0x38>
    7bec:	2b5c      	cmp	r3, #92	; 0x5c
    7bee:	d00d      	beq.n	7c0c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    7bf0:	2300      	movs	r3, #0
    7bf2:	4652      	mov	r2, sl
    7bf4:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7bf6:	782b      	ldrb	r3, [r5, #0]
    7bf8:	4657      	mov	r7, sl
    7bfa:	2b1f      	cmp	r3, #31
    7bfc:	d809      	bhi.n	7c12 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    7bfe:	2100      	movs	r1, #0
    7c00:	4650      	mov	r0, sl
    7c02:	4bb2      	ldr	r3, [pc, #712]	; (7ecc <follow_path+0x2f8>)
    7c04:	4798      	blx	r3
		dj->dir = 0;
    7c06:	2300      	movs	r3, #0
    7c08:	617b      	str	r3, [r7, #20]
    7c0a:	e13a      	b.n	7e82 <follow_path+0x2ae>
		path++;
    7c0c:	3501      	adds	r5, #1
    7c0e:	e7ef      	b.n	7bf0 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7c10:	3501      	adds	r5, #1
    7c12:	7828      	ldrb	r0, [r5, #0]
    7c14:	282f      	cmp	r0, #47	; 0x2f
    7c16:	d0fb      	beq.n	7c10 <follow_path+0x3c>
    7c18:	285c      	cmp	r0, #92	; 0x5c
    7c1a:	d0f9      	beq.n	7c10 <follow_path+0x3c>
	lfn = dj->lfn;
    7c1c:	69fb      	ldr	r3, [r7, #28]
    7c1e:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    7c20:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7c22:	281f      	cmp	r0, #31
    7c24:	d800      	bhi.n	7c28 <follow_path+0x54>
    7c26:	e13b      	b.n	7ea0 <follow_path+0x2cc>
    7c28:	282f      	cmp	r0, #47	; 0x2f
    7c2a:	d100      	bne.n	7c2e <follow_path+0x5a>
    7c2c:	e13b      	b.n	7ea6 <follow_path+0x2d2>
    7c2e:	285c      	cmp	r0, #92	; 0x5c
    7c30:	d100      	bne.n	7c34 <follow_path+0x60>
    7c32:	e13b      	b.n	7eac <follow_path+0x2d8>
    7c34:	1c6e      	adds	r6, r5, #1
    7c36:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7c38:	2380      	movs	r3, #128	; 0x80
    7c3a:	005b      	lsls	r3, r3, #1
    7c3c:	4698      	mov	r8, r3
    7c3e:	46bb      	mov	fp, r7
    7c40:	002b      	movs	r3, r5
    7c42:	0025      	movs	r5, r4
    7c44:	0034      	movs	r4, r6
    7c46:	4656      	mov	r6, sl
    7c48:	4699      	mov	r9, r3
    7c4a:	e011      	b.n	7c70 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7c4c:	2b00      	cmp	r3, #0
    7c4e:	d135      	bne.n	7cbc <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    7c50:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    7c52:	1c6b      	adds	r3, r5, #1
    7c54:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7c56:	281f      	cmp	r0, #31
    7c58:	d91e      	bls.n	7c98 <follow_path+0xc4>
    7c5a:	282f      	cmp	r0, #47	; 0x2f
    7c5c:	d100      	bne.n	7c60 <follow_path+0x8c>
    7c5e:	e128      	b.n	7eb2 <follow_path+0x2de>
    7c60:	285c      	cmp	r0, #92	; 0x5c
    7c62:	d100      	bne.n	7c66 <follow_path+0x92>
    7c64:	e142      	b.n	7eec <follow_path+0x318>
    7c66:	3602      	adds	r6, #2
    7c68:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7c6a:	4543      	cmp	r3, r8
    7c6c:	d026      	beq.n	7cbc <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    7c6e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    7c70:	2101      	movs	r1, #1
    7c72:	4b97      	ldr	r3, [pc, #604]	; (7ed0 <follow_path+0x2fc>)
    7c74:	4798      	blx	r3
    7c76:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7c78:	d020      	beq.n	7cbc <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7c7a:	287f      	cmp	r0, #127	; 0x7f
    7c7c:	d8e8      	bhi.n	7c50 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    7c7e:	2822      	cmp	r0, #34	; 0x22
    7c80:	d100      	bne.n	7c84 <follow_path+0xb0>
    7c82:	e0fd      	b.n	7e80 <follow_path+0x2ac>
    7c84:	232a      	movs	r3, #42	; 0x2a
    7c86:	4a93      	ldr	r2, [pc, #588]	; (7ed4 <follow_path+0x300>)
    7c88:	b29f      	uxth	r7, r3
    7c8a:	428f      	cmp	r7, r1
    7c8c:	d0de      	beq.n	7c4c <follow_path+0x78>
    7c8e:	3201      	adds	r2, #1
    7c90:	7813      	ldrb	r3, [r2, #0]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d1f8      	bne.n	7c88 <follow_path+0xb4>
    7c96:	e7db      	b.n	7c50 <follow_path+0x7c>
    7c98:	002c      	movs	r4, r5
    7c9a:	465f      	mov	r7, fp
    7c9c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7c9e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7ca0:	2604      	movs	r6, #4
    7ca2:	e10b      	b.n	7ebc <follow_path+0x2e8>
		di--;
    7ca4:	3c01      	subs	r4, #1
    7ca6:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    7ca8:	2c00      	cmp	r4, #0
    7caa:	d100      	bne.n	7cae <follow_path+0xda>
    7cac:	e0e8      	b.n	7e80 <follow_path+0x2ac>
		w = lfn[di-1];
    7cae:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    7cb0:	2a20      	cmp	r2, #32
    7cb2:	d0f7      	beq.n	7ca4 <follow_path+0xd0>
    7cb4:	2a2e      	cmp	r2, #46	; 0x2e
    7cb6:	d0f5      	beq.n	7ca4 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    7cb8:	2c00      	cmp	r4, #0
    7cba:	d101      	bne.n	7cc0 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7cbc:	2006      	movs	r0, #6
	return res;
    7cbe:	e0e0      	b.n	7e82 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    7cc0:	0063      	lsls	r3, r4, #1
    7cc2:	4698      	mov	r8, r3
    7cc4:	2300      	movs	r3, #0
    7cc6:	4652      	mov	r2, sl
    7cc8:	4641      	mov	r1, r8
    7cca:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    7ccc:	220b      	movs	r2, #11
    7cce:	2120      	movs	r1, #32
    7cd0:	69b8      	ldr	r0, [r7, #24]
    7cd2:	4b81      	ldr	r3, [pc, #516]	; (7ed8 <follow_path+0x304>)
    7cd4:	4798      	blx	r3
    7cd6:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    7cd8:	2300      	movs	r3, #0
    7cda:	e001      	b.n	7ce0 <follow_path+0x10c>
    7cdc:	3301      	adds	r3, #1
    7cde:	3202      	adds	r2, #2
    7ce0:	8811      	ldrh	r1, [r2, #0]
    7ce2:	2920      	cmp	r1, #32
    7ce4:	d0fa      	beq.n	7cdc <follow_path+0x108>
    7ce6:	292e      	cmp	r1, #46	; 0x2e
    7ce8:	d0f8      	beq.n	7cdc <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    7cea:	2b00      	cmp	r3, #0
    7cec:	d001      	beq.n	7cf2 <follow_path+0x11e>
    7cee:	2203      	movs	r2, #3
    7cf0:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7cf2:	4652      	mov	r2, sl
    7cf4:	4442      	add	r2, r8
    7cf6:	3a02      	subs	r2, #2
    7cf8:	8812      	ldrh	r2, [r2, #0]
    7cfa:	2a2e      	cmp	r2, #46	; 0x2e
    7cfc:	d009      	beq.n	7d12 <follow_path+0x13e>
    7cfe:	4642      	mov	r2, r8
    7d00:	3a04      	subs	r2, #4
    7d02:	4452      	add	r2, sl
    7d04:	3c01      	subs	r4, #1
    7d06:	2c00      	cmp	r4, #0
    7d08:	d003      	beq.n	7d12 <follow_path+0x13e>
    7d0a:	3a02      	subs	r2, #2
    7d0c:	8851      	ldrh	r1, [r2, #2]
    7d0e:	292e      	cmp	r1, #46	; 0x2e
    7d10:	d1f8      	bne.n	7d04 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    7d12:	2208      	movs	r2, #8
    7d14:	9201      	str	r2, [sp, #4]
    7d16:	2200      	movs	r2, #0
    7d18:	4693      	mov	fp, r2
    7d1a:	4691      	mov	r9, r2
    7d1c:	46a0      	mov	r8, r4
    7d1e:	e006      	b.n	7d2e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7d20:	4544      	cmp	r4, r8
    7d22:	d100      	bne.n	7d26 <follow_path+0x152>
    7d24:	e0e6      	b.n	7ef4 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    7d26:	2303      	movs	r3, #3
    7d28:	431e      	orrs	r6, r3
    7d2a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    7d2c:	0023      	movs	r3, r4
    7d2e:	1c5c      	adds	r4, r3, #1
    7d30:	005b      	lsls	r3, r3, #1
    7d32:	4652      	mov	r2, sl
    7d34:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    7d36:	2800      	cmp	r0, #0
    7d38:	d02c      	beq.n	7d94 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7d3a:	2820      	cmp	r0, #32
    7d3c:	d0f3      	beq.n	7d26 <follow_path+0x152>
    7d3e:	282e      	cmp	r0, #46	; 0x2e
    7d40:	d0ee      	beq.n	7d20 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    7d42:	9b01      	ldr	r3, [sp, #4]
    7d44:	459b      	cmp	fp, r3
    7d46:	d219      	bcs.n	7d7c <follow_path+0x1a8>
    7d48:	4544      	cmp	r4, r8
    7d4a:	d100      	bne.n	7d4e <follow_path+0x17a>
    7d4c:	e0d2      	b.n	7ef4 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    7d4e:	287f      	cmp	r0, #127	; 0x7f
    7d50:	d85e      	bhi.n	7e10 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    7d52:	282b      	cmp	r0, #43	; 0x2b
    7d54:	d06e      	beq.n	7e34 <follow_path+0x260>
    7d56:	232c      	movs	r3, #44	; 0x2c
    7d58:	4a60      	ldr	r2, [pc, #384]	; (7edc <follow_path+0x308>)
    7d5a:	b299      	uxth	r1, r3
    7d5c:	4281      	cmp	r1, r0
    7d5e:	d067      	beq.n	7e30 <follow_path+0x25c>
    7d60:	3201      	adds	r2, #1
    7d62:	7813      	ldrb	r3, [r2, #0]
    7d64:	2b00      	cmp	r3, #0
    7d66:	d1f8      	bne.n	7d5a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    7d68:	0003      	movs	r3, r0
    7d6a:	3b41      	subs	r3, #65	; 0x41
    7d6c:	b29b      	uxth	r3, r3
    7d6e:	2b19      	cmp	r3, #25
    7d70:	d86c      	bhi.n	7e4c <follow_path+0x278>
					b |= 2;
    7d72:	2302      	movs	r3, #2
    7d74:	464a      	mov	r2, r9
    7d76:	431a      	orrs	r2, r3
    7d78:	4691      	mov	r9, r2
    7d7a:	e05f      	b.n	7e3c <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    7d7c:	9b01      	ldr	r3, [sp, #4]
    7d7e:	2b0b      	cmp	r3, #11
    7d80:	d03b      	beq.n	7dfa <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    7d82:	4544      	cmp	r4, r8
    7d84:	d100      	bne.n	7d88 <follow_path+0x1b4>
    7d86:	e0b9      	b.n	7efc <follow_path+0x328>
    7d88:	2303      	movs	r3, #3
    7d8a:	431e      	orrs	r6, r3
    7d8c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    7d8e:	4544      	cmp	r4, r8
    7d90:	d800      	bhi.n	7d94 <follow_path+0x1c0>
    7d92:	e0b3      	b.n	7efc <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7d94:	69bb      	ldr	r3, [r7, #24]
    7d96:	781a      	ldrb	r2, [r3, #0]
    7d98:	2ae5      	cmp	r2, #229	; 0xe5
    7d9a:	d036      	beq.n	7e0a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    7d9c:	9b01      	ldr	r3, [sp, #4]
    7d9e:	2b08      	cmp	r3, #8
    7da0:	d060      	beq.n	7e64 <follow_path+0x290>
    7da2:	230c      	movs	r3, #12
    7da4:	464a      	mov	r2, r9
    7da6:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    7da8:	2b0c      	cmp	r3, #12
    7daa:	d060      	beq.n	7e6e <follow_path+0x29a>
    7dac:	43d2      	mvns	r2, r2
    7dae:	0792      	lsls	r2, r2, #30
    7db0:	d05d      	beq.n	7e6e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    7db2:	07b2      	lsls	r2, r6, #30
    7db4:	d406      	bmi.n	7dc4 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7db6:	2203      	movs	r2, #3
    7db8:	4649      	mov	r1, r9
    7dba:	400a      	ands	r2, r1
    7dbc:	2a01      	cmp	r2, #1
    7dbe:	d059      	beq.n	7e74 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7dc0:	2b04      	cmp	r3, #4
    7dc2:	d05a      	beq.n	7e7a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    7dc4:	69bb      	ldr	r3, [r7, #24]
    7dc6:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    7dc8:	0038      	movs	r0, r7
    7dca:	4b45      	ldr	r3, [pc, #276]	; (7ee0 <follow_path+0x30c>)
    7dcc:	4798      	blx	r3
			ns = *(dj->fn+NS);
    7dce:	69bb      	ldr	r3, [r7, #24]
    7dd0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    7dd2:	2800      	cmp	r0, #0
    7dd4:	d15c      	bne.n	7e90 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    7dd6:	075b      	lsls	r3, r3, #29
    7dd8:	d453      	bmi.n	7e82 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    7dda:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    7ddc:	7ad3      	ldrb	r3, [r2, #11]
    7dde:	06db      	lsls	r3, r3, #27
    7de0:	d55c      	bpl.n	7e9c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    7de2:	7d51      	ldrb	r1, [r2, #21]
    7de4:	0209      	lsls	r1, r1, #8
    7de6:	7d13      	ldrb	r3, [r2, #20]
    7de8:	430b      	orrs	r3, r1
    7dea:	041b      	lsls	r3, r3, #16
    7dec:	7ed1      	ldrb	r1, [r2, #27]
    7dee:	0209      	lsls	r1, r1, #8
    7df0:	7e92      	ldrb	r2, [r2, #26]
    7df2:	430a      	orrs	r2, r1
    7df4:	4313      	orrs	r3, r2
    7df6:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    7df8:	e70b      	b.n	7c12 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    7dfa:	2303      	movs	r3, #3
    7dfc:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7dfe:	69bb      	ldr	r3, [r7, #24]
    7e00:	781a      	ldrb	r2, [r3, #0]
    7e02:	2ae5      	cmp	r2, #229	; 0xe5
    7e04:	d1cd      	bne.n	7da2 <follow_path+0x1ce>
    7e06:	220b      	movs	r2, #11
    7e08:	9201      	str	r2, [sp, #4]
    7e0a:	2205      	movs	r2, #5
    7e0c:	701a      	strb	r2, [r3, #0]
    7e0e:	e7c5      	b.n	7d9c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    7e10:	2100      	movs	r1, #0
    7e12:	4b2f      	ldr	r3, [pc, #188]	; (7ed0 <follow_path+0x2fc>)
    7e14:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    7e16:	2800      	cmp	r0, #0
    7e18:	d100      	bne.n	7e1c <follow_path+0x248>
    7e1a:	e079      	b.n	7f10 <follow_path+0x33c>
    7e1c:	4b31      	ldr	r3, [pc, #196]	; (7ee4 <follow_path+0x310>)
    7e1e:	469c      	mov	ip, r3
    7e20:	4460      	add	r0, ip
    7e22:	3880      	subs	r0, #128	; 0x80
    7e24:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    7e26:	2302      	movs	r3, #2
    7e28:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    7e2a:	2800      	cmp	r0, #0
    7e2c:	d002      	beq.n	7e34 <follow_path+0x260>
    7e2e:	e790      	b.n	7d52 <follow_path+0x17e>
    7e30:	2b00      	cmp	r3, #0
    7e32:	d099      	beq.n	7d68 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7e34:	2303      	movs	r3, #3
    7e36:	431e      	orrs	r6, r3
    7e38:	b2f6      	uxtb	r6, r6
    7e3a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    7e3c:	69bb      	ldr	r3, [r7, #24]
    7e3e:	465a      	mov	r2, fp
    7e40:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    7e42:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    7e44:	2201      	movs	r2, #1
    7e46:	4694      	mov	ip, r2
    7e48:	44e3      	add	fp, ip
    7e4a:	e770      	b.n	7d2e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    7e4c:	0003      	movs	r3, r0
    7e4e:	3b61      	subs	r3, #97	; 0x61
    7e50:	b29b      	uxth	r3, r3
    7e52:	2b19      	cmp	r3, #25
    7e54:	d8f2      	bhi.n	7e3c <follow_path+0x268>
						b |= 1; w -= 0x20;
    7e56:	2301      	movs	r3, #1
    7e58:	464a      	mov	r2, r9
    7e5a:	431a      	orrs	r2, r3
    7e5c:	4691      	mov	r9, r2
    7e5e:	3820      	subs	r0, #32
    7e60:	b280      	uxth	r0, r0
    7e62:	e7eb      	b.n	7e3c <follow_path+0x268>
	if (ni == 8) b <<= 2;
    7e64:	464b      	mov	r3, r9
    7e66:	009b      	lsls	r3, r3, #2
    7e68:	b2db      	uxtb	r3, r3
    7e6a:	4699      	mov	r9, r3
    7e6c:	e799      	b.n	7da2 <follow_path+0x1ce>
		cf |= NS_LFN;
    7e6e:	2202      	movs	r2, #2
    7e70:	4316      	orrs	r6, r2
    7e72:	e79e      	b.n	7db2 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7e74:	320f      	adds	r2, #15
    7e76:	4316      	orrs	r6, r2
    7e78:	e7a2      	b.n	7dc0 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7e7a:	3304      	adds	r3, #4
    7e7c:	431e      	orrs	r6, r3
    7e7e:	e7a1      	b.n	7dc4 <follow_path+0x1f0>
    7e80:	2006      	movs	r0, #6
}
    7e82:	b003      	add	sp, #12
    7e84:	bc3c      	pop	{r2, r3, r4, r5}
    7e86:	4690      	mov	r8, r2
    7e88:	4699      	mov	r9, r3
    7e8a:	46a2      	mov	sl, r4
    7e8c:	46ab      	mov	fp, r5
    7e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    7e90:	2804      	cmp	r0, #4
    7e92:	d1f6      	bne.n	7e82 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7e94:	075b      	lsls	r3, r3, #29
    7e96:	d4f4      	bmi.n	7e82 <follow_path+0x2ae>
    7e98:	3001      	adds	r0, #1
    7e9a:	e7f2      	b.n	7e82 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    7e9c:	2005      	movs	r0, #5
    7e9e:	e7f0      	b.n	7e82 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    7ea0:	2301      	movs	r3, #1
	si = di = 0;
    7ea2:	2400      	movs	r4, #0
    7ea4:	e6fb      	b.n	7c9e <follow_path+0xca>
		w = p[si++];					/* Get a character */
    7ea6:	2301      	movs	r3, #1
	si = di = 0;
    7ea8:	2400      	movs	r4, #0
    7eaa:	e005      	b.n	7eb8 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    7eac:	2301      	movs	r3, #1
	si = di = 0;
    7eae:	2400      	movs	r4, #0
    7eb0:	e002      	b.n	7eb8 <follow_path+0x2e4>
    7eb2:	002c      	movs	r4, r5
    7eb4:	465f      	mov	r7, fp
    7eb6:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7eb8:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7eba:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    7ebc:	2c00      	cmp	r4, #0
    7ebe:	d0df      	beq.n	7e80 <follow_path+0x2ac>
    7ec0:	4b09      	ldr	r3, [pc, #36]	; (7ee8 <follow_path+0x314>)
    7ec2:	18e3      	adds	r3, r4, r3
    7ec4:	005b      	lsls	r3, r3, #1
    7ec6:	4453      	add	r3, sl
    7ec8:	e6f1      	b.n	7cae <follow_path+0xda>
    7eca:	46c0      	nop			; (mov r8, r8)
    7ecc:	00007225 	.word	0x00007225
    7ed0:	0000837d 	.word	0x0000837d
    7ed4:	0000c8fd 	.word	0x0000c8fd
    7ed8:	00006bbd 	.word	0x00006bbd
    7edc:	0000c909 	.word	0x0000c909
    7ee0:	00007665 	.word	0x00007665
    7ee4:	0000c87c 	.word	0x0000c87c
    7ee8:	7fffffff 	.word	0x7fffffff
    7eec:	002c      	movs	r4, r5
    7eee:	465f      	mov	r7, fp
    7ef0:	464d      	mov	r5, r9
    7ef2:	e7e1      	b.n	7eb8 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    7ef4:	9b01      	ldr	r3, [sp, #4]
    7ef6:	2b0b      	cmp	r3, #11
    7ef8:	d100      	bne.n	7efc <follow_path+0x328>
    7efa:	e77e      	b.n	7dfa <follow_path+0x226>
			b <<= 2; continue;
    7efc:	464b      	mov	r3, r9
    7efe:	009b      	lsls	r3, r3, #2
    7f00:	b2db      	uxtb	r3, r3
    7f02:	4699      	mov	r9, r3
    7f04:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    7f06:	220b      	movs	r2, #11
    7f08:	9201      	str	r2, [sp, #4]
    7f0a:	3a03      	subs	r2, #3
    7f0c:	4693      	mov	fp, r2
    7f0e:	e70e      	b.n	7d2e <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    7f10:	2302      	movs	r3, #2
    7f12:	431e      	orrs	r6, r3
    7f14:	e78e      	b.n	7e34 <follow_path+0x260>
    7f16:	46c0      	nop			; (mov r8, r8)

00007f18 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    7f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f1a:	46c6      	mov	lr, r8
    7f1c:	b500      	push	{lr}
    7f1e:	4c59      	ldr	r4, [pc, #356]	; (8084 <f_open+0x16c>)
    7f20:	44a5      	add	sp, r4
    7f22:	0005      	movs	r5, r0
    7f24:	9101      	str	r1, [sp, #4]
    7f26:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    7f28:	2300      	movs	r3, #0
    7f2a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    7f2c:	261f      	movs	r6, #31
    7f2e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    7f30:	221e      	movs	r2, #30
    7f32:	403a      	ands	r2, r7
    7f34:	a985      	add	r1, sp, #532	; 0x214
    7f36:	a801      	add	r0, sp, #4
    7f38:	4b53      	ldr	r3, [pc, #332]	; (8088 <f_open+0x170>)
    7f3a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    7f3c:	ab82      	add	r3, sp, #520	; 0x208
    7f3e:	938b      	str	r3, [sp, #556]	; 0x22c
    7f40:	ab02      	add	r3, sp, #8
    7f42:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    7f44:	2800      	cmp	r0, #0
    7f46:	d006      	beq.n	7f56 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    7f48:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7f4a:	231c      	movs	r3, #28
    7f4c:	423b      	tst	r3, r7
    7f4e:	d145      	bne.n	7fdc <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    7f50:	2800      	cmp	r0, #0
    7f52:	d13d      	bne.n	7fd0 <f_open+0xb8>
    7f54:	e00c      	b.n	7f70 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    7f56:	9901      	ldr	r1, [sp, #4]
    7f58:	a885      	add	r0, sp, #532	; 0x214
    7f5a:	4b4c      	ldr	r3, [pc, #304]	; (808c <f_open+0x174>)
    7f5c:	4798      	blx	r3
	dir = dj.dir;
    7f5e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    7f60:	2800      	cmp	r0, #0
    7f62:	d1f2      	bne.n	7f4a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    7f64:	2c00      	cmp	r4, #0
    7f66:	d100      	bne.n	7f6a <f_open+0x52>
    7f68:	e086      	b.n	8078 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7f6a:	231c      	movs	r3, #28
    7f6c:	423b      	tst	r3, r7
    7f6e:	d146      	bne.n	7ffe <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7f70:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    7f72:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7f74:	06da      	lsls	r2, r3, #27
    7f76:	d42b      	bmi.n	7fd0 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7f78:	07ba      	lsls	r2, r7, #30
    7f7a:	d502      	bpl.n	7f82 <f_open+0x6a>
					res = FR_DENIED;
    7f7c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7f7e:	07db      	lsls	r3, r3, #31
    7f80:	d426      	bmi.n	7fd0 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    7f82:	073b      	lsls	r3, r7, #28
    7f84:	d501      	bpl.n	7f8a <f_open+0x72>
			mode |= FA__WRITTEN;
    7f86:	2320      	movs	r3, #32
    7f88:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    7f8a:	9b85      	ldr	r3, [sp, #532]	; 0x214
    7f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f8e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    7f90:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    7f92:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    7f94:	7d62      	ldrb	r2, [r4, #21]
    7f96:	0212      	lsls	r2, r2, #8
    7f98:	7d23      	ldrb	r3, [r4, #20]
    7f9a:	4313      	orrs	r3, r2
    7f9c:	041b      	lsls	r3, r3, #16
    7f9e:	7ee1      	ldrb	r1, [r4, #27]
    7fa0:	0209      	lsls	r1, r1, #8
    7fa2:	7ea2      	ldrb	r2, [r4, #26]
    7fa4:	430a      	orrs	r2, r1
    7fa6:	4313      	orrs	r3, r2
    7fa8:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    7faa:	7fe3      	ldrb	r3, [r4, #31]
    7fac:	061b      	lsls	r3, r3, #24
    7fae:	7fa2      	ldrb	r2, [r4, #30]
    7fb0:	0412      	lsls	r2, r2, #16
    7fb2:	4313      	orrs	r3, r2
    7fb4:	7f22      	ldrb	r2, [r4, #28]
    7fb6:	4313      	orrs	r3, r2
    7fb8:	7f62      	ldrb	r2, [r4, #29]
    7fba:	0212      	lsls	r2, r2, #8
    7fbc:	4313      	orrs	r3, r2
    7fbe:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    7fc0:	2300      	movs	r3, #0
    7fc2:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    7fc4:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    7fc6:	9b85      	ldr	r3, [sp, #532]	; 0x214
    7fc8:	602b      	str	r3, [r5, #0]
    7fca:	88db      	ldrh	r3, [r3, #6]
    7fcc:	80ab      	strh	r3, [r5, #4]
    7fce:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    7fd0:	238e      	movs	r3, #142	; 0x8e
    7fd2:	009b      	lsls	r3, r3, #2
    7fd4:	449d      	add	sp, r3
    7fd6:	bc04      	pop	{r2}
    7fd8:	4690      	mov	r8, r2
    7fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    7fdc:	2804      	cmp	r0, #4
    7fde:	d005      	beq.n	7fec <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    7fe0:	2308      	movs	r3, #8
    7fe2:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    7fe4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d0d3      	beq.n	7f92 <f_open+0x7a>
    7fea:	e7f1      	b.n	7fd0 <f_open+0xb8>
				res = dir_register(&dj);
    7fec:	a885      	add	r0, sp, #532	; 0x214
    7fee:	4b28      	ldr	r3, [pc, #160]	; (8090 <f_open+0x178>)
    7ff0:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    7ff2:	2308      	movs	r3, #8
    7ff4:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    7ff6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    7ff8:	2800      	cmp	r0, #0
    7ffa:	d008      	beq.n	800e <f_open+0xf6>
    7ffc:	e7e8      	b.n	7fd0 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    7ffe:	7ae3      	ldrb	r3, [r4, #11]
    8000:	2211      	movs	r2, #17
				res = FR_DENIED;
    8002:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    8004:	421a      	tst	r2, r3
    8006:	d1e3      	bne.n	7fd0 <f_open+0xb8>
					res = FR_EXIST;
    8008:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    800a:	077b      	lsls	r3, r7, #29
    800c:	d4e0      	bmi.n	7fd0 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    800e:	0733      	lsls	r3, r6, #28
    8010:	d5bb      	bpl.n	7f8a <f_open+0x72>
			dw = get_fattime();					/* Created time */
    8012:	4b20      	ldr	r3, [pc, #128]	; (8094 <f_open+0x17c>)
    8014:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    8016:	73a0      	strb	r0, [r4, #14]
    8018:	0a03      	lsrs	r3, r0, #8
    801a:	73e3      	strb	r3, [r4, #15]
    801c:	0c03      	lsrs	r3, r0, #16
    801e:	7423      	strb	r3, [r4, #16]
    8020:	0e00      	lsrs	r0, r0, #24
    8022:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    8024:	2300      	movs	r3, #0
    8026:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    8028:	7723      	strb	r3, [r4, #28]
    802a:	7763      	strb	r3, [r4, #29]
    802c:	77a3      	strb	r3, [r4, #30]
    802e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    8030:	7d62      	ldrb	r2, [r4, #21]
    8032:	0212      	lsls	r2, r2, #8
    8034:	7d27      	ldrb	r7, [r4, #20]
    8036:	4317      	orrs	r7, r2
    8038:	043f      	lsls	r7, r7, #16
    803a:	7ee1      	ldrb	r1, [r4, #27]
    803c:	0209      	lsls	r1, r1, #8
    803e:	7ea2      	ldrb	r2, [r4, #26]
    8040:	430a      	orrs	r2, r1
    8042:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    8044:	76a3      	strb	r3, [r4, #26]
    8046:	76e3      	strb	r3, [r4, #27]
    8048:	7523      	strb	r3, [r4, #20]
    804a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    804c:	9885      	ldr	r0, [sp, #532]	; 0x214
    804e:	3301      	adds	r3, #1
    8050:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    8052:	2f00      	cmp	r7, #0
    8054:	d097      	beq.n	7f86 <f_open+0x6e>
				dw = dj.fs->winsect;
    8056:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8058:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    805a:	0039      	movs	r1, r7
    805c:	4b0e      	ldr	r3, [pc, #56]	; (8098 <f_open+0x180>)
    805e:	4798      	blx	r3
				if (res == FR_OK) {
    8060:	2800      	cmp	r0, #0
    8062:	d1b5      	bne.n	7fd0 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    8064:	9885      	ldr	r0, [sp, #532]	; 0x214
    8066:	3f01      	subs	r7, #1
    8068:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    806a:	4641      	mov	r1, r8
    806c:	4b0b      	ldr	r3, [pc, #44]	; (809c <f_open+0x184>)
    806e:	4798      	blx	r3
	if (res == FR_OK) {
    8070:	2800      	cmp	r0, #0
    8072:	d100      	bne.n	8076 <f_open+0x15e>
    8074:	e787      	b.n	7f86 <f_open+0x6e>
    8076:	e7ab      	b.n	7fd0 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    8078:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    807a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    807c:	423b      	tst	r3, r7
    807e:	d0b2      	beq.n	7fe6 <f_open+0xce>
			res = FR_INVALID_NAME;
    8080:	2006      	movs	r0, #6
    8082:	e7ad      	b.n	7fe0 <f_open+0xc8>
    8084:	fffffdc8 	.word	0xfffffdc8
    8088:	00006cd9 	.word	0x00006cd9
    808c:	00007bd5 	.word	0x00007bd5
    8090:	000077fd 	.word	0x000077fd
    8094:	00006b59 	.word	0x00006b59
    8098:	000074c9 	.word	0x000074c9
    809c:	00007089 	.word	0x00007089

000080a0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    80a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80a2:	46de      	mov	lr, fp
    80a4:	4657      	mov	r7, sl
    80a6:	464e      	mov	r6, r9
    80a8:	4645      	mov	r5, r8
    80aa:	b5e0      	push	{r5, r6, r7, lr}
    80ac:	b083      	sub	sp, #12
    80ae:	0004      	movs	r4, r0
    80b0:	000d      	movs	r5, r1
    80b2:	0016      	movs	r6, r2
    80b4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    80b6:	2300      	movs	r3, #0
    80b8:	464a      	mov	r2, r9
    80ba:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    80bc:	8881      	ldrh	r1, [r0, #4]
    80be:	6800      	ldr	r0, [r0, #0]
    80c0:	4b7f      	ldr	r3, [pc, #508]	; (82c0 <f_write+0x220>)
    80c2:	4798      	blx	r3
    80c4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    80c6:	2800      	cmp	r0, #0
    80c8:	d000      	beq.n	80cc <f_write+0x2c>
    80ca:	e0f1      	b.n	82b0 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    80cc:	79a3      	ldrb	r3, [r4, #6]
    80ce:	b25a      	sxtb	r2, r3
    80d0:	2a00      	cmp	r2, #0
    80d2:	da00      	bge.n	80d6 <f_write+0x36>
    80d4:	e0ea      	b.n	82ac <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    80d6:	079b      	lsls	r3, r3, #30
    80d8:	d402      	bmi.n	80e0 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    80da:	2307      	movs	r3, #7
    80dc:	9300      	str	r3, [sp, #0]
    80de:	e0e7      	b.n	82b0 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    80e0:	68e3      	ldr	r3, [r4, #12]
    80e2:	199a      	adds	r2, r3, r6
    80e4:	4293      	cmp	r3, r2
    80e6:	d810      	bhi.n	810a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    80e8:	2e00      	cmp	r6, #0
    80ea:	d00e      	beq.n	810a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    80ec:	002f      	movs	r7, r5
    80ee:	e07b      	b.n	81e8 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    80f0:	2100      	movs	r1, #0
    80f2:	4b74      	ldr	r3, [pc, #464]	; (82c4 <f_write+0x224>)
    80f4:	4798      	blx	r3
    80f6:	0003      	movs	r3, r0
    80f8:	6120      	str	r0, [r4, #16]
    80fa:	e003      	b.n	8104 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    80fc:	6961      	ldr	r1, [r4, #20]
    80fe:	4b71      	ldr	r3, [pc, #452]	; (82c4 <f_write+0x224>)
    8100:	4798      	blx	r3
    8102:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    8104:	2b00      	cmp	r3, #0
    8106:	d000      	beq.n	810a <f_write+0x6a>
    8108:	e080      	b.n	820c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    810a:	68a3      	ldr	r3, [r4, #8]
    810c:	68e2      	ldr	r2, [r4, #12]
    810e:	4293      	cmp	r3, r2
    8110:	d900      	bls.n	8114 <f_write+0x74>
    8112:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    8114:	79a3      	ldrb	r3, [r4, #6]
    8116:	2220      	movs	r2, #32
    8118:	4313      	orrs	r3, r2
    811a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    811c:	e0c8      	b.n	82b0 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    811e:	79a2      	ldrb	r2, [r4, #6]
    8120:	3b81      	subs	r3, #129	; 0x81
    8122:	4313      	orrs	r3, r2
    8124:	71a3      	strb	r3, [r4, #6]
    8126:	2302      	movs	r3, #2
    8128:	9300      	str	r3, [sp, #0]
    812a:	e0c1      	b.n	82b0 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    812c:	79a2      	ldrb	r2, [r4, #6]
    812e:	3b7f      	subs	r3, #127	; 0x7f
    8130:	4313      	orrs	r3, r2
    8132:	71a3      	strb	r3, [r4, #6]
    8134:	2301      	movs	r3, #1
    8136:	9300      	str	r3, [sp, #0]
    8138:	e0ba      	b.n	82b0 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    813a:	2100      	movs	r1, #0
    813c:	4b62      	ldr	r3, [pc, #392]	; (82c8 <f_write+0x228>)
    813e:	4798      	blx	r3
    8140:	2800      	cmp	r0, #0
    8142:	d06d      	beq.n	8220 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    8144:	79a2      	ldrb	r2, [r4, #6]
    8146:	2380      	movs	r3, #128	; 0x80
    8148:	425b      	negs	r3, r3
    814a:	4313      	orrs	r3, r2
    814c:	71a3      	strb	r3, [r4, #6]
    814e:	2301      	movs	r3, #1
    8150:	9300      	str	r3, [sp, #0]
    8152:	e0ad      	b.n	82b0 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8154:	79a2      	ldrb	r2, [r4, #6]
    8156:	2380      	movs	r3, #128	; 0x80
    8158:	425b      	negs	r3, r3
    815a:	4313      	orrs	r3, r2
    815c:	71a3      	strb	r3, [r4, #6]
    815e:	2302      	movs	r3, #2
    8160:	9300      	str	r3, [sp, #0]
    8162:	e0a5      	b.n	82b0 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    8164:	79a2      	ldrb	r2, [r4, #6]
    8166:	2380      	movs	r3, #128	; 0x80
    8168:	425b      	negs	r3, r3
    816a:	4313      	orrs	r3, r2
    816c:	71a3      	strb	r3, [r4, #6]
    816e:	2301      	movs	r3, #1
    8170:	9300      	str	r3, [sp, #0]
    8172:	e09d      	b.n	82b0 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    8174:	0240      	lsls	r0, r0, #9
    8176:	1839      	adds	r1, r7, r0
    8178:	3330      	adds	r3, #48	; 0x30
    817a:	0018      	movs	r0, r3
    817c:	2280      	movs	r2, #128	; 0x80
    817e:	0092      	lsls	r2, r2, #2
    8180:	4b52      	ldr	r3, [pc, #328]	; (82cc <f_write+0x22c>)
    8182:	4798      	blx	r3
					fp->fs->wflag = 0;
    8184:	2300      	movs	r3, #0
    8186:	6822      	ldr	r2, [r4, #0]
    8188:	7113      	strb	r3, [r2, #4]
    818a:	e072      	b.n	8272 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    818c:	68a3      	ldr	r3, [r4, #8]
    818e:	68e2      	ldr	r2, [r4, #12]
    8190:	4293      	cmp	r3, r2
    8192:	d271      	bcs.n	8278 <f_write+0x1d8>
			fp->dsect = sect;
    8194:	4643      	mov	r3, r8
    8196:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    8198:	68a3      	ldr	r3, [r4, #8]
    819a:	05dd      	lsls	r5, r3, #23
    819c:	0ded      	lsrs	r5, r5, #23
    819e:	2380      	movs	r3, #128	; 0x80
    81a0:	009b      	lsls	r3, r3, #2
    81a2:	1b5d      	subs	r5, r3, r5
    81a4:	42b5      	cmp	r5, r6
    81a6:	d900      	bls.n	81aa <f_write+0x10a>
    81a8:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    81aa:	69a1      	ldr	r1, [r4, #24]
    81ac:	6820      	ldr	r0, [r4, #0]
    81ae:	4b46      	ldr	r3, [pc, #280]	; (82c8 <f_write+0x228>)
    81b0:	4798      	blx	r3
    81b2:	2800      	cmp	r0, #0
    81b4:	d172      	bne.n	829c <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    81b6:	68a3      	ldr	r3, [r4, #8]
    81b8:	05d8      	lsls	r0, r3, #23
    81ba:	0dc0      	lsrs	r0, r0, #23
    81bc:	3030      	adds	r0, #48	; 0x30
    81be:	6823      	ldr	r3, [r4, #0]
    81c0:	469c      	mov	ip, r3
    81c2:	4460      	add	r0, ip
    81c4:	002a      	movs	r2, r5
    81c6:	0039      	movs	r1, r7
    81c8:	4b40      	ldr	r3, [pc, #256]	; (82cc <f_write+0x22c>)
    81ca:	4798      	blx	r3
		fp->fs->wflag = 1;
    81cc:	2301      	movs	r3, #1
    81ce:	6822      	ldr	r2, [r4, #0]
    81d0:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    81d2:	197f      	adds	r7, r7, r5
    81d4:	68a3      	ldr	r3, [r4, #8]
    81d6:	195b      	adds	r3, r3, r5
    81d8:	60a3      	str	r3, [r4, #8]
    81da:	464b      	mov	r3, r9
    81dc:	681b      	ldr	r3, [r3, #0]
    81de:	195b      	adds	r3, r3, r5
    81e0:	464a      	mov	r2, r9
    81e2:	6013      	str	r3, [r2, #0]
    81e4:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    81e6:	d090      	beq.n	810a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    81e8:	68a3      	ldr	r3, [r4, #8]
    81ea:	05da      	lsls	r2, r3, #23
    81ec:	d1d4      	bne.n	8198 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    81ee:	6820      	ldr	r0, [r4, #0]
    81f0:	7882      	ldrb	r2, [r0, #2]
    81f2:	3a01      	subs	r2, #1
    81f4:	0a5d      	lsrs	r5, r3, #9
    81f6:	4015      	ands	r5, r2
    81f8:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    81fa:	2d00      	cmp	r5, #0
    81fc:	d10b      	bne.n	8216 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    81fe:	2b00      	cmp	r3, #0
    8200:	d000      	beq.n	8204 <f_write+0x164>
    8202:	e77b      	b.n	80fc <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    8204:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    8206:	2b00      	cmp	r3, #0
    8208:	d100      	bne.n	820c <f_write+0x16c>
    820a:	e771      	b.n	80f0 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    820c:	2b01      	cmp	r3, #1
    820e:	d086      	beq.n	811e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8210:	1c5a      	adds	r2, r3, #1
    8212:	d08b      	beq.n	812c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    8214:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    8216:	6820      	ldr	r0, [r4, #0]
    8218:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    821a:	69a2      	ldr	r2, [r4, #24]
    821c:	4293      	cmp	r3, r2
    821e:	d08c      	beq.n	813a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    8220:	6823      	ldr	r3, [r4, #0]
    8222:	469a      	mov	sl, r3
    8224:	6961      	ldr	r1, [r4, #20]
    8226:	0018      	movs	r0, r3
    8228:	4b29      	ldr	r3, [pc, #164]	; (82d0 <f_write+0x230>)
    822a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    822c:	2800      	cmp	r0, #0
    822e:	d091      	beq.n	8154 <f_write+0xb4>
			sect += csect;
    8230:	4680      	mov	r8, r0
    8232:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    8234:	0a73      	lsrs	r3, r6, #9
    8236:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    8238:	d0a8      	beq.n	818c <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    823a:	4653      	mov	r3, sl
    823c:	789b      	ldrb	r3, [r3, #2]
    823e:	465a      	mov	r2, fp
    8240:	18aa      	adds	r2, r5, r2
    8242:	429a      	cmp	r2, r3
    8244:	d901      	bls.n	824a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    8246:	1b5b      	subs	r3, r3, r5
    8248:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    824a:	465b      	mov	r3, fp
    824c:	466a      	mov	r2, sp
    824e:	71d3      	strb	r3, [r2, #7]
    8250:	79d3      	ldrb	r3, [r2, #7]
    8252:	4652      	mov	r2, sl
    8254:	7850      	ldrb	r0, [r2, #1]
    8256:	4642      	mov	r2, r8
    8258:	0039      	movs	r1, r7
    825a:	4d1e      	ldr	r5, [pc, #120]	; (82d4 <f_write+0x234>)
    825c:	47a8      	blx	r5
    825e:	2800      	cmp	r0, #0
    8260:	d000      	beq.n	8264 <f_write+0x1c4>
    8262:	e77f      	b.n	8164 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    8264:	6823      	ldr	r3, [r4, #0]
    8266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8268:	4641      	mov	r1, r8
    826a:	1a50      	subs	r0, r2, r1
    826c:	4583      	cmp	fp, r0
    826e:	d900      	bls.n	8272 <f_write+0x1d2>
    8270:	e780      	b.n	8174 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    8272:	465b      	mov	r3, fp
    8274:	025d      	lsls	r5, r3, #9
				continue;
    8276:	e7ac      	b.n	81d2 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    8278:	2100      	movs	r1, #0
    827a:	4650      	mov	r0, sl
    827c:	4b12      	ldr	r3, [pc, #72]	; (82c8 <f_write+0x228>)
    827e:	4798      	blx	r3
    8280:	2800      	cmp	r0, #0
    8282:	d103      	bne.n	828c <f_write+0x1ec>
				fp->fs->winsect = sect;
    8284:	6823      	ldr	r3, [r4, #0]
    8286:	4642      	mov	r2, r8
    8288:	62da      	str	r2, [r3, #44]	; 0x2c
    828a:	e783      	b.n	8194 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    828c:	79a2      	ldrb	r2, [r4, #6]
    828e:	2380      	movs	r3, #128	; 0x80
    8290:	425b      	negs	r3, r3
    8292:	4313      	orrs	r3, r2
    8294:	71a3      	strb	r3, [r4, #6]
    8296:	2301      	movs	r3, #1
    8298:	9300      	str	r3, [sp, #0]
    829a:	e009      	b.n	82b0 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    829c:	79a2      	ldrb	r2, [r4, #6]
    829e:	2380      	movs	r3, #128	; 0x80
    82a0:	425b      	negs	r3, r3
    82a2:	4313      	orrs	r3, r2
    82a4:	71a3      	strb	r3, [r4, #6]
    82a6:	2301      	movs	r3, #1
    82a8:	9300      	str	r3, [sp, #0]
    82aa:	e001      	b.n	82b0 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    82ac:	2302      	movs	r3, #2
    82ae:	9300      	str	r3, [sp, #0]
}
    82b0:	9800      	ldr	r0, [sp, #0]
    82b2:	b003      	add	sp, #12
    82b4:	bc3c      	pop	{r2, r3, r4, r5}
    82b6:	4690      	mov	r8, r2
    82b8:	4699      	mov	r9, r3
    82ba:	46a2      	mov	sl, r4
    82bc:	46ab      	mov	fp, r5
    82be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82c0:	00006c05 	.word	0x00006c05
    82c4:	00007405 	.word	0x00007405
    82c8:	00007089 	.word	0x00007089
    82cc:	00006ba9 	.word	0x00006ba9
    82d0:	00006bcf 	.word	0x00006bcf
    82d4:	00006a69 	.word	0x00006a69

000082d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    82d8:	b570      	push	{r4, r5, r6, lr}
    82da:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    82dc:	8881      	ldrh	r1, [r0, #4]
    82de:	6800      	ldr	r0, [r0, #0]
    82e0:	4b1c      	ldr	r3, [pc, #112]	; (8354 <f_sync+0x7c>)
    82e2:	4798      	blx	r3
	if (res == FR_OK) {
    82e4:	2800      	cmp	r0, #0
    82e6:	d102      	bne.n	82ee <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    82e8:	79a3      	ldrb	r3, [r4, #6]
    82ea:	069b      	lsls	r3, r3, #26
    82ec:	d400      	bmi.n	82f0 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    82ee:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    82f0:	69e1      	ldr	r1, [r4, #28]
    82f2:	6820      	ldr	r0, [r4, #0]
    82f4:	4b18      	ldr	r3, [pc, #96]	; (8358 <f_sync+0x80>)
    82f6:	4798      	blx	r3
			if (res == FR_OK) {
    82f8:	2800      	cmp	r0, #0
    82fa:	d1f8      	bne.n	82ee <f_sync+0x16>
				dir = fp->dir_ptr;
    82fc:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    82fe:	7aeb      	ldrb	r3, [r5, #11]
    8300:	2220      	movs	r2, #32
    8302:	4313      	orrs	r3, r2
    8304:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    8306:	7b23      	ldrb	r3, [r4, #12]
    8308:	772b      	strb	r3, [r5, #28]
    830a:	89a3      	ldrh	r3, [r4, #12]
    830c:	0a1b      	lsrs	r3, r3, #8
    830e:	776b      	strb	r3, [r5, #29]
    8310:	89e3      	ldrh	r3, [r4, #14]
    8312:	77ab      	strb	r3, [r5, #30]
    8314:	7be3      	ldrb	r3, [r4, #15]
    8316:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    8318:	7c23      	ldrb	r3, [r4, #16]
    831a:	76ab      	strb	r3, [r5, #26]
    831c:	8a23      	ldrh	r3, [r4, #16]
    831e:	0a1b      	lsrs	r3, r3, #8
    8320:	76eb      	strb	r3, [r5, #27]
    8322:	8a63      	ldrh	r3, [r4, #18]
    8324:	752b      	strb	r3, [r5, #20]
    8326:	8a63      	ldrh	r3, [r4, #18]
    8328:	0a1b      	lsrs	r3, r3, #8
    832a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    832c:	4b0b      	ldr	r3, [pc, #44]	; (835c <f_sync+0x84>)
    832e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    8330:	75a8      	strb	r0, [r5, #22]
    8332:	0a03      	lsrs	r3, r0, #8
    8334:	75eb      	strb	r3, [r5, #23]
    8336:	0c03      	lsrs	r3, r0, #16
    8338:	762b      	strb	r3, [r5, #24]
    833a:	0e00      	lsrs	r0, r0, #24
    833c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    833e:	79a3      	ldrb	r3, [r4, #6]
    8340:	2220      	movs	r2, #32
    8342:	4393      	bics	r3, r2
    8344:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    8346:	2301      	movs	r3, #1
    8348:	6822      	ldr	r2, [r4, #0]
    834a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    834c:	6820      	ldr	r0, [r4, #0]
    834e:	4b04      	ldr	r3, [pc, #16]	; (8360 <f_sync+0x88>)
    8350:	4798      	blx	r3
    8352:	e7cc      	b.n	82ee <f_sync+0x16>
    8354:	00006c05 	.word	0x00006c05
    8358:	00007089 	.word	0x00007089
    835c:	00006b59 	.word	0x00006b59
    8360:	00007ae1 	.word	0x00007ae1

00008364 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    8364:	b510      	push	{r4, lr}
    8366:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    8368:	4b03      	ldr	r3, [pc, #12]	; (8378 <f_close+0x14>)
    836a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    836c:	2800      	cmp	r0, #0
    836e:	d101      	bne.n	8374 <f_close+0x10>
    8370:	2300      	movs	r3, #0
    8372:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    8374:	bd10      	pop	{r4, pc}
    8376:	46c0      	nop			; (mov r8, r8)
    8378:	000082d9 	.word	0x000082d9

0000837c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    837c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    837e:	287f      	cmp	r0, #127	; 0x7f
    8380:	d911      	bls.n	83a6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    8382:	2900      	cmp	r1, #0
    8384:	d111      	bne.n	83aa <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    8386:	28c7      	cmp	r0, #199	; 0xc7
    8388:	d017      	beq.n	83ba <ff_convert+0x3e>
    838a:	4a0d      	ldr	r2, [pc, #52]	; (83c0 <ff_convert+0x44>)
    838c:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    838e:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    8390:	8811      	ldrh	r1, [r2, #0]
    8392:	4281      	cmp	r1, r0
    8394:	d004      	beq.n	83a0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    8396:	3301      	adds	r3, #1
    8398:	b29b      	uxth	r3, r3
    839a:	3202      	adds	r2, #2
    839c:	2b80      	cmp	r3, #128	; 0x80
    839e:	d1f7      	bne.n	8390 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    83a0:	3380      	adds	r3, #128	; 0x80
    83a2:	20ff      	movs	r0, #255	; 0xff
    83a4:	4003      	ands	r3, r0
		}
	}

	return c;
}
    83a6:	0018      	movs	r0, r3
    83a8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    83aa:	2300      	movs	r3, #0
    83ac:	28ff      	cmp	r0, #255	; 0xff
    83ae:	d8fa      	bhi.n	83a6 <ff_convert+0x2a>
    83b0:	3880      	subs	r0, #128	; 0x80
    83b2:	0040      	lsls	r0, r0, #1
    83b4:	4b02      	ldr	r3, [pc, #8]	; (83c0 <ff_convert+0x44>)
    83b6:	5ac3      	ldrh	r3, [r0, r3]
    83b8:	e7f5      	b.n	83a6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    83ba:	2300      	movs	r3, #0
    83bc:	e7f0      	b.n	83a0 <ff_convert+0x24>
    83be:	46c0      	nop			; (mov r8, r8)
    83c0:	0000c910 	.word	0x0000c910

000083c4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    83c4:	2861      	cmp	r0, #97	; 0x61
    83c6:	d014      	beq.n	83f2 <ff_wtoupper+0x2e>
    83c8:	4b0b      	ldr	r3, [pc, #44]	; (83f8 <ff_wtoupper+0x34>)
    83ca:	3304      	adds	r3, #4
    83cc:	2101      	movs	r1, #1
    83ce:	2262      	movs	r2, #98	; 0x62
    83d0:	4290      	cmp	r0, r2
    83d2:	d007      	beq.n	83e4 <ff_wtoupper+0x20>
    83d4:	3101      	adds	r1, #1
    83d6:	3302      	adds	r3, #2
    83d8:	1e9a      	subs	r2, r3, #2
    83da:	8812      	ldrh	r2, [r2, #0]
    83dc:	2a00      	cmp	r2, #0
    83de:	d1f7      	bne.n	83d0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    83e0:	0003      	movs	r3, r0
    83e2:	e004      	b.n	83ee <ff_wtoupper+0x2a>
    83e4:	1e03      	subs	r3, r0, #0
    83e6:	d002      	beq.n	83ee <ff_wtoupper+0x2a>
    83e8:	0049      	lsls	r1, r1, #1
    83ea:	4b04      	ldr	r3, [pc, #16]	; (83fc <ff_wtoupper+0x38>)
    83ec:	5acb      	ldrh	r3, [r1, r3]
}
    83ee:	0018      	movs	r0, r3
    83f0:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    83f2:	2100      	movs	r1, #0
    83f4:	e7f8      	b.n	83e8 <ff_wtoupper+0x24>
    83f6:	46c0      	nop			; (mov r8, r8)
    83f8:	0000ca10 	.word	0x0000ca10
    83fc:	0000cbf0 	.word	0x0000cbf0

00008400 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    8400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8402:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    8404:	2041      	movs	r0, #65	; 0x41
    8406:	5c23      	ldrb	r3, [r4, r0]
    8408:	2501      	movs	r5, #1
    840a:	432b      	orrs	r3, r5
    840c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    840e:	b292      	uxth	r2, r2
    8410:	2000      	movs	r0, #0
    8412:	5620      	ldrsb	r0, [r4, r0]
    8414:	2300      	movs	r3, #0
    8416:	4d12      	ldr	r5, [pc, #72]	; (8460 <_http_client_send_wait+0x60>)
    8418:	47a8      	blx	r5
    841a:	2800      	cmp	r0, #0
    841c:	db16      	blt.n	844c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    841e:	2341      	movs	r3, #65	; 0x41
    8420:	5ce3      	ldrb	r3, [r4, r3]
    8422:	07db      	lsls	r3, r3, #31
    8424:	d518      	bpl.n	8458 <_http_client_send_wait+0x58>
    8426:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    8428:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    842a:	2b02      	cmp	r3, #2
    842c:	d917      	bls.n	845e <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    842e:	4f0d      	ldr	r7, [pc, #52]	; (8464 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    8430:	4e0d      	ldr	r6, [pc, #52]	; (8468 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    8432:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    8434:	2000      	movs	r0, #0
    8436:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    8438:	6d60      	ldr	r0, [r4, #84]	; 0x54
    843a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    843c:	5d63      	ldrb	r3, [r4, r5]
    843e:	07db      	lsls	r3, r3, #31
    8440:	d50c      	bpl.n	845c <_http_client_send_wait+0x5c>
    8442:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8444:	2b02      	cmp	r3, #2
    8446:	d8f5      	bhi.n	8434 <_http_client_send_wait+0x34>
	return 0;
    8448:	2000      	movs	r0, #0
    844a:	e008      	b.n	845e <_http_client_send_wait+0x5e>
		module->sending = 0;
    844c:	2241      	movs	r2, #65	; 0x41
    844e:	5ca3      	ldrb	r3, [r4, r2]
    8450:	2101      	movs	r1, #1
    8452:	438b      	bics	r3, r1
    8454:	54a3      	strb	r3, [r4, r2]
		return result;
    8456:	e002      	b.n	845e <_http_client_send_wait+0x5e>
	return 0;
    8458:	2000      	movs	r0, #0
    845a:	e000      	b.n	845e <_http_client_send_wait+0x5e>
    845c:	2000      	movs	r0, #0
}
    845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8460:	00004009 	.word	0x00004009
    8464:	000022a5 	.word	0x000022a5
    8468:	00009595 	.word	0x00009595

0000846c <http_client_get_config_defaults>:
	config->port = 80;
    846c:	2350      	movs	r3, #80	; 0x50
    846e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8470:	2300      	movs	r3, #0
    8472:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    8474:	4a05      	ldr	r2, [pc, #20]	; (848c <http_client_get_config_defaults+0x20>)
    8476:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    8478:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    847a:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    847c:	3301      	adds	r3, #1
    847e:	33ff      	adds	r3, #255	; 0xff
    8480:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    8482:	3bae      	subs	r3, #174	; 0xae
    8484:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    8486:	4b02      	ldr	r3, [pc, #8]	; (8490 <http_client_get_config_defaults+0x24>)
    8488:	6183      	str	r3, [r0, #24]
}
    848a:	4770      	bx	lr
    848c:	00004e20 	.word	0x00004e20
    8490:	0000cf98 	.word	0x0000cf98

00008494 <http_client_init>:
{
    8494:	b570      	push	{r4, r5, r6, lr}
    8496:	0004      	movs	r4, r0
    8498:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    849a:	2800      	cmp	r0, #0
    849c:	d038      	beq.n	8510 <http_client_init+0x7c>
    849e:	2900      	cmp	r1, #0
    84a0:	d039      	beq.n	8516 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    84a2:	690b      	ldr	r3, [r1, #16]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d039      	beq.n	851c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    84a8:	684b      	ldr	r3, [r1, #4]
    84aa:	2b00      	cmp	r3, #0
    84ac:	d039      	beq.n	8522 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    84ae:	694b      	ldr	r3, [r1, #20]
    84b0:	2b51      	cmp	r3, #81	; 0x51
    84b2:	d939      	bls.n	8528 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    84b4:	22e8      	movs	r2, #232	; 0xe8
    84b6:	2100      	movs	r1, #0
    84b8:	4b1e      	ldr	r3, [pc, #120]	; (8534 <http_client_init+0xa0>)
    84ba:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    84bc:	0020      	movs	r0, r4
    84be:	3050      	adds	r0, #80	; 0x50
    84c0:	221c      	movs	r2, #28
    84c2:	0029      	movs	r1, r5
    84c4:	4b1c      	ldr	r3, [pc, #112]	; (8538 <http_client_init+0xa4>)
    84c6:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    84c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    84ca:	2b00      	cmp	r3, #0
    84cc:	d008      	beq.n	84e0 <http_client_init+0x4c>
	if (config->timeout > 0) {
    84ce:	892b      	ldrh	r3, [r5, #8]
    84d0:	2b00      	cmp	r3, #0
    84d2:	d111      	bne.n	84f8 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    84d4:	2300      	movs	r3, #0
    84d6:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    84d8:	22d8      	movs	r2, #216	; 0xd8
    84da:	50a3      	str	r3, [r4, r2]
	return 0;
    84dc:	2000      	movs	r0, #0
}
    84de:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    84e0:	6928      	ldr	r0, [r5, #16]
    84e2:	4b16      	ldr	r3, [pc, #88]	; (853c <http_client_init+0xa8>)
    84e4:	4798      	blx	r3
    84e6:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    84e8:	2800      	cmp	r0, #0
    84ea:	d020      	beq.n	852e <http_client_init+0x9a>
		module->alloc_buffer = 1;
    84ec:	2241      	movs	r2, #65	; 0x41
    84ee:	5ca3      	ldrb	r3, [r4, r2]
    84f0:	2104      	movs	r1, #4
    84f2:	430b      	orrs	r3, r1
    84f4:	54a3      	strb	r3, [r4, r2]
    84f6:	e7ea      	b.n	84ce <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    84f8:	6868      	ldr	r0, [r5, #4]
    84fa:	2300      	movs	r3, #0
    84fc:	0022      	movs	r2, r4
    84fe:	4910      	ldr	r1, [pc, #64]	; (8540 <http_client_init+0xac>)
    8500:	4d10      	ldr	r5, [pc, #64]	; (8544 <http_client_init+0xb0>)
    8502:	47a8      	blx	r5
    8504:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    8506:	2800      	cmp	r0, #0
    8508:	dae4      	bge.n	84d4 <http_client_init+0x40>
			return -ENOSPC;
    850a:	201c      	movs	r0, #28
    850c:	4240      	negs	r0, r0
    850e:	e7e6      	b.n	84de <http_client_init+0x4a>
		return -EINVAL;
    8510:	2016      	movs	r0, #22
    8512:	4240      	negs	r0, r0
    8514:	e7e3      	b.n	84de <http_client_init+0x4a>
    8516:	2016      	movs	r0, #22
    8518:	4240      	negs	r0, r0
    851a:	e7e0      	b.n	84de <http_client_init+0x4a>
		return -EINVAL;
    851c:	2016      	movs	r0, #22
    851e:	4240      	negs	r0, r0
    8520:	e7dd      	b.n	84de <http_client_init+0x4a>
		return -EINVAL;
    8522:	2016      	movs	r0, #22
    8524:	4240      	negs	r0, r0
    8526:	e7da      	b.n	84de <http_client_init+0x4a>
		return -EINVAL;
    8528:	2016      	movs	r0, #22
    852a:	4240      	negs	r0, r0
    852c:	e7d7      	b.n	84de <http_client_init+0x4a>
			return -ENOMEM;
    852e:	200c      	movs	r0, #12
    8530:	4240      	negs	r0, r0
    8532:	e7d4      	b.n	84de <http_client_init+0x4a>
    8534:	0000a1db 	.word	0x0000a1db
    8538:	0000a1a5 	.word	0x0000a1a5
    853c:	0000a17d 	.word	0x0000a17d
    8540:	00008659 	.word	0x00008659
    8544:	00009521 	.word	0x00009521

00008548 <http_client_register_callback>:
	if (module == NULL) {
    8548:	2800      	cmp	r0, #0
    854a:	d002      	beq.n	8552 <http_client_register_callback+0xa>
	module->cb = callback;
    854c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    854e:	2000      	movs	r0, #0
}
    8550:	4770      	bx	lr
		return -EINVAL;
    8552:	2016      	movs	r0, #22
    8554:	4240      	negs	r0, r0
    8556:	e7fb      	b.n	8550 <http_client_register_callback+0x8>

00008558 <_http_client_clear_conn>:
{
    8558:	b5f0      	push	{r4, r5, r6, r7, lr}
    855a:	b085      	sub	sp, #20
    855c:	0004      	movs	r4, r0
    855e:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    8560:	23c0      	movs	r3, #192	; 0xc0
    8562:	58c3      	ldr	r3, [r0, r3]
    8564:	2b00      	cmp	r3, #0
    8566:	d002      	beq.n	856e <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    8568:	22c4      	movs	r2, #196	; 0xc4
    856a:	5880      	ldr	r0, [r0, r2]
    856c:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    856e:	0020      	movs	r0, r4
    8570:	30b0      	adds	r0, #176	; 0xb0
    8572:	2218      	movs	r2, #24
    8574:	2100      	movs	r1, #0
    8576:	4b17      	ldr	r3, [pc, #92]	; (85d4 <_http_client_clear_conn+0x7c>)
    8578:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    857a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    857c:	2b00      	cmp	r3, #0
    857e:	d124      	bne.n	85ca <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    8580:	2300      	movs	r3, #0
    8582:	56e3      	ldrsb	r3, [r4, r3]
    8584:	009b      	lsls	r3, r3, #2
    8586:	2500      	movs	r5, #0
    8588:	4a13      	ldr	r2, [pc, #76]	; (85d8 <_http_client_clear_conn+0x80>)
    858a:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    858c:	0020      	movs	r0, r4
    858e:	306c      	adds	r0, #108	; 0x6c
    8590:	226c      	movs	r2, #108	; 0x6c
    8592:	2100      	movs	r1, #0
    8594:	4f0f      	ldr	r7, [pc, #60]	; (85d4 <_http_client_clear_conn+0x7c>)
    8596:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    8598:	0020      	movs	r0, r4
    859a:	30d8      	adds	r0, #216	; 0xd8
    859c:	2210      	movs	r2, #16
    859e:	2100      	movs	r1, #0
    85a0:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    85a2:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    85a4:	23d8      	movs	r3, #216	; 0xd8
    85a6:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    85a8:	2241      	movs	r2, #65	; 0x41
    85aa:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    85ac:	2101      	movs	r1, #1
    85ae:	438b      	bics	r3, r1
    85b0:	3101      	adds	r1, #1
    85b2:	438b      	bics	r3, r1
    85b4:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    85b6:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    85b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    85ba:	2b00      	cmp	r3, #0
    85bc:	d003      	beq.n	85c6 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    85be:	aa01      	add	r2, sp, #4
    85c0:	3102      	adds	r1, #2
    85c2:	0020      	movs	r0, r4
    85c4:	4798      	blx	r3
}
    85c6:	b005      	add	sp, #20
    85c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    85ca:	2000      	movs	r0, #0
    85cc:	5620      	ldrsb	r0, [r4, r0]
    85ce:	4b03      	ldr	r3, [pc, #12]	; (85dc <_http_client_clear_conn+0x84>)
    85d0:	4798      	blx	r3
    85d2:	e7d5      	b.n	8580 <_http_client_clear_conn+0x28>
    85d4:	0000a1db 	.word	0x0000a1db
    85d8:	200003f4 	.word	0x200003f4
    85dc:	00004135 	.word	0x00004135

000085e0 <http_client_socket_resolve_handler>:
{
    85e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85e2:	b087      	sub	sp, #28
    85e4:	9000      	str	r0, [sp, #0]
    85e6:	9101      	str	r1, [sp, #4]
    85e8:	4c17      	ldr	r4, [pc, #92]	; (8648 <http_client_socket_resolve_handler+0x68>)
    85ea:	0026      	movs	r6, r4
    85ec:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    85ee:	4f17      	ldr	r7, [pc, #92]	; (864c <http_client_socket_resolve_handler+0x6c>)
    85f0:	e015      	b.n	861e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    85f2:	2302      	movs	r3, #2
    85f4:	aa02      	add	r2, sp, #8
    85f6:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    85f8:	334e      	adds	r3, #78	; 0x4e
    85fa:	5aeb      	ldrh	r3, [r5, r3]
    85fc:	021a      	lsls	r2, r3, #8
    85fe:	0a1b      	lsrs	r3, r3, #8
    8600:	4313      	orrs	r3, r2
    8602:	aa02      	add	r2, sp, #8
    8604:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    8606:	9b01      	ldr	r3, [sp, #4]
    8608:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    860a:	2000      	movs	r0, #0
    860c:	5628      	ldrsb	r0, [r5, r0]
    860e:	2210      	movs	r2, #16
    8610:	a902      	add	r1, sp, #8
    8612:	4b0f      	ldr	r3, [pc, #60]	; (8650 <http_client_socket_resolve_handler+0x70>)
    8614:	4798      	blx	r3
				return;
    8616:	e015      	b.n	8644 <http_client_socket_resolve_handler+0x64>
    8618:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    861a:	42b4      	cmp	r4, r6
    861c:	d012      	beq.n	8644 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    861e:	6825      	ldr	r5, [r4, #0]
    8620:	2d00      	cmp	r5, #0
    8622:	d0f9      	beq.n	8618 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    8624:	1c69      	adds	r1, r5, #1
    8626:	9800      	ldr	r0, [sp, #0]
    8628:	47b8      	blx	r7
    862a:	2800      	cmp	r0, #0
    862c:	d1f4      	bne.n	8618 <http_client_socket_resolve_handler+0x38>
    862e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8630:	2b01      	cmp	r3, #1
    8632:	d1f1      	bne.n	8618 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    8634:	9b01      	ldr	r3, [sp, #4]
    8636:	2b00      	cmp	r3, #0
    8638:	d1db      	bne.n	85f2 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    863a:	2176      	movs	r1, #118	; 0x76
    863c:	4249      	negs	r1, r1
    863e:	0028      	movs	r0, r5
    8640:	4b04      	ldr	r3, [pc, #16]	; (8654 <http_client_socket_resolve_handler+0x74>)
    8642:	4798      	blx	r3
}
    8644:	b007      	add	sp, #28
    8646:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8648:	200003f4 	.word	0x200003f4
    864c:	0000a641 	.word	0x0000a641
    8650:	00003f79 	.word	0x00003f79
    8654:	00008559 	.word	0x00008559

00008658 <http_client_timer_callback>:
{
    8658:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    865a:	2a00      	cmp	r2, #0
    865c:	d004      	beq.n	8668 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    865e:	213e      	movs	r1, #62	; 0x3e
    8660:	4249      	negs	r1, r1
    8662:	0010      	movs	r0, r2
    8664:	4b01      	ldr	r3, [pc, #4]	; (866c <http_client_timer_callback+0x14>)
    8666:	4798      	blx	r3
}
    8668:	bd10      	pop	{r4, pc}
    866a:	46c0      	nop			; (mov r8, r8)
    866c:	00008559 	.word	0x00008559

00008670 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    8670:	b5f0      	push	{r4, r5, r6, r7, lr}
    8672:	46de      	mov	lr, fp
    8674:	4657      	mov	r7, sl
    8676:	b580      	push	{r7, lr}
    8678:	b095      	sub	sp, #84	; 0x54
    867a:	af02      	add	r7, sp, #8
    867c:	0004      	movs	r4, r0
    867e:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8680:	2310      	movs	r3, #16
    8682:	2208      	movs	r2, #8
    8684:	18ba      	adds	r2, r7, r2
    8686:	18d2      	adds	r2, r2, r3
    8688:	4bb1      	ldr	r3, [pc, #708]	; (8950 <_http_client_request+0x2e0>)
    868a:	cb23      	ldmia	r3!, {r0, r1, r5}
    868c:	c223      	stmia	r2!, {r0, r1, r5}
    868e:	681b      	ldr	r3, [r3, #0]
    8690:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    8692:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8694:	1dd3      	adds	r3, r2, #7
    8696:	08db      	lsrs	r3, r3, #3
    8698:	00db      	lsls	r3, r3, #3
    869a:	4669      	mov	r1, sp
    869c:	1acb      	subs	r3, r1, r3
    869e:	469d      	mov	sp, r3
    86a0:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    86a2:	2c00      	cmp	r4, #0
    86a4:	d100      	bne.n	86a8 <_http_client_request+0x38>
    86a6:	e1f0      	b.n	8a8a <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    86a8:	2341      	movs	r3, #65	; 0x41
    86aa:	5ce3      	ldrb	r3, [r4, r3]
    86ac:	07db      	lsls	r3, r3, #31
    86ae:	d500      	bpl.n	86b2 <_http_client_request+0x42>
    86b0:	e1eb      	b.n	8a8a <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    86b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    86b4:	2b03      	cmp	r3, #3
    86b6:	d004      	beq.n	86c2 <_http_client_request+0x52>
    86b8:	2b04      	cmp	r3, #4
    86ba:	d100      	bne.n	86be <_http_client_request+0x4e>
    86bc:	e120      	b.n	8900 <_http_client_request+0x290>
    86be:	46dd      	mov	sp, fp
    86c0:	e1e4      	b.n	8a8c <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    86c2:	2300      	movs	r3, #0
    86c4:	21cc      	movs	r1, #204	; 0xcc
    86c6:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    86c8:	3104      	adds	r1, #4
    86ca:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    86cc:	9400      	str	r4, [sp, #0]
    86ce:	4ba1      	ldr	r3, [pc, #644]	; (8954 <_http_client_request+0x2e4>)
    86d0:	0031      	movs	r1, r6
    86d2:	202c      	movs	r0, #44	; 0x2c
    86d4:	2508      	movs	r5, #8
    86d6:	46ac      	mov	ip, r5
    86d8:	44bc      	add	ip, r7
    86da:	4460      	add	r0, ip
    86dc:	4d9e      	ldr	r5, [pc, #632]	; (8958 <_http_client_request+0x2e8>)
    86de:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    86e0:	23c8      	movs	r3, #200	; 0xc8
    86e2:	5ce3      	ldrb	r3, [r4, r3]
    86e4:	2b01      	cmp	r3, #1
    86e6:	d100      	bne.n	86ea <_http_client_request+0x7a>
    86e8:	e0a9      	b.n	883e <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    86ea:	2b02      	cmp	r3, #2
    86ec:	d100      	bne.n	86f0 <_http_client_request+0x80>
    86ee:	e0af      	b.n	8850 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    86f0:	2b03      	cmp	r3, #3
    86f2:	d100      	bne.n	86f6 <_http_client_request+0x86>
    86f4:	e0b5      	b.n	8862 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    86f6:	2b04      	cmp	r3, #4
    86f8:	d100      	bne.n	86fc <_http_client_request+0x8c>
    86fa:	e0bb      	b.n	8874 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    86fc:	2b05      	cmp	r3, #5
    86fe:	d100      	bne.n	8702 <_http_client_request+0x92>
    8700:	e0c1      	b.n	8886 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    8702:	2b06      	cmp	r3, #6
    8704:	d100      	bne.n	8708 <_http_client_request+0x98>
    8706:	e0c7      	b.n	8898 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    8708:	0025      	movs	r5, r4
    870a:	3570      	adds	r5, #112	; 0x70
    870c:	0028      	movs	r0, r5
    870e:	4b93      	ldr	r3, [pc, #588]	; (895c <_http_client_request+0x2ec>)
    8710:	469a      	mov	sl, r3
    8712:	4798      	blx	r3
    8714:	0002      	movs	r2, r0
    8716:	0029      	movs	r1, r5
    8718:	232c      	movs	r3, #44	; 0x2c
    871a:	2008      	movs	r0, #8
    871c:	1838      	adds	r0, r7, r0
    871e:	18c0      	adds	r0, r0, r3
    8720:	4d8f      	ldr	r5, [pc, #572]	; (8960 <_http_client_request+0x2f0>)
    8722:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    8724:	220b      	movs	r2, #11
    8726:	498f      	ldr	r1, [pc, #572]	; (8964 <_http_client_request+0x2f4>)
    8728:	232c      	movs	r3, #44	; 0x2c
    872a:	2008      	movs	r0, #8
    872c:	1838      	adds	r0, r7, r0
    872e:	18c0      	adds	r0, r0, r3
    8730:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    8732:	220c      	movs	r2, #12
    8734:	498c      	ldr	r1, [pc, #560]	; (8968 <_http_client_request+0x2f8>)
    8736:	232c      	movs	r3, #44	; 0x2c
    8738:	2008      	movs	r0, #8
    873a:	1838      	adds	r0, r7, r0
    873c:	18c0      	adds	r0, r0, r3
    873e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    8740:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8742:	607b      	str	r3, [r7, #4]
    8744:	0018      	movs	r0, r3
    8746:	47d0      	blx	sl
    8748:	0002      	movs	r2, r0
    874a:	6879      	ldr	r1, [r7, #4]
    874c:	232c      	movs	r3, #44	; 0x2c
    874e:	2008      	movs	r0, #8
    8750:	1838      	adds	r0, r7, r0
    8752:	18c0      	adds	r0, r0, r3
    8754:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8756:	2202      	movs	r2, #2
    8758:	4984      	ldr	r1, [pc, #528]	; (896c <_http_client_request+0x2fc>)
    875a:	232c      	movs	r3, #44	; 0x2c
    875c:	2008      	movs	r0, #8
    875e:	1838      	adds	r0, r7, r0
    8760:	18c0      	adds	r0, r0, r3
    8762:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    8764:	2206      	movs	r2, #6
    8766:	4982      	ldr	r1, [pc, #520]	; (8970 <_http_client_request+0x300>)
    8768:	232c      	movs	r3, #44	; 0x2c
    876a:	2008      	movs	r0, #8
    876c:	1838      	adds	r0, r7, r0
    876e:	18c0      	adds	r0, r0, r3
    8770:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    8772:	1c63      	adds	r3, r4, #1
    8774:	607b      	str	r3, [r7, #4]
    8776:	0018      	movs	r0, r3
    8778:	47d0      	blx	sl
    877a:	0002      	movs	r2, r0
    877c:	6879      	ldr	r1, [r7, #4]
    877e:	232c      	movs	r3, #44	; 0x2c
    8780:	2008      	movs	r0, #8
    8782:	1838      	adds	r0, r7, r0
    8784:	18c0      	adds	r0, r0, r3
    8786:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8788:	2202      	movs	r2, #2
    878a:	4978      	ldr	r1, [pc, #480]	; (896c <_http_client_request+0x2fc>)
    878c:	232c      	movs	r3, #44	; 0x2c
    878e:	2008      	movs	r0, #8
    8790:	1838      	adds	r0, r7, r0
    8792:	18c0      	adds	r0, r0, r3
    8794:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    8796:	2218      	movs	r2, #24
    8798:	4976      	ldr	r1, [pc, #472]	; (8974 <_http_client_request+0x304>)
    879a:	232c      	movs	r3, #44	; 0x2c
    879c:	2008      	movs	r0, #8
    879e:	1838      	adds	r0, r7, r0
    87a0:	18c0      	adds	r0, r0, r3
    87a2:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    87a4:	2213      	movs	r2, #19
    87a6:	4974      	ldr	r1, [pc, #464]	; (8978 <_http_client_request+0x308>)
    87a8:	232c      	movs	r3, #44	; 0x2c
    87aa:	2008      	movs	r0, #8
    87ac:	1838      	adds	r0, r7, r0
    87ae:	18c0      	adds	r0, r0, r3
    87b0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    87b2:	2217      	movs	r2, #23
    87b4:	4971      	ldr	r1, [pc, #452]	; (897c <_http_client_request+0x30c>)
    87b6:	232c      	movs	r3, #44	; 0x2c
    87b8:	2008      	movs	r0, #8
    87ba:	1838      	adds	r0, r7, r0
    87bc:	18c0      	adds	r0, r0, r3
    87be:	47a8      	blx	r5

		if (entity->read != NULL) {
    87c0:	0023      	movs	r3, r4
    87c2:	33b0      	adds	r3, #176	; 0xb0
    87c4:	68db      	ldr	r3, [r3, #12]
    87c6:	2b00      	cmp	r3, #0
    87c8:	d07b      	beq.n	88c2 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    87ca:	23b0      	movs	r3, #176	; 0xb0
    87cc:	5ce3      	ldrb	r3, [r4, r3]
    87ce:	2b00      	cmp	r3, #0
    87d0:	d16b      	bne.n	88aa <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    87d2:	0023      	movs	r3, r4
    87d4:	33b0      	adds	r3, #176	; 0xb0
    87d6:	689b      	ldr	r3, [r3, #8]
    87d8:	2b00      	cmp	r3, #0
    87da:	d072      	beq.n	88c2 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    87dc:	0022      	movs	r2, r4
    87de:	32b0      	adds	r2, #176	; 0xb0
    87e0:	6950      	ldr	r0, [r2, #20]
    87e2:	4798      	blx	r3
    87e4:	23cc      	movs	r3, #204	; 0xcc
    87e6:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    87e8:	2800      	cmp	r0, #0
    87ea:	da00      	bge.n	87ee <_http_client_request+0x17e>
    87ec:	e0ac      	b.n	8948 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    87ee:	0002      	movs	r2, r0
    87f0:	4963      	ldr	r1, [pc, #396]	; (8980 <_http_client_request+0x310>)
    87f2:	2320      	movs	r3, #32
    87f4:	2008      	movs	r0, #8
    87f6:	1838      	adds	r0, r7, r0
    87f8:	18c0      	adds	r0, r0, r3
    87fa:	4b62      	ldr	r3, [pc, #392]	; (8984 <_http_client_request+0x314>)
    87fc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    87fe:	2210      	movs	r2, #16
    8800:	4961      	ldr	r1, [pc, #388]	; (8988 <_http_client_request+0x318>)
    8802:	232c      	movs	r3, #44	; 0x2c
    8804:	2008      	movs	r0, #8
    8806:	1838      	adds	r0, r7, r0
    8808:	18c0      	adds	r0, r0, r3
    880a:	4d55      	ldr	r5, [pc, #340]	; (8960 <_http_client_request+0x2f0>)
    880c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    880e:	2320      	movs	r3, #32
    8810:	2208      	movs	r2, #8
    8812:	18ba      	adds	r2, r7, r2
    8814:	18d0      	adds	r0, r2, r3
    8816:	4b51      	ldr	r3, [pc, #324]	; (895c <_http_client_request+0x2ec>)
    8818:	4798      	blx	r3
    881a:	0002      	movs	r2, r0
    881c:	2320      	movs	r3, #32
    881e:	2108      	movs	r1, #8
    8820:	1879      	adds	r1, r7, r1
    8822:	18c9      	adds	r1, r1, r3
    8824:	330c      	adds	r3, #12
    8826:	2008      	movs	r0, #8
    8828:	1838      	adds	r0, r7, r0
    882a:	18c0      	adds	r0, r0, r3
    882c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    882e:	2202      	movs	r2, #2
    8830:	494e      	ldr	r1, [pc, #312]	; (896c <_http_client_request+0x2fc>)
    8832:	232c      	movs	r3, #44	; 0x2c
    8834:	2008      	movs	r0, #8
    8836:	1838      	adds	r0, r7, r0
    8838:	18c0      	adds	r0, r0, r3
    883a:	47a8      	blx	r5
    883c:	e041      	b.n	88c2 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    883e:	2204      	movs	r2, #4
    8840:	4952      	ldr	r1, [pc, #328]	; (898c <_http_client_request+0x31c>)
    8842:	332b      	adds	r3, #43	; 0x2b
    8844:	2008      	movs	r0, #8
    8846:	1838      	adds	r0, r7, r0
    8848:	18c0      	adds	r0, r0, r3
    884a:	4b45      	ldr	r3, [pc, #276]	; (8960 <_http_client_request+0x2f0>)
    884c:	4798      	blx	r3
    884e:	e75b      	b.n	8708 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    8850:	2205      	movs	r2, #5
    8852:	494f      	ldr	r1, [pc, #316]	; (8990 <_http_client_request+0x320>)
    8854:	332a      	adds	r3, #42	; 0x2a
    8856:	2008      	movs	r0, #8
    8858:	1838      	adds	r0, r7, r0
    885a:	18c0      	adds	r0, r0, r3
    885c:	4b40      	ldr	r3, [pc, #256]	; (8960 <_http_client_request+0x2f0>)
    885e:	4798      	blx	r3
    8860:	e752      	b.n	8708 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    8862:	2207      	movs	r2, #7
    8864:	494b      	ldr	r1, [pc, #300]	; (8994 <_http_client_request+0x324>)
    8866:	3329      	adds	r3, #41	; 0x29
    8868:	2008      	movs	r0, #8
    886a:	1838      	adds	r0, r7, r0
    886c:	18c0      	adds	r0, r0, r3
    886e:	4b3c      	ldr	r3, [pc, #240]	; (8960 <_http_client_request+0x2f0>)
    8870:	4798      	blx	r3
    8872:	e749      	b.n	8708 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    8874:	2204      	movs	r2, #4
    8876:	4948      	ldr	r1, [pc, #288]	; (8998 <_http_client_request+0x328>)
    8878:	3328      	adds	r3, #40	; 0x28
    887a:	2008      	movs	r0, #8
    887c:	1838      	adds	r0, r7, r0
    887e:	18c0      	adds	r0, r0, r3
    8880:	4b37      	ldr	r3, [pc, #220]	; (8960 <_http_client_request+0x2f0>)
    8882:	4798      	blx	r3
    8884:	e740      	b.n	8708 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    8886:	2208      	movs	r2, #8
    8888:	4944      	ldr	r1, [pc, #272]	; (899c <_http_client_request+0x32c>)
    888a:	3327      	adds	r3, #39	; 0x27
    888c:	2008      	movs	r0, #8
    888e:	1838      	adds	r0, r7, r0
    8890:	18c0      	adds	r0, r0, r3
    8892:	4b33      	ldr	r3, [pc, #204]	; (8960 <_http_client_request+0x2f0>)
    8894:	4798      	blx	r3
    8896:	e737      	b.n	8708 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    8898:	2205      	movs	r2, #5
    889a:	4941      	ldr	r1, [pc, #260]	; (89a0 <_http_client_request+0x330>)
    889c:	3326      	adds	r3, #38	; 0x26
    889e:	2008      	movs	r0, #8
    88a0:	1838      	adds	r0, r7, r0
    88a2:	18c0      	adds	r0, r0, r3
    88a4:	4b2e      	ldr	r3, [pc, #184]	; (8960 <_http_client_request+0x2f0>)
    88a6:	4798      	blx	r3
    88a8:	e72e      	b.n	8708 <_http_client_request+0x98>
				module->req.content_length = -1;
    88aa:	2201      	movs	r2, #1
    88ac:	4252      	negs	r2, r2
    88ae:	23cc      	movs	r3, #204	; 0xcc
    88b0:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    88b2:	321d      	adds	r2, #29
    88b4:	493b      	ldr	r1, [pc, #236]	; (89a4 <_http_client_request+0x334>)
    88b6:	3ba0      	subs	r3, #160	; 0xa0
    88b8:	2008      	movs	r0, #8
    88ba:	1838      	adds	r0, r7, r0
    88bc:	18c0      	adds	r0, r0, r3
    88be:	4b28      	ldr	r3, [pc, #160]	; (8960 <_http_client_request+0x2f0>)
    88c0:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    88c2:	23d4      	movs	r3, #212	; 0xd4
    88c4:	58e5      	ldr	r5, [r4, r3]
    88c6:	2d00      	cmp	r5, #0
    88c8:	d00a      	beq.n	88e0 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    88ca:	0028      	movs	r0, r5
    88cc:	4b23      	ldr	r3, [pc, #140]	; (895c <_http_client_request+0x2ec>)
    88ce:	4798      	blx	r3
    88d0:	0002      	movs	r2, r0
    88d2:	0029      	movs	r1, r5
    88d4:	232c      	movs	r3, #44	; 0x2c
    88d6:	2008      	movs	r0, #8
    88d8:	1838      	adds	r0, r7, r0
    88da:	18c0      	adds	r0, r0, r3
    88dc:	4b20      	ldr	r3, [pc, #128]	; (8960 <_http_client_request+0x2f0>)
    88de:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    88e0:	2202      	movs	r2, #2
    88e2:	4922      	ldr	r1, [pc, #136]	; (896c <_http_client_request+0x2fc>)
    88e4:	232c      	movs	r3, #44	; 0x2c
    88e6:	2008      	movs	r0, #8
    88e8:	1838      	adds	r0, r7, r0
    88ea:	18c0      	adds	r0, r0, r3
    88ec:	4b1c      	ldr	r3, [pc, #112]	; (8960 <_http_client_request+0x2f0>)
    88ee:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    88f0:	232c      	movs	r3, #44	; 0x2c
    88f2:	2208      	movs	r2, #8
    88f4:	18ba      	adds	r2, r7, r2
    88f6:	18d0      	adds	r0, r2, r3
    88f8:	4b2b      	ldr	r3, [pc, #172]	; (89a8 <_http_client_request+0x338>)
    88fa:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    88fc:	2304      	movs	r3, #4
    88fe:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    8900:	23cc      	movs	r3, #204	; 0xcc
    8902:	58e2      	ldr	r2, [r4, r3]
    8904:	2a00      	cmp	r2, #0
    8906:	db51      	blt.n	89ac <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    8908:	dc00      	bgt.n	890c <_http_client_request+0x29c>
    890a:	e0f0      	b.n	8aee <_http_client_request+0x47e>
    890c:	0023      	movs	r3, r4
    890e:	33b0      	adds	r3, #176	; 0xb0
    8910:	68dd      	ldr	r5, [r3, #12]
    8912:	2d00      	cmp	r5, #0
    8914:	d100      	bne.n	8918 <_http_client_request+0x2a8>
    8916:	e0ea      	b.n	8aee <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    8918:	23d0      	movs	r3, #208	; 0xd0
    891a:	58e3      	ldr	r3, [r4, r3]
    891c:	429a      	cmp	r2, r3
    891e:	dd00      	ble.n	8922 <_http_client_request+0x2b2>
    8920:	e0ba      	b.n	8a98 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    8922:	23c0      	movs	r3, #192	; 0xc0
    8924:	58e3      	ldr	r3, [r4, r3]
    8926:	2b00      	cmp	r3, #0
    8928:	d002      	beq.n	8930 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    892a:	22c4      	movs	r2, #196	; 0xc4
    892c:	58a0      	ldr	r0, [r4, r2]
    892e:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    8930:	2302      	movs	r3, #2
    8932:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    8934:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8936:	2b00      	cmp	r3, #0
    8938:	d100      	bne.n	893c <_http_client_request+0x2cc>
    893a:	e6c0      	b.n	86be <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    893c:	220c      	movs	r2, #12
    893e:	18ba      	adds	r2, r7, r2
    8940:	2101      	movs	r1, #1
    8942:	0020      	movs	r0, r4
    8944:	4798      	blx	r3
    8946:	e6ba      	b.n	86be <_http_client_request+0x4e>
					module->req.content_length = 0;
    8948:	2200      	movs	r2, #0
    894a:	50e2      	str	r2, [r4, r3]
    894c:	e7b9      	b.n	88c2 <_http_client_request+0x252>
    894e:	46c0      	nop			; (mov r8, r8)
    8950:	0000ce80 	.word	0x0000ce80
    8954:	00008401 	.word	0x00008401
    8958:	000093cd 	.word	0x000093cd
    895c:	0000a69f 	.word	0x0000a69f
    8960:	00009421 	.word	0x00009421
    8964:	0000cef4 	.word	0x0000cef4
    8968:	0000cf00 	.word	0x0000cf00
    896c:	0000d1bc 	.word	0x0000d1bc
    8970:	0000cf10 	.word	0x0000cf10
    8974:	0000cf18 	.word	0x0000cf18
    8978:	0000cf34 	.word	0x0000cf34
    897c:	0000cf48 	.word	0x0000cf48
    8980:	0000cf80 	.word	0x0000cf80
    8984:	0000a5fd 	.word	0x0000a5fd
    8988:	0000cf84 	.word	0x0000cf84
    898c:	0000cec0 	.word	0x0000cec0
    8990:	0000cec8 	.word	0x0000cec8
    8994:	0000ced0 	.word	0x0000ced0
    8998:	0000ced8 	.word	0x0000ced8
    899c:	0000cee0 	.word	0x0000cee0
    89a0:	0000ceec 	.word	0x0000ceec
    89a4:	0000cf60 	.word	0x0000cf60
    89a8:	000093dd 	.word	0x000093dd
		if (module->req.content_length < 0 && entity->read) {
    89ac:	0023      	movs	r3, r4
    89ae:	33b0      	adds	r3, #176	; 0xb0
    89b0:	68dd      	ldr	r5, [r3, #12]
    89b2:	2d00      	cmp	r5, #0
    89b4:	d100      	bne.n	89b8 <_http_client_request+0x348>
    89b6:	e09a      	b.n	8aee <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    89b8:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    89ba:	58e3      	ldr	r3, [r4, r3]
    89bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
    89be:	3a07      	subs	r2, #7
    89c0:	1d71      	adds	r1, r6, #5
    89c2:	0020      	movs	r0, r4
    89c4:	30b0      	adds	r0, #176	; 0xb0
    89c6:	6940      	ldr	r0, [r0, #20]
    89c8:	47a8      	blx	r5
    89ca:	0005      	movs	r5, r0
    89cc:	43c3      	mvns	r3, r0
    89ce:	17db      	asrs	r3, r3, #31
    89d0:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    89d2:	220a      	movs	r2, #10
    89d4:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    89d6:	210d      	movs	r1, #13
    89d8:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    89da:	1973      	adds	r3, r6, r5
    89dc:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    89de:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    89e0:	230f      	movs	r3, #15
    89e2:	402b      	ands	r3, r5
    89e4:	3206      	adds	r2, #6
    89e6:	3905      	subs	r1, #5
    89e8:	468c      	mov	ip, r1
    89ea:	44bc      	add	ip, r7
    89ec:	4462      	add	r2, ip
    89ee:	5cd3      	ldrb	r3, [r2, r3]
    89f0:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    89f2:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    89f4:	2d0f      	cmp	r5, #15
    89f6:	dd0d      	ble.n	8a14 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    89f8:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    89fa:	17eb      	asrs	r3, r5, #31
    89fc:	220f      	movs	r2, #15
    89fe:	4013      	ands	r3, r2
    8a00:	195b      	adds	r3, r3, r5
    8a02:	111b      	asrs	r3, r3, #4
    8a04:	4013      	ands	r3, r2
    8a06:	3201      	adds	r2, #1
    8a08:	2008      	movs	r0, #8
    8a0a:	4684      	mov	ip, r0
    8a0c:	44bc      	add	ip, r7
    8a0e:	4462      	add	r2, ip
    8a10:	5cd3      	ldrb	r3, [r2, r3]
    8a12:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    8a14:	2dff      	cmp	r5, #255	; 0xff
    8a16:	dd0d      	ble.n	8a34 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    8a18:	17ea      	asrs	r2, r5, #31
    8a1a:	23ff      	movs	r3, #255	; 0xff
    8a1c:	4013      	ands	r3, r2
    8a1e:	195b      	adds	r3, r3, r5
    8a20:	051b      	lsls	r3, r3, #20
    8a22:	0f1b      	lsrs	r3, r3, #28
    8a24:	2210      	movs	r2, #16
    8a26:	2108      	movs	r1, #8
    8a28:	468c      	mov	ip, r1
    8a2a:	44bc      	add	ip, r7
    8a2c:	4462      	add	r2, ip
    8a2e:	5cd3      	ldrb	r3, [r2, r3]
    8a30:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    8a32:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    8a34:	1cca      	adds	r2, r1, #3
    8a36:	1b92      	subs	r2, r2, r6
    8a38:	1d2b      	adds	r3, r5, #4
    8a3a:	18d2      	adds	r2, r2, r3
    8a3c:	b292      	uxth	r2, r2
    8a3e:	2000      	movs	r0, #0
    8a40:	5620      	ldrsb	r0, [r4, r0]
    8a42:	2300      	movs	r3, #0
    8a44:	4e30      	ldr	r6, [pc, #192]	; (8b08 <_http_client_request+0x498>)
    8a46:	47b0      	blx	r6
    8a48:	2800      	cmp	r0, #0
    8a4a:	db19      	blt.n	8a80 <_http_client_request+0x410>
			module->req.sent_length += size;
    8a4c:	22d0      	movs	r2, #208	; 0xd0
    8a4e:	58a3      	ldr	r3, [r4, r2]
    8a50:	195b      	adds	r3, r3, r5
    8a52:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    8a54:	2d00      	cmp	r5, #0
    8a56:	d000      	beq.n	8a5a <_http_client_request+0x3ea>
    8a58:	e631      	b.n	86be <_http_client_request+0x4e>
				if (module->req.entity.close) {
    8a5a:	23c0      	movs	r3, #192	; 0xc0
    8a5c:	58e3      	ldr	r3, [r4, r3]
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d002      	beq.n	8a68 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    8a62:	3a0c      	subs	r2, #12
    8a64:	58a0      	ldr	r0, [r4, r2]
    8a66:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    8a68:	2302      	movs	r3, #2
    8a6a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    8a6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8a6e:	2b00      	cmp	r3, #0
    8a70:	d100      	bne.n	8a74 <_http_client_request+0x404>
    8a72:	e624      	b.n	86be <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    8a74:	220c      	movs	r2, #12
    8a76:	18ba      	adds	r2, r7, r2
    8a78:	2101      	movs	r1, #1
    8a7a:	0020      	movs	r0, r4
    8a7c:	4798      	blx	r3
    8a7e:	e61e      	b.n	86be <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    8a80:	2105      	movs	r1, #5
    8a82:	4249      	negs	r1, r1
    8a84:	0020      	movs	r0, r4
    8a86:	4b21      	ldr	r3, [pc, #132]	; (8b0c <_http_client_request+0x49c>)
    8a88:	4798      	blx	r3
    8a8a:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    8a8c:	46bd      	mov	sp, r7
    8a8e:	b013      	add	sp, #76	; 0x4c
    8a90:	bc0c      	pop	{r2, r3}
    8a92:	4692      	mov	sl, r2
    8a94:	469b      	mov	fp, r3
    8a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    8a98:	0022      	movs	r2, r4
    8a9a:	32b0      	adds	r2, #176	; 0xb0
    8a9c:	6950      	ldr	r0, [r2, #20]
    8a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8aa0:	0031      	movs	r1, r6
    8aa2:	47a8      	blx	r5
			if (size < 0) {
    8aa4:	2800      	cmp	r0, #0
    8aa6:	db16      	blt.n	8ad6 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    8aa8:	23cc      	movs	r3, #204	; 0xcc
    8aaa:	58e5      	ldr	r5, [r4, r3]
    8aac:	3304      	adds	r3, #4
    8aae:	58e3      	ldr	r3, [r4, r3]
    8ab0:	1aed      	subs	r5, r5, r3
    8ab2:	4285      	cmp	r5, r0
    8ab4:	dd00      	ble.n	8ab8 <_http_client_request+0x448>
    8ab6:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    8ab8:	b2aa      	uxth	r2, r5
    8aba:	2000      	movs	r0, #0
    8abc:	5620      	ldrsb	r0, [r4, r0]
    8abe:	2300      	movs	r3, #0
    8ac0:	0031      	movs	r1, r6
    8ac2:	4e11      	ldr	r6, [pc, #68]	; (8b08 <_http_client_request+0x498>)
    8ac4:	47b0      	blx	r6
    8ac6:	2800      	cmp	r0, #0
    8ac8:	db0b      	blt.n	8ae2 <_http_client_request+0x472>
				module->req.sent_length += size;
    8aca:	23d0      	movs	r3, #208	; 0xd0
    8acc:	58e2      	ldr	r2, [r4, r3]
    8ace:	4694      	mov	ip, r2
    8ad0:	4465      	add	r5, ip
    8ad2:	50e5      	str	r5, [r4, r3]
    8ad4:	e5f3      	b.n	86be <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    8ad6:	2105      	movs	r1, #5
    8ad8:	4249      	negs	r1, r1
    8ada:	0020      	movs	r0, r4
    8adc:	4b0b      	ldr	r3, [pc, #44]	; (8b0c <_http_client_request+0x49c>)
    8ade:	4798      	blx	r3
    8ae0:	e5ed      	b.n	86be <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    8ae2:	2105      	movs	r1, #5
    8ae4:	4249      	negs	r1, r1
    8ae6:	0020      	movs	r0, r4
    8ae8:	4b08      	ldr	r3, [pc, #32]	; (8b0c <_http_client_request+0x49c>)
    8aea:	4798      	blx	r3
					return;
    8aec:	e7cd      	b.n	8a8a <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    8aee:	2302      	movs	r3, #2
    8af0:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    8af2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8af4:	2b00      	cmp	r3, #0
    8af6:	d100      	bne.n	8afa <_http_client_request+0x48a>
    8af8:	e5e1      	b.n	86be <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    8afa:	220c      	movs	r2, #12
    8afc:	18ba      	adds	r2, r7, r2
    8afe:	2101      	movs	r1, #1
    8b00:	0020      	movs	r0, r4
    8b02:	4798      	blx	r3
    8b04:	e5db      	b.n	86be <_http_client_request+0x4e>
    8b06:	46c0      	nop			; (mov r8, r8)
    8b08:	00004009 	.word	0x00004009
    8b0c:	00008559 	.word	0x00008559

00008b10 <http_client_send_request>:
{
    8b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b12:	46d6      	mov	lr, sl
    8b14:	b500      	push	{lr}
    8b16:	b088      	sub	sp, #32
    8b18:	0004      	movs	r4, r0
    8b1a:	000f      	movs	r7, r1
    8b1c:	4692      	mov	sl, r2
    8b1e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    8b20:	2800      	cmp	r0, #0
    8b22:	d100      	bne.n	8b26 <http_client_send_request+0x16>
    8b24:	e0d3      	b.n	8cce <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    8b26:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    8b28:	2b02      	cmp	r3, #2
    8b2a:	d900      	bls.n	8b2e <http_client_send_request+0x1e>
    8b2c:	e0d3      	b.n	8cd6 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    8b2e:	2207      	movs	r2, #7
    8b30:	4981      	ldr	r1, [pc, #516]	; (8d38 <http_client_send_request+0x228>)
    8b32:	0038      	movs	r0, r7
    8b34:	4b81      	ldr	r3, [pc, #516]	; (8d3c <http_client_send_request+0x22c>)
    8b36:	4798      	blx	r3
		i = 7;
    8b38:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    8b3a:	2800      	cmp	r0, #0
    8b3c:	d007      	beq.n	8b4e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    8b3e:	2208      	movs	r2, #8
    8b40:	497f      	ldr	r1, [pc, #508]	; (8d40 <http_client_send_request+0x230>)
    8b42:	0038      	movs	r0, r7
    8b44:	4b7d      	ldr	r3, [pc, #500]	; (8d3c <http_client_send_request+0x22c>)
    8b46:	4798      	blx	r3
		i = 8;
    8b48:	4246      	negs	r6, r0
    8b4a:	4146      	adcs	r6, r0
    8b4c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8b4e:	1c63      	adds	r3, r4, #1
    8b50:	19bd      	adds	r5, r7, r6
    8b52:	9302      	str	r3, [sp, #8]
    8b54:	0018      	movs	r0, r3
    8b56:	4b7b      	ldr	r3, [pc, #492]	; (8d44 <http_client_send_request+0x234>)
    8b58:	4798      	blx	r3
    8b5a:	0002      	movs	r2, r0
    8b5c:	0029      	movs	r1, r5
    8b5e:	9802      	ldr	r0, [sp, #8]
    8b60:	4b76      	ldr	r3, [pc, #472]	; (8d3c <http_client_send_request+0x22c>)
    8b62:	4798      	blx	r3
    8b64:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8b66:	782b      	ldrb	r3, [r5, #0]
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d052      	beq.n	8c12 <http_client_send_request+0x102>
    8b6c:	2b2f      	cmp	r3, #47	; 0x2f
    8b6e:	d052      	beq.n	8c16 <http_client_send_request+0x106>
    8b70:	1c71      	adds	r1, r6, #1
    8b72:	1879      	adds	r1, r7, r1
    8b74:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    8b76:	3201      	adds	r2, #1
    8b78:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    8b7a:	000d      	movs	r5, r1
    8b7c:	780b      	ldrb	r3, [r1, #0]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d002      	beq.n	8b88 <http_client_send_request+0x78>
    8b82:	3101      	adds	r1, #1
    8b84:	2b2f      	cmp	r3, #47	; 0x2f
    8b86:	d1f6      	bne.n	8b76 <http_client_send_request+0x66>
	module->host[j] = '\0';
    8b88:	18a2      	adds	r2, r4, r2
    8b8a:	2300      	movs	r3, #0
    8b8c:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    8b8e:	7863      	ldrb	r3, [r4, #1]
    8b90:	2b00      	cmp	r3, #0
    8b92:	d100      	bne.n	8b96 <http_client_send_request+0x86>
    8b94:	e0a3      	b.n	8cde <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    8b96:	0028      	movs	r0, r5
    8b98:	4b6a      	ldr	r3, [pc, #424]	; (8d44 <http_client_send_request+0x234>)
    8b9a:	4798      	blx	r3
    8b9c:	283f      	cmp	r0, #63	; 0x3f
    8b9e:	d900      	bls.n	8ba2 <http_client_send_request+0x92>
    8ba0:	e0a1      	b.n	8ce6 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    8ba2:	23d4      	movs	r3, #212	; 0xd4
    8ba4:	58e0      	ldr	r0, [r4, r3]
    8ba6:	2800      	cmp	r0, #0
    8ba8:	d001      	beq.n	8bae <http_client_send_request+0x9e>
		free(module->req.ext_header);
    8baa:	4b67      	ldr	r3, [pc, #412]	; (8d48 <http_client_send_request+0x238>)
    8bac:	4798      	blx	r3
	if (ext_header != NULL) {
    8bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d032      	beq.n	8c1a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    8bb4:	0018      	movs	r0, r3
    8bb6:	4b65      	ldr	r3, [pc, #404]	; (8d4c <http_client_send_request+0x23c>)
    8bb8:	4798      	blx	r3
    8bba:	23d4      	movs	r3, #212	; 0xd4
    8bbc:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    8bbe:	2800      	cmp	r0, #0
    8bc0:	d100      	bne.n	8bc4 <http_client_send_request+0xb4>
    8bc2:	e094      	b.n	8cee <http_client_send_request+0x1de>
	module->sending = 0;
    8bc4:	2241      	movs	r2, #65	; 0x41
    8bc6:	5ca3      	ldrb	r3, [r4, r2]
    8bc8:	2101      	movs	r1, #1
    8bca:	438b      	bics	r3, r1
    8bcc:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    8bce:	2300      	movs	r3, #0
    8bd0:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    8bd2:	782b      	ldrb	r3, [r5, #0]
    8bd4:	2b2f      	cmp	r3, #47	; 0x2f
    8bd6:	d024      	beq.n	8c22 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    8bd8:	222f      	movs	r2, #47	; 0x2f
    8bda:	2370      	movs	r3, #112	; 0x70
    8bdc:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    8bde:	782b      	ldrb	r3, [r5, #0]
    8be0:	2b00      	cmp	r3, #0
    8be2:	d124      	bne.n	8c2e <http_client_send_request+0x11e>
	if (entity != NULL) {
    8be4:	9b03      	ldr	r3, [sp, #12]
    8be6:	2b00      	cmp	r3, #0
    8be8:	d027      	beq.n	8c3a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    8bea:	0020      	movs	r0, r4
    8bec:	30b0      	adds	r0, #176	; 0xb0
    8bee:	2218      	movs	r2, #24
    8bf0:	0019      	movs	r1, r3
    8bf2:	4b57      	ldr	r3, [pc, #348]	; (8d50 <http_client_send_request+0x240>)
    8bf4:	4798      	blx	r3
	module->req.method = method;
    8bf6:	23c8      	movs	r3, #200	; 0xc8
    8bf8:	4652      	mov	r2, sl
    8bfa:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    8bfc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8bfe:	2b01      	cmp	r3, #1
    8c00:	d022      	beq.n	8c48 <http_client_send_request+0x138>
    8c02:	2b00      	cmp	r3, #0
    8c04:	d027      	beq.n	8c56 <http_client_send_request+0x146>
    8c06:	2b02      	cmp	r3, #2
    8c08:	d03a      	beq.n	8c80 <http_client_send_request+0x170>
		return -EAGAIN;
    8c0a:	230b      	movs	r3, #11
    8c0c:	425b      	negs	r3, r3
    8c0e:	9301      	str	r3, [sp, #4]
    8c10:	e08d      	b.n	8d2e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    8c12:	2200      	movs	r2, #0
    8c14:	e7b8      	b.n	8b88 <http_client_send_request+0x78>
    8c16:	2200      	movs	r2, #0
    8c18:	e7b6      	b.n	8b88 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    8c1a:	2200      	movs	r2, #0
    8c1c:	23d4      	movs	r3, #212	; 0xd4
    8c1e:	50e2      	str	r2, [r4, r3]
    8c20:	e7d0      	b.n	8bc4 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    8c22:	0020      	movs	r0, r4
    8c24:	3070      	adds	r0, #112	; 0x70
    8c26:	0029      	movs	r1, r5
    8c28:	4b4a      	ldr	r3, [pc, #296]	; (8d54 <http_client_send_request+0x244>)
    8c2a:	4798      	blx	r3
    8c2c:	e7da      	b.n	8be4 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    8c2e:	0029      	movs	r1, r5
    8c30:	0020      	movs	r0, r4
    8c32:	3071      	adds	r0, #113	; 0x71
    8c34:	4b47      	ldr	r3, [pc, #284]	; (8d54 <http_client_send_request+0x244>)
    8c36:	4798      	blx	r3
    8c38:	e7d4      	b.n	8be4 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    8c3a:	0020      	movs	r0, r4
    8c3c:	30b0      	adds	r0, #176	; 0xb0
    8c3e:	2218      	movs	r2, #24
    8c40:	2100      	movs	r1, #0
    8c42:	4b45      	ldr	r3, [pc, #276]	; (8d58 <http_client_send_request+0x248>)
    8c44:	4798      	blx	r3
    8c46:	e7d6      	b.n	8bf6 <http_client_send_request+0xe6>
		if (!reconnect) {
    8c48:	9b01      	ldr	r3, [sp, #4]
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d06f      	beq.n	8d2e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    8c4e:	2100      	movs	r1, #0
    8c50:	0020      	movs	r0, r4
    8c52:	4b42      	ldr	r3, [pc, #264]	; (8d5c <http_client_send_request+0x24c>)
    8c54:	4798      	blx	r3
		if (module->config.tls) {
    8c56:	2352      	movs	r3, #82	; 0x52
    8c58:	5ce2      	ldrb	r2, [r4, r3]
    8c5a:	1e53      	subs	r3, r2, #1
    8c5c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8c5e:	b2d2      	uxtb	r2, r2
    8c60:	2101      	movs	r1, #1
    8c62:	2002      	movs	r0, #2
    8c64:	4b3e      	ldr	r3, [pc, #248]	; (8d60 <http_client_send_request+0x250>)
    8c66:	4798      	blx	r3
    8c68:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    8c6a:	2800      	cmp	r0, #0
    8c6c:	db43      	blt.n	8cf6 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    8c6e:	0080      	lsls	r0, r0, #2
    8c70:	4b3c      	ldr	r3, [pc, #240]	; (8d64 <http_client_send_request+0x254>)
    8c72:	50c4      	str	r4, [r0, r3]
    8c74:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    8c76:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    8c78:	2620      	movs	r6, #32
			isv6 = 1;
    8c7a:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    8c7c:	2730      	movs	r7, #48	; 0x30
    8c7e:	e00c      	b.n	8c9a <http_client_send_request+0x18a>
		if (!reconnect) {
    8c80:	9b01      	ldr	r3, [sp, #4]
    8c82:	2b00      	cmp	r3, #0
    8c84:	d1e3      	bne.n	8c4e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    8c86:	3303      	adds	r3, #3
    8c88:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    8c8a:	0020      	movs	r0, r4
    8c8c:	4b36      	ldr	r3, [pc, #216]	; (8d68 <http_client_send_request+0x258>)
    8c8e:	4798      	blx	r3
			break;
    8c90:	e04d      	b.n	8d2e <http_client_send_request+0x21e>
			if (isv6) {
    8c92:	2900      	cmp	r1, #0
    8c94:	d001      	beq.n	8c9a <http_client_send_request+0x18a>
    8c96:	e012      	b.n	8cbe <http_client_send_request+0x1ae>
			isv6 = 1;
    8c98:	0001      	movs	r1, r0
	while (*host != '\0') {
    8c9a:	782a      	ldrb	r2, [r5, #0]
    8c9c:	2a00      	cmp	r2, #0
    8c9e:	d02e      	beq.n	8cfe <http_client_send_request+0x1ee>
		ch = *host++;
    8ca0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    8ca2:	0013      	movs	r3, r2
    8ca4:	43b3      	bics	r3, r6
    8ca6:	3b41      	subs	r3, #65	; 0x41
    8ca8:	2b05      	cmp	r3, #5
    8caa:	d9f5      	bls.n	8c98 <http_client_send_request+0x188>
    8cac:	2a3a      	cmp	r2, #58	; 0x3a
    8cae:	d00a      	beq.n	8cc6 <http_client_send_request+0x1b6>
    8cb0:	2a2f      	cmp	r2, #47	; 0x2f
    8cb2:	d00a      	beq.n	8cca <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    8cb4:	2a2e      	cmp	r2, #46	; 0x2e
    8cb6:	d0ec      	beq.n	8c92 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    8cb8:	403a      	ands	r2, r7
    8cba:	2a30      	cmp	r2, #48	; 0x30
    8cbc:	d0ed      	beq.n	8c9a <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    8cbe:	9802      	ldr	r0, [sp, #8]
    8cc0:	4b2a      	ldr	r3, [pc, #168]	; (8d6c <http_client_send_request+0x25c>)
    8cc2:	4798      	blx	r3
    8cc4:	e02f      	b.n	8d26 <http_client_send_request+0x216>
			isv6 = 1;
    8cc6:	0001      	movs	r1, r0
    8cc8:	e7e7      	b.n	8c9a <http_client_send_request+0x18a>
    8cca:	0001      	movs	r1, r0
    8ccc:	e7e5      	b.n	8c9a <http_client_send_request+0x18a>
		return -EINVAL;
    8cce:	2316      	movs	r3, #22
    8cd0:	425b      	negs	r3, r3
    8cd2:	9301      	str	r3, [sp, #4]
    8cd4:	e02b      	b.n	8d2e <http_client_send_request+0x21e>
		return -EBUSY;
    8cd6:	2310      	movs	r3, #16
    8cd8:	425b      	negs	r3, r3
    8cda:	9301      	str	r3, [sp, #4]
    8cdc:	e027      	b.n	8d2e <http_client_send_request+0x21e>
		return -EINVAL;
    8cde:	2316      	movs	r3, #22
    8ce0:	425b      	negs	r3, r3
    8ce2:	9301      	str	r3, [sp, #4]
    8ce4:	e023      	b.n	8d2e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    8ce6:	235b      	movs	r3, #91	; 0x5b
    8ce8:	425b      	negs	r3, r3
    8cea:	9301      	str	r3, [sp, #4]
    8cec:	e01f      	b.n	8d2e <http_client_send_request+0x21e>
			return -ENOMEM;
    8cee:	230c      	movs	r3, #12
    8cf0:	425b      	negs	r3, r3
    8cf2:	9301      	str	r3, [sp, #4]
    8cf4:	e01b      	b.n	8d2e <http_client_send_request+0x21e>
			return -ENOSPC;
    8cf6:	231c      	movs	r3, #28
    8cf8:	425b      	negs	r3, r3
    8cfa:	9301      	str	r3, [sp, #4]
    8cfc:	e017      	b.n	8d2e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    8cfe:	2302      	movs	r3, #2
    8d00:	aa04      	add	r2, sp, #16
    8d02:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    8d04:	334e      	adds	r3, #78	; 0x4e
    8d06:	5ae3      	ldrh	r3, [r4, r3]
    8d08:	021a      	lsls	r2, r3, #8
    8d0a:	0a1b      	lsrs	r3, r3, #8
    8d0c:	4313      	orrs	r3, r2
    8d0e:	aa04      	add	r2, sp, #16
    8d10:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    8d12:	9802      	ldr	r0, [sp, #8]
    8d14:	4b16      	ldr	r3, [pc, #88]	; (8d70 <http_client_send_request+0x260>)
    8d16:	4798      	blx	r3
    8d18:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8d1a:	2000      	movs	r0, #0
    8d1c:	5620      	ldrsb	r0, [r4, r0]
    8d1e:	2210      	movs	r2, #16
    8d20:	a904      	add	r1, sp, #16
    8d22:	4b14      	ldr	r3, [pc, #80]	; (8d74 <http_client_send_request+0x264>)
    8d24:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    8d26:	2301      	movs	r3, #1
    8d28:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    8d2a:	2300      	movs	r3, #0
    8d2c:	9301      	str	r3, [sp, #4]
}
    8d2e:	9801      	ldr	r0, [sp, #4]
    8d30:	b008      	add	sp, #32
    8d32:	bc04      	pop	{r2}
    8d34:	4692      	mov	sl, r2
    8d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d38:	0000cfa4 	.word	0x0000cfa4
    8d3c:	0000a6ad 	.word	0x0000a6ad
    8d40:	0000cfac 	.word	0x0000cfac
    8d44:	0000a69f 	.word	0x0000a69f
    8d48:	0000a191 	.word	0x0000a191
    8d4c:	0000a665 	.word	0x0000a665
    8d50:	0000a1a5 	.word	0x0000a1a5
    8d54:	0000a655 	.word	0x0000a655
    8d58:	0000a1db 	.word	0x0000a1db
    8d5c:	00008559 	.word	0x00008559
    8d60:	00003df5 	.word	0x00003df5
    8d64:	200003f4 	.word	0x200003f4
    8d68:	00008671 	.word	0x00008671
    8d6c:	0000423d 	.word	0x0000423d
    8d70:	000041d1 	.word	0x000041d1
    8d74:	00003f79 	.word	0x00003f79

00008d78 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    8d78:	b510      	push	{r4, lr}
	if (module == NULL) {
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d00d      	beq.n	8d9a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    8d7e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    8d80:	6e02      	ldr	r2, [r0, #96]	; 0x60
    8d82:	4291      	cmp	r1, r2
    8d84:	d20a      	bcs.n	8d9c <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    8d86:	1a52      	subs	r2, r2, r1
    8d88:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    8d8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    8d8c:	469c      	mov	ip, r3
    8d8e:	4461      	add	r1, ip
	recv(module->sock,
    8d90:	7800      	ldrb	r0, [r0, #0]
    8d92:	b240      	sxtb	r0, r0
    8d94:	2300      	movs	r3, #0
    8d96:	4c04      	ldr	r4, [pc, #16]	; (8da8 <_http_client_recv_packet+0x30>)
    8d98:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    8d9a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    8d9c:	218b      	movs	r1, #139	; 0x8b
    8d9e:	4249      	negs	r1, r1
    8da0:	4b02      	ldr	r3, [pc, #8]	; (8dac <_http_client_recv_packet+0x34>)
    8da2:	4798      	blx	r3
		return;
    8da4:	e7f9      	b.n	8d9a <_http_client_recv_packet+0x22>
    8da6:	46c0      	nop			; (mov r8, r8)
    8da8:	000040a1 	.word	0x000040a1
    8dac:	00008559 	.word	0x00008559

00008db0 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    8db0:	b570      	push	{r4, r5, r6, lr}
    8db2:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    8db4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    8db6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    8db8:	1a5c      	subs	r4, r3, r1
    8dba:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    8dbc:	2c00      	cmp	r4, #0
    8dbe:	dc02      	bgt.n	8dc6 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    8dc0:	2300      	movs	r3, #0
    8dc2:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    8dc4:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    8dc6:	0022      	movs	r2, r4
    8dc8:	4b01      	ldr	r3, [pc, #4]	; (8dd0 <_http_client_move_buffer+0x20>)
    8dca:	4798      	blx	r3
		module->recved_size = remain;
    8dcc:	646c      	str	r4, [r5, #68]	; 0x44
    8dce:	e7f9      	b.n	8dc4 <_http_client_move_buffer+0x14>
    8dd0:	0000a1b7 	.word	0x0000a1b7

00008dd4 <_http_client_handle_header>:
{
    8dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dd6:	46ce      	mov	lr, r9
    8dd8:	b500      	push	{lr}
    8dda:	b084      	sub	sp, #16
    8ddc:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    8dde:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    8de0:	4b62      	ldr	r3, [pc, #392]	; (8f6c <_http_client_handle_header+0x198>)
    8de2:	4699      	mov	r9, r3
    8de4:	e049      	b.n	8e7a <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    8de6:	0021      	movs	r1, r4
    8de8:	0038      	movs	r0, r7
    8dea:	4b61      	ldr	r3, [pc, #388]	; (8f70 <_http_client_handle_header+0x19c>)
    8dec:	4798      	blx	r3
			return 0;
    8dee:	2600      	movs	r6, #0
}
    8df0:	0030      	movs	r0, r6
    8df2:	b004      	add	sp, #16
    8df4:	bc04      	pop	{r2}
    8df6:	4691      	mov	r9, r2
    8df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    8dfa:	1ca1      	adds	r1, r4, #2
    8dfc:	0038      	movs	r0, r7
    8dfe:	4b5c      	ldr	r3, [pc, #368]	; (8f70 <_http_client_handle_header+0x19c>)
    8e00:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    8e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8e04:	2b00      	cmp	r3, #0
    8e06:	d00a      	beq.n	8e1e <_http_client_handle_header+0x4a>
    8e08:	22e4      	movs	r2, #228	; 0xe4
    8e0a:	5ab9      	ldrh	r1, [r7, r2]
    8e0c:	2900      	cmp	r1, #0
    8e0e:	d006      	beq.n	8e1e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    8e10:	3a08      	subs	r2, #8
    8e12:	58b8      	ldr	r0, [r7, r2]
    8e14:	2800      	cmp	r0, #0
    8e16:	db07      	blt.n	8e28 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    8e18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    8e1a:	4290      	cmp	r0, r2
    8e1c:	dc10      	bgt.n	8e40 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    8e1e:	2201      	movs	r2, #1
    8e20:	23d8      	movs	r3, #216	; 0xd8
    8e22:	50fa      	str	r2, [r7, r3]
			return 1;
    8e24:	2601      	movs	r6, #1
    8e26:	e7e3      	b.n	8df0 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    8e28:	aa01      	add	r2, sp, #4
    8e2a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    8e2c:	2101      	movs	r1, #1
    8e2e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    8e30:	2100      	movs	r1, #0
    8e32:	20e0      	movs	r0, #224	; 0xe0
    8e34:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    8e36:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8e38:	3102      	adds	r1, #2
    8e3a:	0038      	movs	r0, r7
    8e3c:	4798      	blx	r3
    8e3e:	e7ee      	b.n	8e1e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    8e40:	aa01      	add	r2, sp, #4
    8e42:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    8e44:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    8e46:	2100      	movs	r1, #0
    8e48:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    8e4a:	20e0      	movs	r0, #224	; 0xe0
    8e4c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8e4e:	3102      	adds	r1, #2
    8e50:	0038      	movs	r0, r7
    8e52:	4798      	blx	r3
    8e54:	e7e3      	b.n	8e1e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    8e56:	0020      	movs	r0, r4
    8e58:	3010      	adds	r0, #16
    8e5a:	4b46      	ldr	r3, [pc, #280]	; (8f74 <_http_client_handle_header+0x1a0>)
    8e5c:	4798      	blx	r3
    8e5e:	23dc      	movs	r3, #220	; 0xdc
    8e60:	50f8      	str	r0, [r7, r3]
    8e62:	e009      	b.n	8e78 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8e64:	3201      	adds	r2, #1
    8e66:	4295      	cmp	r5, r2
    8e68:	d006      	beq.n	8e78 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8e6a:	7813      	ldrb	r3, [r2, #0]
    8e6c:	2b20      	cmp	r3, #32
    8e6e:	d12b      	bne.n	8ec8 <_http_client_handle_header+0xf4>
    8e70:	e7f8      	b.n	8e64 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    8e72:	3a21      	subs	r2, #33	; 0x21
    8e74:	3389      	adds	r3, #137	; 0x89
    8e76:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    8e78:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    8e7a:	493f      	ldr	r1, [pc, #252]	; (8f78 <_http_client_handle_header+0x1a4>)
    8e7c:	0020      	movs	r0, r4
    8e7e:	47c8      	blx	r9
    8e80:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    8e82:	d0b0      	beq.n	8de6 <_http_client_handle_header+0x12>
    8e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8e88:	4694      	mov	ip, r2
    8e8a:	4463      	add	r3, ip
    8e8c:	4298      	cmp	r0, r3
    8e8e:	d2aa      	bcs.n	8de6 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    8e90:	2202      	movs	r2, #2
    8e92:	4939      	ldr	r1, [pc, #228]	; (8f78 <_http_client_handle_header+0x1a4>)
    8e94:	0020      	movs	r0, r4
    8e96:	4b39      	ldr	r3, [pc, #228]	; (8f7c <_http_client_handle_header+0x1a8>)
    8e98:	4798      	blx	r3
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d0ad      	beq.n	8dfa <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    8e9e:	2210      	movs	r2, #16
    8ea0:	4937      	ldr	r1, [pc, #220]	; (8f80 <_http_client_handle_header+0x1ac>)
    8ea2:	0020      	movs	r0, r4
    8ea4:	4b35      	ldr	r3, [pc, #212]	; (8f7c <_http_client_handle_header+0x1a8>)
    8ea6:	4798      	blx	r3
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d0d4      	beq.n	8e56 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    8eac:	2213      	movs	r2, #19
    8eae:	4935      	ldr	r1, [pc, #212]	; (8f84 <_http_client_handle_header+0x1b0>)
    8eb0:	0020      	movs	r0, r4
    8eb2:	4b32      	ldr	r3, [pc, #200]	; (8f7c <_http_client_handle_header+0x1a8>)
    8eb4:	4798      	blx	r3
    8eb6:	1e06      	subs	r6, r0, #0
    8eb8:	d110      	bne.n	8edc <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    8eba:	0022      	movs	r2, r4
    8ebc:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8ebe:	4295      	cmp	r5, r2
    8ec0:	d9da      	bls.n	8e78 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8ec2:	7ce3      	ldrb	r3, [r4, #19]
    8ec4:	2b20      	cmp	r3, #32
    8ec6:	d0cd      	beq.n	8e64 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    8ec8:	2220      	movs	r2, #32
    8eca:	4393      	bics	r3, r2
    8ecc:	2b43      	cmp	r3, #67	; 0x43
    8ece:	d0d0      	beq.n	8e72 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    8ed0:	2186      	movs	r1, #134	; 0x86
    8ed2:	4249      	negs	r1, r1
    8ed4:	0038      	movs	r0, r7
    8ed6:	4b2c      	ldr	r3, [pc, #176]	; (8f88 <_http_client_handle_header+0x1b4>)
    8ed8:	4798      	blx	r3
					return 0;
    8eda:	e789      	b.n	8df0 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    8edc:	220c      	movs	r2, #12
    8ede:	492b      	ldr	r1, [pc, #172]	; (8f8c <_http_client_handle_header+0x1b8>)
    8ee0:	0020      	movs	r0, r4
    8ee2:	4b26      	ldr	r3, [pc, #152]	; (8f7c <_http_client_handle_header+0x1a8>)
    8ee4:	4798      	blx	r3
    8ee6:	2800      	cmp	r0, #0
    8ee8:	d11d      	bne.n	8f26 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    8eea:	0022      	movs	r2, r4
    8eec:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8eee:	4295      	cmp	r5, r2
    8ef0:	d9c2      	bls.n	8e78 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8ef2:	7b23      	ldrb	r3, [r4, #12]
    8ef4:	2b20      	cmp	r3, #32
    8ef6:	d009      	beq.n	8f0c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    8ef8:	2220      	movs	r2, #32
    8efa:	4393      	bics	r3, r2
    8efc:	2b4b      	cmp	r3, #75	; 0x4b
    8efe:	d00c      	beq.n	8f1a <_http_client_handle_header+0x146>
					module->permanent = 0;
    8f00:	2241      	movs	r2, #65	; 0x41
    8f02:	5cbb      	ldrb	r3, [r7, r2]
    8f04:	2102      	movs	r1, #2
    8f06:	438b      	bics	r3, r1
    8f08:	54bb      	strb	r3, [r7, r2]
    8f0a:	e7b5      	b.n	8e78 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8f0c:	3201      	adds	r2, #1
    8f0e:	4295      	cmp	r5, r2
    8f10:	d0b2      	beq.n	8e78 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8f12:	7813      	ldrb	r3, [r2, #0]
    8f14:	2b20      	cmp	r3, #32
    8f16:	d1ef      	bne.n	8ef8 <_http_client_handle_header+0x124>
    8f18:	e7f8      	b.n	8f0c <_http_client_handle_header+0x138>
					module->permanent = 1;
    8f1a:	3221      	adds	r2, #33	; 0x21
    8f1c:	5cbb      	ldrb	r3, [r7, r2]
    8f1e:	2102      	movs	r1, #2
    8f20:	430b      	orrs	r3, r1
    8f22:	54bb      	strb	r3, [r7, r2]
    8f24:	e7a8      	b.n	8e78 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    8f26:	2205      	movs	r2, #5
    8f28:	4919      	ldr	r1, [pc, #100]	; (8f90 <_http_client_handle_header+0x1bc>)
    8f2a:	0020      	movs	r0, r4
    8f2c:	4b13      	ldr	r3, [pc, #76]	; (8f7c <_http_client_handle_header+0x1a8>)
    8f2e:	4798      	blx	r3
    8f30:	2800      	cmp	r0, #0
    8f32:	d1a1      	bne.n	8e78 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    8f34:	0020      	movs	r0, r4
    8f36:	3009      	adds	r0, #9
    8f38:	4b0e      	ldr	r3, [pc, #56]	; (8f74 <_http_client_handle_header+0x1a0>)
    8f3a:	4798      	blx	r3
    8f3c:	23e4      	movs	r3, #228	; 0xe4
    8f3e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    8f40:	2200      	movs	r2, #0
    8f42:	3b08      	subs	r3, #8
    8f44:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    8f46:	7963      	ldrb	r3, [r4, #5]
    8f48:	2b31      	cmp	r3, #49	; 0x31
    8f4a:	d802      	bhi.n	8f52 <_http_client_handle_header+0x17e>
    8f4c:	79e3      	ldrb	r3, [r4, #7]
    8f4e:	2b30      	cmp	r3, #48	; 0x30
    8f50:	d905      	bls.n	8f5e <_http_client_handle_header+0x18a>
				module->permanent = 1;
    8f52:	2241      	movs	r2, #65	; 0x41
    8f54:	5cbb      	ldrb	r3, [r7, r2]
    8f56:	2102      	movs	r1, #2
    8f58:	430b      	orrs	r3, r1
    8f5a:	54bb      	strb	r3, [r7, r2]
    8f5c:	e78c      	b.n	8e78 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    8f5e:	2241      	movs	r2, #65	; 0x41
    8f60:	5cbb      	ldrb	r3, [r7, r2]
    8f62:	2102      	movs	r1, #2
    8f64:	438b      	bics	r3, r1
    8f66:	54bb      	strb	r3, [r7, r2]
    8f68:	e786      	b.n	8e78 <_http_client_handle_header+0xa4>
    8f6a:	46c0      	nop			; (mov r8, r8)
    8f6c:	0000a71d 	.word	0x0000a71d
    8f70:	00008db1 	.word	0x00008db1
    8f74:	0000a129 	.word	0x0000a129
    8f78:	0000d1bc 	.word	0x0000d1bc
    8f7c:	0000a6ad 	.word	0x0000a6ad
    8f80:	0000cf84 	.word	0x0000cf84
    8f84:	0000ce94 	.word	0x0000ce94
    8f88:	00008559 	.word	0x00008559
    8f8c:	0000cea8 	.word	0x0000cea8
    8f90:	0000ceb8 	.word	0x0000ceb8

00008f94 <_http_client_handle_entity>:
{
    8f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f96:	46ce      	mov	lr, r9
    8f98:	b500      	push	{lr}
    8f9a:	b086      	sub	sp, #24
    8f9c:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    8f9e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    8fa0:	23dc      	movs	r3, #220	; 0xdc
    8fa2:	58c3      	ldr	r3, [r0, r3]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	db69      	blt.n	907c <_http_client_handle_entity+0xe8>
    8fa8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    8faa:	4293      	cmp	r3, r2
    8fac:	dc2b      	bgt.n	9006 <_http_client_handle_entity+0x72>
	return 0;
    8fae:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    8fb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    8fb2:	4293      	cmp	r3, r2
    8fb4:	dc4e      	bgt.n	9054 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    8fb6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    8fb8:	2e00      	cmp	r6, #0
    8fba:	d003      	beq.n	8fc4 <_http_client_handle_entity+0x30>
    8fbc:	22e4      	movs	r2, #228	; 0xe4
    8fbe:	5aa1      	ldrh	r1, [r4, r2]
    8fc0:	2900      	cmp	r1, #0
    8fc2:	d10e      	bne.n	8fe2 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    8fc4:	2300      	movs	r3, #0
    8fc6:	22d8      	movs	r2, #216	; 0xd8
    8fc8:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    8fca:	320c      	adds	r2, #12
    8fcc:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    8fce:	3341      	adds	r3, #65	; 0x41
    8fd0:	5ce3      	ldrb	r3, [r4, r3]
    8fd2:	079b      	lsls	r3, r3, #30
    8fd4:	d40f      	bmi.n	8ff6 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    8fd6:	2100      	movs	r1, #0
    8fd8:	0020      	movs	r0, r4
    8fda:	4b71      	ldr	r3, [pc, #452]	; (91a0 <_http_client_handle_entity+0x20c>)
    8fdc:	4798      	blx	r3
	return 0;
    8fde:	2000      	movs	r0, #0
    8fe0:	e038      	b.n	9054 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    8fe2:	aa03      	add	r2, sp, #12
    8fe4:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    8fe6:	2100      	movs	r1, #0
    8fe8:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    8fea:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    8fec:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8fee:	3102      	adds	r1, #2
    8ff0:	0020      	movs	r0, r4
    8ff2:	47b0      	blx	r6
    8ff4:	e7e6      	b.n	8fc4 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    8ff6:	23dc      	movs	r3, #220	; 0xdc
    8ff8:	58e1      	ldr	r1, [r4, r3]
    8ffa:	1869      	adds	r1, r5, r1
    8ffc:	0020      	movs	r0, r4
    8ffe:	4b69      	ldr	r3, [pc, #420]	; (91a4 <_http_client_handle_entity+0x210>)
    9000:	4798      	blx	r3
				return module->recved_size;
    9002:	6c60      	ldr	r0, [r4, #68]	; 0x44
    9004:	e026      	b.n	9054 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    9006:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9008:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    900a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    900c:	21e0      	movs	r1, #224	; 0xe0
    900e:	5840      	ldr	r0, [r0, r1]
    9010:	4684      	mov	ip, r0
    9012:	4462      	add	r2, ip
    9014:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    9016:	4293      	cmp	r3, r2
    9018:	dc20      	bgt.n	905c <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    901a:	2300      	movs	r3, #0
    901c:	22d8      	movs	r2, #216	; 0xd8
    901e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    9020:	320c      	adds	r2, #12
    9022:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    9024:	3ae3      	subs	r2, #227	; 0xe3
    9026:	ab03      	add	r3, sp, #12
    9028:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    902a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    902c:	2b00      	cmp	r3, #0
    902e:	d007      	beq.n	9040 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    9030:	ae03      	add	r6, sp, #12
    9032:	0032      	movs	r2, r6
    9034:	2103      	movs	r1, #3
    9036:	0020      	movs	r0, r4
    9038:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    903a:	7a33      	ldrb	r3, [r6, #8]
    903c:	2b01      	cmp	r3, #1
    903e:	d103      	bne.n	9048 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    9040:	2341      	movs	r3, #65	; 0x41
    9042:	5ce3      	ldrb	r3, [r4, r3]
    9044:	079b      	lsls	r3, r3, #30
    9046:	d510      	bpl.n	906a <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    9048:	6c63      	ldr	r3, [r4, #68]	; 0x44
    904a:	18e9      	adds	r1, r5, r3
    904c:	0020      	movs	r0, r4
    904e:	4b55      	ldr	r3, [pc, #340]	; (91a4 <_http_client_handle_entity+0x210>)
    9050:	4798      	blx	r3
	return 0;
    9052:	2000      	movs	r0, #0
}
    9054:	b006      	add	sp, #24
    9056:	bc04      	pop	{r2}
    9058:	4691      	mov	r9, r2
    905a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    905c:	2200      	movs	r2, #0
    905e:	ab03      	add	r3, sp, #12
    9060:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    9062:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9064:	2b00      	cmp	r3, #0
    9066:	d0ef      	beq.n	9048 <_http_client_handle_entity+0xb4>
    9068:	e7e2      	b.n	9030 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    906a:	484f      	ldr	r0, [pc, #316]	; (91a8 <_http_client_handle_entity+0x214>)
    906c:	4b4f      	ldr	r3, [pc, #316]	; (91ac <_http_client_handle_entity+0x218>)
    906e:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    9070:	2100      	movs	r1, #0
    9072:	0020      	movs	r0, r4
    9074:	4b4a      	ldr	r3, [pc, #296]	; (91a0 <_http_client_handle_entity+0x20c>)
    9076:	4798      	blx	r3
					return 0;
    9078:	2000      	movs	r0, #0
    907a:	e7eb      	b.n	9054 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    907c:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    907e:	2300      	movs	r3, #0
    9080:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    9082:	26e0      	movs	r6, #224	; 0xe0
    9084:	e00a      	b.n	909c <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    9086:	2341      	movs	r3, #65	; 0x41
    9088:	5ce3      	ldrb	r3, [r4, r3]
    908a:	079b      	lsls	r3, r3, #30
    908c:	d51b      	bpl.n	90c6 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    908e:	1ca9      	adds	r1, r5, #2
    9090:	0020      	movs	r0, r4
    9092:	4b44      	ldr	r3, [pc, #272]	; (91a4 <_http_client_handle_entity+0x210>)
    9094:	4798      	blx	r3
	} while(module->recved_size > 0);
    9096:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9098:	2b00      	cmp	r3, #0
    909a:	d073      	beq.n	9184 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    909c:	59a3      	ldr	r3, [r4, r6]
    909e:	2b00      	cmp	r3, #0
    90a0:	db30      	blt.n	9104 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    90a2:	d116      	bne.n	90d2 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    90a4:	22d8      	movs	r2, #216	; 0xd8
    90a6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    90a8:	320c      	adds	r2, #12
    90aa:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    90ac:	3ae3      	subs	r2, #227	; 0xe3
    90ae:	4669      	mov	r1, sp
    90b0:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    90b2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    90b4:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    90b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    90b8:	2b00      	cmp	r3, #0
    90ba:	d0e4      	beq.n	9086 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    90bc:	466a      	mov	r2, sp
    90be:	2103      	movs	r1, #3
    90c0:	0020      	movs	r0, r4
    90c2:	4798      	blx	r3
    90c4:	e7df      	b.n	9086 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    90c6:	2100      	movs	r1, #0
    90c8:	0020      	movs	r0, r4
    90ca:	4b35      	ldr	r3, [pc, #212]	; (91a0 <_http_client_handle_entity+0x20c>)
    90cc:	4798      	blx	r3
	return 0;
    90ce:	2000      	movs	r0, #0
    90d0:	e7c0      	b.n	9054 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    90d2:	42bb      	cmp	r3, r7
    90d4:	dcdf      	bgt.n	9096 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    90d6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    90d8:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    90da:	2300      	movs	r3, #0
    90dc:	466a      	mov	r2, sp
    90de:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    90e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    90e2:	2b00      	cmp	r3, #0
    90e4:	d002      	beq.n	90ec <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    90e6:	2103      	movs	r1, #3
    90e8:	0020      	movs	r0, r4
    90ea:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    90ec:	59a3      	ldr	r3, [r4, r6]
    90ee:	1c99      	adds	r1, r3, #2
    90f0:	1869      	adds	r1, r5, r1
    90f2:	0020      	movs	r0, r4
    90f4:	4b2b      	ldr	r3, [pc, #172]	; (91a4 <_http_client_handle_entity+0x210>)
    90f6:	4798      	blx	r3
				length = (int)module->recved_size;
    90f8:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    90fa:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    90fc:	2301      	movs	r3, #1
    90fe:	425b      	negs	r3, r3
    9100:	51a3      	str	r3, [r4, r6]
    9102:	e7c8      	b.n	9096 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    9104:	2300      	movs	r3, #0
    9106:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    9108:	2f00      	cmp	r7, #0
    910a:	dd04      	ble.n	9116 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    910c:	782b      	ldrb	r3, [r5, #0]
    910e:	2b0a      	cmp	r3, #10
    9110:	d11c      	bne.n	914c <_http_client_handle_entity+0x1b8>
					buffer++;
    9112:	3501      	adds	r5, #1
					length--;
    9114:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    9116:	59a3      	ldr	r3, [r4, r6]
    9118:	6e22      	ldr	r2, [r4, #96]	; 0x60
    911a:	4293      	cmp	r3, r2
    911c:	dc39      	bgt.n	9192 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    911e:	2f00      	cmp	r7, #0
    9120:	d1b9      	bne.n	9096 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    9122:	2201      	movs	r2, #1
    9124:	4252      	negs	r2, r2
    9126:	23e0      	movs	r3, #224	; 0xe0
    9128:	50e2      	str	r2, [r4, r3]
    912a:	e7d0      	b.n	90ce <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    912c:	001a      	movs	r2, r3
    912e:	3a61      	subs	r2, #97	; 0x61
    9130:	2a05      	cmp	r2, #5
    9132:	d818      	bhi.n	9166 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    9134:	59a2      	ldr	r2, [r4, r6]
    9136:	0112      	lsls	r2, r2, #4
    9138:	18d3      	adds	r3, r2, r3
    913a:	3b61      	subs	r3, #97	; 0x61
    913c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    913e:	3501      	adds	r5, #1
    9140:	3f01      	subs	r7, #1
    9142:	2f00      	cmp	r7, #0
    9144:	d020      	beq.n	9188 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    9146:	782b      	ldrb	r3, [r5, #0]
    9148:	2b0a      	cmp	r3, #10
    914a:	d0e2      	beq.n	9112 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    914c:	464a      	mov	r2, r9
    914e:	2a00      	cmp	r2, #0
    9150:	d1f5      	bne.n	913e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    9152:	001a      	movs	r2, r3
    9154:	3a30      	subs	r2, #48	; 0x30
    9156:	2a09      	cmp	r2, #9
    9158:	d8e8      	bhi.n	912c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    915a:	59a2      	ldr	r2, [r4, r6]
    915c:	0112      	lsls	r2, r2, #4
    915e:	18d3      	adds	r3, r2, r3
    9160:	3b30      	subs	r3, #48	; 0x30
    9162:	51a3      	str	r3, [r4, r6]
    9164:	e7eb      	b.n	913e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    9166:	001a      	movs	r2, r3
    9168:	3a41      	subs	r2, #65	; 0x41
    916a:	2a05      	cmp	r2, #5
    916c:	d805      	bhi.n	917a <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    916e:	59a2      	ldr	r2, [r4, r6]
    9170:	0112      	lsls	r2, r2, #4
    9172:	18d3      	adds	r3, r2, r3
    9174:	3b41      	subs	r3, #65	; 0x41
    9176:	51a3      	str	r3, [r4, r6]
    9178:	e7e1      	b.n	913e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    917a:	3b3b      	subs	r3, #59	; 0x3b
    917c:	425a      	negs	r2, r3
    917e:	415a      	adcs	r2, r3
    9180:	4691      	mov	r9, r2
    9182:	e7dc      	b.n	913e <_http_client_handle_entity+0x1aa>
	return 0;
    9184:	2000      	movs	r0, #0
    9186:	e765      	b.n	9054 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    9188:	23e0      	movs	r3, #224	; 0xe0
    918a:	58e3      	ldr	r3, [r4, r3]
    918c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    918e:	4293      	cmp	r3, r2
    9190:	ddc7      	ble.n	9122 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    9192:	218b      	movs	r1, #139	; 0x8b
    9194:	4249      	negs	r1, r1
    9196:	0020      	movs	r0, r4
    9198:	4b01      	ldr	r3, [pc, #4]	; (91a0 <_http_client_handle_entity+0x20c>)
    919a:	4798      	blx	r3
    919c:	e797      	b.n	90ce <_http_client_handle_entity+0x13a>
    919e:	46c0      	nop			; (mov r8, r8)
    91a0:	00008559 	.word	0x00008559
    91a4:	00008db1 	.word	0x00008db1
    91a8:	0000ce90 	.word	0x0000ce90
    91ac:	0000a459 	.word	0x0000a459

000091b0 <_http_client_handle_response>:
{
    91b0:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    91b2:	23d8      	movs	r3, #216	; 0xd8
    91b4:	58c3      	ldr	r3, [r0, r3]
    91b6:	2b00      	cmp	r3, #0
    91b8:	d003      	beq.n	91c2 <_http_client_handle_response+0x12>
    91ba:	2b01      	cmp	r3, #1
    91bc:	d004      	beq.n	91c8 <_http_client_handle_response+0x18>
	return 0;
    91be:	2000      	movs	r0, #0
    91c0:	e001      	b.n	91c6 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    91c2:	4b03      	ldr	r3, [pc, #12]	; (91d0 <_http_client_handle_response+0x20>)
    91c4:	4798      	blx	r3
}
    91c6:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    91c8:	4b02      	ldr	r3, [pc, #8]	; (91d4 <_http_client_handle_response+0x24>)
    91ca:	4798      	blx	r3
    91cc:	e7fb      	b.n	91c6 <_http_client_handle_response+0x16>
    91ce:	46c0      	nop			; (mov r8, r8)
    91d0:	00008dd5 	.word	0x00008dd5
    91d4:	00008f95 	.word	0x00008f95

000091d8 <_http_client_recved_packet>:
{
    91d8:	b570      	push	{r4, r5, r6, lr}
    91da:	0004      	movs	r4, r0
	module->recved_size += read_len;
    91dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    91de:	469c      	mov	ip, r3
    91e0:	4461      	add	r1, ip
    91e2:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    91e4:	2358      	movs	r3, #88	; 0x58
    91e6:	5ac3      	ldrh	r3, [r0, r3]
    91e8:	2b00      	cmp	r3, #0
    91ea:	d105      	bne.n	91f8 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    91ec:	4d05      	ldr	r5, [pc, #20]	; (9204 <_http_client_recved_packet+0x2c>)
    91ee:	0020      	movs	r0, r4
    91f0:	47a8      	blx	r5
    91f2:	2800      	cmp	r0, #0
    91f4:	d1fb      	bne.n	91ee <_http_client_recved_packet+0x16>
}
    91f6:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    91f8:	6c81      	ldr	r1, [r0, #72]	; 0x48
    91fa:	6d40      	ldr	r0, [r0, #84]	; 0x54
    91fc:	4b02      	ldr	r3, [pc, #8]	; (9208 <_http_client_recved_packet+0x30>)
    91fe:	4798      	blx	r3
    9200:	e7f4      	b.n	91ec <_http_client_recved_packet+0x14>
    9202:	46c0      	nop			; (mov r8, r8)
    9204:	000091b1 	.word	0x000091b1
    9208:	00009585 	.word	0x00009585

0000920c <http_client_socket_event_handler>:
{
    920c:	b510      	push	{r4, lr}
    920e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    9210:	0080      	lsls	r0, r0, #2
    9212:	4b65      	ldr	r3, [pc, #404]	; (93a8 <http_client_socket_event_handler+0x19c>)
    9214:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    9216:	2c00      	cmp	r4, #0
    9218:	d006      	beq.n	9228 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    921a:	2906      	cmp	r1, #6
    921c:	d051      	beq.n	92c2 <http_client_socket_event_handler+0xb6>
    921e:	2907      	cmp	r1, #7
    9220:	d100      	bne.n	9224 <http_client_socket_event_handler+0x18>
    9222:	e08a      	b.n	933a <http_client_socket_event_handler+0x12e>
    9224:	2905      	cmp	r1, #5
    9226:	d001      	beq.n	922c <http_client_socket_event_handler+0x20>
}
    9228:	b004      	add	sp, #16
    922a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    922c:	2301      	movs	r3, #1
    922e:	56d3      	ldrsb	r3, [r2, r3]
    9230:	1e1a      	subs	r2, r3, #0
    9232:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    9234:	db15      	blt.n	9262 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    9236:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9238:	2b00      	cmp	r3, #0
    923a:	d003      	beq.n	9244 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    923c:	aa01      	add	r2, sp, #4
    923e:	2100      	movs	r1, #0
    9240:	0020      	movs	r0, r4
    9242:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    9244:	2303      	movs	r3, #3
    9246:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    9248:	3355      	adds	r3, #85	; 0x55
    924a:	5ae2      	ldrh	r2, [r4, r3]
    924c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    924e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9250:	4b56      	ldr	r3, [pc, #344]	; (93ac <http_client_socket_event_handler+0x1a0>)
    9252:	4798      	blx	r3
    		_http_client_recv_packet(module);
    9254:	0020      	movs	r0, r4
    9256:	4b56      	ldr	r3, [pc, #344]	; (93b0 <http_client_socket_event_handler+0x1a4>)
    9258:	4798      	blx	r3
			_http_client_request(module);
    925a:	0020      	movs	r0, r4
    925c:	4b55      	ldr	r3, [pc, #340]	; (93b4 <http_client_socket_event_handler+0x1a8>)
    925e:	4798      	blx	r3
    9260:	e7e2      	b.n	9228 <http_client_socket_event_handler+0x1c>
	switch (err) {
    9262:	330e      	adds	r3, #14
    9264:	b2d9      	uxtb	r1, r3
    9266:	290e      	cmp	r1, #14
    9268:	d81e      	bhi.n	92a8 <http_client_socket_event_handler+0x9c>
    926a:	008b      	lsls	r3, r1, #2
    926c:	4952      	ldr	r1, [pc, #328]	; (93b8 <http_client_socket_event_handler+0x1ac>)
    926e:	58cb      	ldr	r3, [r1, r3]
    9270:	469f      	mov	pc, r3
			return -ENOENT;
    9272:	2102      	movs	r1, #2
    9274:	4249      	negs	r1, r1
    9276:	e01d      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    9278:	2170      	movs	r1, #112	; 0x70
    927a:	4249      	negs	r1, r1
    927c:	e01a      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    927e:	210c      	movs	r1, #12
    9280:	4249      	negs	r1, r1
    9282:	e017      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    9284:	2116      	movs	r1, #22
    9286:	4249      	negs	r1, r1
    9288:	e014      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    928a:	210c      	movs	r1, #12
    928c:	4249      	negs	r1, r1
    928e:	e011      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    9290:	2179      	movs	r1, #121	; 0x79
    9292:	4249      	negs	r1, r1
    9294:	e00e      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    9296:	2168      	movs	r1, #104	; 0x68
    9298:	4249      	negs	r1, r1
    929a:	e00b      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    929c:	210b      	movs	r1, #11
    929e:	4249      	negs	r1, r1
    92a0:	e008      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    92a2:	2110      	movs	r1, #16
    92a4:	4249      	negs	r1, r1
    92a6:	e005      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    92a8:	2a00      	cmp	r2, #0
    92aa:	db07      	blt.n	92bc <http_client_socket_event_handler+0xb0>
			return 0;
    92ac:	2100      	movs	r1, #0
    92ae:	e001      	b.n	92b4 <http_client_socket_event_handler+0xa8>
			return -EIO;
    92b0:	2105      	movs	r1, #5
    92b2:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    92b4:	0020      	movs	r0, r4
    92b6:	4b41      	ldr	r3, [pc, #260]	; (93bc <http_client_socket_event_handler+0x1b0>)
    92b8:	4798      	blx	r3
    92ba:	e7b5      	b.n	9228 <http_client_socket_event_handler+0x1c>
				return -EIO;
    92bc:	2105      	movs	r1, #5
    92be:	4249      	negs	r1, r1
    92c0:	e7f8      	b.n	92b4 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    92c2:	2304      	movs	r3, #4
    92c4:	5ed1      	ldrsh	r1, [r2, r3]
    92c6:	2900      	cmp	r1, #0
    92c8:	dd06      	ble.n	92d8 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    92ca:	0020      	movs	r0, r4
    92cc:	4b3c      	ldr	r3, [pc, #240]	; (93c0 <http_client_socket_event_handler+0x1b4>)
    92ce:	4798      	blx	r3
		_http_client_recv_packet(module);
    92d0:	0020      	movs	r0, r4
    92d2:	4b37      	ldr	r3, [pc, #220]	; (93b0 <http_client_socket_event_handler+0x1a4>)
    92d4:	4798      	blx	r3
		break;
    92d6:	e7a7      	b.n	9228 <http_client_socket_event_handler+0x1c>
	switch (err) {
    92d8:	000b      	movs	r3, r1
    92da:	330e      	adds	r3, #14
    92dc:	b29a      	uxth	r2, r3
    92de:	2a0e      	cmp	r2, #14
    92e0:	d81e      	bhi.n	9320 <http_client_socket_event_handler+0x114>
    92e2:	0093      	lsls	r3, r2, #2
    92e4:	4a37      	ldr	r2, [pc, #220]	; (93c4 <http_client_socket_event_handler+0x1b8>)
    92e6:	58d3      	ldr	r3, [r2, r3]
    92e8:	469f      	mov	pc, r3
			return -ENOENT;
    92ea:	2102      	movs	r1, #2
    92ec:	4249      	negs	r1, r1
    92ee:	e01d      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    92f0:	2170      	movs	r1, #112	; 0x70
    92f2:	4249      	negs	r1, r1
    92f4:	e01a      	b.n	932c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    92f6:	210c      	movs	r1, #12
    92f8:	4249      	negs	r1, r1
    92fa:	e017      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    92fc:	2116      	movs	r1, #22
    92fe:	4249      	negs	r1, r1
    9300:	e014      	b.n	932c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    9302:	210c      	movs	r1, #12
    9304:	4249      	negs	r1, r1
    9306:	e011      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    9308:	2179      	movs	r1, #121	; 0x79
    930a:	4249      	negs	r1, r1
    930c:	e00e      	b.n	932c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    930e:	2168      	movs	r1, #104	; 0x68
    9310:	4249      	negs	r1, r1
    9312:	e00b      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    9314:	210b      	movs	r1, #11
    9316:	4249      	negs	r1, r1
    9318:	e008      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    931a:	2110      	movs	r1, #16
    931c:	4249      	negs	r1, r1
    931e:	e005      	b.n	932c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    9320:	2900      	cmp	r1, #0
    9322:	db07      	blt.n	9334 <http_client_socket_event_handler+0x128>
			return 0;
    9324:	2100      	movs	r1, #0
    9326:	e001      	b.n	932c <http_client_socket_event_handler+0x120>
			return -EIO;
    9328:	2105      	movs	r1, #5
    932a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    932c:	0020      	movs	r0, r4
    932e:	4b23      	ldr	r3, [pc, #140]	; (93bc <http_client_socket_event_handler+0x1b0>)
    9330:	4798      	blx	r3
    9332:	e7cd      	b.n	92d0 <http_client_socket_event_handler+0xc4>
				return -EIO;
    9334:	2105      	movs	r1, #5
    9336:	4249      	negs	r1, r1
    9338:	e7f8      	b.n	932c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    933a:	2300      	movs	r3, #0
    933c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    933e:	2b00      	cmp	r3, #0
    9340:	db08      	blt.n	9354 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    9342:	0020      	movs	r0, r4
    9344:	4b1b      	ldr	r3, [pc, #108]	; (93b4 <http_client_socket_event_handler+0x1a8>)
    9346:	4798      	blx	r3
		module->sending = 0;
    9348:	2241      	movs	r2, #65	; 0x41
    934a:	5ca3      	ldrb	r3, [r4, r2]
    934c:	2101      	movs	r1, #1
    934e:	438b      	bics	r3, r1
    9350:	54a3      	strb	r3, [r4, r2]
    	break;
    9352:	e769      	b.n	9228 <http_client_socket_event_handler+0x1c>
	switch (err) {
    9354:	330e      	adds	r3, #14
    9356:	b29a      	uxth	r2, r3
    9358:	2a0d      	cmp	r2, #13
    935a:	d81e      	bhi.n	939a <http_client_socket_event_handler+0x18e>
    935c:	0093      	lsls	r3, r2, #2
    935e:	4a1a      	ldr	r2, [pc, #104]	; (93c8 <http_client_socket_event_handler+0x1bc>)
    9360:	58d3      	ldr	r3, [r2, r3]
    9362:	469f      	mov	pc, r3
			return -ENOENT;
    9364:	2102      	movs	r1, #2
    9366:	4249      	negs	r1, r1
    9368:	e019      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    936a:	2170      	movs	r1, #112	; 0x70
    936c:	4249      	negs	r1, r1
    936e:	e016      	b.n	939e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    9370:	210c      	movs	r1, #12
    9372:	4249      	negs	r1, r1
    9374:	e013      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EINVAL;
    9376:	2116      	movs	r1, #22
    9378:	4249      	negs	r1, r1
    937a:	e010      	b.n	939e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    937c:	210c      	movs	r1, #12
    937e:	4249      	negs	r1, r1
    9380:	e00d      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    9382:	2179      	movs	r1, #121	; 0x79
    9384:	4249      	negs	r1, r1
    9386:	e00a      	b.n	939e <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    9388:	2168      	movs	r1, #104	; 0x68
    938a:	4249      	negs	r1, r1
    938c:	e007      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    938e:	210b      	movs	r1, #11
    9390:	4249      	negs	r1, r1
    9392:	e004      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    9394:	2110      	movs	r1, #16
    9396:	4249      	negs	r1, r1
    9398:	e001      	b.n	939e <http_client_socket_event_handler+0x192>
			return -EIO;
    939a:	2105      	movs	r1, #5
    939c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    939e:	0020      	movs	r0, r4
    93a0:	4b06      	ldr	r3, [pc, #24]	; (93bc <http_client_socket_event_handler+0x1b0>)
    93a2:	4798      	blx	r3
    93a4:	e7d0      	b.n	9348 <http_client_socket_event_handler+0x13c>
    93a6:	46c0      	nop			; (mov r8, r8)
    93a8:	200003f4 	.word	0x200003f4
    93ac:	00009559 	.word	0x00009559
    93b0:	00008d79 	.word	0x00008d79
    93b4:	00008671 	.word	0x00008671
    93b8:	0000cdd0 	.word	0x0000cdd0
    93bc:	00008559 	.word	0x00008559
    93c0:	000091d9 	.word	0x000091d9
    93c4:	0000ce0c 	.word	0x0000ce0c
    93c8:	0000ce48 	.word	0x0000ce48

000093cc <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    93cc:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    93ce:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    93d0:	2200      	movs	r2, #0
    93d2:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    93d4:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    93d6:	9b00      	ldr	r3, [sp, #0]
    93d8:	60c3      	str	r3, [r0, #12]
}
    93da:	4770      	bx	lr

000093dc <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    93dc:	b510      	push	{r4, lr}
    93de:	0004      	movs	r4, r0
	if(writer->written > 0) {
    93e0:	6842      	ldr	r2, [r0, #4]
    93e2:	2a00      	cmp	r2, #0
    93e4:	d100      	bne.n	93e8 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    93e6:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    93e8:	6901      	ldr	r1, [r0, #16]
    93ea:	68c0      	ldr	r0, [r0, #12]
    93ec:	68a3      	ldr	r3, [r4, #8]
    93ee:	4798      	blx	r3
		writer->written = 0;
    93f0:	2300      	movs	r3, #0
    93f2:	6063      	str	r3, [r4, #4]
}
    93f4:	e7f7      	b.n	93e6 <stream_writer_send_remain+0xa>
	...

000093f8 <stream_writer_send_8>:
{
    93f8:	b570      	push	{r4, r5, r6, lr}
    93fa:	0004      	movs	r4, r0
    93fc:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    93fe:	6803      	ldr	r3, [r0, #0]
    9400:	6842      	ldr	r2, [r0, #4]
    9402:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    9404:	2b00      	cmp	r3, #0
    9406:	dd05      	ble.n	9414 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    9408:	6922      	ldr	r2, [r4, #16]
    940a:	6863      	ldr	r3, [r4, #4]
    940c:	1c59      	adds	r1, r3, #1
    940e:	6061      	str	r1, [r4, #4]
    9410:	54d5      	strb	r5, [r2, r3]
}
    9412:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    9414:	4b01      	ldr	r3, [pc, #4]	; (941c <stream_writer_send_8+0x24>)
    9416:	4798      	blx	r3
    9418:	e7f6      	b.n	9408 <stream_writer_send_8+0x10>
    941a:	46c0      	nop			; (mov r8, r8)
    941c:	000093dd 	.word	0x000093dd

00009420 <stream_writer_send_buffer>:
{
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	0006      	movs	r6, r0
    9424:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    9426:	2a00      	cmp	r2, #0
    9428:	d008      	beq.n	943c <stream_writer_send_buffer+0x1c>
    942a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    942c:	4f04      	ldr	r7, [pc, #16]	; (9440 <stream_writer_send_buffer+0x20>)
    942e:	2100      	movs	r1, #0
    9430:	5661      	ldrsb	r1, [r4, r1]
    9432:	0030      	movs	r0, r6
    9434:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    9436:	3401      	adds	r4, #1
    9438:	42a5      	cmp	r5, r4
    943a:	d1f8      	bne.n	942e <stream_writer_send_buffer+0xe>
}
    943c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    943e:	46c0      	nop			; (mov r8, r8)
    9440:	000093f9 	.word	0x000093f9

00009444 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    9444:	4a02      	ldr	r2, [pc, #8]	; (9450 <sw_timer_tcc_callback+0xc>)
    9446:	6813      	ldr	r3, [r2, #0]
    9448:	3301      	adds	r3, #1
    944a:	6013      	str	r3, [r2, #0]
}
    944c:	4770      	bx	lr
    944e:	46c0      	nop			; (mov r8, r8)
    9450:	20000410 	.word	0x20000410

00009454 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    9454:	2364      	movs	r3, #100	; 0x64
    9456:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    9458:	2300      	movs	r3, #0
    945a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    945c:	7043      	strb	r3, [r0, #1]
}
    945e:	4770      	bx	lr

00009460 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    9460:	b5f0      	push	{r4, r5, r6, r7, lr}
    9462:	46c6      	mov	lr, r8
    9464:	b500      	push	{lr}
    9466:	b0ac      	sub	sp, #176	; 0xb0
    9468:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    946a:	466e      	mov	r6, sp
    946c:	4b1d      	ldr	r3, [pc, #116]	; (94e4 <sw_timer_init+0x84>)
    946e:	466a      	mov	r2, sp
    9470:	cb92      	ldmia	r3!, {r1, r4, r7}
    9472:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    9474:	886b      	ldrh	r3, [r5, #2]
    9476:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    9478:	3014      	adds	r0, #20
    947a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    947c:	782b      	ldrb	r3, [r5, #0]
    947e:	009b      	lsls	r3, r3, #2
    9480:	5999      	ldr	r1, [r3, r6]
    9482:	0017      	movs	r7, r2
    9484:	0010      	movs	r0, r2
    9486:	4b18      	ldr	r3, [pc, #96]	; (94e8 <sw_timer_init+0x88>)
    9488:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    948a:	2000      	movs	r0, #0
    948c:	4b17      	ldr	r3, [pc, #92]	; (94ec <sw_timer_init+0x8c>)
    948e:	4798      	blx	r3
    9490:	4b17      	ldr	r3, [pc, #92]	; (94f0 <sw_timer_init+0x90>)
    9492:	7a1b      	ldrb	r3, [r3, #8]
    9494:	b2db      	uxtb	r3, r3
    9496:	40d8      	lsrs	r0, r3
    9498:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    949a:	8869      	ldrh	r1, [r5, #2]
    949c:	20fa      	movs	r0, #250	; 0xfa
    949e:	0200      	lsls	r0, r0, #8
    94a0:	4b14      	ldr	r3, [pc, #80]	; (94f4 <sw_timer_init+0x94>)
    94a2:	4798      	blx	r3
    94a4:	0001      	movs	r1, r0
    94a6:	4640      	mov	r0, r8
    94a8:	4b13      	ldr	r3, [pc, #76]	; (94f8 <sw_timer_init+0x98>)
    94aa:	4798      	blx	r3
    94ac:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    94ae:	2305      	movs	r3, #5
    94b0:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    94b2:	782b      	ldrb	r3, [r5, #0]
    94b4:	009b      	lsls	r3, r3, #2
    94b6:	5999      	ldr	r1, [r3, r6]
    94b8:	003a      	movs	r2, r7
    94ba:	0020      	movs	r0, r4
    94bc:	4b0f      	ldr	r3, [pc, #60]	; (94fc <sw_timer_init+0x9c>)
    94be:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    94c0:	786a      	ldrb	r2, [r5, #1]
    94c2:	3208      	adds	r2, #8
    94c4:	b2d2      	uxtb	r2, r2
    94c6:	490e      	ldr	r1, [pc, #56]	; (9500 <sw_timer_init+0xa0>)
    94c8:	0020      	movs	r0, r4
    94ca:	4b0e      	ldr	r3, [pc, #56]	; (9504 <sw_timer_init+0xa4>)
    94cc:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    94ce:	7869      	ldrb	r1, [r5, #1]
    94d0:	3108      	adds	r1, #8
    94d2:	b2c9      	uxtb	r1, r1
    94d4:	0020      	movs	r0, r4
    94d6:	4b0c      	ldr	r3, [pc, #48]	; (9508 <sw_timer_init+0xa8>)
    94d8:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    94da:	b02c      	add	sp, #176	; 0xb0
    94dc:	bc04      	pop	{r2}
    94de:	4690      	mov	r8, r2
    94e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94e2:	46c0      	nop			; (mov r8, r8)
    94e4:	0000cfb8 	.word	0x0000cfb8
    94e8:	00006149 	.word	0x00006149
    94ec:	00005ea5 	.word	0x00005ea5
    94f0:	40000400 	.word	0x40000400
    94f4:	00009efd 	.word	0x00009efd
    94f8:	00009de9 	.word	0x00009de9
    94fc:	00006295 	.word	0x00006295
    9500:	00009445 	.word	0x00009445
    9504:	000066a1 	.word	0x000066a1
    9508:	000066b9 	.word	0x000066b9

0000950c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    950c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    950e:	2102      	movs	r1, #2
    9510:	6893      	ldr	r3, [r2, #8]
    9512:	4219      	tst	r1, r3
    9514:	d1fc      	bne.n	9510 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9516:	6813      	ldr	r3, [r2, #0]
    9518:	2102      	movs	r1, #2
    951a:	430b      	orrs	r3, r1
    951c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    951e:	4770      	bx	lr

00009520 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    9520:	b570      	push	{r4, r5, r6, lr}
    9522:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    9524:	7805      	ldrb	r5, [r0, #0]
    9526:	07e8      	lsls	r0, r5, #31
    9528:	d502      	bpl.n	9530 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    952a:	2001      	movs	r0, #1
    952c:	4240      	negs	r0, r0
}
    952e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    9530:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    9532:	0029      	movs	r1, r5
    9534:	2002      	movs	r0, #2
    9536:	4381      	bics	r1, r0
    9538:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    953a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    953c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    953e:	0018      	movs	r0, r3
    9540:	4b04      	ldr	r3, [pc, #16]	; (9554 <sw_timer_register_callback+0x34>)
    9542:	4798      	blx	r3
    9544:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    9546:	7823      	ldrb	r3, [r4, #0]
    9548:	2201      	movs	r2, #1
    954a:	4313      	orrs	r3, r2
    954c:	7023      	strb	r3, [r4, #0]
			return index;
    954e:	2000      	movs	r0, #0
    9550:	e7ed      	b.n	952e <sw_timer_register_callback+0xe>
    9552:	46c0      	nop			; (mov r8, r8)
    9554:	00009de9 	.word	0x00009de9

00009558 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    9558:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    955a:	008b      	lsls	r3, r1, #2
    955c:	185d      	adds	r5, r3, r1
    955e:	00ad      	lsls	r5, r5, #2
    9560:	5c29      	ldrb	r1, [r5, r0]
    9562:	2602      	movs	r6, #2
    9564:	4331      	orrs	r1, r6
    9566:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    9568:	1944      	adds	r4, r0, r5
    956a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    956c:	0010      	movs	r0, r2
    956e:	4b03      	ldr	r3, [pc, #12]	; (957c <sw_timer_enable_callback+0x24>)
    9570:	4798      	blx	r3
    9572:	4b03      	ldr	r3, [pc, #12]	; (9580 <sw_timer_enable_callback+0x28>)
    9574:	681b      	ldr	r3, [r3, #0]
    9576:	18c0      	adds	r0, r0, r3
    9578:	6120      	str	r0, [r4, #16]
}
    957a:	bd70      	pop	{r4, r5, r6, pc}
    957c:	00009de9 	.word	0x00009de9
    9580:	20000410 	.word	0x20000410

00009584 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    9584:	008b      	lsls	r3, r1, #2
    9586:	1859      	adds	r1, r3, r1
    9588:	0089      	lsls	r1, r1, #2
    958a:	5c0b      	ldrb	r3, [r1, r0]
    958c:	2202      	movs	r2, #2
    958e:	4393      	bics	r3, r2
    9590:	540b      	strb	r3, [r1, r0]
}
    9592:	4770      	bx	lr

00009594 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    9594:	b570      	push	{r4, r5, r6, lr}
    9596:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    9598:	7803      	ldrb	r3, [r0, #0]
    959a:	07db      	lsls	r3, r3, #31
    959c:	d507      	bpl.n	95ae <sw_timer_task+0x1a>
    959e:	7803      	ldrb	r3, [r0, #0]
    95a0:	079b      	lsls	r3, r3, #30
    95a2:	d504      	bpl.n	95ae <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    95a4:	4b10      	ldr	r3, [pc, #64]	; (95e8 <sw_timer_task+0x54>)
    95a6:	681a      	ldr	r2, [r3, #0]
    95a8:	6903      	ldr	r3, [r0, #16]
    95aa:	1a9b      	subs	r3, r3, r2
    95ac:	d400      	bmi.n	95b0 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    95ae:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    95b0:	7803      	ldrb	r3, [r0, #0]
    95b2:	075b      	lsls	r3, r3, #29
    95b4:	d4fb      	bmi.n	95ae <sw_timer_task+0x1a>
				handler->busy = 1;
    95b6:	7803      	ldrb	r3, [r0, #0]
    95b8:	2104      	movs	r1, #4
    95ba:	430b      	orrs	r3, r1
    95bc:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    95be:	68c3      	ldr	r3, [r0, #12]
    95c0:	2b00      	cmp	r3, #0
    95c2:	d00b      	beq.n	95dc <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    95c4:	18d2      	adds	r2, r2, r3
    95c6:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    95c8:	68a2      	ldr	r2, [r4, #8]
    95ca:	2100      	movs	r1, #0
    95cc:	0020      	movs	r0, r4
    95ce:	6865      	ldr	r5, [r4, #4]
    95d0:	47a8      	blx	r5
				handler->busy = 0;
    95d2:	7823      	ldrb	r3, [r4, #0]
    95d4:	2204      	movs	r2, #4
    95d6:	4393      	bics	r3, r2
    95d8:	7023      	strb	r3, [r4, #0]
}
    95da:	e7e8      	b.n	95ae <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    95dc:	7802      	ldrb	r2, [r0, #0]
    95de:	2102      	movs	r1, #2
    95e0:	438a      	bics	r2, r1
    95e2:	7002      	strb	r2, [r0, #0]
    95e4:	e7f0      	b.n	95c8 <sw_timer_task+0x34>
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	20000410 	.word	0x20000410

000095ec <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
    95ec:	4b02      	ldr	r3, [pc, #8]	; (95f8 <add_state+0xc>)
    95ee:	781a      	ldrb	r2, [r3, #0]
    95f0:	4310      	orrs	r0, r2
    95f2:	7018      	strb	r0, [r3, #0]
}
    95f4:	4770      	bx	lr
    95f6:	46c0      	nop			; (mov r8, r8)
    95f8:	20000448 	.word	0x20000448

000095fc <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    95fc:	b570      	push	{r4, r5, r6, lr}
    95fe:	b082      	sub	sp, #8
    9600:	0005      	movs	r5, r0
    9602:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    9604:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9606:	21ff      	movs	r1, #255	; 0xff
    9608:	400b      	ands	r3, r1
    960a:	000a      	movs	r2, r1
    960c:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    960e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9610:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    9612:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    9614:	4001      	ands	r1, r0
    9616:	9100      	str	r1, [sp, #0]
    9618:	0029      	movs	r1, r5
    961a:	4804      	ldr	r0, [pc, #16]	; (962c <resolve_cb+0x30>)
    961c:	4e04      	ldr	r6, [pc, #16]	; (9630 <resolve_cb+0x34>)
    961e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    9620:	0021      	movs	r1, r4
    9622:	0028      	movs	r0, r5
    9624:	4b03      	ldr	r3, [pc, #12]	; (9634 <resolve_cb+0x38>)
    9626:	4798      	blx	r3
}
    9628:	b002      	add	sp, #8
    962a:	bd70      	pop	{r4, r5, r6, pc}
    962c:	0000d224 	.word	0x0000d224
    9630:	0000a33d 	.word	0x0000a33d
    9634:	000085e1 	.word	0x000085e1

00009638 <socket_cb>:
{
    9638:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    963a:	4b01      	ldr	r3, [pc, #4]	; (9640 <socket_cb+0x8>)
    963c:	4798      	blx	r3
}
    963e:	bd10      	pop	{r4, pc}
    9640:	0000920d 	.word	0x0000920d

00009644 <start_download>:
{
    9644:	b510      	push	{r4, lr}
    9646:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    9648:	4b12      	ldr	r3, [pc, #72]	; (9694 <start_download+0x50>)
    964a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    964c:	07da      	lsls	r2, r3, #31
    964e:	d511      	bpl.n	9674 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
    9650:	079a      	lsls	r2, r3, #30
    9652:	d513      	bpl.n	967c <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
    9654:	075a      	lsls	r2, r3, #29
    9656:	d415      	bmi.n	9684 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
    9658:	071b      	lsls	r3, r3, #28
    965a:	d417      	bmi.n	968c <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
    965c:	480e      	ldr	r0, [pc, #56]	; (9698 <start_download+0x54>)
    965e:	4b0f      	ldr	r3, [pc, #60]	; (969c <start_download+0x58>)
    9660:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    9662:	2300      	movs	r3, #0
    9664:	9300      	str	r3, [sp, #0]
    9666:	2201      	movs	r2, #1
    9668:	490d      	ldr	r1, [pc, #52]	; (96a0 <start_download+0x5c>)
    966a:	480e      	ldr	r0, [pc, #56]	; (96a4 <start_download+0x60>)
    966c:	4c0e      	ldr	r4, [pc, #56]	; (96a8 <start_download+0x64>)
    966e:	47a0      	blx	r4
}
    9670:	b002      	add	sp, #8
    9672:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    9674:	480d      	ldr	r0, [pc, #52]	; (96ac <start_download+0x68>)
    9676:	4b09      	ldr	r3, [pc, #36]	; (969c <start_download+0x58>)
    9678:	4798      	blx	r3
		return;
    967a:	e7f9      	b.n	9670 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
    967c:	480c      	ldr	r0, [pc, #48]	; (96b0 <start_download+0x6c>)
    967e:	4b07      	ldr	r3, [pc, #28]	; (969c <start_download+0x58>)
    9680:	4798      	blx	r3
		return;
    9682:	e7f5      	b.n	9670 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
    9684:	480b      	ldr	r0, [pc, #44]	; (96b4 <start_download+0x70>)
    9686:	4b05      	ldr	r3, [pc, #20]	; (969c <start_download+0x58>)
    9688:	4798      	blx	r3
		return;
    968a:	e7f1      	b.n	9670 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    968c:	480a      	ldr	r0, [pc, #40]	; (96b8 <start_download+0x74>)
    968e:	4b03      	ldr	r3, [pc, #12]	; (969c <start_download+0x58>)
    9690:	4798      	blx	r3
		return;
    9692:	e7ed      	b.n	9670 <start_download+0x2c>
    9694:	20000448 	.word	0x20000448
    9698:	0000d300 	.word	0x0000d300
    969c:	0000a459 	.word	0x0000a459
    96a0:	0000d32c 	.word	0x0000d32c
    96a4:	20000690 	.word	0x20000690
    96a8:	00008b11 	.word	0x00008b11
    96ac:	0000d254 	.word	0x0000d254
    96b0:	0000d27c 	.word	0x0000d27c
    96b4:	0000d2a8 	.word	0x0000d2a8
    96b8:	0000d2d4 	.word	0x0000d2d4

000096bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    96bc:	b570      	push	{r4, r5, r6, lr}
    96be:	b082      	sub	sp, #8
    96c0:	0005      	movs	r5, r0
    96c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    96c4:	2200      	movs	r2, #0
    96c6:	466b      	mov	r3, sp
    96c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    96ca:	4c06      	ldr	r4, [pc, #24]	; (96e4 <usart_serial_getchar+0x28>)
    96cc:	466b      	mov	r3, sp
    96ce:	1d99      	adds	r1, r3, #6
    96d0:	0028      	movs	r0, r5
    96d2:	47a0      	blx	r4
    96d4:	2800      	cmp	r0, #0
    96d6:	d1f9      	bne.n	96cc <usart_serial_getchar+0x10>

	*c = temp;
    96d8:	466b      	mov	r3, sp
    96da:	3306      	adds	r3, #6
    96dc:	881b      	ldrh	r3, [r3, #0]
    96de:	7033      	strb	r3, [r6, #0]
}
    96e0:	b002      	add	sp, #8
    96e2:	bd70      	pop	{r4, r5, r6, pc}
    96e4:	00005775 	.word	0x00005775

000096e8 <usart_serial_putchar>:
{
    96e8:	b570      	push	{r4, r5, r6, lr}
    96ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    96ec:	b28c      	uxth	r4, r1
    96ee:	4e03      	ldr	r6, [pc, #12]	; (96fc <usart_serial_putchar+0x14>)
    96f0:	0021      	movs	r1, r4
    96f2:	0028      	movs	r0, r5
    96f4:	47b0      	blx	r6
    96f6:	2800      	cmp	r0, #0
    96f8:	d1fa      	bne.n	96f0 <usart_serial_putchar+0x8>
}
    96fa:	bd70      	pop	{r4, r5, r6, pc}
    96fc:	00005749 	.word	0x00005749

00009700 <rename_to_unique>:
{
    9700:	b5f0      	push	{r4, r5, r6, r7, lr}
    9702:	46de      	mov	lr, fp
    9704:	b500      	push	{lr}
    9706:	b0c8      	sub	sp, #288	; 0x120
    9708:	0007      	movs	r7, r0
    970a:	000e      	movs	r6, r1
    970c:	9101      	str	r1, [sp, #4]
    970e:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    9710:	22fb      	movs	r2, #251	; 0xfb
    9712:	2100      	movs	r1, #0
    9714:	a809      	add	r0, sp, #36	; 0x24
    9716:	4d52      	ldr	r5, [pc, #328]	; (9860 <rename_to_unique+0x160>)
    9718:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    971a:	2209      	movs	r2, #9
    971c:	2100      	movs	r1, #0
    971e:	a806      	add	r0, sp, #24
    9720:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
    9722:	2300      	movs	r3, #0
    9724:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
    9726:	2e00      	cmp	r6, #0
    9728:	d100      	bne.n	972c <rename_to_unique+0x2c>
    972a:	e090      	b.n	984e <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
    972c:	2f00      	cmp	r7, #0
    972e:	d100      	bne.n	9732 <rename_to_unique+0x32>
    9730:	e08f      	b.n	9852 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    9732:	4d4c      	ldr	r5, [pc, #304]	; (9864 <rename_to_unique+0x164>)
    9734:	2200      	movs	r2, #0
    9736:	0031      	movs	r1, r6
    9738:	0028      	movs	r0, r5
    973a:	4b4b      	ldr	r3, [pc, #300]	; (9868 <rename_to_unique+0x168>)
    973c:	4798      	blx	r3
    973e:	0007      	movs	r7, r0
	f_close(&file_object);
    9740:	0028      	movs	r0, r5
    9742:	4b4a      	ldr	r3, [pc, #296]	; (986c <rename_to_unique+0x16c>)
    9744:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
    9746:	2f00      	cmp	r7, #0
    9748:	d000      	beq.n	974c <rename_to_unique+0x4c>
    974a:	e084      	b.n	9856 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    974c:	0030      	movs	r0, r6
    974e:	4b48      	ldr	r3, [pc, #288]	; (9870 <rename_to_unique+0x170>)
    9750:	4798      	blx	r3
    9752:	0003      	movs	r3, r0
		return false;
    9754:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    9756:	2bfa      	cmp	r3, #250	; 0xfa
    9758:	d87e      	bhi.n	9858 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
    975a:	212e      	movs	r1, #46	; 0x2e
    975c:	0030      	movs	r0, r6
    975e:	4b45      	ldr	r3, [pc, #276]	; (9874 <rename_to_unique+0x174>)
    9760:	4798      	blx	r3
    9762:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
    9764:	d039      	beq.n	97da <rename_to_unique+0xda>
		ext_len = strlen(p);
    9766:	4b42      	ldr	r3, [pc, #264]	; (9870 <rename_to_unique+0x170>)
    9768:	4798      	blx	r3
    976a:	0007      	movs	r7, r0
    976c:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    976e:	2c07      	cmp	r4, #7
    9770:	d820      	bhi.n	97b4 <rename_to_unique+0xb4>
			strcpy(ext, p);
    9772:	0029      	movs	r1, r5
    9774:	a806      	add	r0, sp, #24
    9776:	4b40      	ldr	r3, [pc, #256]	; (9878 <rename_to_unique+0x178>)
    9778:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    977a:	0030      	movs	r0, r6
    977c:	4b3c      	ldr	r3, [pc, #240]	; (9870 <rename_to_unique+0x170>)
    977e:	4798      	blx	r3
    9780:	043f      	lsls	r7, r7, #16
    9782:	0c3f      	lsrs	r7, r7, #16
    9784:	1bc7      	subs	r7, r0, r7
    9786:	2ff6      	cmp	r7, #246	; 0xf6
    9788:	d909      	bls.n	979e <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    978a:	25f6      	movs	r5, #246	; 0xf6
    978c:	1b2d      	subs	r5, r5, r4
    978e:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
    9790:	002a      	movs	r2, r5
    9792:	0031      	movs	r1, r6
    9794:	a809      	add	r0, sp, #36	; 0x24
    9796:	4b39      	ldr	r3, [pc, #228]	; (987c <rename_to_unique+0x17c>)
    9798:	4798      	blx	r3
			valid_ext = true;
    979a:	2401      	movs	r4, #1
    979c:	e011      	b.n	97c2 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
    979e:	9b01      	ldr	r3, [sp, #4]
    97a0:	1aea      	subs	r2, r5, r3
    97a2:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
    97a4:	0412      	lsls	r2, r2, #16
    97a6:	0c12      	lsrs	r2, r2, #16
    97a8:	0019      	movs	r1, r3
    97aa:	a809      	add	r0, sp, #36	; 0x24
    97ac:	4b33      	ldr	r3, [pc, #204]	; (987c <rename_to_unique+0x17c>)
    97ae:	4798      	blx	r3
			valid_ext = true;
    97b0:	2401      	movs	r4, #1
    97b2:	e006      	b.n	97c2 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
    97b4:	22f6      	movs	r2, #246	; 0xf6
    97b6:	9901      	ldr	r1, [sp, #4]
    97b8:	a809      	add	r0, sp, #36	; 0x24
    97ba:	4b30      	ldr	r3, [pc, #192]	; (987c <rename_to_unique+0x17c>)
    97bc:	4798      	blx	r3
	bool valid_ext = false;
    97be:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    97c0:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
    97c2:	1c6e      	adds	r6, r5, #1
    97c4:	b2b6      	uxth	r6, r6
    97c6:	222d      	movs	r2, #45	; 0x2d
    97c8:	ab09      	add	r3, sp, #36	; 0x24
    97ca:	555a      	strb	r2, [r3, r5]
    97cc:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    97ce:	1cf3      	adds	r3, r6, #3
    97d0:	aa09      	add	r2, sp, #36	; 0x24
    97d2:	4694      	mov	ip, r2
    97d4:	4463      	add	r3, ip
    97d6:	9302      	str	r3, [sp, #8]
    97d8:	e019      	b.n	980e <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
    97da:	22f6      	movs	r2, #246	; 0xf6
    97dc:	9901      	ldr	r1, [sp, #4]
    97de:	a809      	add	r0, sp, #36	; 0x24
    97e0:	4b26      	ldr	r3, [pc, #152]	; (987c <rename_to_unique+0x17c>)
    97e2:	4798      	blx	r3
	bool valid_ext = false;
    97e4:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    97e6:	25f6      	movs	r5, #246	; 0xf6
    97e8:	e7eb      	b.n	97c2 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    97ea:	4f1e      	ldr	r7, [pc, #120]	; (9864 <rename_to_unique+0x164>)
    97ec:	2200      	movs	r2, #0
    97ee:	a909      	add	r1, sp, #36	; 0x24
    97f0:	0038      	movs	r0, r7
    97f2:	4b1d      	ldr	r3, [pc, #116]	; (9868 <rename_to_unique+0x168>)
    97f4:	4798      	blx	r3
    97f6:	4683      	mov	fp, r0
	f_close(&file_object);
    97f8:	0038      	movs	r0, r7
    97fa:	4b1c      	ldr	r3, [pc, #112]	; (986c <rename_to_unique+0x16c>)
    97fc:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
    97fe:	465b      	mov	r3, fp
    9800:	2b00      	cmp	r3, #0
    9802:	d116      	bne.n	9832 <rename_to_unique+0x132>
    9804:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
    9806:	4b1e      	ldr	r3, [pc, #120]	; (9880 <rename_to_unique+0x180>)
    9808:	b2aa      	uxth	r2, r5
    980a:	429a      	cmp	r2, r3
    980c:	d81d      	bhi.n	984a <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    980e:	002a      	movs	r2, r5
    9810:	491c      	ldr	r1, [pc, #112]	; (9884 <rename_to_unique+0x184>)
    9812:	a805      	add	r0, sp, #20
    9814:	4b1c      	ldr	r3, [pc, #112]	; (9888 <rename_to_unique+0x188>)
    9816:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    9818:	ab09      	add	r3, sp, #36	; 0x24
    981a:	1998      	adds	r0, r3, r6
    981c:	2203      	movs	r2, #3
    981e:	a905      	add	r1, sp, #20
    9820:	4b16      	ldr	r3, [pc, #88]	; (987c <rename_to_unique+0x17c>)
    9822:	4798      	blx	r3
		if (valid_ext) {
    9824:	2c00      	cmp	r4, #0
    9826:	d0e0      	beq.n	97ea <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    9828:	a906      	add	r1, sp, #24
    982a:	9802      	ldr	r0, [sp, #8]
    982c:	4b12      	ldr	r3, [pc, #72]	; (9878 <rename_to_unique+0x178>)
    982e:	4798      	blx	r3
    9830:	e7db      	b.n	97ea <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
    9832:	9a03      	ldr	r2, [sp, #12]
    9834:	2100      	movs	r1, #0
    9836:	9c01      	ldr	r4, [sp, #4]
    9838:	0020      	movs	r0, r4
    983a:	4b09      	ldr	r3, [pc, #36]	; (9860 <rename_to_unique+0x160>)
    983c:	4798      	blx	r3
			strcpy(file_path_name, name);
    983e:	a909      	add	r1, sp, #36	; 0x24
    9840:	0020      	movs	r0, r4
    9842:	4b0d      	ldr	r3, [pc, #52]	; (9878 <rename_to_unique+0x178>)
    9844:	4798      	blx	r3
			return true;
    9846:	2001      	movs	r0, #1
    9848:	e006      	b.n	9858 <rename_to_unique+0x158>
	return false;
    984a:	2000      	movs	r0, #0
    984c:	e004      	b.n	9858 <rename_to_unique+0x158>
		return false;
    984e:	2000      	movs	r0, #0
    9850:	e002      	b.n	9858 <rename_to_unique+0x158>
		return true;
    9852:	2001      	movs	r0, #1
    9854:	e000      	b.n	9858 <rename_to_unique+0x158>
    9856:	2001      	movs	r0, #1
}
    9858:	b048      	add	sp, #288	; 0x120
    985a:	bc04      	pop	{r2}
    985c:	4693      	mov	fp, r2
    985e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9860:	0000a1db 	.word	0x0000a1db
    9864:	2000044c 	.word	0x2000044c
    9868:	00007f19 	.word	0x00007f19
    986c:	00008365 	.word	0x00008365
    9870:	0000a69f 	.word	0x0000a69f
    9874:	0000a6f9 	.word	0x0000a6f9
    9878:	0000a655 	.word	0x0000a655
    987c:	0000a6cf 	.word	0x0000a6cf
    9880:	000003e7 	.word	0x000003e7
    9884:	0000d21c 	.word	0x0000d21c
    9888:	0000a5fd 	.word	0x0000a5fd

0000988c <store_file_packet>:
{
    988c:	b5f0      	push	{r4, r5, r6, r7, lr}
    988e:	b083      	sub	sp, #12
    9890:	0005      	movs	r5, r0
    9892:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    9894:	2800      	cmp	r0, #0
    9896:	d00c      	beq.n	98b2 <store_file_packet+0x26>
    9898:	2900      	cmp	r1, #0
    989a:	d00a      	beq.n	98b2 <store_file_packet+0x26>
	return ((down_state & mask) != 0);
    989c:	4b39      	ldr	r3, [pc, #228]	; (9984 <store_file_packet+0xf8>)
    989e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    98a0:	071b      	lsls	r3, r3, #28
    98a2:	d430      	bmi.n	9906 <store_file_packet+0x7a>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    98a4:	4b38      	ldr	r3, [pc, #224]	; (9988 <store_file_packet+0xfc>)
    98a6:	2230      	movs	r2, #48	; 0x30
    98a8:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    98aa:	320a      	adds	r2, #10
    98ac:	705a      	strb	r2, [r3, #1]
    98ae:	4c37      	ldr	r4, [pc, #220]	; (998c <store_file_packet+0x100>)
    98b0:	e005      	b.n	98be <store_file_packet+0x32>
		printf("store_file_packet: empty data.\r\n");
    98b2:	4837      	ldr	r0, [pc, #220]	; (9990 <store_file_packet+0x104>)
    98b4:	4b37      	ldr	r3, [pc, #220]	; (9994 <store_file_packet+0x108>)
    98b6:	4798      	blx	r3
}
    98b8:	b003      	add	sp, #12
    98ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    98bc:	0004      	movs	r4, r0
    98be:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    98c0:	7803      	ldrb	r3, [r0, #0]
    98c2:	2b2f      	cmp	r3, #47	; 0x2f
    98c4:	d1fa      	bne.n	98bc <store_file_packet+0x30>
		if (strlen(cp) > 1) {
    98c6:	4b34      	ldr	r3, [pc, #208]	; (9998 <store_file_packet+0x10c>)
    98c8:	4798      	blx	r3
    98ca:	2801      	cmp	r0, #1
    98cc:	d92f      	bls.n	992e <store_file_packet+0xa2>
			strcpy(&save_file_name[2], cp);
    98ce:	4f2e      	ldr	r7, [pc, #184]	; (9988 <store_file_packet+0xfc>)
    98d0:	1cb8      	adds	r0, r7, #2
    98d2:	0021      	movs	r1, r4
    98d4:	4b31      	ldr	r3, [pc, #196]	; (999c <store_file_packet+0x110>)
    98d6:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    98d8:	4c31      	ldr	r4, [pc, #196]	; (99a0 <store_file_packet+0x114>)
    98da:	22fa      	movs	r2, #250	; 0xfa
    98dc:	0039      	movs	r1, r7
    98de:	0020      	movs	r0, r4
    98e0:	4b30      	ldr	r3, [pc, #192]	; (99a4 <store_file_packet+0x118>)
    98e2:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    98e4:	0039      	movs	r1, r7
    98e6:	4830      	ldr	r0, [pc, #192]	; (99a8 <store_file_packet+0x11c>)
    98e8:	4b30      	ldr	r3, [pc, #192]	; (99ac <store_file_packet+0x120>)
    98ea:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    98ec:	220a      	movs	r2, #10
    98ee:	0039      	movs	r1, r7
    98f0:	0020      	movs	r0, r4
    98f2:	4b2f      	ldr	r3, [pc, #188]	; (99b0 <store_file_packet+0x124>)
    98f4:	4798      	blx	r3
		if (ret != FR_OK) {
    98f6:	2800      	cmp	r0, #0
    98f8:	d120      	bne.n	993c <store_file_packet+0xb0>
		received_file_size = 0;
    98fa:	2200      	movs	r2, #0
    98fc:	4b2d      	ldr	r3, [pc, #180]	; (99b4 <store_file_packet+0x128>)
    98fe:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    9900:	2008      	movs	r0, #8
    9902:	4b2d      	ldr	r3, [pc, #180]	; (99b8 <store_file_packet+0x12c>)
    9904:	4798      	blx	r3
		UINT wsize = 0;
    9906:	2300      	movs	r3, #0
    9908:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    990a:	ab01      	add	r3, sp, #4
    990c:	0032      	movs	r2, r6
    990e:	0029      	movs	r1, r5
    9910:	4823      	ldr	r0, [pc, #140]	; (99a0 <store_file_packet+0x114>)
    9912:	4c2a      	ldr	r4, [pc, #168]	; (99bc <store_file_packet+0x130>)
    9914:	47a0      	blx	r4
		if (ret != FR_OK) {
    9916:	2800      	cmp	r0, #0
    9918:	d015      	beq.n	9946 <store_file_packet+0xba>
			f_close(&file_object);
    991a:	4821      	ldr	r0, [pc, #132]	; (99a0 <store_file_packet+0x114>)
    991c:	4b28      	ldr	r3, [pc, #160]	; (99c0 <store_file_packet+0x134>)
    991e:	4798      	blx	r3
			add_state(CANCELED);
    9920:	2020      	movs	r0, #32
    9922:	4b25      	ldr	r3, [pc, #148]	; (99b8 <store_file_packet+0x12c>)
    9924:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    9926:	4827      	ldr	r0, [pc, #156]	; (99c4 <store_file_packet+0x138>)
    9928:	4b1a      	ldr	r3, [pc, #104]	; (9994 <store_file_packet+0x108>)
    992a:	4798      	blx	r3
			return;
    992c:	e7c4      	b.n	98b8 <store_file_packet+0x2c>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    992e:	4826      	ldr	r0, [pc, #152]	; (99c8 <store_file_packet+0x13c>)
    9930:	4b18      	ldr	r3, [pc, #96]	; (9994 <store_file_packet+0x108>)
    9932:	4798      	blx	r3
			add_state(CANCELED);
    9934:	2020      	movs	r0, #32
    9936:	4b20      	ldr	r3, [pc, #128]	; (99b8 <store_file_packet+0x12c>)
    9938:	4798      	blx	r3
			return;
    993a:	e7bd      	b.n	98b8 <store_file_packet+0x2c>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    993c:	0001      	movs	r1, r0
    993e:	4823      	ldr	r0, [pc, #140]	; (99cc <store_file_packet+0x140>)
    9940:	4b1a      	ldr	r3, [pc, #104]	; (99ac <store_file_packet+0x120>)
    9942:	4798      	blx	r3
			return;
    9944:	e7b8      	b.n	98b8 <store_file_packet+0x2c>
		received_file_size += wsize;
    9946:	4c1b      	ldr	r4, [pc, #108]	; (99b4 <store_file_packet+0x128>)
    9948:	6823      	ldr	r3, [r4, #0]
    994a:	9a01      	ldr	r2, [sp, #4]
    994c:	4694      	mov	ip, r2
    994e:	4463      	add	r3, ip
    9950:	0019      	movs	r1, r3
    9952:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    9954:	4d1e      	ldr	r5, [pc, #120]	; (99d0 <store_file_packet+0x144>)
    9956:	682a      	ldr	r2, [r5, #0]
    9958:	481e      	ldr	r0, [pc, #120]	; (99d4 <store_file_packet+0x148>)
    995a:	4b14      	ldr	r3, [pc, #80]	; (99ac <store_file_packet+0x120>)
    995c:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    995e:	6822      	ldr	r2, [r4, #0]
    9960:	682b      	ldr	r3, [r5, #0]
    9962:	429a      	cmp	r2, r3
    9964:	d3a8      	bcc.n	98b8 <store_file_packet+0x2c>
			f_close(&file_object);
    9966:	480e      	ldr	r0, [pc, #56]	; (99a0 <store_file_packet+0x114>)
    9968:	4b15      	ldr	r3, [pc, #84]	; (99c0 <store_file_packet+0x134>)
    996a:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    996c:	481a      	ldr	r0, [pc, #104]	; (99d8 <store_file_packet+0x14c>)
    996e:	4b09      	ldr	r3, [pc, #36]	; (9994 <store_file_packet+0x108>)
    9970:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    9972:	2280      	movs	r2, #128	; 0x80
    9974:	0412      	lsls	r2, r2, #16
    9976:	4b19      	ldr	r3, [pc, #100]	; (99dc <store_file_packet+0x150>)
    9978:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
    997a:	2010      	movs	r0, #16
    997c:	4b0e      	ldr	r3, [pc, #56]	; (99b8 <store_file_packet+0x12c>)
    997e:	4798      	blx	r3
			return;
    9980:	e79a      	b.n	98b8 <store_file_packet+0x2c>
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	20000448 	.word	0x20000448
    9988:	20000030 	.word	0x20000030
    998c:	0000d378 	.word	0x0000d378
    9990:	0000d37c 	.word	0x0000d37c
    9994:	0000a459 	.word	0x0000a459
    9998:	0000a69f 	.word	0x0000a69f
    999c:	0000a655 	.word	0x0000a655
    99a0:	2000044c 	.word	0x2000044c
    99a4:	00009701 	.word	0x00009701
    99a8:	0000d39c 	.word	0x0000d39c
    99ac:	0000a33d 	.word	0x0000a33d
    99b0:	00007f19 	.word	0x00007f19
    99b4:	20000474 	.word	0x20000474
    99b8:	000095ed 	.word	0x000095ed
    99bc:	000080a1 	.word	0x000080a1
    99c0:	00008365 	.word	0x00008365
    99c4:	0000d438 	.word	0x0000d438
    99c8:	0000d3c4 	.word	0x0000d3c4
    99cc:	0000d404 	.word	0x0000d404
    99d0:	20000470 	.word	0x20000470
    99d4:	0000d474 	.word	0x0000d474
    99d8:	0000d4a8 	.word	0x0000d4a8
    99dc:	41004400 	.word	0x41004400

000099e0 <http_client_callback>:
{
    99e0:	b510      	push	{r4, lr}
    99e2:	0014      	movs	r4, r2
	switch (type) {
    99e4:	2904      	cmp	r1, #4
    99e6:	d806      	bhi.n	99f6 <http_client_callback+0x16>
    99e8:	0089      	lsls	r1, r1, #2
    99ea:	4b2a      	ldr	r3, [pc, #168]	; (9a94 <http_client_callback+0xb4>)
    99ec:	585b      	ldr	r3, [r3, r1]
    99ee:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    99f0:	4829      	ldr	r0, [pc, #164]	; (9a98 <http_client_callback+0xb8>)
    99f2:	4b2a      	ldr	r3, [pc, #168]	; (9a9c <http_client_callback+0xbc>)
    99f4:	4798      	blx	r3
}
    99f6:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    99f8:	4829      	ldr	r0, [pc, #164]	; (9aa0 <http_client_callback+0xc0>)
    99fa:	4b28      	ldr	r3, [pc, #160]	; (9a9c <http_client_callback+0xbc>)
    99fc:	4798      	blx	r3
		add_state(GET_REQUESTED);
    99fe:	2004      	movs	r0, #4
    9a00:	4b28      	ldr	r3, [pc, #160]	; (9aa4 <http_client_callback+0xc4>)
    9a02:	4798      	blx	r3
		break;
    9a04:	e7f7      	b.n	99f6 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    9a06:	8811      	ldrh	r1, [r2, #0]
    9a08:	6852      	ldr	r2, [r2, #4]
    9a0a:	4827      	ldr	r0, [pc, #156]	; (9aa8 <http_client_callback+0xc8>)
    9a0c:	4b27      	ldr	r3, [pc, #156]	; (9aac <http_client_callback+0xcc>)
    9a0e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    9a10:	8823      	ldrh	r3, [r4, #0]
    9a12:	2bc8      	cmp	r3, #200	; 0xc8
    9a14:	d10f      	bne.n	9a36 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    9a16:	6861      	ldr	r1, [r4, #4]
    9a18:	4b25      	ldr	r3, [pc, #148]	; (9ab0 <http_client_callback+0xd0>)
    9a1a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    9a1c:	2200      	movs	r2, #0
    9a1e:	4b25      	ldr	r3, [pc, #148]	; (9ab4 <http_client_callback+0xd4>)
    9a20:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    9a22:	4b25      	ldr	r3, [pc, #148]	; (9ab8 <http_client_callback+0xd8>)
    9a24:	4299      	cmp	r1, r3
    9a26:	d8e6      	bhi.n	99f6 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    9a28:	68a0      	ldr	r0, [r4, #8]
    9a2a:	4b24      	ldr	r3, [pc, #144]	; (9abc <http_client_callback+0xdc>)
    9a2c:	4798      	blx	r3
			add_state(COMPLETED);
    9a2e:	2010      	movs	r0, #16
    9a30:	4b1c      	ldr	r3, [pc, #112]	; (9aa4 <http_client_callback+0xc4>)
    9a32:	4798      	blx	r3
    9a34:	e7df      	b.n	99f6 <http_client_callback+0x16>
			add_state(CANCELED);
    9a36:	2020      	movs	r0, #32
    9a38:	4b1a      	ldr	r3, [pc, #104]	; (9aa4 <http_client_callback+0xc4>)
    9a3a:	4798      	blx	r3
			return;
    9a3c:	e7db      	b.n	99f6 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    9a3e:	6811      	ldr	r1, [r2, #0]
    9a40:	6850      	ldr	r0, [r2, #4]
    9a42:	4b1e      	ldr	r3, [pc, #120]	; (9abc <http_client_callback+0xdc>)
    9a44:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    9a46:	7a23      	ldrb	r3, [r4, #8]
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d0d4      	beq.n	99f6 <http_client_callback+0x16>
			add_state(COMPLETED);
    9a4c:	2010      	movs	r0, #16
    9a4e:	4b15      	ldr	r3, [pc, #84]	; (9aa4 <http_client_callback+0xc4>)
    9a50:	4798      	blx	r3
    9a52:	e7d0      	b.n	99f6 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    9a54:	6811      	ldr	r1, [r2, #0]
    9a56:	481a      	ldr	r0, [pc, #104]	; (9ac0 <http_client_callback+0xe0>)
    9a58:	4b14      	ldr	r3, [pc, #80]	; (9aac <http_client_callback+0xcc>)
    9a5a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    9a5c:	6823      	ldr	r3, [r4, #0]
    9a5e:	330b      	adds	r3, #11
    9a60:	d1c9      	bne.n	99f6 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    9a62:	4b18      	ldr	r3, [pc, #96]	; (9ac4 <http_client_callback+0xe4>)
    9a64:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    9a66:	071b      	lsls	r3, r3, #28
    9a68:	d406      	bmi.n	9a78 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    9a6a:	4b16      	ldr	r3, [pc, #88]	; (9ac4 <http_client_callback+0xe4>)
    9a6c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    9a6e:	075a      	lsls	r2, r3, #29
    9a70:	d40b      	bmi.n	9a8a <http_client_callback+0xaa>
			start_download();
    9a72:	4b15      	ldr	r3, [pc, #84]	; (9ac8 <http_client_callback+0xe8>)
    9a74:	4798      	blx	r3
    9a76:	e7be      	b.n	99f6 <http_client_callback+0x16>
				f_close(&file_object);
    9a78:	4814      	ldr	r0, [pc, #80]	; (9acc <http_client_callback+0xec>)
    9a7a:	4b15      	ldr	r3, [pc, #84]	; (9ad0 <http_client_callback+0xf0>)
    9a7c:	4798      	blx	r3
	down_state &= ~mask;
    9a7e:	4a11      	ldr	r2, [pc, #68]	; (9ac4 <http_client_callback+0xe4>)
    9a80:	7813      	ldrb	r3, [r2, #0]
    9a82:	2108      	movs	r1, #8
    9a84:	438b      	bics	r3, r1
    9a86:	7013      	strb	r3, [r2, #0]
    9a88:	e7ef      	b.n	9a6a <http_client_callback+0x8a>
    9a8a:	2204      	movs	r2, #4
    9a8c:	4393      	bics	r3, r2
    9a8e:	4a0d      	ldr	r2, [pc, #52]	; (9ac4 <http_client_callback+0xe4>)
    9a90:	7013      	strb	r3, [r2, #0]
    9a92:	e7ee      	b.n	9a72 <http_client_callback+0x92>
    9a94:	0000cfc4 	.word	0x0000cfc4
    9a98:	0000cfd8 	.word	0x0000cfd8
    9a9c:	0000a459 	.word	0x0000a459
    9aa0:	0000d010 	.word	0x0000d010
    9aa4:	000095ed 	.word	0x000095ed
    9aa8:	0000d03c 	.word	0x0000d03c
    9aac:	0000a33d 	.word	0x0000a33d
    9ab0:	20000470 	.word	0x20000470
    9ab4:	20000474 	.word	0x20000474
    9ab8:	000005a6 	.word	0x000005a6
    9abc:	0000988d 	.word	0x0000988d
    9ac0:	0000d078 	.word	0x0000d078
    9ac4:	20000448 	.word	0x20000448
    9ac8:	00009645 	.word	0x00009645
    9acc:	2000044c 	.word	0x2000044c
    9ad0:	00008365 	.word	0x00008365

00009ad4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    9ad4:	b510      	push	{r4, lr}
    9ad6:	b082      	sub	sp, #8
    9ad8:	000c      	movs	r4, r1
	switch (u8MsgType) {
    9ada:	282c      	cmp	r0, #44	; 0x2c
    9adc:	d003      	beq.n	9ae6 <wifi_cb+0x12>
    9ade:	2832      	cmp	r0, #50	; 0x32
    9ae0:	d035      	beq.n	9b4e <wifi_cb+0x7a>
	}

	default:
		break;
	}
}
    9ae2:	b002      	add	sp, #8
    9ae4:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    9ae6:	780b      	ldrb	r3, [r1, #0]
    9ae8:	2b01      	cmp	r3, #1
    9aea:	d01c      	beq.n	9b26 <wifi_cb+0x52>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    9aec:	2b00      	cmp	r3, #0
    9aee:	d1f8      	bne.n	9ae2 <wifi_cb+0xe>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    9af0:	481e      	ldr	r0, [pc, #120]	; (9b6c <wifi_cb+0x98>)
    9af2:	4b1f      	ldr	r3, [pc, #124]	; (9b70 <wifi_cb+0x9c>)
    9af4:	4798      	blx	r3
			printf("wifi_cb: Error code %d\r\n", pstrWifiState->u8ErrCode);
    9af6:	7861      	ldrb	r1, [r4, #1]
    9af8:	481e      	ldr	r0, [pc, #120]	; (9b74 <wifi_cb+0xa0>)
    9afa:	4b1f      	ldr	r3, [pc, #124]	; (9b78 <wifi_cb+0xa4>)
    9afc:	4798      	blx	r3
	down_state &= ~mask;
    9afe:	4a1f      	ldr	r2, [pc, #124]	; (9b7c <wifi_cb+0xa8>)
    9b00:	7813      	ldrb	r3, [r2, #0]
    9b02:	2102      	movs	r1, #2
    9b04:	438b      	bics	r3, r1
    9b06:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
    9b08:	071b      	lsls	r3, r3, #28
    9b0a:	d412      	bmi.n	9b32 <wifi_cb+0x5e>
	return ((down_state & mask) != 0);
    9b0c:	4b1b      	ldr	r3, [pc, #108]	; (9b7c <wifi_cb+0xa8>)
    9b0e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    9b10:	075a      	lsls	r2, r3, #29
    9b12:	d417      	bmi.n	9b44 <wifi_cb+0x70>
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    9b14:	23ff      	movs	r3, #255	; 0xff
    9b16:	9300      	str	r3, [sp, #0]
    9b18:	4b19      	ldr	r3, [pc, #100]	; (9b80 <wifi_cb+0xac>)
    9b1a:	2202      	movs	r2, #2
    9b1c:	2112      	movs	r1, #18
    9b1e:	4819      	ldr	r0, [pc, #100]	; (9b84 <wifi_cb+0xb0>)
    9b20:	4c19      	ldr	r4, [pc, #100]	; (9b88 <wifi_cb+0xb4>)
    9b22:	47a0      	blx	r4
    9b24:	e7dd      	b.n	9ae2 <wifi_cb+0xe>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    9b26:	4819      	ldr	r0, [pc, #100]	; (9b8c <wifi_cb+0xb8>)
    9b28:	4b11      	ldr	r3, [pc, #68]	; (9b70 <wifi_cb+0x9c>)
    9b2a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    9b2c:	4b18      	ldr	r3, [pc, #96]	; (9b90 <wifi_cb+0xbc>)
    9b2e:	4798      	blx	r3
    9b30:	e7d7      	b.n	9ae2 <wifi_cb+0xe>
				f_close(&file_object);
    9b32:	4818      	ldr	r0, [pc, #96]	; (9b94 <wifi_cb+0xc0>)
    9b34:	4b18      	ldr	r3, [pc, #96]	; (9b98 <wifi_cb+0xc4>)
    9b36:	4798      	blx	r3
	down_state &= ~mask;
    9b38:	4a10      	ldr	r2, [pc, #64]	; (9b7c <wifi_cb+0xa8>)
    9b3a:	7813      	ldrb	r3, [r2, #0]
    9b3c:	2108      	movs	r1, #8
    9b3e:	438b      	bics	r3, r1
    9b40:	7013      	strb	r3, [r2, #0]
    9b42:	e7e3      	b.n	9b0c <wifi_cb+0x38>
    9b44:	2204      	movs	r2, #4
    9b46:	4393      	bics	r3, r2
    9b48:	4a0c      	ldr	r2, [pc, #48]	; (9b7c <wifi_cb+0xa8>)
    9b4a:	7013      	strb	r3, [r2, #0]
    9b4c:	e7e2      	b.n	9b14 <wifi_cb+0x40>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    9b4e:	788b      	ldrb	r3, [r1, #2]
    9b50:	784a      	ldrb	r2, [r1, #1]
    9b52:	7809      	ldrb	r1, [r1, #0]
    9b54:	78e0      	ldrb	r0, [r4, #3]
    9b56:	9000      	str	r0, [sp, #0]
    9b58:	4810      	ldr	r0, [pc, #64]	; (9b9c <wifi_cb+0xc8>)
    9b5a:	4c07      	ldr	r4, [pc, #28]	; (9b78 <wifi_cb+0xa4>)
    9b5c:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    9b5e:	2002      	movs	r0, #2
    9b60:	4b0f      	ldr	r3, [pc, #60]	; (9ba0 <wifi_cb+0xcc>)
    9b62:	4798      	blx	r3
		start_download();
    9b64:	4b0f      	ldr	r3, [pc, #60]	; (9ba4 <wifi_cb+0xd0>)
    9b66:	4798      	blx	r3
}
    9b68:	e7bb      	b.n	9ae2 <wifi_cb+0xe>
    9b6a:	46c0      	nop			; (mov r8, r8)
    9b6c:	0000d4fc 	.word	0x0000d4fc
    9b70:	0000a459 	.word	0x0000a459
    9b74:	0000d51c 	.word	0x0000d51c
    9b78:	0000a33d 	.word	0x0000a33d
    9b7c:	20000448 	.word	0x20000448
    9b80:	0000d538 	.word	0x0000d538
    9b84:	0000d548 	.word	0x0000d548
    9b88:	00002541 	.word	0x00002541
    9b8c:	0000d4dc 	.word	0x0000d4dc
    9b90:	0000255d 	.word	0x0000255d
    9b94:	2000044c 	.word	0x2000044c
    9b98:	00008365 	.word	0x00008365
    9b9c:	0000d55c 	.word	0x0000d55c
    9ba0:	000095ed 	.word	0x000095ed
    9ba4:	00009645 	.word	0x00009645

00009ba8 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    9ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9baa:	b099      	sub	sp, #100	; 0x64
	down_state = NOT_READY;
    9bac:	2400      	movs	r4, #0
    9bae:	2600      	movs	r6, #0
    9bb0:	4b5d      	ldr	r3, [pc, #372]	; (9d28 <main+0x180>)
    9bb2:	701c      	strb	r4, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
    9bb4:	4b5d      	ldr	r3, [pc, #372]	; (9d2c <main+0x184>)
    9bb6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9bb8:	aa02      	add	r2, sp, #8
    9bba:	2380      	movs	r3, #128	; 0x80
    9bbc:	05db      	lsls	r3, r3, #23
    9bbe:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9bc0:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    9bc2:	23ff      	movs	r3, #255	; 0xff
    9bc4:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    9bc6:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    9bc8:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    9bca:	2501      	movs	r5, #1
    9bcc:	3bdb      	subs	r3, #219	; 0xdb
    9bce:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    9bd0:	3301      	adds	r3, #1
    9bd2:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    9bd4:	3301      	adds	r3, #1
    9bd6:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    9bd8:	3301      	adds	r3, #1
    9bda:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    9bdc:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    9bde:	3305      	adds	r3, #5
    9be0:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    9be2:	3301      	adds	r3, #1
    9be4:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9be6:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9be8:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    9bea:	2300      	movs	r3, #0
    9bec:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9bee:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9bf0:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9bf2:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    9bf4:	2313      	movs	r3, #19
    9bf6:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9bf8:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    9bfa:	23c4      	movs	r3, #196	; 0xc4
    9bfc:	039b      	lsls	r3, r3, #14
    9bfe:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    9c00:	2301      	movs	r3, #1
    9c02:	425b      	negs	r3, r3
    9c04:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    9c06:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    9c08:	4b49      	ldr	r3, [pc, #292]	; (9d30 <main+0x188>)
    9c0a:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    9c0c:	4b49      	ldr	r3, [pc, #292]	; (9d34 <main+0x18c>)
    9c0e:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    9c10:	23e1      	movs	r3, #225	; 0xe1
    9c12:	025b      	lsls	r3, r3, #9
    9c14:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    9c16:	4c48      	ldr	r4, [pc, #288]	; (9d38 <main+0x190>)
    9c18:	4b48      	ldr	r3, [pc, #288]	; (9d3c <main+0x194>)
    9c1a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    9c1c:	4948      	ldr	r1, [pc, #288]	; (9d40 <main+0x198>)
    9c1e:	4b49      	ldr	r3, [pc, #292]	; (9d44 <main+0x19c>)
    9c20:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    9c22:	4949      	ldr	r1, [pc, #292]	; (9d48 <main+0x1a0>)
    9c24:	4b49      	ldr	r3, [pc, #292]	; (9d4c <main+0x1a4>)
    9c26:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    9c28:	4949      	ldr	r1, [pc, #292]	; (9d50 <main+0x1a8>)
    9c2a:	0020      	movs	r0, r4
    9c2c:	4b49      	ldr	r3, [pc, #292]	; (9d54 <main+0x1ac>)
    9c2e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    9c30:	4f49      	ldr	r7, [pc, #292]	; (9d58 <main+0x1b0>)
    9c32:	683b      	ldr	r3, [r7, #0]
    9c34:	6898      	ldr	r0, [r3, #8]
    9c36:	2100      	movs	r1, #0
    9c38:	4e48      	ldr	r6, [pc, #288]	; (9d5c <main+0x1b4>)
    9c3a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    9c3c:	683b      	ldr	r3, [r7, #0]
    9c3e:	6858      	ldr	r0, [r3, #4]
    9c40:	2100      	movs	r1, #0
    9c42:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9c44:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9c46:	0030      	movs	r0, r6
    9c48:	4b45      	ldr	r3, [pc, #276]	; (9d60 <main+0x1b8>)
    9c4a:	4798      	blx	r3
    9c4c:	231f      	movs	r3, #31
    9c4e:	4018      	ands	r0, r3
    9c50:	4085      	lsls	r5, r0
    9c52:	4b44      	ldr	r3, [pc, #272]	; (9d64 <main+0x1bc>)
    9c54:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    9c56:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    9c58:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d1fc      	bne.n	9c58 <main+0xb0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9c5e:	6833      	ldr	r3, [r6, #0]
    9c60:	2202      	movs	r2, #2
    9c62:	4313      	orrs	r3, r2
    9c64:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    9c66:	4840      	ldr	r0, [pc, #256]	; (9d68 <main+0x1c0>)
    9c68:	4c40      	ldr	r4, [pc, #256]	; (9d6c <main+0x1c4>)
    9c6a:	47a0      	blx	r4
	printf("\r\nThis example requires the AP to have internet access.\r\n\r\n");
    9c6c:	4840      	ldr	r0, [pc, #256]	; (9d70 <main+0x1c8>)
    9c6e:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    9c70:	a802      	add	r0, sp, #8
    9c72:	4b40      	ldr	r3, [pc, #256]	; (9d74 <main+0x1cc>)
    9c74:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    9c76:	4c40      	ldr	r4, [pc, #256]	; (9d78 <main+0x1d0>)
    9c78:	a902      	add	r1, sp, #8
    9c7a:	0020      	movs	r0, r4
    9c7c:	4b3f      	ldr	r3, [pc, #252]	; (9d7c <main+0x1d4>)
    9c7e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    9c80:	0020      	movs	r0, r4
    9c82:	4b3f      	ldr	r3, [pc, #252]	; (9d80 <main+0x1d8>)
    9c84:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    9c86:	a802      	add	r0, sp, #8
    9c88:	4b3e      	ldr	r3, [pc, #248]	; (9d84 <main+0x1dc>)
    9c8a:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    9c8c:	4b3e      	ldr	r3, [pc, #248]	; (9d88 <main+0x1e0>)
    9c8e:	9306      	str	r3, [sp, #24]
	httpc_conf.timer_inst = &swt_module_inst;
    9c90:	9403      	str	r4, [sp, #12]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    9c92:	a902      	add	r1, sp, #8
    9c94:	483d      	ldr	r0, [pc, #244]	; (9d8c <main+0x1e4>)
    9c96:	4b3e      	ldr	r3, [pc, #248]	; (9d90 <main+0x1e8>)
    9c98:	4798      	blx	r3
    9c9a:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    9c9c:	db15      	blt.n	9cca <main+0x122>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    9c9e:	493d      	ldr	r1, [pc, #244]	; (9d94 <main+0x1ec>)
    9ca0:	483a      	ldr	r0, [pc, #232]	; (9d8c <main+0x1e4>)
    9ca2:	4b3d      	ldr	r3, [pc, #244]	; (9d98 <main+0x1f0>)
    9ca4:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();

	/* Initialize the BSP. */
	nm_bsp_init();
    9ca6:	4b3d      	ldr	r3, [pc, #244]	; (9d9c <main+0x1f4>)
    9ca8:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	//init_storage();

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    9caa:	2218      	movs	r2, #24
    9cac:	2100      	movs	r1, #0
    9cae:	a812      	add	r0, sp, #72	; 0x48
    9cb0:	4b3b      	ldr	r3, [pc, #236]	; (9da0 <main+0x1f8>)
    9cb2:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    9cb4:	4b3b      	ldr	r3, [pc, #236]	; (9da4 <main+0x1fc>)
    9cb6:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    9cb8:	a812      	add	r0, sp, #72	; 0x48
    9cba:	4b3b      	ldr	r3, [pc, #236]	; (9da8 <main+0x200>)
    9cbc:	4798      	blx	r3
    9cbe:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    9cc0:	d007      	beq.n	9cd2 <main+0x12a>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    9cc2:	483a      	ldr	r0, [pc, #232]	; (9dac <main+0x204>)
    9cc4:	4b3a      	ldr	r3, [pc, #232]	; (9db0 <main+0x208>)
    9cc6:	4798      	blx	r3
    9cc8:	e7fe      	b.n	9cc8 <main+0x120>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    9cca:	483a      	ldr	r0, [pc, #232]	; (9db4 <main+0x20c>)
    9ccc:	4b38      	ldr	r3, [pc, #224]	; (9db0 <main+0x208>)
    9cce:	4798      	blx	r3
    9cd0:	e7fe      	b.n	9cd0 <main+0x128>
		while (1) {
		}
	}

	/* Initialize socket module. */
	socketInit();
    9cd2:	4b39      	ldr	r3, [pc, #228]	; (9db8 <main+0x210>)
    9cd4:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    9cd6:	4939      	ldr	r1, [pc, #228]	; (9dbc <main+0x214>)
    9cd8:	4839      	ldr	r0, [pc, #228]	; (9dc0 <main+0x218>)
    9cda:	4b3a      	ldr	r3, [pc, #232]	; (9dc4 <main+0x21c>)
    9cdc:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    9cde:	4c3a      	ldr	r4, [pc, #232]	; (9dc8 <main+0x220>)
    9ce0:	0021      	movs	r1, r4
    9ce2:	483a      	ldr	r0, [pc, #232]	; (9dcc <main+0x224>)
    9ce4:	4b32      	ldr	r3, [pc, #200]	; (9db0 <main+0x208>)
    9ce6:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    9ce8:	23ff      	movs	r3, #255	; 0xff
    9cea:	9300      	str	r3, [sp, #0]
    9cec:	4b38      	ldr	r3, [pc, #224]	; (9dd0 <main+0x228>)
    9cee:	2202      	movs	r2, #2
    9cf0:	2112      	movs	r1, #18
    9cf2:	0020      	movs	r0, r4
    9cf4:	4c37      	ldr	r4, [pc, #220]	; (9dd4 <main+0x22c>)
    9cf6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    9cf8:	4b0b      	ldr	r3, [pc, #44]	; (9d28 <main+0x180>)

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    9cfa:	781a      	ldrb	r2, [r3, #0]
    9cfc:	2330      	movs	r3, #48	; 0x30
    9cfe:	421a      	tst	r2, r3
    9d00:	d10b      	bne.n	9d1a <main+0x172>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    9d02:	4e35      	ldr	r6, [pc, #212]	; (9dd8 <main+0x230>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    9d04:	4d1c      	ldr	r5, [pc, #112]	; (9d78 <main+0x1d0>)
    9d06:	4c35      	ldr	r4, [pc, #212]	; (9ddc <main+0x234>)
		m2m_wifi_handle_events(NULL);
    9d08:	2000      	movs	r0, #0
    9d0a:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    9d0c:	0028      	movs	r0, r5
    9d0e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    9d10:	4b05      	ldr	r3, [pc, #20]	; (9d28 <main+0x180>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    9d12:	781b      	ldrb	r3, [r3, #0]
    9d14:	2230      	movs	r2, #48	; 0x30
    9d16:	421a      	tst	r2, r3
    9d18:	d0f6      	beq.n	9d08 <main+0x160>
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    9d1a:	4831      	ldr	r0, [pc, #196]	; (9de0 <main+0x238>)
    9d1c:	4c13      	ldr	r4, [pc, #76]	; (9d6c <main+0x1c4>)
    9d1e:	47a0      	blx	r4
	printf("main: done.\r\n");
    9d20:	4830      	ldr	r0, [pc, #192]	; (9de4 <main+0x23c>)
    9d22:	47a0      	blx	r4
    9d24:	e7fe      	b.n	9d24 <main+0x17c>
    9d26:	46c0      	nop			; (mov r8, r8)
    9d28:	20000448 	.word	0x20000448
    9d2c:	000060e9 	.word	0x000060e9
    9d30:	002a0003 	.word	0x002a0003
    9d34:	002b0003 	.word	0x002b0003
    9d38:	20000414 	.word	0x20000414
    9d3c:	20000620 	.word	0x20000620
    9d40:	000096e9 	.word	0x000096e9
    9d44:	2000061c 	.word	0x2000061c
    9d48:	000096bd 	.word	0x000096bd
    9d4c:	20000618 	.word	0x20000618
    9d50:	42001800 	.word	0x42001800
    9d54:	00005405 	.word	0x00005405
    9d58:	2000012c 	.word	0x2000012c
    9d5c:	0000a491 	.word	0x0000a491
    9d60:	00004c81 	.word	0x00004c81
    9d64:	e000e100 	.word	0xe000e100
    9d68:	0000d0a8 	.word	0x0000d0a8
    9d6c:	0000a459 	.word	0x0000a459
    9d70:	0000d110 	.word	0x0000d110
    9d74:	00009455 	.word	0x00009455
    9d78:	20000638 	.word	0x20000638
    9d7c:	00009461 	.word	0x00009461
    9d80:	0000950d 	.word	0x0000950d
    9d84:	0000846d 	.word	0x0000846d
    9d88:	000005a6 	.word	0x000005a6
    9d8c:	20000690 	.word	0x20000690
    9d90:	00008495 	.word	0x00008495
    9d94:	000099e1 	.word	0x000099e1
    9d98:	00008549 	.word	0x00008549
    9d9c:	00001235 	.word	0x00001235
    9da0:	0000a1db 	.word	0x0000a1db
    9da4:	00009ad5 	.word	0x00009ad5
    9da8:	00002171 	.word	0x00002171
    9dac:	0000d194 	.word	0x0000d194
    9db0:	0000a33d 	.word	0x0000a33d
    9db4:	0000d14c 	.word	0x0000d14c
    9db8:	00003d9d 	.word	0x00003d9d
    9dbc:	000095fd 	.word	0x000095fd
    9dc0:	00009639 	.word	0x00009639
    9dc4:	00003de1 	.word	0x00003de1
    9dc8:	0000d548 	.word	0x0000d548
    9dcc:	0000d1c0 	.word	0x0000d1c0
    9dd0:	0000d538 	.word	0x0000d538
    9dd4:	00002541 	.word	0x00002541
    9dd8:	000022a5 	.word	0x000022a5
    9ddc:	00009595 	.word	0x00009595
    9de0:	0000d1e4 	.word	0x0000d1e4
    9de4:	0000d20c 	.word	0x0000d20c

00009de8 <__udivsi3>:
    9de8:	2200      	movs	r2, #0
    9dea:	0843      	lsrs	r3, r0, #1
    9dec:	428b      	cmp	r3, r1
    9dee:	d374      	bcc.n	9eda <__udivsi3+0xf2>
    9df0:	0903      	lsrs	r3, r0, #4
    9df2:	428b      	cmp	r3, r1
    9df4:	d35f      	bcc.n	9eb6 <__udivsi3+0xce>
    9df6:	0a03      	lsrs	r3, r0, #8
    9df8:	428b      	cmp	r3, r1
    9dfa:	d344      	bcc.n	9e86 <__udivsi3+0x9e>
    9dfc:	0b03      	lsrs	r3, r0, #12
    9dfe:	428b      	cmp	r3, r1
    9e00:	d328      	bcc.n	9e54 <__udivsi3+0x6c>
    9e02:	0c03      	lsrs	r3, r0, #16
    9e04:	428b      	cmp	r3, r1
    9e06:	d30d      	bcc.n	9e24 <__udivsi3+0x3c>
    9e08:	22ff      	movs	r2, #255	; 0xff
    9e0a:	0209      	lsls	r1, r1, #8
    9e0c:	ba12      	rev	r2, r2
    9e0e:	0c03      	lsrs	r3, r0, #16
    9e10:	428b      	cmp	r3, r1
    9e12:	d302      	bcc.n	9e1a <__udivsi3+0x32>
    9e14:	1212      	asrs	r2, r2, #8
    9e16:	0209      	lsls	r1, r1, #8
    9e18:	d065      	beq.n	9ee6 <__udivsi3+0xfe>
    9e1a:	0b03      	lsrs	r3, r0, #12
    9e1c:	428b      	cmp	r3, r1
    9e1e:	d319      	bcc.n	9e54 <__udivsi3+0x6c>
    9e20:	e000      	b.n	9e24 <__udivsi3+0x3c>
    9e22:	0a09      	lsrs	r1, r1, #8
    9e24:	0bc3      	lsrs	r3, r0, #15
    9e26:	428b      	cmp	r3, r1
    9e28:	d301      	bcc.n	9e2e <__udivsi3+0x46>
    9e2a:	03cb      	lsls	r3, r1, #15
    9e2c:	1ac0      	subs	r0, r0, r3
    9e2e:	4152      	adcs	r2, r2
    9e30:	0b83      	lsrs	r3, r0, #14
    9e32:	428b      	cmp	r3, r1
    9e34:	d301      	bcc.n	9e3a <__udivsi3+0x52>
    9e36:	038b      	lsls	r3, r1, #14
    9e38:	1ac0      	subs	r0, r0, r3
    9e3a:	4152      	adcs	r2, r2
    9e3c:	0b43      	lsrs	r3, r0, #13
    9e3e:	428b      	cmp	r3, r1
    9e40:	d301      	bcc.n	9e46 <__udivsi3+0x5e>
    9e42:	034b      	lsls	r3, r1, #13
    9e44:	1ac0      	subs	r0, r0, r3
    9e46:	4152      	adcs	r2, r2
    9e48:	0b03      	lsrs	r3, r0, #12
    9e4a:	428b      	cmp	r3, r1
    9e4c:	d301      	bcc.n	9e52 <__udivsi3+0x6a>
    9e4e:	030b      	lsls	r3, r1, #12
    9e50:	1ac0      	subs	r0, r0, r3
    9e52:	4152      	adcs	r2, r2
    9e54:	0ac3      	lsrs	r3, r0, #11
    9e56:	428b      	cmp	r3, r1
    9e58:	d301      	bcc.n	9e5e <__udivsi3+0x76>
    9e5a:	02cb      	lsls	r3, r1, #11
    9e5c:	1ac0      	subs	r0, r0, r3
    9e5e:	4152      	adcs	r2, r2
    9e60:	0a83      	lsrs	r3, r0, #10
    9e62:	428b      	cmp	r3, r1
    9e64:	d301      	bcc.n	9e6a <__udivsi3+0x82>
    9e66:	028b      	lsls	r3, r1, #10
    9e68:	1ac0      	subs	r0, r0, r3
    9e6a:	4152      	adcs	r2, r2
    9e6c:	0a43      	lsrs	r3, r0, #9
    9e6e:	428b      	cmp	r3, r1
    9e70:	d301      	bcc.n	9e76 <__udivsi3+0x8e>
    9e72:	024b      	lsls	r3, r1, #9
    9e74:	1ac0      	subs	r0, r0, r3
    9e76:	4152      	adcs	r2, r2
    9e78:	0a03      	lsrs	r3, r0, #8
    9e7a:	428b      	cmp	r3, r1
    9e7c:	d301      	bcc.n	9e82 <__udivsi3+0x9a>
    9e7e:	020b      	lsls	r3, r1, #8
    9e80:	1ac0      	subs	r0, r0, r3
    9e82:	4152      	adcs	r2, r2
    9e84:	d2cd      	bcs.n	9e22 <__udivsi3+0x3a>
    9e86:	09c3      	lsrs	r3, r0, #7
    9e88:	428b      	cmp	r3, r1
    9e8a:	d301      	bcc.n	9e90 <__udivsi3+0xa8>
    9e8c:	01cb      	lsls	r3, r1, #7
    9e8e:	1ac0      	subs	r0, r0, r3
    9e90:	4152      	adcs	r2, r2
    9e92:	0983      	lsrs	r3, r0, #6
    9e94:	428b      	cmp	r3, r1
    9e96:	d301      	bcc.n	9e9c <__udivsi3+0xb4>
    9e98:	018b      	lsls	r3, r1, #6
    9e9a:	1ac0      	subs	r0, r0, r3
    9e9c:	4152      	adcs	r2, r2
    9e9e:	0943      	lsrs	r3, r0, #5
    9ea0:	428b      	cmp	r3, r1
    9ea2:	d301      	bcc.n	9ea8 <__udivsi3+0xc0>
    9ea4:	014b      	lsls	r3, r1, #5
    9ea6:	1ac0      	subs	r0, r0, r3
    9ea8:	4152      	adcs	r2, r2
    9eaa:	0903      	lsrs	r3, r0, #4
    9eac:	428b      	cmp	r3, r1
    9eae:	d301      	bcc.n	9eb4 <__udivsi3+0xcc>
    9eb0:	010b      	lsls	r3, r1, #4
    9eb2:	1ac0      	subs	r0, r0, r3
    9eb4:	4152      	adcs	r2, r2
    9eb6:	08c3      	lsrs	r3, r0, #3
    9eb8:	428b      	cmp	r3, r1
    9eba:	d301      	bcc.n	9ec0 <__udivsi3+0xd8>
    9ebc:	00cb      	lsls	r3, r1, #3
    9ebe:	1ac0      	subs	r0, r0, r3
    9ec0:	4152      	adcs	r2, r2
    9ec2:	0883      	lsrs	r3, r0, #2
    9ec4:	428b      	cmp	r3, r1
    9ec6:	d301      	bcc.n	9ecc <__udivsi3+0xe4>
    9ec8:	008b      	lsls	r3, r1, #2
    9eca:	1ac0      	subs	r0, r0, r3
    9ecc:	4152      	adcs	r2, r2
    9ece:	0843      	lsrs	r3, r0, #1
    9ed0:	428b      	cmp	r3, r1
    9ed2:	d301      	bcc.n	9ed8 <__udivsi3+0xf0>
    9ed4:	004b      	lsls	r3, r1, #1
    9ed6:	1ac0      	subs	r0, r0, r3
    9ed8:	4152      	adcs	r2, r2
    9eda:	1a41      	subs	r1, r0, r1
    9edc:	d200      	bcs.n	9ee0 <__udivsi3+0xf8>
    9ede:	4601      	mov	r1, r0
    9ee0:	4152      	adcs	r2, r2
    9ee2:	4610      	mov	r0, r2
    9ee4:	4770      	bx	lr
    9ee6:	e7ff      	b.n	9ee8 <__udivsi3+0x100>
    9ee8:	b501      	push	{r0, lr}
    9eea:	2000      	movs	r0, #0
    9eec:	f000 f8f0 	bl	a0d0 <__aeabi_idiv0>
    9ef0:	bd02      	pop	{r1, pc}
    9ef2:	46c0      	nop			; (mov r8, r8)

00009ef4 <__aeabi_uidivmod>:
    9ef4:	2900      	cmp	r1, #0
    9ef6:	d0f7      	beq.n	9ee8 <__udivsi3+0x100>
    9ef8:	e776      	b.n	9de8 <__udivsi3>
    9efa:	4770      	bx	lr

00009efc <__divsi3>:
    9efc:	4603      	mov	r3, r0
    9efe:	430b      	orrs	r3, r1
    9f00:	d47f      	bmi.n	a002 <__divsi3+0x106>
    9f02:	2200      	movs	r2, #0
    9f04:	0843      	lsrs	r3, r0, #1
    9f06:	428b      	cmp	r3, r1
    9f08:	d374      	bcc.n	9ff4 <__divsi3+0xf8>
    9f0a:	0903      	lsrs	r3, r0, #4
    9f0c:	428b      	cmp	r3, r1
    9f0e:	d35f      	bcc.n	9fd0 <__divsi3+0xd4>
    9f10:	0a03      	lsrs	r3, r0, #8
    9f12:	428b      	cmp	r3, r1
    9f14:	d344      	bcc.n	9fa0 <__divsi3+0xa4>
    9f16:	0b03      	lsrs	r3, r0, #12
    9f18:	428b      	cmp	r3, r1
    9f1a:	d328      	bcc.n	9f6e <__divsi3+0x72>
    9f1c:	0c03      	lsrs	r3, r0, #16
    9f1e:	428b      	cmp	r3, r1
    9f20:	d30d      	bcc.n	9f3e <__divsi3+0x42>
    9f22:	22ff      	movs	r2, #255	; 0xff
    9f24:	0209      	lsls	r1, r1, #8
    9f26:	ba12      	rev	r2, r2
    9f28:	0c03      	lsrs	r3, r0, #16
    9f2a:	428b      	cmp	r3, r1
    9f2c:	d302      	bcc.n	9f34 <__divsi3+0x38>
    9f2e:	1212      	asrs	r2, r2, #8
    9f30:	0209      	lsls	r1, r1, #8
    9f32:	d065      	beq.n	a000 <__divsi3+0x104>
    9f34:	0b03      	lsrs	r3, r0, #12
    9f36:	428b      	cmp	r3, r1
    9f38:	d319      	bcc.n	9f6e <__divsi3+0x72>
    9f3a:	e000      	b.n	9f3e <__divsi3+0x42>
    9f3c:	0a09      	lsrs	r1, r1, #8
    9f3e:	0bc3      	lsrs	r3, r0, #15
    9f40:	428b      	cmp	r3, r1
    9f42:	d301      	bcc.n	9f48 <__divsi3+0x4c>
    9f44:	03cb      	lsls	r3, r1, #15
    9f46:	1ac0      	subs	r0, r0, r3
    9f48:	4152      	adcs	r2, r2
    9f4a:	0b83      	lsrs	r3, r0, #14
    9f4c:	428b      	cmp	r3, r1
    9f4e:	d301      	bcc.n	9f54 <__divsi3+0x58>
    9f50:	038b      	lsls	r3, r1, #14
    9f52:	1ac0      	subs	r0, r0, r3
    9f54:	4152      	adcs	r2, r2
    9f56:	0b43      	lsrs	r3, r0, #13
    9f58:	428b      	cmp	r3, r1
    9f5a:	d301      	bcc.n	9f60 <__divsi3+0x64>
    9f5c:	034b      	lsls	r3, r1, #13
    9f5e:	1ac0      	subs	r0, r0, r3
    9f60:	4152      	adcs	r2, r2
    9f62:	0b03      	lsrs	r3, r0, #12
    9f64:	428b      	cmp	r3, r1
    9f66:	d301      	bcc.n	9f6c <__divsi3+0x70>
    9f68:	030b      	lsls	r3, r1, #12
    9f6a:	1ac0      	subs	r0, r0, r3
    9f6c:	4152      	adcs	r2, r2
    9f6e:	0ac3      	lsrs	r3, r0, #11
    9f70:	428b      	cmp	r3, r1
    9f72:	d301      	bcc.n	9f78 <__divsi3+0x7c>
    9f74:	02cb      	lsls	r3, r1, #11
    9f76:	1ac0      	subs	r0, r0, r3
    9f78:	4152      	adcs	r2, r2
    9f7a:	0a83      	lsrs	r3, r0, #10
    9f7c:	428b      	cmp	r3, r1
    9f7e:	d301      	bcc.n	9f84 <__divsi3+0x88>
    9f80:	028b      	lsls	r3, r1, #10
    9f82:	1ac0      	subs	r0, r0, r3
    9f84:	4152      	adcs	r2, r2
    9f86:	0a43      	lsrs	r3, r0, #9
    9f88:	428b      	cmp	r3, r1
    9f8a:	d301      	bcc.n	9f90 <__divsi3+0x94>
    9f8c:	024b      	lsls	r3, r1, #9
    9f8e:	1ac0      	subs	r0, r0, r3
    9f90:	4152      	adcs	r2, r2
    9f92:	0a03      	lsrs	r3, r0, #8
    9f94:	428b      	cmp	r3, r1
    9f96:	d301      	bcc.n	9f9c <__divsi3+0xa0>
    9f98:	020b      	lsls	r3, r1, #8
    9f9a:	1ac0      	subs	r0, r0, r3
    9f9c:	4152      	adcs	r2, r2
    9f9e:	d2cd      	bcs.n	9f3c <__divsi3+0x40>
    9fa0:	09c3      	lsrs	r3, r0, #7
    9fa2:	428b      	cmp	r3, r1
    9fa4:	d301      	bcc.n	9faa <__divsi3+0xae>
    9fa6:	01cb      	lsls	r3, r1, #7
    9fa8:	1ac0      	subs	r0, r0, r3
    9faa:	4152      	adcs	r2, r2
    9fac:	0983      	lsrs	r3, r0, #6
    9fae:	428b      	cmp	r3, r1
    9fb0:	d301      	bcc.n	9fb6 <__divsi3+0xba>
    9fb2:	018b      	lsls	r3, r1, #6
    9fb4:	1ac0      	subs	r0, r0, r3
    9fb6:	4152      	adcs	r2, r2
    9fb8:	0943      	lsrs	r3, r0, #5
    9fba:	428b      	cmp	r3, r1
    9fbc:	d301      	bcc.n	9fc2 <__divsi3+0xc6>
    9fbe:	014b      	lsls	r3, r1, #5
    9fc0:	1ac0      	subs	r0, r0, r3
    9fc2:	4152      	adcs	r2, r2
    9fc4:	0903      	lsrs	r3, r0, #4
    9fc6:	428b      	cmp	r3, r1
    9fc8:	d301      	bcc.n	9fce <__divsi3+0xd2>
    9fca:	010b      	lsls	r3, r1, #4
    9fcc:	1ac0      	subs	r0, r0, r3
    9fce:	4152      	adcs	r2, r2
    9fd0:	08c3      	lsrs	r3, r0, #3
    9fd2:	428b      	cmp	r3, r1
    9fd4:	d301      	bcc.n	9fda <__divsi3+0xde>
    9fd6:	00cb      	lsls	r3, r1, #3
    9fd8:	1ac0      	subs	r0, r0, r3
    9fda:	4152      	adcs	r2, r2
    9fdc:	0883      	lsrs	r3, r0, #2
    9fde:	428b      	cmp	r3, r1
    9fe0:	d301      	bcc.n	9fe6 <__divsi3+0xea>
    9fe2:	008b      	lsls	r3, r1, #2
    9fe4:	1ac0      	subs	r0, r0, r3
    9fe6:	4152      	adcs	r2, r2
    9fe8:	0843      	lsrs	r3, r0, #1
    9fea:	428b      	cmp	r3, r1
    9fec:	d301      	bcc.n	9ff2 <__divsi3+0xf6>
    9fee:	004b      	lsls	r3, r1, #1
    9ff0:	1ac0      	subs	r0, r0, r3
    9ff2:	4152      	adcs	r2, r2
    9ff4:	1a41      	subs	r1, r0, r1
    9ff6:	d200      	bcs.n	9ffa <__divsi3+0xfe>
    9ff8:	4601      	mov	r1, r0
    9ffa:	4152      	adcs	r2, r2
    9ffc:	4610      	mov	r0, r2
    9ffe:	4770      	bx	lr
    a000:	e05d      	b.n	a0be <__divsi3+0x1c2>
    a002:	0fca      	lsrs	r2, r1, #31
    a004:	d000      	beq.n	a008 <__divsi3+0x10c>
    a006:	4249      	negs	r1, r1
    a008:	1003      	asrs	r3, r0, #32
    a00a:	d300      	bcc.n	a00e <__divsi3+0x112>
    a00c:	4240      	negs	r0, r0
    a00e:	4053      	eors	r3, r2
    a010:	2200      	movs	r2, #0
    a012:	469c      	mov	ip, r3
    a014:	0903      	lsrs	r3, r0, #4
    a016:	428b      	cmp	r3, r1
    a018:	d32d      	bcc.n	a076 <__divsi3+0x17a>
    a01a:	0a03      	lsrs	r3, r0, #8
    a01c:	428b      	cmp	r3, r1
    a01e:	d312      	bcc.n	a046 <__divsi3+0x14a>
    a020:	22fc      	movs	r2, #252	; 0xfc
    a022:	0189      	lsls	r1, r1, #6
    a024:	ba12      	rev	r2, r2
    a026:	0a03      	lsrs	r3, r0, #8
    a028:	428b      	cmp	r3, r1
    a02a:	d30c      	bcc.n	a046 <__divsi3+0x14a>
    a02c:	0189      	lsls	r1, r1, #6
    a02e:	1192      	asrs	r2, r2, #6
    a030:	428b      	cmp	r3, r1
    a032:	d308      	bcc.n	a046 <__divsi3+0x14a>
    a034:	0189      	lsls	r1, r1, #6
    a036:	1192      	asrs	r2, r2, #6
    a038:	428b      	cmp	r3, r1
    a03a:	d304      	bcc.n	a046 <__divsi3+0x14a>
    a03c:	0189      	lsls	r1, r1, #6
    a03e:	d03a      	beq.n	a0b6 <__divsi3+0x1ba>
    a040:	1192      	asrs	r2, r2, #6
    a042:	e000      	b.n	a046 <__divsi3+0x14a>
    a044:	0989      	lsrs	r1, r1, #6
    a046:	09c3      	lsrs	r3, r0, #7
    a048:	428b      	cmp	r3, r1
    a04a:	d301      	bcc.n	a050 <__divsi3+0x154>
    a04c:	01cb      	lsls	r3, r1, #7
    a04e:	1ac0      	subs	r0, r0, r3
    a050:	4152      	adcs	r2, r2
    a052:	0983      	lsrs	r3, r0, #6
    a054:	428b      	cmp	r3, r1
    a056:	d301      	bcc.n	a05c <__divsi3+0x160>
    a058:	018b      	lsls	r3, r1, #6
    a05a:	1ac0      	subs	r0, r0, r3
    a05c:	4152      	adcs	r2, r2
    a05e:	0943      	lsrs	r3, r0, #5
    a060:	428b      	cmp	r3, r1
    a062:	d301      	bcc.n	a068 <__divsi3+0x16c>
    a064:	014b      	lsls	r3, r1, #5
    a066:	1ac0      	subs	r0, r0, r3
    a068:	4152      	adcs	r2, r2
    a06a:	0903      	lsrs	r3, r0, #4
    a06c:	428b      	cmp	r3, r1
    a06e:	d301      	bcc.n	a074 <__divsi3+0x178>
    a070:	010b      	lsls	r3, r1, #4
    a072:	1ac0      	subs	r0, r0, r3
    a074:	4152      	adcs	r2, r2
    a076:	08c3      	lsrs	r3, r0, #3
    a078:	428b      	cmp	r3, r1
    a07a:	d301      	bcc.n	a080 <__divsi3+0x184>
    a07c:	00cb      	lsls	r3, r1, #3
    a07e:	1ac0      	subs	r0, r0, r3
    a080:	4152      	adcs	r2, r2
    a082:	0883      	lsrs	r3, r0, #2
    a084:	428b      	cmp	r3, r1
    a086:	d301      	bcc.n	a08c <__divsi3+0x190>
    a088:	008b      	lsls	r3, r1, #2
    a08a:	1ac0      	subs	r0, r0, r3
    a08c:	4152      	adcs	r2, r2
    a08e:	d2d9      	bcs.n	a044 <__divsi3+0x148>
    a090:	0843      	lsrs	r3, r0, #1
    a092:	428b      	cmp	r3, r1
    a094:	d301      	bcc.n	a09a <__divsi3+0x19e>
    a096:	004b      	lsls	r3, r1, #1
    a098:	1ac0      	subs	r0, r0, r3
    a09a:	4152      	adcs	r2, r2
    a09c:	1a41      	subs	r1, r0, r1
    a09e:	d200      	bcs.n	a0a2 <__divsi3+0x1a6>
    a0a0:	4601      	mov	r1, r0
    a0a2:	4663      	mov	r3, ip
    a0a4:	4152      	adcs	r2, r2
    a0a6:	105b      	asrs	r3, r3, #1
    a0a8:	4610      	mov	r0, r2
    a0aa:	d301      	bcc.n	a0b0 <__divsi3+0x1b4>
    a0ac:	4240      	negs	r0, r0
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d500      	bpl.n	a0b4 <__divsi3+0x1b8>
    a0b2:	4249      	negs	r1, r1
    a0b4:	4770      	bx	lr
    a0b6:	4663      	mov	r3, ip
    a0b8:	105b      	asrs	r3, r3, #1
    a0ba:	d300      	bcc.n	a0be <__divsi3+0x1c2>
    a0bc:	4240      	negs	r0, r0
    a0be:	b501      	push	{r0, lr}
    a0c0:	2000      	movs	r0, #0
    a0c2:	f000 f805 	bl	a0d0 <__aeabi_idiv0>
    a0c6:	bd02      	pop	{r1, pc}

0000a0c8 <__aeabi_idivmod>:
    a0c8:	2900      	cmp	r1, #0
    a0ca:	d0f8      	beq.n	a0be <__divsi3+0x1c2>
    a0cc:	e716      	b.n	9efc <__divsi3>
    a0ce:	4770      	bx	lr

0000a0d0 <__aeabi_idiv0>:
    a0d0:	4770      	bx	lr
    a0d2:	46c0      	nop			; (mov r8, r8)

0000a0d4 <__aeabi_lmul>:
    a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0d6:	46ce      	mov	lr, r9
    a0d8:	4647      	mov	r7, r8
    a0da:	0415      	lsls	r5, r2, #16
    a0dc:	0c2d      	lsrs	r5, r5, #16
    a0de:	002e      	movs	r6, r5
    a0e0:	b580      	push	{r7, lr}
    a0e2:	0407      	lsls	r7, r0, #16
    a0e4:	0c14      	lsrs	r4, r2, #16
    a0e6:	0c3f      	lsrs	r7, r7, #16
    a0e8:	4699      	mov	r9, r3
    a0ea:	0c03      	lsrs	r3, r0, #16
    a0ec:	437e      	muls	r6, r7
    a0ee:	435d      	muls	r5, r3
    a0f0:	4367      	muls	r7, r4
    a0f2:	4363      	muls	r3, r4
    a0f4:	197f      	adds	r7, r7, r5
    a0f6:	0c34      	lsrs	r4, r6, #16
    a0f8:	19e4      	adds	r4, r4, r7
    a0fa:	469c      	mov	ip, r3
    a0fc:	42a5      	cmp	r5, r4
    a0fe:	d903      	bls.n	a108 <__aeabi_lmul+0x34>
    a100:	2380      	movs	r3, #128	; 0x80
    a102:	025b      	lsls	r3, r3, #9
    a104:	4698      	mov	r8, r3
    a106:	44c4      	add	ip, r8
    a108:	464b      	mov	r3, r9
    a10a:	4351      	muls	r1, r2
    a10c:	4343      	muls	r3, r0
    a10e:	0436      	lsls	r6, r6, #16
    a110:	0c36      	lsrs	r6, r6, #16
    a112:	0c25      	lsrs	r5, r4, #16
    a114:	0424      	lsls	r4, r4, #16
    a116:	4465      	add	r5, ip
    a118:	19a4      	adds	r4, r4, r6
    a11a:	1859      	adds	r1, r3, r1
    a11c:	1949      	adds	r1, r1, r5
    a11e:	0020      	movs	r0, r4
    a120:	bc0c      	pop	{r2, r3}
    a122:	4690      	mov	r8, r2
    a124:	4699      	mov	r9, r3
    a126:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a128 <atoi>:
    a128:	b510      	push	{r4, lr}
    a12a:	220a      	movs	r2, #10
    a12c:	2100      	movs	r1, #0
    a12e:	f000 fb93 	bl	a858 <strtol>
    a132:	bd10      	pop	{r4, pc}

0000a134 <__libc_init_array>:
    a134:	b570      	push	{r4, r5, r6, lr}
    a136:	2600      	movs	r6, #0
    a138:	4d0c      	ldr	r5, [pc, #48]	; (a16c <__libc_init_array+0x38>)
    a13a:	4c0d      	ldr	r4, [pc, #52]	; (a170 <__libc_init_array+0x3c>)
    a13c:	1b64      	subs	r4, r4, r5
    a13e:	10a4      	asrs	r4, r4, #2
    a140:	42a6      	cmp	r6, r4
    a142:	d109      	bne.n	a158 <__libc_init_array+0x24>
    a144:	2600      	movs	r6, #0
    a146:	f003 faef 	bl	d728 <_init>
    a14a:	4d0a      	ldr	r5, [pc, #40]	; (a174 <__libc_init_array+0x40>)
    a14c:	4c0a      	ldr	r4, [pc, #40]	; (a178 <__libc_init_array+0x44>)
    a14e:	1b64      	subs	r4, r4, r5
    a150:	10a4      	asrs	r4, r4, #2
    a152:	42a6      	cmp	r6, r4
    a154:	d105      	bne.n	a162 <__libc_init_array+0x2e>
    a156:	bd70      	pop	{r4, r5, r6, pc}
    a158:	00b3      	lsls	r3, r6, #2
    a15a:	58eb      	ldr	r3, [r5, r3]
    a15c:	4798      	blx	r3
    a15e:	3601      	adds	r6, #1
    a160:	e7ee      	b.n	a140 <__libc_init_array+0xc>
    a162:	00b3      	lsls	r3, r6, #2
    a164:	58eb      	ldr	r3, [r5, r3]
    a166:	4798      	blx	r3
    a168:	3601      	adds	r6, #1
    a16a:	e7f2      	b.n	a152 <__libc_init_array+0x1e>
    a16c:	0000d734 	.word	0x0000d734
    a170:	0000d734 	.word	0x0000d734
    a174:	0000d734 	.word	0x0000d734
    a178:	0000d738 	.word	0x0000d738

0000a17c <malloc>:
    a17c:	b510      	push	{r4, lr}
    a17e:	4b03      	ldr	r3, [pc, #12]	; (a18c <malloc+0x10>)
    a180:	0001      	movs	r1, r0
    a182:	6818      	ldr	r0, [r3, #0]
    a184:	f000 f87c 	bl	a280 <_malloc_r>
    a188:	bd10      	pop	{r4, pc}
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	2000012c 	.word	0x2000012c

0000a190 <free>:
    a190:	b510      	push	{r4, lr}
    a192:	4b03      	ldr	r3, [pc, #12]	; (a1a0 <free+0x10>)
    a194:	0001      	movs	r1, r0
    a196:	6818      	ldr	r0, [r3, #0]
    a198:	f000 f828 	bl	a1ec <_free_r>
    a19c:	bd10      	pop	{r4, pc}
    a19e:	46c0      	nop			; (mov r8, r8)
    a1a0:	2000012c 	.word	0x2000012c

0000a1a4 <memcpy>:
    a1a4:	2300      	movs	r3, #0
    a1a6:	b510      	push	{r4, lr}
    a1a8:	429a      	cmp	r2, r3
    a1aa:	d100      	bne.n	a1ae <memcpy+0xa>
    a1ac:	bd10      	pop	{r4, pc}
    a1ae:	5ccc      	ldrb	r4, [r1, r3]
    a1b0:	54c4      	strb	r4, [r0, r3]
    a1b2:	3301      	adds	r3, #1
    a1b4:	e7f8      	b.n	a1a8 <memcpy+0x4>

0000a1b6 <memmove>:
    a1b6:	b510      	push	{r4, lr}
    a1b8:	4288      	cmp	r0, r1
    a1ba:	d902      	bls.n	a1c2 <memmove+0xc>
    a1bc:	188b      	adds	r3, r1, r2
    a1be:	4298      	cmp	r0, r3
    a1c0:	d308      	bcc.n	a1d4 <memmove+0x1e>
    a1c2:	2300      	movs	r3, #0
    a1c4:	429a      	cmp	r2, r3
    a1c6:	d007      	beq.n	a1d8 <memmove+0x22>
    a1c8:	5ccc      	ldrb	r4, [r1, r3]
    a1ca:	54c4      	strb	r4, [r0, r3]
    a1cc:	3301      	adds	r3, #1
    a1ce:	e7f9      	b.n	a1c4 <memmove+0xe>
    a1d0:	5c8b      	ldrb	r3, [r1, r2]
    a1d2:	5483      	strb	r3, [r0, r2]
    a1d4:	3a01      	subs	r2, #1
    a1d6:	d2fb      	bcs.n	a1d0 <memmove+0x1a>
    a1d8:	bd10      	pop	{r4, pc}

0000a1da <memset>:
    a1da:	0003      	movs	r3, r0
    a1dc:	1882      	adds	r2, r0, r2
    a1de:	4293      	cmp	r3, r2
    a1e0:	d100      	bne.n	a1e4 <memset+0xa>
    a1e2:	4770      	bx	lr
    a1e4:	7019      	strb	r1, [r3, #0]
    a1e6:	3301      	adds	r3, #1
    a1e8:	e7f9      	b.n	a1de <memset+0x4>
	...

0000a1ec <_free_r>:
    a1ec:	b570      	push	{r4, r5, r6, lr}
    a1ee:	0005      	movs	r5, r0
    a1f0:	2900      	cmp	r1, #0
    a1f2:	d010      	beq.n	a216 <_free_r+0x2a>
    a1f4:	1f0c      	subs	r4, r1, #4
    a1f6:	6823      	ldr	r3, [r4, #0]
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	da00      	bge.n	a1fe <_free_r+0x12>
    a1fc:	18e4      	adds	r4, r4, r3
    a1fe:	0028      	movs	r0, r5
    a200:	f000 fe18 	bl	ae34 <__malloc_lock>
    a204:	4a1d      	ldr	r2, [pc, #116]	; (a27c <_free_r+0x90>)
    a206:	6813      	ldr	r3, [r2, #0]
    a208:	2b00      	cmp	r3, #0
    a20a:	d105      	bne.n	a218 <_free_r+0x2c>
    a20c:	6063      	str	r3, [r4, #4]
    a20e:	6014      	str	r4, [r2, #0]
    a210:	0028      	movs	r0, r5
    a212:	f000 fe10 	bl	ae36 <__malloc_unlock>
    a216:	bd70      	pop	{r4, r5, r6, pc}
    a218:	42a3      	cmp	r3, r4
    a21a:	d909      	bls.n	a230 <_free_r+0x44>
    a21c:	6821      	ldr	r1, [r4, #0]
    a21e:	1860      	adds	r0, r4, r1
    a220:	4283      	cmp	r3, r0
    a222:	d1f3      	bne.n	a20c <_free_r+0x20>
    a224:	6818      	ldr	r0, [r3, #0]
    a226:	685b      	ldr	r3, [r3, #4]
    a228:	1841      	adds	r1, r0, r1
    a22a:	6021      	str	r1, [r4, #0]
    a22c:	e7ee      	b.n	a20c <_free_r+0x20>
    a22e:	0013      	movs	r3, r2
    a230:	685a      	ldr	r2, [r3, #4]
    a232:	2a00      	cmp	r2, #0
    a234:	d001      	beq.n	a23a <_free_r+0x4e>
    a236:	42a2      	cmp	r2, r4
    a238:	d9f9      	bls.n	a22e <_free_r+0x42>
    a23a:	6819      	ldr	r1, [r3, #0]
    a23c:	1858      	adds	r0, r3, r1
    a23e:	42a0      	cmp	r0, r4
    a240:	d10b      	bne.n	a25a <_free_r+0x6e>
    a242:	6820      	ldr	r0, [r4, #0]
    a244:	1809      	adds	r1, r1, r0
    a246:	1858      	adds	r0, r3, r1
    a248:	6019      	str	r1, [r3, #0]
    a24a:	4282      	cmp	r2, r0
    a24c:	d1e0      	bne.n	a210 <_free_r+0x24>
    a24e:	6810      	ldr	r0, [r2, #0]
    a250:	6852      	ldr	r2, [r2, #4]
    a252:	1841      	adds	r1, r0, r1
    a254:	6019      	str	r1, [r3, #0]
    a256:	605a      	str	r2, [r3, #4]
    a258:	e7da      	b.n	a210 <_free_r+0x24>
    a25a:	42a0      	cmp	r0, r4
    a25c:	d902      	bls.n	a264 <_free_r+0x78>
    a25e:	230c      	movs	r3, #12
    a260:	602b      	str	r3, [r5, #0]
    a262:	e7d5      	b.n	a210 <_free_r+0x24>
    a264:	6821      	ldr	r1, [r4, #0]
    a266:	1860      	adds	r0, r4, r1
    a268:	4282      	cmp	r2, r0
    a26a:	d103      	bne.n	a274 <_free_r+0x88>
    a26c:	6810      	ldr	r0, [r2, #0]
    a26e:	6852      	ldr	r2, [r2, #4]
    a270:	1841      	adds	r1, r0, r1
    a272:	6021      	str	r1, [r4, #0]
    a274:	6062      	str	r2, [r4, #4]
    a276:	605c      	str	r4, [r3, #4]
    a278:	e7ca      	b.n	a210 <_free_r+0x24>
    a27a:	46c0      	nop			; (mov r8, r8)
    a27c:	20000478 	.word	0x20000478

0000a280 <_malloc_r>:
    a280:	2303      	movs	r3, #3
    a282:	b570      	push	{r4, r5, r6, lr}
    a284:	1ccd      	adds	r5, r1, #3
    a286:	439d      	bics	r5, r3
    a288:	3508      	adds	r5, #8
    a28a:	0006      	movs	r6, r0
    a28c:	2d0c      	cmp	r5, #12
    a28e:	d21e      	bcs.n	a2ce <_malloc_r+0x4e>
    a290:	250c      	movs	r5, #12
    a292:	42a9      	cmp	r1, r5
    a294:	d81d      	bhi.n	a2d2 <_malloc_r+0x52>
    a296:	0030      	movs	r0, r6
    a298:	f000 fdcc 	bl	ae34 <__malloc_lock>
    a29c:	4a25      	ldr	r2, [pc, #148]	; (a334 <_malloc_r+0xb4>)
    a29e:	6814      	ldr	r4, [r2, #0]
    a2a0:	0021      	movs	r1, r4
    a2a2:	2900      	cmp	r1, #0
    a2a4:	d119      	bne.n	a2da <_malloc_r+0x5a>
    a2a6:	4c24      	ldr	r4, [pc, #144]	; (a338 <_malloc_r+0xb8>)
    a2a8:	6823      	ldr	r3, [r4, #0]
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d103      	bne.n	a2b6 <_malloc_r+0x36>
    a2ae:	0030      	movs	r0, r6
    a2b0:	f000 f8dc 	bl	a46c <_sbrk_r>
    a2b4:	6020      	str	r0, [r4, #0]
    a2b6:	0029      	movs	r1, r5
    a2b8:	0030      	movs	r0, r6
    a2ba:	f000 f8d7 	bl	a46c <_sbrk_r>
    a2be:	1c43      	adds	r3, r0, #1
    a2c0:	d12c      	bne.n	a31c <_malloc_r+0x9c>
    a2c2:	230c      	movs	r3, #12
    a2c4:	0030      	movs	r0, r6
    a2c6:	6033      	str	r3, [r6, #0]
    a2c8:	f000 fdb5 	bl	ae36 <__malloc_unlock>
    a2cc:	e003      	b.n	a2d6 <_malloc_r+0x56>
    a2ce:	2d00      	cmp	r5, #0
    a2d0:	dadf      	bge.n	a292 <_malloc_r+0x12>
    a2d2:	230c      	movs	r3, #12
    a2d4:	6033      	str	r3, [r6, #0]
    a2d6:	2000      	movs	r0, #0
    a2d8:	bd70      	pop	{r4, r5, r6, pc}
    a2da:	680b      	ldr	r3, [r1, #0]
    a2dc:	1b5b      	subs	r3, r3, r5
    a2de:	d41a      	bmi.n	a316 <_malloc_r+0x96>
    a2e0:	2b0b      	cmp	r3, #11
    a2e2:	d903      	bls.n	a2ec <_malloc_r+0x6c>
    a2e4:	600b      	str	r3, [r1, #0]
    a2e6:	18cc      	adds	r4, r1, r3
    a2e8:	6025      	str	r5, [r4, #0]
    a2ea:	e003      	b.n	a2f4 <_malloc_r+0x74>
    a2ec:	428c      	cmp	r4, r1
    a2ee:	d10e      	bne.n	a30e <_malloc_r+0x8e>
    a2f0:	6863      	ldr	r3, [r4, #4]
    a2f2:	6013      	str	r3, [r2, #0]
    a2f4:	0030      	movs	r0, r6
    a2f6:	f000 fd9e 	bl	ae36 <__malloc_unlock>
    a2fa:	0020      	movs	r0, r4
    a2fc:	2207      	movs	r2, #7
    a2fe:	300b      	adds	r0, #11
    a300:	1d23      	adds	r3, r4, #4
    a302:	4390      	bics	r0, r2
    a304:	1ac3      	subs	r3, r0, r3
    a306:	d0e7      	beq.n	a2d8 <_malloc_r+0x58>
    a308:	425a      	negs	r2, r3
    a30a:	50e2      	str	r2, [r4, r3]
    a30c:	e7e4      	b.n	a2d8 <_malloc_r+0x58>
    a30e:	684b      	ldr	r3, [r1, #4]
    a310:	6063      	str	r3, [r4, #4]
    a312:	000c      	movs	r4, r1
    a314:	e7ee      	b.n	a2f4 <_malloc_r+0x74>
    a316:	000c      	movs	r4, r1
    a318:	6849      	ldr	r1, [r1, #4]
    a31a:	e7c2      	b.n	a2a2 <_malloc_r+0x22>
    a31c:	2303      	movs	r3, #3
    a31e:	1cc4      	adds	r4, r0, #3
    a320:	439c      	bics	r4, r3
    a322:	42a0      	cmp	r0, r4
    a324:	d0e0      	beq.n	a2e8 <_malloc_r+0x68>
    a326:	1a21      	subs	r1, r4, r0
    a328:	0030      	movs	r0, r6
    a32a:	f000 f89f 	bl	a46c <_sbrk_r>
    a32e:	1c43      	adds	r3, r0, #1
    a330:	d1da      	bne.n	a2e8 <_malloc_r+0x68>
    a332:	e7c6      	b.n	a2c2 <_malloc_r+0x42>
    a334:	20000478 	.word	0x20000478
    a338:	2000047c 	.word	0x2000047c

0000a33c <iprintf>:
    a33c:	b40f      	push	{r0, r1, r2, r3}
    a33e:	4b0b      	ldr	r3, [pc, #44]	; (a36c <iprintf+0x30>)
    a340:	b513      	push	{r0, r1, r4, lr}
    a342:	681c      	ldr	r4, [r3, #0]
    a344:	2c00      	cmp	r4, #0
    a346:	d005      	beq.n	a354 <iprintf+0x18>
    a348:	69a3      	ldr	r3, [r4, #24]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d102      	bne.n	a354 <iprintf+0x18>
    a34e:	0020      	movs	r0, r4
    a350:	f000 fc5a 	bl	ac08 <__sinit>
    a354:	ab05      	add	r3, sp, #20
    a356:	9a04      	ldr	r2, [sp, #16]
    a358:	68a1      	ldr	r1, [r4, #8]
    a35a:	0020      	movs	r0, r4
    a35c:	9301      	str	r3, [sp, #4]
    a35e:	f000 fef9 	bl	b154 <_vfiprintf_r>
    a362:	bc16      	pop	{r1, r2, r4}
    a364:	bc08      	pop	{r3}
    a366:	b004      	add	sp, #16
    a368:	4718      	bx	r3
    a36a:	46c0      	nop			; (mov r8, r8)
    a36c:	2000012c 	.word	0x2000012c

0000a370 <putchar>:
    a370:	4b08      	ldr	r3, [pc, #32]	; (a394 <putchar+0x24>)
    a372:	b570      	push	{r4, r5, r6, lr}
    a374:	681c      	ldr	r4, [r3, #0]
    a376:	0005      	movs	r5, r0
    a378:	2c00      	cmp	r4, #0
    a37a:	d005      	beq.n	a388 <putchar+0x18>
    a37c:	69a3      	ldr	r3, [r4, #24]
    a37e:	2b00      	cmp	r3, #0
    a380:	d102      	bne.n	a388 <putchar+0x18>
    a382:	0020      	movs	r0, r4
    a384:	f000 fc40 	bl	ac08 <__sinit>
    a388:	0029      	movs	r1, r5
    a38a:	68a2      	ldr	r2, [r4, #8]
    a38c:	0020      	movs	r0, r4
    a38e:	f001 f985 	bl	b69c <_putc_r>
    a392:	bd70      	pop	{r4, r5, r6, pc}
    a394:	2000012c 	.word	0x2000012c

0000a398 <_puts_r>:
    a398:	b570      	push	{r4, r5, r6, lr}
    a39a:	0005      	movs	r5, r0
    a39c:	000e      	movs	r6, r1
    a39e:	2800      	cmp	r0, #0
    a3a0:	d004      	beq.n	a3ac <_puts_r+0x14>
    a3a2:	6983      	ldr	r3, [r0, #24]
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	d101      	bne.n	a3ac <_puts_r+0x14>
    a3a8:	f000 fc2e 	bl	ac08 <__sinit>
    a3ac:	69ab      	ldr	r3, [r5, #24]
    a3ae:	68ac      	ldr	r4, [r5, #8]
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d102      	bne.n	a3ba <_puts_r+0x22>
    a3b4:	0028      	movs	r0, r5
    a3b6:	f000 fc27 	bl	ac08 <__sinit>
    a3ba:	4b24      	ldr	r3, [pc, #144]	; (a44c <_puts_r+0xb4>)
    a3bc:	429c      	cmp	r4, r3
    a3be:	d10f      	bne.n	a3e0 <_puts_r+0x48>
    a3c0:	686c      	ldr	r4, [r5, #4]
    a3c2:	89a3      	ldrh	r3, [r4, #12]
    a3c4:	071b      	lsls	r3, r3, #28
    a3c6:	d502      	bpl.n	a3ce <_puts_r+0x36>
    a3c8:	6923      	ldr	r3, [r4, #16]
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d120      	bne.n	a410 <_puts_r+0x78>
    a3ce:	0021      	movs	r1, r4
    a3d0:	0028      	movs	r0, r5
    a3d2:	f000 faab 	bl	a92c <__swsetup_r>
    a3d6:	2800      	cmp	r0, #0
    a3d8:	d01a      	beq.n	a410 <_puts_r+0x78>
    a3da:	2001      	movs	r0, #1
    a3dc:	4240      	negs	r0, r0
    a3de:	bd70      	pop	{r4, r5, r6, pc}
    a3e0:	4b1b      	ldr	r3, [pc, #108]	; (a450 <_puts_r+0xb8>)
    a3e2:	429c      	cmp	r4, r3
    a3e4:	d101      	bne.n	a3ea <_puts_r+0x52>
    a3e6:	68ac      	ldr	r4, [r5, #8]
    a3e8:	e7eb      	b.n	a3c2 <_puts_r+0x2a>
    a3ea:	4b1a      	ldr	r3, [pc, #104]	; (a454 <_puts_r+0xbc>)
    a3ec:	429c      	cmp	r4, r3
    a3ee:	d1e8      	bne.n	a3c2 <_puts_r+0x2a>
    a3f0:	68ec      	ldr	r4, [r5, #12]
    a3f2:	e7e6      	b.n	a3c2 <_puts_r+0x2a>
    a3f4:	3b01      	subs	r3, #1
    a3f6:	3601      	adds	r6, #1
    a3f8:	60a3      	str	r3, [r4, #8]
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	da04      	bge.n	a408 <_puts_r+0x70>
    a3fe:	69a2      	ldr	r2, [r4, #24]
    a400:	4293      	cmp	r3, r2
    a402:	db16      	blt.n	a432 <_puts_r+0x9a>
    a404:	290a      	cmp	r1, #10
    a406:	d014      	beq.n	a432 <_puts_r+0x9a>
    a408:	6823      	ldr	r3, [r4, #0]
    a40a:	1c5a      	adds	r2, r3, #1
    a40c:	6022      	str	r2, [r4, #0]
    a40e:	7019      	strb	r1, [r3, #0]
    a410:	7831      	ldrb	r1, [r6, #0]
    a412:	68a3      	ldr	r3, [r4, #8]
    a414:	2900      	cmp	r1, #0
    a416:	d1ed      	bne.n	a3f4 <_puts_r+0x5c>
    a418:	3b01      	subs	r3, #1
    a41a:	60a3      	str	r3, [r4, #8]
    a41c:	2b00      	cmp	r3, #0
    a41e:	da0f      	bge.n	a440 <_puts_r+0xa8>
    a420:	0022      	movs	r2, r4
    a422:	310a      	adds	r1, #10
    a424:	0028      	movs	r0, r5
    a426:	f000 fa2b 	bl	a880 <__swbuf_r>
    a42a:	1c43      	adds	r3, r0, #1
    a42c:	d0d5      	beq.n	a3da <_puts_r+0x42>
    a42e:	200a      	movs	r0, #10
    a430:	e7d5      	b.n	a3de <_puts_r+0x46>
    a432:	0022      	movs	r2, r4
    a434:	0028      	movs	r0, r5
    a436:	f000 fa23 	bl	a880 <__swbuf_r>
    a43a:	1c43      	adds	r3, r0, #1
    a43c:	d1e8      	bne.n	a410 <_puts_r+0x78>
    a43e:	e7cc      	b.n	a3da <_puts_r+0x42>
    a440:	200a      	movs	r0, #10
    a442:	6823      	ldr	r3, [r4, #0]
    a444:	1c5a      	adds	r2, r3, #1
    a446:	6022      	str	r2, [r4, #0]
    a448:	7018      	strb	r0, [r3, #0]
    a44a:	e7c8      	b.n	a3de <_puts_r+0x46>
    a44c:	0000d5a8 	.word	0x0000d5a8
    a450:	0000d5c8 	.word	0x0000d5c8
    a454:	0000d588 	.word	0x0000d588

0000a458 <puts>:
    a458:	b510      	push	{r4, lr}
    a45a:	4b03      	ldr	r3, [pc, #12]	; (a468 <puts+0x10>)
    a45c:	0001      	movs	r1, r0
    a45e:	6818      	ldr	r0, [r3, #0]
    a460:	f7ff ff9a 	bl	a398 <_puts_r>
    a464:	bd10      	pop	{r4, pc}
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	2000012c 	.word	0x2000012c

0000a46c <_sbrk_r>:
    a46c:	2300      	movs	r3, #0
    a46e:	b570      	push	{r4, r5, r6, lr}
    a470:	4c06      	ldr	r4, [pc, #24]	; (a48c <_sbrk_r+0x20>)
    a472:	0005      	movs	r5, r0
    a474:	0008      	movs	r0, r1
    a476:	6023      	str	r3, [r4, #0]
    a478:	f7fc fa3a 	bl	68f0 <_sbrk>
    a47c:	1c43      	adds	r3, r0, #1
    a47e:	d103      	bne.n	a488 <_sbrk_r+0x1c>
    a480:	6823      	ldr	r3, [r4, #0]
    a482:	2b00      	cmp	r3, #0
    a484:	d000      	beq.n	a488 <_sbrk_r+0x1c>
    a486:	602b      	str	r3, [r5, #0]
    a488:	bd70      	pop	{r4, r5, r6, pc}
    a48a:	46c0      	nop			; (mov r8, r8)
    a48c:	20000778 	.word	0x20000778

0000a490 <setbuf>:
    a490:	424a      	negs	r2, r1
    a492:	414a      	adcs	r2, r1
    a494:	2380      	movs	r3, #128	; 0x80
    a496:	b510      	push	{r4, lr}
    a498:	0052      	lsls	r2, r2, #1
    a49a:	00db      	lsls	r3, r3, #3
    a49c:	f000 f802 	bl	a4a4 <setvbuf>
    a4a0:	bd10      	pop	{r4, pc}
	...

0000a4a4 <setvbuf>:
    a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4a6:	001d      	movs	r5, r3
    a4a8:	4b4f      	ldr	r3, [pc, #316]	; (a5e8 <setvbuf+0x144>)
    a4aa:	b085      	sub	sp, #20
    a4ac:	681e      	ldr	r6, [r3, #0]
    a4ae:	0004      	movs	r4, r0
    a4b0:	000f      	movs	r7, r1
    a4b2:	9200      	str	r2, [sp, #0]
    a4b4:	2e00      	cmp	r6, #0
    a4b6:	d005      	beq.n	a4c4 <setvbuf+0x20>
    a4b8:	69b3      	ldr	r3, [r6, #24]
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d102      	bne.n	a4c4 <setvbuf+0x20>
    a4be:	0030      	movs	r0, r6
    a4c0:	f000 fba2 	bl	ac08 <__sinit>
    a4c4:	4b49      	ldr	r3, [pc, #292]	; (a5ec <setvbuf+0x148>)
    a4c6:	429c      	cmp	r4, r3
    a4c8:	d150      	bne.n	a56c <setvbuf+0xc8>
    a4ca:	6874      	ldr	r4, [r6, #4]
    a4cc:	9b00      	ldr	r3, [sp, #0]
    a4ce:	2b02      	cmp	r3, #2
    a4d0:	d005      	beq.n	a4de <setvbuf+0x3a>
    a4d2:	2b01      	cmp	r3, #1
    a4d4:	d900      	bls.n	a4d8 <setvbuf+0x34>
    a4d6:	e084      	b.n	a5e2 <setvbuf+0x13e>
    a4d8:	2d00      	cmp	r5, #0
    a4da:	da00      	bge.n	a4de <setvbuf+0x3a>
    a4dc:	e081      	b.n	a5e2 <setvbuf+0x13e>
    a4de:	0021      	movs	r1, r4
    a4e0:	0030      	movs	r0, r6
    a4e2:	f000 fb23 	bl	ab2c <_fflush_r>
    a4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a4e8:	2900      	cmp	r1, #0
    a4ea:	d008      	beq.n	a4fe <setvbuf+0x5a>
    a4ec:	0023      	movs	r3, r4
    a4ee:	3344      	adds	r3, #68	; 0x44
    a4f0:	4299      	cmp	r1, r3
    a4f2:	d002      	beq.n	a4fa <setvbuf+0x56>
    a4f4:	0030      	movs	r0, r6
    a4f6:	f7ff fe79 	bl	a1ec <_free_r>
    a4fa:	2300      	movs	r3, #0
    a4fc:	6363      	str	r3, [r4, #52]	; 0x34
    a4fe:	2300      	movs	r3, #0
    a500:	61a3      	str	r3, [r4, #24]
    a502:	6063      	str	r3, [r4, #4]
    a504:	89a3      	ldrh	r3, [r4, #12]
    a506:	061b      	lsls	r3, r3, #24
    a508:	d503      	bpl.n	a512 <setvbuf+0x6e>
    a50a:	6921      	ldr	r1, [r4, #16]
    a50c:	0030      	movs	r0, r6
    a50e:	f7ff fe6d 	bl	a1ec <_free_r>
    a512:	89a3      	ldrh	r3, [r4, #12]
    a514:	4a36      	ldr	r2, [pc, #216]	; (a5f0 <setvbuf+0x14c>)
    a516:	4013      	ands	r3, r2
    a518:	81a3      	strh	r3, [r4, #12]
    a51a:	9b00      	ldr	r3, [sp, #0]
    a51c:	2b02      	cmp	r3, #2
    a51e:	d05a      	beq.n	a5d6 <setvbuf+0x132>
    a520:	ab03      	add	r3, sp, #12
    a522:	aa02      	add	r2, sp, #8
    a524:	0021      	movs	r1, r4
    a526:	0030      	movs	r0, r6
    a528:	f000 fc06 	bl	ad38 <__swhatbuf_r>
    a52c:	89a3      	ldrh	r3, [r4, #12]
    a52e:	4318      	orrs	r0, r3
    a530:	81a0      	strh	r0, [r4, #12]
    a532:	2d00      	cmp	r5, #0
    a534:	d124      	bne.n	a580 <setvbuf+0xdc>
    a536:	9d02      	ldr	r5, [sp, #8]
    a538:	0028      	movs	r0, r5
    a53a:	f7ff fe1f 	bl	a17c <malloc>
    a53e:	9501      	str	r5, [sp, #4]
    a540:	1e07      	subs	r7, r0, #0
    a542:	d142      	bne.n	a5ca <setvbuf+0x126>
    a544:	9b02      	ldr	r3, [sp, #8]
    a546:	9301      	str	r3, [sp, #4]
    a548:	42ab      	cmp	r3, r5
    a54a:	d139      	bne.n	a5c0 <setvbuf+0x11c>
    a54c:	2001      	movs	r0, #1
    a54e:	4240      	negs	r0, r0
    a550:	2302      	movs	r3, #2
    a552:	89a2      	ldrh	r2, [r4, #12]
    a554:	4313      	orrs	r3, r2
    a556:	81a3      	strh	r3, [r4, #12]
    a558:	2300      	movs	r3, #0
    a55a:	60a3      	str	r3, [r4, #8]
    a55c:	0023      	movs	r3, r4
    a55e:	3347      	adds	r3, #71	; 0x47
    a560:	6023      	str	r3, [r4, #0]
    a562:	6123      	str	r3, [r4, #16]
    a564:	2301      	movs	r3, #1
    a566:	6163      	str	r3, [r4, #20]
    a568:	b005      	add	sp, #20
    a56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a56c:	4b21      	ldr	r3, [pc, #132]	; (a5f4 <setvbuf+0x150>)
    a56e:	429c      	cmp	r4, r3
    a570:	d101      	bne.n	a576 <setvbuf+0xd2>
    a572:	68b4      	ldr	r4, [r6, #8]
    a574:	e7aa      	b.n	a4cc <setvbuf+0x28>
    a576:	4b20      	ldr	r3, [pc, #128]	; (a5f8 <setvbuf+0x154>)
    a578:	429c      	cmp	r4, r3
    a57a:	d1a7      	bne.n	a4cc <setvbuf+0x28>
    a57c:	68f4      	ldr	r4, [r6, #12]
    a57e:	e7a5      	b.n	a4cc <setvbuf+0x28>
    a580:	2f00      	cmp	r7, #0
    a582:	d0d9      	beq.n	a538 <setvbuf+0x94>
    a584:	69b3      	ldr	r3, [r6, #24]
    a586:	2b00      	cmp	r3, #0
    a588:	d102      	bne.n	a590 <setvbuf+0xec>
    a58a:	0030      	movs	r0, r6
    a58c:	f000 fb3c 	bl	ac08 <__sinit>
    a590:	9b00      	ldr	r3, [sp, #0]
    a592:	2b01      	cmp	r3, #1
    a594:	d103      	bne.n	a59e <setvbuf+0xfa>
    a596:	89a3      	ldrh	r3, [r4, #12]
    a598:	9a00      	ldr	r2, [sp, #0]
    a59a:	431a      	orrs	r2, r3
    a59c:	81a2      	strh	r2, [r4, #12]
    a59e:	2008      	movs	r0, #8
    a5a0:	89a3      	ldrh	r3, [r4, #12]
    a5a2:	6027      	str	r7, [r4, #0]
    a5a4:	6127      	str	r7, [r4, #16]
    a5a6:	6165      	str	r5, [r4, #20]
    a5a8:	4018      	ands	r0, r3
    a5aa:	d018      	beq.n	a5de <setvbuf+0x13a>
    a5ac:	2001      	movs	r0, #1
    a5ae:	4018      	ands	r0, r3
    a5b0:	2300      	movs	r3, #0
    a5b2:	4298      	cmp	r0, r3
    a5b4:	d011      	beq.n	a5da <setvbuf+0x136>
    a5b6:	426d      	negs	r5, r5
    a5b8:	60a3      	str	r3, [r4, #8]
    a5ba:	61a5      	str	r5, [r4, #24]
    a5bc:	0018      	movs	r0, r3
    a5be:	e7d3      	b.n	a568 <setvbuf+0xc4>
    a5c0:	9801      	ldr	r0, [sp, #4]
    a5c2:	f7ff fddb 	bl	a17c <malloc>
    a5c6:	1e07      	subs	r7, r0, #0
    a5c8:	d0c0      	beq.n	a54c <setvbuf+0xa8>
    a5ca:	2380      	movs	r3, #128	; 0x80
    a5cc:	89a2      	ldrh	r2, [r4, #12]
    a5ce:	9d01      	ldr	r5, [sp, #4]
    a5d0:	4313      	orrs	r3, r2
    a5d2:	81a3      	strh	r3, [r4, #12]
    a5d4:	e7d6      	b.n	a584 <setvbuf+0xe0>
    a5d6:	2000      	movs	r0, #0
    a5d8:	e7ba      	b.n	a550 <setvbuf+0xac>
    a5da:	60a5      	str	r5, [r4, #8]
    a5dc:	e7c4      	b.n	a568 <setvbuf+0xc4>
    a5de:	60a0      	str	r0, [r4, #8]
    a5e0:	e7c2      	b.n	a568 <setvbuf+0xc4>
    a5e2:	2001      	movs	r0, #1
    a5e4:	4240      	negs	r0, r0
    a5e6:	e7bf      	b.n	a568 <setvbuf+0xc4>
    a5e8:	2000012c 	.word	0x2000012c
    a5ec:	0000d5a8 	.word	0x0000d5a8
    a5f0:	fffff35c 	.word	0xfffff35c
    a5f4:	0000d5c8 	.word	0x0000d5c8
    a5f8:	0000d588 	.word	0x0000d588

0000a5fc <siprintf>:
    a5fc:	b40e      	push	{r1, r2, r3}
    a5fe:	b510      	push	{r4, lr}
    a600:	b09d      	sub	sp, #116	; 0x74
    a602:	a902      	add	r1, sp, #8
    a604:	9002      	str	r0, [sp, #8]
    a606:	6108      	str	r0, [r1, #16]
    a608:	480b      	ldr	r0, [pc, #44]	; (a638 <siprintf+0x3c>)
    a60a:	2482      	movs	r4, #130	; 0x82
    a60c:	6088      	str	r0, [r1, #8]
    a60e:	6148      	str	r0, [r1, #20]
    a610:	2001      	movs	r0, #1
    a612:	4240      	negs	r0, r0
    a614:	ab1f      	add	r3, sp, #124	; 0x7c
    a616:	81c8      	strh	r0, [r1, #14]
    a618:	4808      	ldr	r0, [pc, #32]	; (a63c <siprintf+0x40>)
    a61a:	cb04      	ldmia	r3!, {r2}
    a61c:	00a4      	lsls	r4, r4, #2
    a61e:	6800      	ldr	r0, [r0, #0]
    a620:	9301      	str	r3, [sp, #4]
    a622:	818c      	strh	r4, [r1, #12]
    a624:	f000 fc6a 	bl	aefc <_svfiprintf_r>
    a628:	2300      	movs	r3, #0
    a62a:	9a02      	ldr	r2, [sp, #8]
    a62c:	7013      	strb	r3, [r2, #0]
    a62e:	b01d      	add	sp, #116	; 0x74
    a630:	bc10      	pop	{r4}
    a632:	bc08      	pop	{r3}
    a634:	b003      	add	sp, #12
    a636:	4718      	bx	r3
    a638:	7fffffff 	.word	0x7fffffff
    a63c:	2000012c 	.word	0x2000012c

0000a640 <strcmp>:
    a640:	7802      	ldrb	r2, [r0, #0]
    a642:	780b      	ldrb	r3, [r1, #0]
    a644:	2a00      	cmp	r2, #0
    a646:	d003      	beq.n	a650 <strcmp+0x10>
    a648:	3001      	adds	r0, #1
    a64a:	3101      	adds	r1, #1
    a64c:	429a      	cmp	r2, r3
    a64e:	d0f7      	beq.n	a640 <strcmp>
    a650:	1ad0      	subs	r0, r2, r3
    a652:	4770      	bx	lr

0000a654 <strcpy>:
    a654:	1c03      	adds	r3, r0, #0
    a656:	780a      	ldrb	r2, [r1, #0]
    a658:	3101      	adds	r1, #1
    a65a:	701a      	strb	r2, [r3, #0]
    a65c:	3301      	adds	r3, #1
    a65e:	2a00      	cmp	r2, #0
    a660:	d1f9      	bne.n	a656 <strcpy+0x2>
    a662:	4770      	bx	lr

0000a664 <strdup>:
    a664:	b510      	push	{r4, lr}
    a666:	4b03      	ldr	r3, [pc, #12]	; (a674 <strdup+0x10>)
    a668:	0001      	movs	r1, r0
    a66a:	6818      	ldr	r0, [r3, #0]
    a66c:	f000 f804 	bl	a678 <_strdup_r>
    a670:	bd10      	pop	{r4, pc}
    a672:	46c0      	nop			; (mov r8, r8)
    a674:	2000012c 	.word	0x2000012c

0000a678 <_strdup_r>:
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	0005      	movs	r5, r0
    a67c:	0008      	movs	r0, r1
    a67e:	000e      	movs	r6, r1
    a680:	f000 f80d 	bl	a69e <strlen>
    a684:	1c44      	adds	r4, r0, #1
    a686:	0021      	movs	r1, r4
    a688:	0028      	movs	r0, r5
    a68a:	f7ff fdf9 	bl	a280 <_malloc_r>
    a68e:	1e05      	subs	r5, r0, #0
    a690:	d003      	beq.n	a69a <_strdup_r+0x22>
    a692:	0022      	movs	r2, r4
    a694:	0031      	movs	r1, r6
    a696:	f7ff fd85 	bl	a1a4 <memcpy>
    a69a:	0028      	movs	r0, r5
    a69c:	bd70      	pop	{r4, r5, r6, pc}

0000a69e <strlen>:
    a69e:	2300      	movs	r3, #0
    a6a0:	5cc2      	ldrb	r2, [r0, r3]
    a6a2:	3301      	adds	r3, #1
    a6a4:	2a00      	cmp	r2, #0
    a6a6:	d1fb      	bne.n	a6a0 <strlen+0x2>
    a6a8:	1e58      	subs	r0, r3, #1
    a6aa:	4770      	bx	lr

0000a6ac <strncmp>:
    a6ac:	2300      	movs	r3, #0
    a6ae:	b530      	push	{r4, r5, lr}
    a6b0:	429a      	cmp	r2, r3
    a6b2:	d00a      	beq.n	a6ca <strncmp+0x1e>
    a6b4:	3a01      	subs	r2, #1
    a6b6:	5cc4      	ldrb	r4, [r0, r3]
    a6b8:	5ccd      	ldrb	r5, [r1, r3]
    a6ba:	42ac      	cmp	r4, r5
    a6bc:	d104      	bne.n	a6c8 <strncmp+0x1c>
    a6be:	429a      	cmp	r2, r3
    a6c0:	d002      	beq.n	a6c8 <strncmp+0x1c>
    a6c2:	3301      	adds	r3, #1
    a6c4:	2c00      	cmp	r4, #0
    a6c6:	d1f6      	bne.n	a6b6 <strncmp+0xa>
    a6c8:	1b63      	subs	r3, r4, r5
    a6ca:	0018      	movs	r0, r3
    a6cc:	bd30      	pop	{r4, r5, pc}

0000a6ce <strncpy>:
    a6ce:	b570      	push	{r4, r5, r6, lr}
    a6d0:	0004      	movs	r4, r0
    a6d2:	2a00      	cmp	r2, #0
    a6d4:	d100      	bne.n	a6d8 <strncpy+0xa>
    a6d6:	bd70      	pop	{r4, r5, r6, pc}
    a6d8:	780d      	ldrb	r5, [r1, #0]
    a6da:	1e56      	subs	r6, r2, #1
    a6dc:	1c63      	adds	r3, r4, #1
    a6de:	7025      	strb	r5, [r4, #0]
    a6e0:	3101      	adds	r1, #1
    a6e2:	2d00      	cmp	r5, #0
    a6e4:	d105      	bne.n	a6f2 <strncpy+0x24>
    a6e6:	18a4      	adds	r4, r4, r2
    a6e8:	429c      	cmp	r4, r3
    a6ea:	d0f4      	beq.n	a6d6 <strncpy+0x8>
    a6ec:	701d      	strb	r5, [r3, #0]
    a6ee:	3301      	adds	r3, #1
    a6f0:	e7fa      	b.n	a6e8 <strncpy+0x1a>
    a6f2:	001c      	movs	r4, r3
    a6f4:	0032      	movs	r2, r6
    a6f6:	e7ec      	b.n	a6d2 <strncpy+0x4>

0000a6f8 <strrchr>:
    a6f8:	b570      	push	{r4, r5, r6, lr}
    a6fa:	000d      	movs	r5, r1
    a6fc:	2400      	movs	r4, #0
    a6fe:	2900      	cmp	r1, #0
    a700:	d105      	bne.n	a70e <strrchr+0x16>
    a702:	f001 f84d 	bl	b7a0 <strchr>
    a706:	0004      	movs	r4, r0
    a708:	e006      	b.n	a718 <strrchr+0x20>
    a70a:	001c      	movs	r4, r3
    a70c:	1c58      	adds	r0, r3, #1
    a70e:	0029      	movs	r1, r5
    a710:	f001 f846 	bl	b7a0 <strchr>
    a714:	1e03      	subs	r3, r0, #0
    a716:	d1f8      	bne.n	a70a <strrchr+0x12>
    a718:	0020      	movs	r0, r4
    a71a:	bd70      	pop	{r4, r5, r6, pc}

0000a71c <strstr>:
    a71c:	b510      	push	{r4, lr}
    a71e:	0002      	movs	r2, r0
    a720:	7800      	ldrb	r0, [r0, #0]
    a722:	2800      	cmp	r0, #0
    a724:	d104      	bne.n	a730 <strstr+0x14>
    a726:	7809      	ldrb	r1, [r1, #0]
    a728:	2900      	cmp	r1, #0
    a72a:	d00d      	beq.n	a748 <strstr+0x2c>
    a72c:	bd10      	pop	{r4, pc}
    a72e:	3201      	adds	r2, #1
    a730:	7810      	ldrb	r0, [r2, #0]
    a732:	2800      	cmp	r0, #0
    a734:	d0fa      	beq.n	a72c <strstr+0x10>
    a736:	2300      	movs	r3, #0
    a738:	5cc8      	ldrb	r0, [r1, r3]
    a73a:	2800      	cmp	r0, #0
    a73c:	d004      	beq.n	a748 <strstr+0x2c>
    a73e:	5cd4      	ldrb	r4, [r2, r3]
    a740:	4284      	cmp	r4, r0
    a742:	d1f4      	bne.n	a72e <strstr+0x12>
    a744:	3301      	adds	r3, #1
    a746:	e7f7      	b.n	a738 <strstr+0x1c>
    a748:	0010      	movs	r0, r2
    a74a:	e7ef      	b.n	a72c <strstr+0x10>

0000a74c <_strtol_l.isra.0>:
    a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a74e:	001f      	movs	r7, r3
    a750:	000e      	movs	r6, r1
    a752:	b087      	sub	sp, #28
    a754:	9005      	str	r0, [sp, #20]
    a756:	9103      	str	r1, [sp, #12]
    a758:	9202      	str	r2, [sp, #8]
    a75a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a75c:	7834      	ldrb	r4, [r6, #0]
    a75e:	f000 fae8 	bl	ad32 <__locale_ctype_ptr_l>
    a762:	2208      	movs	r2, #8
    a764:	1900      	adds	r0, r0, r4
    a766:	7843      	ldrb	r3, [r0, #1]
    a768:	1c75      	adds	r5, r6, #1
    a76a:	4013      	ands	r3, r2
    a76c:	d10c      	bne.n	a788 <_strtol_l.isra.0+0x3c>
    a76e:	2c2d      	cmp	r4, #45	; 0x2d
    a770:	d10c      	bne.n	a78c <_strtol_l.isra.0+0x40>
    a772:	3301      	adds	r3, #1
    a774:	782c      	ldrb	r4, [r5, #0]
    a776:	9301      	str	r3, [sp, #4]
    a778:	1cb5      	adds	r5, r6, #2
    a77a:	2f00      	cmp	r7, #0
    a77c:	d00c      	beq.n	a798 <_strtol_l.isra.0+0x4c>
    a77e:	2f10      	cmp	r7, #16
    a780:	d114      	bne.n	a7ac <_strtol_l.isra.0+0x60>
    a782:	2c30      	cmp	r4, #48	; 0x30
    a784:	d00a      	beq.n	a79c <_strtol_l.isra.0+0x50>
    a786:	e011      	b.n	a7ac <_strtol_l.isra.0+0x60>
    a788:	002e      	movs	r6, r5
    a78a:	e7e6      	b.n	a75a <_strtol_l.isra.0+0xe>
    a78c:	9301      	str	r3, [sp, #4]
    a78e:	2c2b      	cmp	r4, #43	; 0x2b
    a790:	d1f3      	bne.n	a77a <_strtol_l.isra.0+0x2e>
    a792:	782c      	ldrb	r4, [r5, #0]
    a794:	1cb5      	adds	r5, r6, #2
    a796:	e7f0      	b.n	a77a <_strtol_l.isra.0+0x2e>
    a798:	2c30      	cmp	r4, #48	; 0x30
    a79a:	d12f      	bne.n	a7fc <_strtol_l.isra.0+0xb0>
    a79c:	2220      	movs	r2, #32
    a79e:	782b      	ldrb	r3, [r5, #0]
    a7a0:	4393      	bics	r3, r2
    a7a2:	2b58      	cmp	r3, #88	; 0x58
    a7a4:	d151      	bne.n	a84a <_strtol_l.isra.0+0xfe>
    a7a6:	2710      	movs	r7, #16
    a7a8:	786c      	ldrb	r4, [r5, #1]
    a7aa:	3502      	adds	r5, #2
    a7ac:	9b01      	ldr	r3, [sp, #4]
    a7ae:	4a29      	ldr	r2, [pc, #164]	; (a854 <_strtol_l.isra.0+0x108>)
    a7b0:	0039      	movs	r1, r7
    a7b2:	189e      	adds	r6, r3, r2
    a7b4:	0030      	movs	r0, r6
    a7b6:	f7ff fb9d 	bl	9ef4 <__aeabi_uidivmod>
    a7ba:	0030      	movs	r0, r6
    a7bc:	9104      	str	r1, [sp, #16]
    a7be:	0039      	movs	r1, r7
    a7c0:	f7ff fb12 	bl	9de8 <__udivsi3>
    a7c4:	2101      	movs	r1, #1
    a7c6:	2300      	movs	r3, #0
    a7c8:	4249      	negs	r1, r1
    a7ca:	0002      	movs	r2, r0
    a7cc:	468c      	mov	ip, r1
    a7ce:	0018      	movs	r0, r3
    a7d0:	0021      	movs	r1, r4
    a7d2:	3930      	subs	r1, #48	; 0x30
    a7d4:	2909      	cmp	r1, #9
    a7d6:	d813      	bhi.n	a800 <_strtol_l.isra.0+0xb4>
    a7d8:	000c      	movs	r4, r1
    a7da:	42a7      	cmp	r7, r4
    a7dc:	dd1c      	ble.n	a818 <_strtol_l.isra.0+0xcc>
    a7de:	1c59      	adds	r1, r3, #1
    a7e0:	d009      	beq.n	a7f6 <_strtol_l.isra.0+0xaa>
    a7e2:	4663      	mov	r3, ip
    a7e4:	4282      	cmp	r2, r0
    a7e6:	d306      	bcc.n	a7f6 <_strtol_l.isra.0+0xaa>
    a7e8:	d102      	bne.n	a7f0 <_strtol_l.isra.0+0xa4>
    a7ea:	9904      	ldr	r1, [sp, #16]
    a7ec:	42a1      	cmp	r1, r4
    a7ee:	db02      	blt.n	a7f6 <_strtol_l.isra.0+0xaa>
    a7f0:	2301      	movs	r3, #1
    a7f2:	4378      	muls	r0, r7
    a7f4:	1820      	adds	r0, r4, r0
    a7f6:	782c      	ldrb	r4, [r5, #0]
    a7f8:	3501      	adds	r5, #1
    a7fa:	e7e9      	b.n	a7d0 <_strtol_l.isra.0+0x84>
    a7fc:	270a      	movs	r7, #10
    a7fe:	e7d5      	b.n	a7ac <_strtol_l.isra.0+0x60>
    a800:	0021      	movs	r1, r4
    a802:	3941      	subs	r1, #65	; 0x41
    a804:	2919      	cmp	r1, #25
    a806:	d801      	bhi.n	a80c <_strtol_l.isra.0+0xc0>
    a808:	3c37      	subs	r4, #55	; 0x37
    a80a:	e7e6      	b.n	a7da <_strtol_l.isra.0+0x8e>
    a80c:	0021      	movs	r1, r4
    a80e:	3961      	subs	r1, #97	; 0x61
    a810:	2919      	cmp	r1, #25
    a812:	d801      	bhi.n	a818 <_strtol_l.isra.0+0xcc>
    a814:	3c57      	subs	r4, #87	; 0x57
    a816:	e7e0      	b.n	a7da <_strtol_l.isra.0+0x8e>
    a818:	1c5a      	adds	r2, r3, #1
    a81a:	d108      	bne.n	a82e <_strtol_l.isra.0+0xe2>
    a81c:	9a05      	ldr	r2, [sp, #20]
    a81e:	3323      	adds	r3, #35	; 0x23
    a820:	6013      	str	r3, [r2, #0]
    a822:	9b02      	ldr	r3, [sp, #8]
    a824:	0030      	movs	r0, r6
    a826:	2b00      	cmp	r3, #0
    a828:	d10b      	bne.n	a842 <_strtol_l.isra.0+0xf6>
    a82a:	b007      	add	sp, #28
    a82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a82e:	9a01      	ldr	r2, [sp, #4]
    a830:	2a00      	cmp	r2, #0
    a832:	d000      	beq.n	a836 <_strtol_l.isra.0+0xea>
    a834:	4240      	negs	r0, r0
    a836:	9a02      	ldr	r2, [sp, #8]
    a838:	2a00      	cmp	r2, #0
    a83a:	d0f6      	beq.n	a82a <_strtol_l.isra.0+0xde>
    a83c:	9a03      	ldr	r2, [sp, #12]
    a83e:	2b00      	cmp	r3, #0
    a840:	d000      	beq.n	a844 <_strtol_l.isra.0+0xf8>
    a842:	1e6a      	subs	r2, r5, #1
    a844:	9b02      	ldr	r3, [sp, #8]
    a846:	601a      	str	r2, [r3, #0]
    a848:	e7ef      	b.n	a82a <_strtol_l.isra.0+0xde>
    a84a:	2430      	movs	r4, #48	; 0x30
    a84c:	2f00      	cmp	r7, #0
    a84e:	d1ad      	bne.n	a7ac <_strtol_l.isra.0+0x60>
    a850:	3708      	adds	r7, #8
    a852:	e7ab      	b.n	a7ac <_strtol_l.isra.0+0x60>
    a854:	7fffffff 	.word	0x7fffffff

0000a858 <strtol>:
    a858:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a85a:	0013      	movs	r3, r2
    a85c:	4a06      	ldr	r2, [pc, #24]	; (a878 <strtol+0x20>)
    a85e:	0005      	movs	r5, r0
    a860:	6810      	ldr	r0, [r2, #0]
    a862:	6a04      	ldr	r4, [r0, #32]
    a864:	2c00      	cmp	r4, #0
    a866:	d100      	bne.n	a86a <strtol+0x12>
    a868:	4c04      	ldr	r4, [pc, #16]	; (a87c <strtol+0x24>)
    a86a:	000a      	movs	r2, r1
    a86c:	9400      	str	r4, [sp, #0]
    a86e:	0029      	movs	r1, r5
    a870:	f7ff ff6c 	bl	a74c <_strtol_l.isra.0>
    a874:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a876:	46c0      	nop			; (mov r8, r8)
    a878:	2000012c 	.word	0x2000012c
    a87c:	20000190 	.word	0x20000190

0000a880 <__swbuf_r>:
    a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a882:	0005      	movs	r5, r0
    a884:	000e      	movs	r6, r1
    a886:	0014      	movs	r4, r2
    a888:	2800      	cmp	r0, #0
    a88a:	d004      	beq.n	a896 <__swbuf_r+0x16>
    a88c:	6983      	ldr	r3, [r0, #24]
    a88e:	2b00      	cmp	r3, #0
    a890:	d101      	bne.n	a896 <__swbuf_r+0x16>
    a892:	f000 f9b9 	bl	ac08 <__sinit>
    a896:	4b22      	ldr	r3, [pc, #136]	; (a920 <__swbuf_r+0xa0>)
    a898:	429c      	cmp	r4, r3
    a89a:	d12d      	bne.n	a8f8 <__swbuf_r+0x78>
    a89c:	686c      	ldr	r4, [r5, #4]
    a89e:	69a3      	ldr	r3, [r4, #24]
    a8a0:	60a3      	str	r3, [r4, #8]
    a8a2:	89a3      	ldrh	r3, [r4, #12]
    a8a4:	071b      	lsls	r3, r3, #28
    a8a6:	d531      	bpl.n	a90c <__swbuf_r+0x8c>
    a8a8:	6923      	ldr	r3, [r4, #16]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d02e      	beq.n	a90c <__swbuf_r+0x8c>
    a8ae:	6823      	ldr	r3, [r4, #0]
    a8b0:	6922      	ldr	r2, [r4, #16]
    a8b2:	b2f7      	uxtb	r7, r6
    a8b4:	1a98      	subs	r0, r3, r2
    a8b6:	6963      	ldr	r3, [r4, #20]
    a8b8:	b2f6      	uxtb	r6, r6
    a8ba:	4298      	cmp	r0, r3
    a8bc:	db05      	blt.n	a8ca <__swbuf_r+0x4a>
    a8be:	0021      	movs	r1, r4
    a8c0:	0028      	movs	r0, r5
    a8c2:	f000 f933 	bl	ab2c <_fflush_r>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	d126      	bne.n	a918 <__swbuf_r+0x98>
    a8ca:	68a3      	ldr	r3, [r4, #8]
    a8cc:	3001      	adds	r0, #1
    a8ce:	3b01      	subs	r3, #1
    a8d0:	60a3      	str	r3, [r4, #8]
    a8d2:	6823      	ldr	r3, [r4, #0]
    a8d4:	1c5a      	adds	r2, r3, #1
    a8d6:	6022      	str	r2, [r4, #0]
    a8d8:	701f      	strb	r7, [r3, #0]
    a8da:	6963      	ldr	r3, [r4, #20]
    a8dc:	4298      	cmp	r0, r3
    a8de:	d004      	beq.n	a8ea <__swbuf_r+0x6a>
    a8e0:	89a3      	ldrh	r3, [r4, #12]
    a8e2:	07db      	lsls	r3, r3, #31
    a8e4:	d51a      	bpl.n	a91c <__swbuf_r+0x9c>
    a8e6:	2e0a      	cmp	r6, #10
    a8e8:	d118      	bne.n	a91c <__swbuf_r+0x9c>
    a8ea:	0021      	movs	r1, r4
    a8ec:	0028      	movs	r0, r5
    a8ee:	f000 f91d 	bl	ab2c <_fflush_r>
    a8f2:	2800      	cmp	r0, #0
    a8f4:	d012      	beq.n	a91c <__swbuf_r+0x9c>
    a8f6:	e00f      	b.n	a918 <__swbuf_r+0x98>
    a8f8:	4b0a      	ldr	r3, [pc, #40]	; (a924 <__swbuf_r+0xa4>)
    a8fa:	429c      	cmp	r4, r3
    a8fc:	d101      	bne.n	a902 <__swbuf_r+0x82>
    a8fe:	68ac      	ldr	r4, [r5, #8]
    a900:	e7cd      	b.n	a89e <__swbuf_r+0x1e>
    a902:	4b09      	ldr	r3, [pc, #36]	; (a928 <__swbuf_r+0xa8>)
    a904:	429c      	cmp	r4, r3
    a906:	d1ca      	bne.n	a89e <__swbuf_r+0x1e>
    a908:	68ec      	ldr	r4, [r5, #12]
    a90a:	e7c8      	b.n	a89e <__swbuf_r+0x1e>
    a90c:	0021      	movs	r1, r4
    a90e:	0028      	movs	r0, r5
    a910:	f000 f80c 	bl	a92c <__swsetup_r>
    a914:	2800      	cmp	r0, #0
    a916:	d0ca      	beq.n	a8ae <__swbuf_r+0x2e>
    a918:	2601      	movs	r6, #1
    a91a:	4276      	negs	r6, r6
    a91c:	0030      	movs	r0, r6
    a91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a920:	0000d5a8 	.word	0x0000d5a8
    a924:	0000d5c8 	.word	0x0000d5c8
    a928:	0000d588 	.word	0x0000d588

0000a92c <__swsetup_r>:
    a92c:	4b36      	ldr	r3, [pc, #216]	; (aa08 <__swsetup_r+0xdc>)
    a92e:	b570      	push	{r4, r5, r6, lr}
    a930:	681d      	ldr	r5, [r3, #0]
    a932:	0006      	movs	r6, r0
    a934:	000c      	movs	r4, r1
    a936:	2d00      	cmp	r5, #0
    a938:	d005      	beq.n	a946 <__swsetup_r+0x1a>
    a93a:	69ab      	ldr	r3, [r5, #24]
    a93c:	2b00      	cmp	r3, #0
    a93e:	d102      	bne.n	a946 <__swsetup_r+0x1a>
    a940:	0028      	movs	r0, r5
    a942:	f000 f961 	bl	ac08 <__sinit>
    a946:	4b31      	ldr	r3, [pc, #196]	; (aa0c <__swsetup_r+0xe0>)
    a948:	429c      	cmp	r4, r3
    a94a:	d10f      	bne.n	a96c <__swsetup_r+0x40>
    a94c:	686c      	ldr	r4, [r5, #4]
    a94e:	230c      	movs	r3, #12
    a950:	5ee2      	ldrsh	r2, [r4, r3]
    a952:	b293      	uxth	r3, r2
    a954:	0719      	lsls	r1, r3, #28
    a956:	d42d      	bmi.n	a9b4 <__swsetup_r+0x88>
    a958:	06d9      	lsls	r1, r3, #27
    a95a:	d411      	bmi.n	a980 <__swsetup_r+0x54>
    a95c:	2309      	movs	r3, #9
    a95e:	2001      	movs	r0, #1
    a960:	6033      	str	r3, [r6, #0]
    a962:	3337      	adds	r3, #55	; 0x37
    a964:	4313      	orrs	r3, r2
    a966:	81a3      	strh	r3, [r4, #12]
    a968:	4240      	negs	r0, r0
    a96a:	bd70      	pop	{r4, r5, r6, pc}
    a96c:	4b28      	ldr	r3, [pc, #160]	; (aa10 <__swsetup_r+0xe4>)
    a96e:	429c      	cmp	r4, r3
    a970:	d101      	bne.n	a976 <__swsetup_r+0x4a>
    a972:	68ac      	ldr	r4, [r5, #8]
    a974:	e7eb      	b.n	a94e <__swsetup_r+0x22>
    a976:	4b27      	ldr	r3, [pc, #156]	; (aa14 <__swsetup_r+0xe8>)
    a978:	429c      	cmp	r4, r3
    a97a:	d1e8      	bne.n	a94e <__swsetup_r+0x22>
    a97c:	68ec      	ldr	r4, [r5, #12]
    a97e:	e7e6      	b.n	a94e <__swsetup_r+0x22>
    a980:	075b      	lsls	r3, r3, #29
    a982:	d513      	bpl.n	a9ac <__swsetup_r+0x80>
    a984:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a986:	2900      	cmp	r1, #0
    a988:	d008      	beq.n	a99c <__swsetup_r+0x70>
    a98a:	0023      	movs	r3, r4
    a98c:	3344      	adds	r3, #68	; 0x44
    a98e:	4299      	cmp	r1, r3
    a990:	d002      	beq.n	a998 <__swsetup_r+0x6c>
    a992:	0030      	movs	r0, r6
    a994:	f7ff fc2a 	bl	a1ec <_free_r>
    a998:	2300      	movs	r3, #0
    a99a:	6363      	str	r3, [r4, #52]	; 0x34
    a99c:	2224      	movs	r2, #36	; 0x24
    a99e:	89a3      	ldrh	r3, [r4, #12]
    a9a0:	4393      	bics	r3, r2
    a9a2:	81a3      	strh	r3, [r4, #12]
    a9a4:	2300      	movs	r3, #0
    a9a6:	6063      	str	r3, [r4, #4]
    a9a8:	6923      	ldr	r3, [r4, #16]
    a9aa:	6023      	str	r3, [r4, #0]
    a9ac:	2308      	movs	r3, #8
    a9ae:	89a2      	ldrh	r2, [r4, #12]
    a9b0:	4313      	orrs	r3, r2
    a9b2:	81a3      	strh	r3, [r4, #12]
    a9b4:	6923      	ldr	r3, [r4, #16]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	d10b      	bne.n	a9d2 <__swsetup_r+0xa6>
    a9ba:	21a0      	movs	r1, #160	; 0xa0
    a9bc:	2280      	movs	r2, #128	; 0x80
    a9be:	89a3      	ldrh	r3, [r4, #12]
    a9c0:	0089      	lsls	r1, r1, #2
    a9c2:	0092      	lsls	r2, r2, #2
    a9c4:	400b      	ands	r3, r1
    a9c6:	4293      	cmp	r3, r2
    a9c8:	d003      	beq.n	a9d2 <__swsetup_r+0xa6>
    a9ca:	0021      	movs	r1, r4
    a9cc:	0030      	movs	r0, r6
    a9ce:	f000 f9db 	bl	ad88 <__smakebuf_r>
    a9d2:	2301      	movs	r3, #1
    a9d4:	89a2      	ldrh	r2, [r4, #12]
    a9d6:	4013      	ands	r3, r2
    a9d8:	d011      	beq.n	a9fe <__swsetup_r+0xd2>
    a9da:	2300      	movs	r3, #0
    a9dc:	60a3      	str	r3, [r4, #8]
    a9de:	6963      	ldr	r3, [r4, #20]
    a9e0:	425b      	negs	r3, r3
    a9e2:	61a3      	str	r3, [r4, #24]
    a9e4:	2000      	movs	r0, #0
    a9e6:	6923      	ldr	r3, [r4, #16]
    a9e8:	4283      	cmp	r3, r0
    a9ea:	d1be      	bne.n	a96a <__swsetup_r+0x3e>
    a9ec:	230c      	movs	r3, #12
    a9ee:	5ee2      	ldrsh	r2, [r4, r3]
    a9f0:	0613      	lsls	r3, r2, #24
    a9f2:	d5ba      	bpl.n	a96a <__swsetup_r+0x3e>
    a9f4:	2340      	movs	r3, #64	; 0x40
    a9f6:	4313      	orrs	r3, r2
    a9f8:	81a3      	strh	r3, [r4, #12]
    a9fa:	3801      	subs	r0, #1
    a9fc:	e7b5      	b.n	a96a <__swsetup_r+0x3e>
    a9fe:	0792      	lsls	r2, r2, #30
    aa00:	d400      	bmi.n	aa04 <__swsetup_r+0xd8>
    aa02:	6963      	ldr	r3, [r4, #20]
    aa04:	60a3      	str	r3, [r4, #8]
    aa06:	e7ed      	b.n	a9e4 <__swsetup_r+0xb8>
    aa08:	2000012c 	.word	0x2000012c
    aa0c:	0000d5a8 	.word	0x0000d5a8
    aa10:	0000d5c8 	.word	0x0000d5c8
    aa14:	0000d588 	.word	0x0000d588

0000aa18 <__sflush_r>:
    aa18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aa1a:	898a      	ldrh	r2, [r1, #12]
    aa1c:	0005      	movs	r5, r0
    aa1e:	000c      	movs	r4, r1
    aa20:	0713      	lsls	r3, r2, #28
    aa22:	d460      	bmi.n	aae6 <__sflush_r+0xce>
    aa24:	684b      	ldr	r3, [r1, #4]
    aa26:	2b00      	cmp	r3, #0
    aa28:	dc04      	bgt.n	aa34 <__sflush_r+0x1c>
    aa2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	dc01      	bgt.n	aa34 <__sflush_r+0x1c>
    aa30:	2000      	movs	r0, #0
    aa32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aa34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    aa36:	2f00      	cmp	r7, #0
    aa38:	d0fa      	beq.n	aa30 <__sflush_r+0x18>
    aa3a:	2300      	movs	r3, #0
    aa3c:	682e      	ldr	r6, [r5, #0]
    aa3e:	602b      	str	r3, [r5, #0]
    aa40:	2380      	movs	r3, #128	; 0x80
    aa42:	015b      	lsls	r3, r3, #5
    aa44:	401a      	ands	r2, r3
    aa46:	d034      	beq.n	aab2 <__sflush_r+0x9a>
    aa48:	6d60      	ldr	r0, [r4, #84]	; 0x54
    aa4a:	89a3      	ldrh	r3, [r4, #12]
    aa4c:	075b      	lsls	r3, r3, #29
    aa4e:	d506      	bpl.n	aa5e <__sflush_r+0x46>
    aa50:	6863      	ldr	r3, [r4, #4]
    aa52:	1ac0      	subs	r0, r0, r3
    aa54:	6b63      	ldr	r3, [r4, #52]	; 0x34
    aa56:	2b00      	cmp	r3, #0
    aa58:	d001      	beq.n	aa5e <__sflush_r+0x46>
    aa5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    aa5c:	1ac0      	subs	r0, r0, r3
    aa5e:	0002      	movs	r2, r0
    aa60:	6a21      	ldr	r1, [r4, #32]
    aa62:	2300      	movs	r3, #0
    aa64:	0028      	movs	r0, r5
    aa66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    aa68:	47b8      	blx	r7
    aa6a:	89a1      	ldrh	r1, [r4, #12]
    aa6c:	1c43      	adds	r3, r0, #1
    aa6e:	d106      	bne.n	aa7e <__sflush_r+0x66>
    aa70:	682b      	ldr	r3, [r5, #0]
    aa72:	2b1d      	cmp	r3, #29
    aa74:	d831      	bhi.n	aada <__sflush_r+0xc2>
    aa76:	4a2c      	ldr	r2, [pc, #176]	; (ab28 <__sflush_r+0x110>)
    aa78:	40da      	lsrs	r2, r3
    aa7a:	07d3      	lsls	r3, r2, #31
    aa7c:	d52d      	bpl.n	aada <__sflush_r+0xc2>
    aa7e:	2300      	movs	r3, #0
    aa80:	6063      	str	r3, [r4, #4]
    aa82:	6923      	ldr	r3, [r4, #16]
    aa84:	6023      	str	r3, [r4, #0]
    aa86:	04cb      	lsls	r3, r1, #19
    aa88:	d505      	bpl.n	aa96 <__sflush_r+0x7e>
    aa8a:	1c43      	adds	r3, r0, #1
    aa8c:	d102      	bne.n	aa94 <__sflush_r+0x7c>
    aa8e:	682b      	ldr	r3, [r5, #0]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d100      	bne.n	aa96 <__sflush_r+0x7e>
    aa94:	6560      	str	r0, [r4, #84]	; 0x54
    aa96:	6b61      	ldr	r1, [r4, #52]	; 0x34
    aa98:	602e      	str	r6, [r5, #0]
    aa9a:	2900      	cmp	r1, #0
    aa9c:	d0c8      	beq.n	aa30 <__sflush_r+0x18>
    aa9e:	0023      	movs	r3, r4
    aaa0:	3344      	adds	r3, #68	; 0x44
    aaa2:	4299      	cmp	r1, r3
    aaa4:	d002      	beq.n	aaac <__sflush_r+0x94>
    aaa6:	0028      	movs	r0, r5
    aaa8:	f7ff fba0 	bl	a1ec <_free_r>
    aaac:	2000      	movs	r0, #0
    aaae:	6360      	str	r0, [r4, #52]	; 0x34
    aab0:	e7bf      	b.n	aa32 <__sflush_r+0x1a>
    aab2:	2301      	movs	r3, #1
    aab4:	6a21      	ldr	r1, [r4, #32]
    aab6:	0028      	movs	r0, r5
    aab8:	47b8      	blx	r7
    aaba:	1c43      	adds	r3, r0, #1
    aabc:	d1c5      	bne.n	aa4a <__sflush_r+0x32>
    aabe:	682b      	ldr	r3, [r5, #0]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d0c2      	beq.n	aa4a <__sflush_r+0x32>
    aac4:	2b1d      	cmp	r3, #29
    aac6:	d001      	beq.n	aacc <__sflush_r+0xb4>
    aac8:	2b16      	cmp	r3, #22
    aaca:	d101      	bne.n	aad0 <__sflush_r+0xb8>
    aacc:	602e      	str	r6, [r5, #0]
    aace:	e7af      	b.n	aa30 <__sflush_r+0x18>
    aad0:	2340      	movs	r3, #64	; 0x40
    aad2:	89a2      	ldrh	r2, [r4, #12]
    aad4:	4313      	orrs	r3, r2
    aad6:	81a3      	strh	r3, [r4, #12]
    aad8:	e7ab      	b.n	aa32 <__sflush_r+0x1a>
    aada:	2340      	movs	r3, #64	; 0x40
    aadc:	430b      	orrs	r3, r1
    aade:	2001      	movs	r0, #1
    aae0:	81a3      	strh	r3, [r4, #12]
    aae2:	4240      	negs	r0, r0
    aae4:	e7a5      	b.n	aa32 <__sflush_r+0x1a>
    aae6:	690f      	ldr	r7, [r1, #16]
    aae8:	2f00      	cmp	r7, #0
    aaea:	d0a1      	beq.n	aa30 <__sflush_r+0x18>
    aaec:	680b      	ldr	r3, [r1, #0]
    aaee:	600f      	str	r7, [r1, #0]
    aaf0:	1bdb      	subs	r3, r3, r7
    aaf2:	9301      	str	r3, [sp, #4]
    aaf4:	2300      	movs	r3, #0
    aaf6:	0792      	lsls	r2, r2, #30
    aaf8:	d100      	bne.n	aafc <__sflush_r+0xe4>
    aafa:	694b      	ldr	r3, [r1, #20]
    aafc:	60a3      	str	r3, [r4, #8]
    aafe:	9b01      	ldr	r3, [sp, #4]
    ab00:	2b00      	cmp	r3, #0
    ab02:	dc00      	bgt.n	ab06 <__sflush_r+0xee>
    ab04:	e794      	b.n	aa30 <__sflush_r+0x18>
    ab06:	9b01      	ldr	r3, [sp, #4]
    ab08:	003a      	movs	r2, r7
    ab0a:	6a21      	ldr	r1, [r4, #32]
    ab0c:	0028      	movs	r0, r5
    ab0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ab10:	47b0      	blx	r6
    ab12:	2800      	cmp	r0, #0
    ab14:	dc03      	bgt.n	ab1e <__sflush_r+0x106>
    ab16:	2340      	movs	r3, #64	; 0x40
    ab18:	89a2      	ldrh	r2, [r4, #12]
    ab1a:	4313      	orrs	r3, r2
    ab1c:	e7df      	b.n	aade <__sflush_r+0xc6>
    ab1e:	9b01      	ldr	r3, [sp, #4]
    ab20:	183f      	adds	r7, r7, r0
    ab22:	1a1b      	subs	r3, r3, r0
    ab24:	9301      	str	r3, [sp, #4]
    ab26:	e7ea      	b.n	aafe <__sflush_r+0xe6>
    ab28:	20400001 	.word	0x20400001

0000ab2c <_fflush_r>:
    ab2c:	690b      	ldr	r3, [r1, #16]
    ab2e:	b570      	push	{r4, r5, r6, lr}
    ab30:	0005      	movs	r5, r0
    ab32:	000c      	movs	r4, r1
    ab34:	2b00      	cmp	r3, #0
    ab36:	d101      	bne.n	ab3c <_fflush_r+0x10>
    ab38:	2000      	movs	r0, #0
    ab3a:	bd70      	pop	{r4, r5, r6, pc}
    ab3c:	2800      	cmp	r0, #0
    ab3e:	d004      	beq.n	ab4a <_fflush_r+0x1e>
    ab40:	6983      	ldr	r3, [r0, #24]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d101      	bne.n	ab4a <_fflush_r+0x1e>
    ab46:	f000 f85f 	bl	ac08 <__sinit>
    ab4a:	4b0b      	ldr	r3, [pc, #44]	; (ab78 <_fflush_r+0x4c>)
    ab4c:	429c      	cmp	r4, r3
    ab4e:	d109      	bne.n	ab64 <_fflush_r+0x38>
    ab50:	686c      	ldr	r4, [r5, #4]
    ab52:	220c      	movs	r2, #12
    ab54:	5ea3      	ldrsh	r3, [r4, r2]
    ab56:	2b00      	cmp	r3, #0
    ab58:	d0ee      	beq.n	ab38 <_fflush_r+0xc>
    ab5a:	0021      	movs	r1, r4
    ab5c:	0028      	movs	r0, r5
    ab5e:	f7ff ff5b 	bl	aa18 <__sflush_r>
    ab62:	e7ea      	b.n	ab3a <_fflush_r+0xe>
    ab64:	4b05      	ldr	r3, [pc, #20]	; (ab7c <_fflush_r+0x50>)
    ab66:	429c      	cmp	r4, r3
    ab68:	d101      	bne.n	ab6e <_fflush_r+0x42>
    ab6a:	68ac      	ldr	r4, [r5, #8]
    ab6c:	e7f1      	b.n	ab52 <_fflush_r+0x26>
    ab6e:	4b04      	ldr	r3, [pc, #16]	; (ab80 <_fflush_r+0x54>)
    ab70:	429c      	cmp	r4, r3
    ab72:	d1ee      	bne.n	ab52 <_fflush_r+0x26>
    ab74:	68ec      	ldr	r4, [r5, #12]
    ab76:	e7ec      	b.n	ab52 <_fflush_r+0x26>
    ab78:	0000d5a8 	.word	0x0000d5a8
    ab7c:	0000d5c8 	.word	0x0000d5c8
    ab80:	0000d588 	.word	0x0000d588

0000ab84 <_cleanup_r>:
    ab84:	b510      	push	{r4, lr}
    ab86:	4902      	ldr	r1, [pc, #8]	; (ab90 <_cleanup_r+0xc>)
    ab88:	f000 f8b2 	bl	acf0 <_fwalk_reent>
    ab8c:	bd10      	pop	{r4, pc}
    ab8e:	46c0      	nop			; (mov r8, r8)
    ab90:	0000ab2d 	.word	0x0000ab2d

0000ab94 <std.isra.0>:
    ab94:	2300      	movs	r3, #0
    ab96:	b510      	push	{r4, lr}
    ab98:	0004      	movs	r4, r0
    ab9a:	6003      	str	r3, [r0, #0]
    ab9c:	6043      	str	r3, [r0, #4]
    ab9e:	6083      	str	r3, [r0, #8]
    aba0:	8181      	strh	r1, [r0, #12]
    aba2:	6643      	str	r3, [r0, #100]	; 0x64
    aba4:	81c2      	strh	r2, [r0, #14]
    aba6:	6103      	str	r3, [r0, #16]
    aba8:	6143      	str	r3, [r0, #20]
    abaa:	6183      	str	r3, [r0, #24]
    abac:	0019      	movs	r1, r3
    abae:	2208      	movs	r2, #8
    abb0:	305c      	adds	r0, #92	; 0x5c
    abb2:	f7ff fb12 	bl	a1da <memset>
    abb6:	4b05      	ldr	r3, [pc, #20]	; (abcc <std.isra.0+0x38>)
    abb8:	6224      	str	r4, [r4, #32]
    abba:	6263      	str	r3, [r4, #36]	; 0x24
    abbc:	4b04      	ldr	r3, [pc, #16]	; (abd0 <std.isra.0+0x3c>)
    abbe:	62a3      	str	r3, [r4, #40]	; 0x28
    abc0:	4b04      	ldr	r3, [pc, #16]	; (abd4 <std.isra.0+0x40>)
    abc2:	62e3      	str	r3, [r4, #44]	; 0x2c
    abc4:	4b04      	ldr	r3, [pc, #16]	; (abd8 <std.isra.0+0x44>)
    abc6:	6323      	str	r3, [r4, #48]	; 0x30
    abc8:	bd10      	pop	{r4, pc}
    abca:	46c0      	nop			; (mov r8, r8)
    abcc:	0000b709 	.word	0x0000b709
    abd0:	0000b731 	.word	0x0000b731
    abd4:	0000b769 	.word	0x0000b769
    abd8:	0000b795 	.word	0x0000b795

0000abdc <__sfmoreglue>:
    abdc:	b570      	push	{r4, r5, r6, lr}
    abde:	2568      	movs	r5, #104	; 0x68
    abe0:	1e4a      	subs	r2, r1, #1
    abe2:	4355      	muls	r5, r2
    abe4:	000e      	movs	r6, r1
    abe6:	0029      	movs	r1, r5
    abe8:	3174      	adds	r1, #116	; 0x74
    abea:	f7ff fb49 	bl	a280 <_malloc_r>
    abee:	1e04      	subs	r4, r0, #0
    abf0:	d008      	beq.n	ac04 <__sfmoreglue+0x28>
    abf2:	2100      	movs	r1, #0
    abf4:	002a      	movs	r2, r5
    abf6:	6001      	str	r1, [r0, #0]
    abf8:	6046      	str	r6, [r0, #4]
    abfa:	300c      	adds	r0, #12
    abfc:	60a0      	str	r0, [r4, #8]
    abfe:	3268      	adds	r2, #104	; 0x68
    ac00:	f7ff faeb 	bl	a1da <memset>
    ac04:	0020      	movs	r0, r4
    ac06:	bd70      	pop	{r4, r5, r6, pc}

0000ac08 <__sinit>:
    ac08:	6983      	ldr	r3, [r0, #24]
    ac0a:	b513      	push	{r0, r1, r4, lr}
    ac0c:	0004      	movs	r4, r0
    ac0e:	2b00      	cmp	r3, #0
    ac10:	d128      	bne.n	ac64 <__sinit+0x5c>
    ac12:	6483      	str	r3, [r0, #72]	; 0x48
    ac14:	64c3      	str	r3, [r0, #76]	; 0x4c
    ac16:	6503      	str	r3, [r0, #80]	; 0x50
    ac18:	4b13      	ldr	r3, [pc, #76]	; (ac68 <__sinit+0x60>)
    ac1a:	4a14      	ldr	r2, [pc, #80]	; (ac6c <__sinit+0x64>)
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	6282      	str	r2, [r0, #40]	; 0x28
    ac20:	9301      	str	r3, [sp, #4]
    ac22:	4298      	cmp	r0, r3
    ac24:	d101      	bne.n	ac2a <__sinit+0x22>
    ac26:	2301      	movs	r3, #1
    ac28:	6183      	str	r3, [r0, #24]
    ac2a:	0020      	movs	r0, r4
    ac2c:	f000 f820 	bl	ac70 <__sfp>
    ac30:	6060      	str	r0, [r4, #4]
    ac32:	0020      	movs	r0, r4
    ac34:	f000 f81c 	bl	ac70 <__sfp>
    ac38:	60a0      	str	r0, [r4, #8]
    ac3a:	0020      	movs	r0, r4
    ac3c:	f000 f818 	bl	ac70 <__sfp>
    ac40:	2200      	movs	r2, #0
    ac42:	60e0      	str	r0, [r4, #12]
    ac44:	2104      	movs	r1, #4
    ac46:	6860      	ldr	r0, [r4, #4]
    ac48:	f7ff ffa4 	bl	ab94 <std.isra.0>
    ac4c:	2201      	movs	r2, #1
    ac4e:	2109      	movs	r1, #9
    ac50:	68a0      	ldr	r0, [r4, #8]
    ac52:	f7ff ff9f 	bl	ab94 <std.isra.0>
    ac56:	2202      	movs	r2, #2
    ac58:	2112      	movs	r1, #18
    ac5a:	68e0      	ldr	r0, [r4, #12]
    ac5c:	f7ff ff9a 	bl	ab94 <std.isra.0>
    ac60:	2301      	movs	r3, #1
    ac62:	61a3      	str	r3, [r4, #24]
    ac64:	bd13      	pop	{r0, r1, r4, pc}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	0000d584 	.word	0x0000d584
    ac6c:	0000ab85 	.word	0x0000ab85

0000ac70 <__sfp>:
    ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac72:	4b1e      	ldr	r3, [pc, #120]	; (acec <__sfp+0x7c>)
    ac74:	0007      	movs	r7, r0
    ac76:	681e      	ldr	r6, [r3, #0]
    ac78:	69b3      	ldr	r3, [r6, #24]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d102      	bne.n	ac84 <__sfp+0x14>
    ac7e:	0030      	movs	r0, r6
    ac80:	f7ff ffc2 	bl	ac08 <__sinit>
    ac84:	3648      	adds	r6, #72	; 0x48
    ac86:	68b4      	ldr	r4, [r6, #8]
    ac88:	6873      	ldr	r3, [r6, #4]
    ac8a:	3b01      	subs	r3, #1
    ac8c:	d504      	bpl.n	ac98 <__sfp+0x28>
    ac8e:	6833      	ldr	r3, [r6, #0]
    ac90:	2b00      	cmp	r3, #0
    ac92:	d007      	beq.n	aca4 <__sfp+0x34>
    ac94:	6836      	ldr	r6, [r6, #0]
    ac96:	e7f6      	b.n	ac86 <__sfp+0x16>
    ac98:	220c      	movs	r2, #12
    ac9a:	5ea5      	ldrsh	r5, [r4, r2]
    ac9c:	2d00      	cmp	r5, #0
    ac9e:	d00d      	beq.n	acbc <__sfp+0x4c>
    aca0:	3468      	adds	r4, #104	; 0x68
    aca2:	e7f2      	b.n	ac8a <__sfp+0x1a>
    aca4:	2104      	movs	r1, #4
    aca6:	0038      	movs	r0, r7
    aca8:	f7ff ff98 	bl	abdc <__sfmoreglue>
    acac:	6030      	str	r0, [r6, #0]
    acae:	2800      	cmp	r0, #0
    acb0:	d1f0      	bne.n	ac94 <__sfp+0x24>
    acb2:	230c      	movs	r3, #12
    acb4:	0004      	movs	r4, r0
    acb6:	603b      	str	r3, [r7, #0]
    acb8:	0020      	movs	r0, r4
    acba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    acbc:	2301      	movs	r3, #1
    acbe:	0020      	movs	r0, r4
    acc0:	425b      	negs	r3, r3
    acc2:	81e3      	strh	r3, [r4, #14]
    acc4:	3302      	adds	r3, #2
    acc6:	81a3      	strh	r3, [r4, #12]
    acc8:	6665      	str	r5, [r4, #100]	; 0x64
    acca:	6025      	str	r5, [r4, #0]
    accc:	60a5      	str	r5, [r4, #8]
    acce:	6065      	str	r5, [r4, #4]
    acd0:	6125      	str	r5, [r4, #16]
    acd2:	6165      	str	r5, [r4, #20]
    acd4:	61a5      	str	r5, [r4, #24]
    acd6:	2208      	movs	r2, #8
    acd8:	0029      	movs	r1, r5
    acda:	305c      	adds	r0, #92	; 0x5c
    acdc:	f7ff fa7d 	bl	a1da <memset>
    ace0:	6365      	str	r5, [r4, #52]	; 0x34
    ace2:	63a5      	str	r5, [r4, #56]	; 0x38
    ace4:	64a5      	str	r5, [r4, #72]	; 0x48
    ace6:	64e5      	str	r5, [r4, #76]	; 0x4c
    ace8:	e7e6      	b.n	acb8 <__sfp+0x48>
    acea:	46c0      	nop			; (mov r8, r8)
    acec:	0000d584 	.word	0x0000d584

0000acf0 <_fwalk_reent>:
    acf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    acf2:	0004      	movs	r4, r0
    acf4:	0007      	movs	r7, r0
    acf6:	2600      	movs	r6, #0
    acf8:	9101      	str	r1, [sp, #4]
    acfa:	3448      	adds	r4, #72	; 0x48
    acfc:	2c00      	cmp	r4, #0
    acfe:	d101      	bne.n	ad04 <_fwalk_reent+0x14>
    ad00:	0030      	movs	r0, r6
    ad02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ad04:	6863      	ldr	r3, [r4, #4]
    ad06:	68a5      	ldr	r5, [r4, #8]
    ad08:	9300      	str	r3, [sp, #0]
    ad0a:	9b00      	ldr	r3, [sp, #0]
    ad0c:	3b01      	subs	r3, #1
    ad0e:	9300      	str	r3, [sp, #0]
    ad10:	d501      	bpl.n	ad16 <_fwalk_reent+0x26>
    ad12:	6824      	ldr	r4, [r4, #0]
    ad14:	e7f2      	b.n	acfc <_fwalk_reent+0xc>
    ad16:	89ab      	ldrh	r3, [r5, #12]
    ad18:	2b01      	cmp	r3, #1
    ad1a:	d908      	bls.n	ad2e <_fwalk_reent+0x3e>
    ad1c:	220e      	movs	r2, #14
    ad1e:	5eab      	ldrsh	r3, [r5, r2]
    ad20:	3301      	adds	r3, #1
    ad22:	d004      	beq.n	ad2e <_fwalk_reent+0x3e>
    ad24:	0029      	movs	r1, r5
    ad26:	0038      	movs	r0, r7
    ad28:	9b01      	ldr	r3, [sp, #4]
    ad2a:	4798      	blx	r3
    ad2c:	4306      	orrs	r6, r0
    ad2e:	3568      	adds	r5, #104	; 0x68
    ad30:	e7eb      	b.n	ad0a <_fwalk_reent+0x1a>

0000ad32 <__locale_ctype_ptr_l>:
    ad32:	30ec      	adds	r0, #236	; 0xec
    ad34:	6800      	ldr	r0, [r0, #0]
    ad36:	4770      	bx	lr

0000ad38 <__swhatbuf_r>:
    ad38:	b570      	push	{r4, r5, r6, lr}
    ad3a:	000e      	movs	r6, r1
    ad3c:	001d      	movs	r5, r3
    ad3e:	230e      	movs	r3, #14
    ad40:	5ec9      	ldrsh	r1, [r1, r3]
    ad42:	b090      	sub	sp, #64	; 0x40
    ad44:	0014      	movs	r4, r2
    ad46:	2900      	cmp	r1, #0
    ad48:	da07      	bge.n	ad5a <__swhatbuf_r+0x22>
    ad4a:	2300      	movs	r3, #0
    ad4c:	602b      	str	r3, [r5, #0]
    ad4e:	89b3      	ldrh	r3, [r6, #12]
    ad50:	061b      	lsls	r3, r3, #24
    ad52:	d411      	bmi.n	ad78 <__swhatbuf_r+0x40>
    ad54:	2380      	movs	r3, #128	; 0x80
    ad56:	00db      	lsls	r3, r3, #3
    ad58:	e00f      	b.n	ad7a <__swhatbuf_r+0x42>
    ad5a:	aa01      	add	r2, sp, #4
    ad5c:	f000 fd60 	bl	b820 <_fstat_r>
    ad60:	2800      	cmp	r0, #0
    ad62:	dbf2      	blt.n	ad4a <__swhatbuf_r+0x12>
    ad64:	22f0      	movs	r2, #240	; 0xf0
    ad66:	9b02      	ldr	r3, [sp, #8]
    ad68:	0212      	lsls	r2, r2, #8
    ad6a:	4013      	ands	r3, r2
    ad6c:	4a05      	ldr	r2, [pc, #20]	; (ad84 <__swhatbuf_r+0x4c>)
    ad6e:	189b      	adds	r3, r3, r2
    ad70:	425a      	negs	r2, r3
    ad72:	4153      	adcs	r3, r2
    ad74:	602b      	str	r3, [r5, #0]
    ad76:	e7ed      	b.n	ad54 <__swhatbuf_r+0x1c>
    ad78:	2340      	movs	r3, #64	; 0x40
    ad7a:	2000      	movs	r0, #0
    ad7c:	6023      	str	r3, [r4, #0]
    ad7e:	b010      	add	sp, #64	; 0x40
    ad80:	bd70      	pop	{r4, r5, r6, pc}
    ad82:	46c0      	nop			; (mov r8, r8)
    ad84:	ffffe000 	.word	0xffffe000

0000ad88 <__smakebuf_r>:
    ad88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ad8a:	2602      	movs	r6, #2
    ad8c:	898b      	ldrh	r3, [r1, #12]
    ad8e:	0005      	movs	r5, r0
    ad90:	000c      	movs	r4, r1
    ad92:	4233      	tst	r3, r6
    ad94:	d006      	beq.n	ada4 <__smakebuf_r+0x1c>
    ad96:	0023      	movs	r3, r4
    ad98:	3347      	adds	r3, #71	; 0x47
    ad9a:	6023      	str	r3, [r4, #0]
    ad9c:	6123      	str	r3, [r4, #16]
    ad9e:	2301      	movs	r3, #1
    ada0:	6163      	str	r3, [r4, #20]
    ada2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ada4:	ab01      	add	r3, sp, #4
    ada6:	466a      	mov	r2, sp
    ada8:	f7ff ffc6 	bl	ad38 <__swhatbuf_r>
    adac:	9900      	ldr	r1, [sp, #0]
    adae:	0007      	movs	r7, r0
    adb0:	0028      	movs	r0, r5
    adb2:	f7ff fa65 	bl	a280 <_malloc_r>
    adb6:	2800      	cmp	r0, #0
    adb8:	d108      	bne.n	adcc <__smakebuf_r+0x44>
    adba:	220c      	movs	r2, #12
    adbc:	5ea3      	ldrsh	r3, [r4, r2]
    adbe:	059a      	lsls	r2, r3, #22
    adc0:	d4ef      	bmi.n	ada2 <__smakebuf_r+0x1a>
    adc2:	2203      	movs	r2, #3
    adc4:	4393      	bics	r3, r2
    adc6:	431e      	orrs	r6, r3
    adc8:	81a6      	strh	r6, [r4, #12]
    adca:	e7e4      	b.n	ad96 <__smakebuf_r+0xe>
    adcc:	4b0f      	ldr	r3, [pc, #60]	; (ae0c <__smakebuf_r+0x84>)
    adce:	62ab      	str	r3, [r5, #40]	; 0x28
    add0:	2380      	movs	r3, #128	; 0x80
    add2:	89a2      	ldrh	r2, [r4, #12]
    add4:	6020      	str	r0, [r4, #0]
    add6:	4313      	orrs	r3, r2
    add8:	81a3      	strh	r3, [r4, #12]
    adda:	9b00      	ldr	r3, [sp, #0]
    addc:	6120      	str	r0, [r4, #16]
    adde:	6163      	str	r3, [r4, #20]
    ade0:	9b01      	ldr	r3, [sp, #4]
    ade2:	2b00      	cmp	r3, #0
    ade4:	d00d      	beq.n	ae02 <__smakebuf_r+0x7a>
    ade6:	230e      	movs	r3, #14
    ade8:	5ee1      	ldrsh	r1, [r4, r3]
    adea:	0028      	movs	r0, r5
    adec:	f000 fd2a 	bl	b844 <_isatty_r>
    adf0:	2800      	cmp	r0, #0
    adf2:	d006      	beq.n	ae02 <__smakebuf_r+0x7a>
    adf4:	2203      	movs	r2, #3
    adf6:	89a3      	ldrh	r3, [r4, #12]
    adf8:	4393      	bics	r3, r2
    adfa:	001a      	movs	r2, r3
    adfc:	2301      	movs	r3, #1
    adfe:	4313      	orrs	r3, r2
    ae00:	81a3      	strh	r3, [r4, #12]
    ae02:	89a0      	ldrh	r0, [r4, #12]
    ae04:	4338      	orrs	r0, r7
    ae06:	81a0      	strh	r0, [r4, #12]
    ae08:	e7cb      	b.n	ada2 <__smakebuf_r+0x1a>
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	0000ab85 	.word	0x0000ab85

0000ae10 <__ascii_mbtowc>:
    ae10:	b082      	sub	sp, #8
    ae12:	2900      	cmp	r1, #0
    ae14:	d100      	bne.n	ae18 <__ascii_mbtowc+0x8>
    ae16:	a901      	add	r1, sp, #4
    ae18:	1e10      	subs	r0, r2, #0
    ae1a:	d006      	beq.n	ae2a <__ascii_mbtowc+0x1a>
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d006      	beq.n	ae2e <__ascii_mbtowc+0x1e>
    ae20:	7813      	ldrb	r3, [r2, #0]
    ae22:	600b      	str	r3, [r1, #0]
    ae24:	7810      	ldrb	r0, [r2, #0]
    ae26:	1e43      	subs	r3, r0, #1
    ae28:	4198      	sbcs	r0, r3
    ae2a:	b002      	add	sp, #8
    ae2c:	4770      	bx	lr
    ae2e:	2002      	movs	r0, #2
    ae30:	4240      	negs	r0, r0
    ae32:	e7fa      	b.n	ae2a <__ascii_mbtowc+0x1a>

0000ae34 <__malloc_lock>:
    ae34:	4770      	bx	lr

0000ae36 <__malloc_unlock>:
    ae36:	4770      	bx	lr

0000ae38 <__ssputs_r>:
    ae38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae3a:	688e      	ldr	r6, [r1, #8]
    ae3c:	b085      	sub	sp, #20
    ae3e:	0007      	movs	r7, r0
    ae40:	000c      	movs	r4, r1
    ae42:	9203      	str	r2, [sp, #12]
    ae44:	9301      	str	r3, [sp, #4]
    ae46:	429e      	cmp	r6, r3
    ae48:	d839      	bhi.n	aebe <__ssputs_r+0x86>
    ae4a:	2390      	movs	r3, #144	; 0x90
    ae4c:	898a      	ldrh	r2, [r1, #12]
    ae4e:	00db      	lsls	r3, r3, #3
    ae50:	421a      	tst	r2, r3
    ae52:	d034      	beq.n	aebe <__ssputs_r+0x86>
    ae54:	2503      	movs	r5, #3
    ae56:	6909      	ldr	r1, [r1, #16]
    ae58:	6823      	ldr	r3, [r4, #0]
    ae5a:	1a5b      	subs	r3, r3, r1
    ae5c:	9302      	str	r3, [sp, #8]
    ae5e:	6963      	ldr	r3, [r4, #20]
    ae60:	9802      	ldr	r0, [sp, #8]
    ae62:	435d      	muls	r5, r3
    ae64:	0feb      	lsrs	r3, r5, #31
    ae66:	195d      	adds	r5, r3, r5
    ae68:	9b01      	ldr	r3, [sp, #4]
    ae6a:	106d      	asrs	r5, r5, #1
    ae6c:	3301      	adds	r3, #1
    ae6e:	181b      	adds	r3, r3, r0
    ae70:	42ab      	cmp	r3, r5
    ae72:	d900      	bls.n	ae76 <__ssputs_r+0x3e>
    ae74:	001d      	movs	r5, r3
    ae76:	0553      	lsls	r3, r2, #21
    ae78:	d532      	bpl.n	aee0 <__ssputs_r+0xa8>
    ae7a:	0029      	movs	r1, r5
    ae7c:	0038      	movs	r0, r7
    ae7e:	f7ff f9ff 	bl	a280 <_malloc_r>
    ae82:	1e06      	subs	r6, r0, #0
    ae84:	d109      	bne.n	ae9a <__ssputs_r+0x62>
    ae86:	230c      	movs	r3, #12
    ae88:	603b      	str	r3, [r7, #0]
    ae8a:	2340      	movs	r3, #64	; 0x40
    ae8c:	2001      	movs	r0, #1
    ae8e:	89a2      	ldrh	r2, [r4, #12]
    ae90:	4240      	negs	r0, r0
    ae92:	4313      	orrs	r3, r2
    ae94:	81a3      	strh	r3, [r4, #12]
    ae96:	b005      	add	sp, #20
    ae98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae9a:	9a02      	ldr	r2, [sp, #8]
    ae9c:	6921      	ldr	r1, [r4, #16]
    ae9e:	f7ff f981 	bl	a1a4 <memcpy>
    aea2:	89a3      	ldrh	r3, [r4, #12]
    aea4:	4a14      	ldr	r2, [pc, #80]	; (aef8 <__ssputs_r+0xc0>)
    aea6:	401a      	ands	r2, r3
    aea8:	2380      	movs	r3, #128	; 0x80
    aeaa:	4313      	orrs	r3, r2
    aeac:	81a3      	strh	r3, [r4, #12]
    aeae:	9b02      	ldr	r3, [sp, #8]
    aeb0:	6126      	str	r6, [r4, #16]
    aeb2:	18f6      	adds	r6, r6, r3
    aeb4:	6026      	str	r6, [r4, #0]
    aeb6:	6165      	str	r5, [r4, #20]
    aeb8:	9e01      	ldr	r6, [sp, #4]
    aeba:	1aed      	subs	r5, r5, r3
    aebc:	60a5      	str	r5, [r4, #8]
    aebe:	9b01      	ldr	r3, [sp, #4]
    aec0:	42b3      	cmp	r3, r6
    aec2:	d200      	bcs.n	aec6 <__ssputs_r+0x8e>
    aec4:	001e      	movs	r6, r3
    aec6:	0032      	movs	r2, r6
    aec8:	9903      	ldr	r1, [sp, #12]
    aeca:	6820      	ldr	r0, [r4, #0]
    aecc:	f7ff f973 	bl	a1b6 <memmove>
    aed0:	68a3      	ldr	r3, [r4, #8]
    aed2:	2000      	movs	r0, #0
    aed4:	1b9b      	subs	r3, r3, r6
    aed6:	60a3      	str	r3, [r4, #8]
    aed8:	6823      	ldr	r3, [r4, #0]
    aeda:	199e      	adds	r6, r3, r6
    aedc:	6026      	str	r6, [r4, #0]
    aede:	e7da      	b.n	ae96 <__ssputs_r+0x5e>
    aee0:	002a      	movs	r2, r5
    aee2:	0038      	movs	r0, r7
    aee4:	f000 fcdf 	bl	b8a6 <_realloc_r>
    aee8:	1e06      	subs	r6, r0, #0
    aeea:	d1e0      	bne.n	aeae <__ssputs_r+0x76>
    aeec:	6921      	ldr	r1, [r4, #16]
    aeee:	0038      	movs	r0, r7
    aef0:	f7ff f97c 	bl	a1ec <_free_r>
    aef4:	e7c7      	b.n	ae86 <__ssputs_r+0x4e>
    aef6:	46c0      	nop			; (mov r8, r8)
    aef8:	fffffb7f 	.word	0xfffffb7f

0000aefc <_svfiprintf_r>:
    aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aefe:	b09f      	sub	sp, #124	; 0x7c
    af00:	9002      	str	r0, [sp, #8]
    af02:	9305      	str	r3, [sp, #20]
    af04:	898b      	ldrh	r3, [r1, #12]
    af06:	000f      	movs	r7, r1
    af08:	0016      	movs	r6, r2
    af0a:	061b      	lsls	r3, r3, #24
    af0c:	d511      	bpl.n	af32 <_svfiprintf_r+0x36>
    af0e:	690b      	ldr	r3, [r1, #16]
    af10:	2b00      	cmp	r3, #0
    af12:	d10e      	bne.n	af32 <_svfiprintf_r+0x36>
    af14:	2140      	movs	r1, #64	; 0x40
    af16:	f7ff f9b3 	bl	a280 <_malloc_r>
    af1a:	6038      	str	r0, [r7, #0]
    af1c:	6138      	str	r0, [r7, #16]
    af1e:	2800      	cmp	r0, #0
    af20:	d105      	bne.n	af2e <_svfiprintf_r+0x32>
    af22:	230c      	movs	r3, #12
    af24:	9a02      	ldr	r2, [sp, #8]
    af26:	3801      	subs	r0, #1
    af28:	6013      	str	r3, [r2, #0]
    af2a:	b01f      	add	sp, #124	; 0x7c
    af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af2e:	2340      	movs	r3, #64	; 0x40
    af30:	617b      	str	r3, [r7, #20]
    af32:	2300      	movs	r3, #0
    af34:	ad06      	add	r5, sp, #24
    af36:	616b      	str	r3, [r5, #20]
    af38:	3320      	adds	r3, #32
    af3a:	766b      	strb	r3, [r5, #25]
    af3c:	3310      	adds	r3, #16
    af3e:	76ab      	strb	r3, [r5, #26]
    af40:	0034      	movs	r4, r6
    af42:	7823      	ldrb	r3, [r4, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d147      	bne.n	afd8 <_svfiprintf_r+0xdc>
    af48:	1ba3      	subs	r3, r4, r6
    af4a:	9304      	str	r3, [sp, #16]
    af4c:	d00d      	beq.n	af6a <_svfiprintf_r+0x6e>
    af4e:	1ba3      	subs	r3, r4, r6
    af50:	0032      	movs	r2, r6
    af52:	0039      	movs	r1, r7
    af54:	9802      	ldr	r0, [sp, #8]
    af56:	f7ff ff6f 	bl	ae38 <__ssputs_r>
    af5a:	1c43      	adds	r3, r0, #1
    af5c:	d100      	bne.n	af60 <_svfiprintf_r+0x64>
    af5e:	e0b5      	b.n	b0cc <_svfiprintf_r+0x1d0>
    af60:	696a      	ldr	r2, [r5, #20]
    af62:	9b04      	ldr	r3, [sp, #16]
    af64:	4694      	mov	ip, r2
    af66:	4463      	add	r3, ip
    af68:	616b      	str	r3, [r5, #20]
    af6a:	7823      	ldrb	r3, [r4, #0]
    af6c:	2b00      	cmp	r3, #0
    af6e:	d100      	bne.n	af72 <_svfiprintf_r+0x76>
    af70:	e0ac      	b.n	b0cc <_svfiprintf_r+0x1d0>
    af72:	2201      	movs	r2, #1
    af74:	2300      	movs	r3, #0
    af76:	4252      	negs	r2, r2
    af78:	606a      	str	r2, [r5, #4]
    af7a:	a902      	add	r1, sp, #8
    af7c:	3254      	adds	r2, #84	; 0x54
    af7e:	1852      	adds	r2, r2, r1
    af80:	3401      	adds	r4, #1
    af82:	602b      	str	r3, [r5, #0]
    af84:	60eb      	str	r3, [r5, #12]
    af86:	60ab      	str	r3, [r5, #8]
    af88:	7013      	strb	r3, [r2, #0]
    af8a:	65ab      	str	r3, [r5, #88]	; 0x58
    af8c:	4e58      	ldr	r6, [pc, #352]	; (b0f0 <_svfiprintf_r+0x1f4>)
    af8e:	2205      	movs	r2, #5
    af90:	7821      	ldrb	r1, [r4, #0]
    af92:	0030      	movs	r0, r6
    af94:	f000 fc7c 	bl	b890 <memchr>
    af98:	1c62      	adds	r2, r4, #1
    af9a:	2800      	cmp	r0, #0
    af9c:	d120      	bne.n	afe0 <_svfiprintf_r+0xe4>
    af9e:	6829      	ldr	r1, [r5, #0]
    afa0:	06cb      	lsls	r3, r1, #27
    afa2:	d504      	bpl.n	afae <_svfiprintf_r+0xb2>
    afa4:	2353      	movs	r3, #83	; 0x53
    afa6:	ae02      	add	r6, sp, #8
    afa8:	3020      	adds	r0, #32
    afaa:	199b      	adds	r3, r3, r6
    afac:	7018      	strb	r0, [r3, #0]
    afae:	070b      	lsls	r3, r1, #28
    afb0:	d504      	bpl.n	afbc <_svfiprintf_r+0xc0>
    afb2:	2353      	movs	r3, #83	; 0x53
    afb4:	202b      	movs	r0, #43	; 0x2b
    afb6:	ae02      	add	r6, sp, #8
    afb8:	199b      	adds	r3, r3, r6
    afba:	7018      	strb	r0, [r3, #0]
    afbc:	7823      	ldrb	r3, [r4, #0]
    afbe:	2b2a      	cmp	r3, #42	; 0x2a
    afc0:	d016      	beq.n	aff0 <_svfiprintf_r+0xf4>
    afc2:	2000      	movs	r0, #0
    afc4:	210a      	movs	r1, #10
    afc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afc8:	7822      	ldrb	r2, [r4, #0]
    afca:	3a30      	subs	r2, #48	; 0x30
    afcc:	2a09      	cmp	r2, #9
    afce:	d955      	bls.n	b07c <_svfiprintf_r+0x180>
    afd0:	2800      	cmp	r0, #0
    afd2:	d015      	beq.n	b000 <_svfiprintf_r+0x104>
    afd4:	9309      	str	r3, [sp, #36]	; 0x24
    afd6:	e013      	b.n	b000 <_svfiprintf_r+0x104>
    afd8:	2b25      	cmp	r3, #37	; 0x25
    afda:	d0b5      	beq.n	af48 <_svfiprintf_r+0x4c>
    afdc:	3401      	adds	r4, #1
    afde:	e7b0      	b.n	af42 <_svfiprintf_r+0x46>
    afe0:	2301      	movs	r3, #1
    afe2:	1b80      	subs	r0, r0, r6
    afe4:	4083      	lsls	r3, r0
    afe6:	6829      	ldr	r1, [r5, #0]
    afe8:	0014      	movs	r4, r2
    afea:	430b      	orrs	r3, r1
    afec:	602b      	str	r3, [r5, #0]
    afee:	e7cd      	b.n	af8c <_svfiprintf_r+0x90>
    aff0:	9b05      	ldr	r3, [sp, #20]
    aff2:	1d18      	adds	r0, r3, #4
    aff4:	681b      	ldr	r3, [r3, #0]
    aff6:	9005      	str	r0, [sp, #20]
    aff8:	2b00      	cmp	r3, #0
    affa:	db39      	blt.n	b070 <_svfiprintf_r+0x174>
    affc:	9309      	str	r3, [sp, #36]	; 0x24
    affe:	0014      	movs	r4, r2
    b000:	7823      	ldrb	r3, [r4, #0]
    b002:	2b2e      	cmp	r3, #46	; 0x2e
    b004:	d10b      	bne.n	b01e <_svfiprintf_r+0x122>
    b006:	7863      	ldrb	r3, [r4, #1]
    b008:	1c62      	adds	r2, r4, #1
    b00a:	2b2a      	cmp	r3, #42	; 0x2a
    b00c:	d13e      	bne.n	b08c <_svfiprintf_r+0x190>
    b00e:	9b05      	ldr	r3, [sp, #20]
    b010:	3402      	adds	r4, #2
    b012:	1d1a      	adds	r2, r3, #4
    b014:	681b      	ldr	r3, [r3, #0]
    b016:	9205      	str	r2, [sp, #20]
    b018:	2b00      	cmp	r3, #0
    b01a:	db34      	blt.n	b086 <_svfiprintf_r+0x18a>
    b01c:	9307      	str	r3, [sp, #28]
    b01e:	4e35      	ldr	r6, [pc, #212]	; (b0f4 <_svfiprintf_r+0x1f8>)
    b020:	7821      	ldrb	r1, [r4, #0]
    b022:	2203      	movs	r2, #3
    b024:	0030      	movs	r0, r6
    b026:	f000 fc33 	bl	b890 <memchr>
    b02a:	2800      	cmp	r0, #0
    b02c:	d006      	beq.n	b03c <_svfiprintf_r+0x140>
    b02e:	2340      	movs	r3, #64	; 0x40
    b030:	1b80      	subs	r0, r0, r6
    b032:	4083      	lsls	r3, r0
    b034:	682a      	ldr	r2, [r5, #0]
    b036:	3401      	adds	r4, #1
    b038:	4313      	orrs	r3, r2
    b03a:	602b      	str	r3, [r5, #0]
    b03c:	7821      	ldrb	r1, [r4, #0]
    b03e:	2206      	movs	r2, #6
    b040:	482d      	ldr	r0, [pc, #180]	; (b0f8 <_svfiprintf_r+0x1fc>)
    b042:	1c66      	adds	r6, r4, #1
    b044:	7629      	strb	r1, [r5, #24]
    b046:	f000 fc23 	bl	b890 <memchr>
    b04a:	2800      	cmp	r0, #0
    b04c:	d046      	beq.n	b0dc <_svfiprintf_r+0x1e0>
    b04e:	4b2b      	ldr	r3, [pc, #172]	; (b0fc <_svfiprintf_r+0x200>)
    b050:	2b00      	cmp	r3, #0
    b052:	d12f      	bne.n	b0b4 <_svfiprintf_r+0x1b8>
    b054:	6829      	ldr	r1, [r5, #0]
    b056:	9b05      	ldr	r3, [sp, #20]
    b058:	2207      	movs	r2, #7
    b05a:	05c9      	lsls	r1, r1, #23
    b05c:	d528      	bpl.n	b0b0 <_svfiprintf_r+0x1b4>
    b05e:	189b      	adds	r3, r3, r2
    b060:	4393      	bics	r3, r2
    b062:	3308      	adds	r3, #8
    b064:	9305      	str	r3, [sp, #20]
    b066:	696b      	ldr	r3, [r5, #20]
    b068:	9a03      	ldr	r2, [sp, #12]
    b06a:	189b      	adds	r3, r3, r2
    b06c:	616b      	str	r3, [r5, #20]
    b06e:	e767      	b.n	af40 <_svfiprintf_r+0x44>
    b070:	425b      	negs	r3, r3
    b072:	60eb      	str	r3, [r5, #12]
    b074:	2302      	movs	r3, #2
    b076:	430b      	orrs	r3, r1
    b078:	602b      	str	r3, [r5, #0]
    b07a:	e7c0      	b.n	affe <_svfiprintf_r+0x102>
    b07c:	434b      	muls	r3, r1
    b07e:	3401      	adds	r4, #1
    b080:	189b      	adds	r3, r3, r2
    b082:	2001      	movs	r0, #1
    b084:	e7a0      	b.n	afc8 <_svfiprintf_r+0xcc>
    b086:	2301      	movs	r3, #1
    b088:	425b      	negs	r3, r3
    b08a:	e7c7      	b.n	b01c <_svfiprintf_r+0x120>
    b08c:	2300      	movs	r3, #0
    b08e:	0014      	movs	r4, r2
    b090:	200a      	movs	r0, #10
    b092:	001a      	movs	r2, r3
    b094:	606b      	str	r3, [r5, #4]
    b096:	7821      	ldrb	r1, [r4, #0]
    b098:	3930      	subs	r1, #48	; 0x30
    b09a:	2909      	cmp	r1, #9
    b09c:	d903      	bls.n	b0a6 <_svfiprintf_r+0x1aa>
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d0bd      	beq.n	b01e <_svfiprintf_r+0x122>
    b0a2:	9207      	str	r2, [sp, #28]
    b0a4:	e7bb      	b.n	b01e <_svfiprintf_r+0x122>
    b0a6:	4342      	muls	r2, r0
    b0a8:	3401      	adds	r4, #1
    b0aa:	1852      	adds	r2, r2, r1
    b0ac:	2301      	movs	r3, #1
    b0ae:	e7f2      	b.n	b096 <_svfiprintf_r+0x19a>
    b0b0:	3307      	adds	r3, #7
    b0b2:	e7d5      	b.n	b060 <_svfiprintf_r+0x164>
    b0b4:	ab05      	add	r3, sp, #20
    b0b6:	9300      	str	r3, [sp, #0]
    b0b8:	003a      	movs	r2, r7
    b0ba:	4b11      	ldr	r3, [pc, #68]	; (b100 <_svfiprintf_r+0x204>)
    b0bc:	0029      	movs	r1, r5
    b0be:	9802      	ldr	r0, [sp, #8]
    b0c0:	e000      	b.n	b0c4 <_svfiprintf_r+0x1c8>
    b0c2:	bf00      	nop
    b0c4:	9003      	str	r0, [sp, #12]
    b0c6:	9b03      	ldr	r3, [sp, #12]
    b0c8:	3301      	adds	r3, #1
    b0ca:	d1cc      	bne.n	b066 <_svfiprintf_r+0x16a>
    b0cc:	89bb      	ldrh	r3, [r7, #12]
    b0ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b0d0:	065b      	lsls	r3, r3, #25
    b0d2:	d400      	bmi.n	b0d6 <_svfiprintf_r+0x1da>
    b0d4:	e729      	b.n	af2a <_svfiprintf_r+0x2e>
    b0d6:	2001      	movs	r0, #1
    b0d8:	4240      	negs	r0, r0
    b0da:	e726      	b.n	af2a <_svfiprintf_r+0x2e>
    b0dc:	ab05      	add	r3, sp, #20
    b0de:	9300      	str	r3, [sp, #0]
    b0e0:	003a      	movs	r2, r7
    b0e2:	4b07      	ldr	r3, [pc, #28]	; (b100 <_svfiprintf_r+0x204>)
    b0e4:	0029      	movs	r1, r5
    b0e6:	9802      	ldr	r0, [sp, #8]
    b0e8:	f000 f9be 	bl	b468 <_printf_i>
    b0ec:	e7ea      	b.n	b0c4 <_svfiprintf_r+0x1c8>
    b0ee:	46c0      	nop			; (mov r8, r8)
    b0f0:	0000d5f2 	.word	0x0000d5f2
    b0f4:	0000d5f8 	.word	0x0000d5f8
    b0f8:	0000d5fc 	.word	0x0000d5fc
    b0fc:	00000000 	.word	0x00000000
    b100:	0000ae39 	.word	0x0000ae39

0000b104 <__sfputc_r>:
    b104:	6893      	ldr	r3, [r2, #8]
    b106:	b510      	push	{r4, lr}
    b108:	3b01      	subs	r3, #1
    b10a:	6093      	str	r3, [r2, #8]
    b10c:	2b00      	cmp	r3, #0
    b10e:	da05      	bge.n	b11c <__sfputc_r+0x18>
    b110:	6994      	ldr	r4, [r2, #24]
    b112:	42a3      	cmp	r3, r4
    b114:	db08      	blt.n	b128 <__sfputc_r+0x24>
    b116:	b2cb      	uxtb	r3, r1
    b118:	2b0a      	cmp	r3, #10
    b11a:	d005      	beq.n	b128 <__sfputc_r+0x24>
    b11c:	6813      	ldr	r3, [r2, #0]
    b11e:	1c58      	adds	r0, r3, #1
    b120:	6010      	str	r0, [r2, #0]
    b122:	7019      	strb	r1, [r3, #0]
    b124:	b2c8      	uxtb	r0, r1
    b126:	bd10      	pop	{r4, pc}
    b128:	f7ff fbaa 	bl	a880 <__swbuf_r>
    b12c:	e7fb      	b.n	b126 <__sfputc_r+0x22>

0000b12e <__sfputs_r>:
    b12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b130:	0006      	movs	r6, r0
    b132:	000f      	movs	r7, r1
    b134:	0014      	movs	r4, r2
    b136:	18d5      	adds	r5, r2, r3
    b138:	42ac      	cmp	r4, r5
    b13a:	d101      	bne.n	b140 <__sfputs_r+0x12>
    b13c:	2000      	movs	r0, #0
    b13e:	e007      	b.n	b150 <__sfputs_r+0x22>
    b140:	7821      	ldrb	r1, [r4, #0]
    b142:	003a      	movs	r2, r7
    b144:	0030      	movs	r0, r6
    b146:	f7ff ffdd 	bl	b104 <__sfputc_r>
    b14a:	3401      	adds	r4, #1
    b14c:	1c43      	adds	r3, r0, #1
    b14e:	d1f3      	bne.n	b138 <__sfputs_r+0xa>
    b150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000b154 <_vfiprintf_r>:
    b154:	b5f0      	push	{r4, r5, r6, r7, lr}
    b156:	b09f      	sub	sp, #124	; 0x7c
    b158:	0006      	movs	r6, r0
    b15a:	000f      	movs	r7, r1
    b15c:	0014      	movs	r4, r2
    b15e:	9305      	str	r3, [sp, #20]
    b160:	2800      	cmp	r0, #0
    b162:	d004      	beq.n	b16e <_vfiprintf_r+0x1a>
    b164:	6983      	ldr	r3, [r0, #24]
    b166:	2b00      	cmp	r3, #0
    b168:	d101      	bne.n	b16e <_vfiprintf_r+0x1a>
    b16a:	f7ff fd4d 	bl	ac08 <__sinit>
    b16e:	4b7f      	ldr	r3, [pc, #508]	; (b36c <_vfiprintf_r+0x218>)
    b170:	429f      	cmp	r7, r3
    b172:	d15c      	bne.n	b22e <_vfiprintf_r+0xda>
    b174:	6877      	ldr	r7, [r6, #4]
    b176:	89bb      	ldrh	r3, [r7, #12]
    b178:	071b      	lsls	r3, r3, #28
    b17a:	d562      	bpl.n	b242 <_vfiprintf_r+0xee>
    b17c:	693b      	ldr	r3, [r7, #16]
    b17e:	2b00      	cmp	r3, #0
    b180:	d05f      	beq.n	b242 <_vfiprintf_r+0xee>
    b182:	2300      	movs	r3, #0
    b184:	ad06      	add	r5, sp, #24
    b186:	616b      	str	r3, [r5, #20]
    b188:	3320      	adds	r3, #32
    b18a:	766b      	strb	r3, [r5, #25]
    b18c:	3310      	adds	r3, #16
    b18e:	76ab      	strb	r3, [r5, #26]
    b190:	9402      	str	r4, [sp, #8]
    b192:	9c02      	ldr	r4, [sp, #8]
    b194:	7823      	ldrb	r3, [r4, #0]
    b196:	2b00      	cmp	r3, #0
    b198:	d15d      	bne.n	b256 <_vfiprintf_r+0x102>
    b19a:	9b02      	ldr	r3, [sp, #8]
    b19c:	1ae3      	subs	r3, r4, r3
    b19e:	9304      	str	r3, [sp, #16]
    b1a0:	d00d      	beq.n	b1be <_vfiprintf_r+0x6a>
    b1a2:	9b04      	ldr	r3, [sp, #16]
    b1a4:	9a02      	ldr	r2, [sp, #8]
    b1a6:	0039      	movs	r1, r7
    b1a8:	0030      	movs	r0, r6
    b1aa:	f7ff ffc0 	bl	b12e <__sfputs_r>
    b1ae:	1c43      	adds	r3, r0, #1
    b1b0:	d100      	bne.n	b1b4 <_vfiprintf_r+0x60>
    b1b2:	e0cc      	b.n	b34e <_vfiprintf_r+0x1fa>
    b1b4:	696a      	ldr	r2, [r5, #20]
    b1b6:	9b04      	ldr	r3, [sp, #16]
    b1b8:	4694      	mov	ip, r2
    b1ba:	4463      	add	r3, ip
    b1bc:	616b      	str	r3, [r5, #20]
    b1be:	7823      	ldrb	r3, [r4, #0]
    b1c0:	2b00      	cmp	r3, #0
    b1c2:	d100      	bne.n	b1c6 <_vfiprintf_r+0x72>
    b1c4:	e0c3      	b.n	b34e <_vfiprintf_r+0x1fa>
    b1c6:	2201      	movs	r2, #1
    b1c8:	2300      	movs	r3, #0
    b1ca:	4252      	negs	r2, r2
    b1cc:	606a      	str	r2, [r5, #4]
    b1ce:	a902      	add	r1, sp, #8
    b1d0:	3254      	adds	r2, #84	; 0x54
    b1d2:	1852      	adds	r2, r2, r1
    b1d4:	3401      	adds	r4, #1
    b1d6:	602b      	str	r3, [r5, #0]
    b1d8:	60eb      	str	r3, [r5, #12]
    b1da:	60ab      	str	r3, [r5, #8]
    b1dc:	7013      	strb	r3, [r2, #0]
    b1de:	65ab      	str	r3, [r5, #88]	; 0x58
    b1e0:	7821      	ldrb	r1, [r4, #0]
    b1e2:	2205      	movs	r2, #5
    b1e4:	4862      	ldr	r0, [pc, #392]	; (b370 <_vfiprintf_r+0x21c>)
    b1e6:	f000 fb53 	bl	b890 <memchr>
    b1ea:	1c63      	adds	r3, r4, #1
    b1ec:	469c      	mov	ip, r3
    b1ee:	2800      	cmp	r0, #0
    b1f0:	d135      	bne.n	b25e <_vfiprintf_r+0x10a>
    b1f2:	6829      	ldr	r1, [r5, #0]
    b1f4:	06cb      	lsls	r3, r1, #27
    b1f6:	d504      	bpl.n	b202 <_vfiprintf_r+0xae>
    b1f8:	2353      	movs	r3, #83	; 0x53
    b1fa:	aa02      	add	r2, sp, #8
    b1fc:	3020      	adds	r0, #32
    b1fe:	189b      	adds	r3, r3, r2
    b200:	7018      	strb	r0, [r3, #0]
    b202:	070b      	lsls	r3, r1, #28
    b204:	d504      	bpl.n	b210 <_vfiprintf_r+0xbc>
    b206:	2353      	movs	r3, #83	; 0x53
    b208:	202b      	movs	r0, #43	; 0x2b
    b20a:	aa02      	add	r2, sp, #8
    b20c:	189b      	adds	r3, r3, r2
    b20e:	7018      	strb	r0, [r3, #0]
    b210:	7823      	ldrb	r3, [r4, #0]
    b212:	2b2a      	cmp	r3, #42	; 0x2a
    b214:	d02c      	beq.n	b270 <_vfiprintf_r+0x11c>
    b216:	2000      	movs	r0, #0
    b218:	210a      	movs	r1, #10
    b21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b21c:	7822      	ldrb	r2, [r4, #0]
    b21e:	3a30      	subs	r2, #48	; 0x30
    b220:	2a09      	cmp	r2, #9
    b222:	d800      	bhi.n	b226 <_vfiprintf_r+0xd2>
    b224:	e06b      	b.n	b2fe <_vfiprintf_r+0x1aa>
    b226:	2800      	cmp	r0, #0
    b228:	d02a      	beq.n	b280 <_vfiprintf_r+0x12c>
    b22a:	9309      	str	r3, [sp, #36]	; 0x24
    b22c:	e028      	b.n	b280 <_vfiprintf_r+0x12c>
    b22e:	4b51      	ldr	r3, [pc, #324]	; (b374 <_vfiprintf_r+0x220>)
    b230:	429f      	cmp	r7, r3
    b232:	d101      	bne.n	b238 <_vfiprintf_r+0xe4>
    b234:	68b7      	ldr	r7, [r6, #8]
    b236:	e79e      	b.n	b176 <_vfiprintf_r+0x22>
    b238:	4b4f      	ldr	r3, [pc, #316]	; (b378 <_vfiprintf_r+0x224>)
    b23a:	429f      	cmp	r7, r3
    b23c:	d19b      	bne.n	b176 <_vfiprintf_r+0x22>
    b23e:	68f7      	ldr	r7, [r6, #12]
    b240:	e799      	b.n	b176 <_vfiprintf_r+0x22>
    b242:	0039      	movs	r1, r7
    b244:	0030      	movs	r0, r6
    b246:	f7ff fb71 	bl	a92c <__swsetup_r>
    b24a:	2800      	cmp	r0, #0
    b24c:	d099      	beq.n	b182 <_vfiprintf_r+0x2e>
    b24e:	2001      	movs	r0, #1
    b250:	4240      	negs	r0, r0
    b252:	b01f      	add	sp, #124	; 0x7c
    b254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b256:	2b25      	cmp	r3, #37	; 0x25
    b258:	d09f      	beq.n	b19a <_vfiprintf_r+0x46>
    b25a:	3401      	adds	r4, #1
    b25c:	e79a      	b.n	b194 <_vfiprintf_r+0x40>
    b25e:	4b44      	ldr	r3, [pc, #272]	; (b370 <_vfiprintf_r+0x21c>)
    b260:	6829      	ldr	r1, [r5, #0]
    b262:	1ac0      	subs	r0, r0, r3
    b264:	2301      	movs	r3, #1
    b266:	4083      	lsls	r3, r0
    b268:	430b      	orrs	r3, r1
    b26a:	602b      	str	r3, [r5, #0]
    b26c:	4664      	mov	r4, ip
    b26e:	e7b7      	b.n	b1e0 <_vfiprintf_r+0x8c>
    b270:	9b05      	ldr	r3, [sp, #20]
    b272:	1d18      	adds	r0, r3, #4
    b274:	681b      	ldr	r3, [r3, #0]
    b276:	9005      	str	r0, [sp, #20]
    b278:	2b00      	cmp	r3, #0
    b27a:	db3a      	blt.n	b2f2 <_vfiprintf_r+0x19e>
    b27c:	9309      	str	r3, [sp, #36]	; 0x24
    b27e:	4664      	mov	r4, ip
    b280:	7823      	ldrb	r3, [r4, #0]
    b282:	2b2e      	cmp	r3, #46	; 0x2e
    b284:	d10b      	bne.n	b29e <_vfiprintf_r+0x14a>
    b286:	7863      	ldrb	r3, [r4, #1]
    b288:	1c62      	adds	r2, r4, #1
    b28a:	2b2a      	cmp	r3, #42	; 0x2a
    b28c:	d13f      	bne.n	b30e <_vfiprintf_r+0x1ba>
    b28e:	9b05      	ldr	r3, [sp, #20]
    b290:	3402      	adds	r4, #2
    b292:	1d1a      	adds	r2, r3, #4
    b294:	681b      	ldr	r3, [r3, #0]
    b296:	9205      	str	r2, [sp, #20]
    b298:	2b00      	cmp	r3, #0
    b29a:	db35      	blt.n	b308 <_vfiprintf_r+0x1b4>
    b29c:	9307      	str	r3, [sp, #28]
    b29e:	7821      	ldrb	r1, [r4, #0]
    b2a0:	2203      	movs	r2, #3
    b2a2:	4836      	ldr	r0, [pc, #216]	; (b37c <_vfiprintf_r+0x228>)
    b2a4:	f000 faf4 	bl	b890 <memchr>
    b2a8:	2800      	cmp	r0, #0
    b2aa:	d007      	beq.n	b2bc <_vfiprintf_r+0x168>
    b2ac:	4b33      	ldr	r3, [pc, #204]	; (b37c <_vfiprintf_r+0x228>)
    b2ae:	682a      	ldr	r2, [r5, #0]
    b2b0:	1ac0      	subs	r0, r0, r3
    b2b2:	2340      	movs	r3, #64	; 0x40
    b2b4:	4083      	lsls	r3, r0
    b2b6:	4313      	orrs	r3, r2
    b2b8:	602b      	str	r3, [r5, #0]
    b2ba:	3401      	adds	r4, #1
    b2bc:	7821      	ldrb	r1, [r4, #0]
    b2be:	1c63      	adds	r3, r4, #1
    b2c0:	2206      	movs	r2, #6
    b2c2:	482f      	ldr	r0, [pc, #188]	; (b380 <_vfiprintf_r+0x22c>)
    b2c4:	9302      	str	r3, [sp, #8]
    b2c6:	7629      	strb	r1, [r5, #24]
    b2c8:	f000 fae2 	bl	b890 <memchr>
    b2cc:	2800      	cmp	r0, #0
    b2ce:	d044      	beq.n	b35a <_vfiprintf_r+0x206>
    b2d0:	4b2c      	ldr	r3, [pc, #176]	; (b384 <_vfiprintf_r+0x230>)
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	d12f      	bne.n	b336 <_vfiprintf_r+0x1e2>
    b2d6:	6829      	ldr	r1, [r5, #0]
    b2d8:	9b05      	ldr	r3, [sp, #20]
    b2da:	2207      	movs	r2, #7
    b2dc:	05c9      	lsls	r1, r1, #23
    b2de:	d528      	bpl.n	b332 <_vfiprintf_r+0x1de>
    b2e0:	189b      	adds	r3, r3, r2
    b2e2:	4393      	bics	r3, r2
    b2e4:	3308      	adds	r3, #8
    b2e6:	9305      	str	r3, [sp, #20]
    b2e8:	696b      	ldr	r3, [r5, #20]
    b2ea:	9a03      	ldr	r2, [sp, #12]
    b2ec:	189b      	adds	r3, r3, r2
    b2ee:	616b      	str	r3, [r5, #20]
    b2f0:	e74f      	b.n	b192 <_vfiprintf_r+0x3e>
    b2f2:	425b      	negs	r3, r3
    b2f4:	60eb      	str	r3, [r5, #12]
    b2f6:	2302      	movs	r3, #2
    b2f8:	430b      	orrs	r3, r1
    b2fa:	602b      	str	r3, [r5, #0]
    b2fc:	e7bf      	b.n	b27e <_vfiprintf_r+0x12a>
    b2fe:	434b      	muls	r3, r1
    b300:	3401      	adds	r4, #1
    b302:	189b      	adds	r3, r3, r2
    b304:	2001      	movs	r0, #1
    b306:	e789      	b.n	b21c <_vfiprintf_r+0xc8>
    b308:	2301      	movs	r3, #1
    b30a:	425b      	negs	r3, r3
    b30c:	e7c6      	b.n	b29c <_vfiprintf_r+0x148>
    b30e:	2300      	movs	r3, #0
    b310:	0014      	movs	r4, r2
    b312:	200a      	movs	r0, #10
    b314:	001a      	movs	r2, r3
    b316:	606b      	str	r3, [r5, #4]
    b318:	7821      	ldrb	r1, [r4, #0]
    b31a:	3930      	subs	r1, #48	; 0x30
    b31c:	2909      	cmp	r1, #9
    b31e:	d903      	bls.n	b328 <_vfiprintf_r+0x1d4>
    b320:	2b00      	cmp	r3, #0
    b322:	d0bc      	beq.n	b29e <_vfiprintf_r+0x14a>
    b324:	9207      	str	r2, [sp, #28]
    b326:	e7ba      	b.n	b29e <_vfiprintf_r+0x14a>
    b328:	4342      	muls	r2, r0
    b32a:	3401      	adds	r4, #1
    b32c:	1852      	adds	r2, r2, r1
    b32e:	2301      	movs	r3, #1
    b330:	e7f2      	b.n	b318 <_vfiprintf_r+0x1c4>
    b332:	3307      	adds	r3, #7
    b334:	e7d5      	b.n	b2e2 <_vfiprintf_r+0x18e>
    b336:	ab05      	add	r3, sp, #20
    b338:	9300      	str	r3, [sp, #0]
    b33a:	003a      	movs	r2, r7
    b33c:	4b12      	ldr	r3, [pc, #72]	; (b388 <_vfiprintf_r+0x234>)
    b33e:	0029      	movs	r1, r5
    b340:	0030      	movs	r0, r6
    b342:	e000      	b.n	b346 <_vfiprintf_r+0x1f2>
    b344:	bf00      	nop
    b346:	9003      	str	r0, [sp, #12]
    b348:	9b03      	ldr	r3, [sp, #12]
    b34a:	3301      	adds	r3, #1
    b34c:	d1cc      	bne.n	b2e8 <_vfiprintf_r+0x194>
    b34e:	89bb      	ldrh	r3, [r7, #12]
    b350:	065b      	lsls	r3, r3, #25
    b352:	d500      	bpl.n	b356 <_vfiprintf_r+0x202>
    b354:	e77b      	b.n	b24e <_vfiprintf_r+0xfa>
    b356:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b358:	e77b      	b.n	b252 <_vfiprintf_r+0xfe>
    b35a:	ab05      	add	r3, sp, #20
    b35c:	9300      	str	r3, [sp, #0]
    b35e:	003a      	movs	r2, r7
    b360:	4b09      	ldr	r3, [pc, #36]	; (b388 <_vfiprintf_r+0x234>)
    b362:	0029      	movs	r1, r5
    b364:	0030      	movs	r0, r6
    b366:	f000 f87f 	bl	b468 <_printf_i>
    b36a:	e7ec      	b.n	b346 <_vfiprintf_r+0x1f2>
    b36c:	0000d5a8 	.word	0x0000d5a8
    b370:	0000d5f2 	.word	0x0000d5f2
    b374:	0000d5c8 	.word	0x0000d5c8
    b378:	0000d588 	.word	0x0000d588
    b37c:	0000d5f8 	.word	0x0000d5f8
    b380:	0000d5fc 	.word	0x0000d5fc
    b384:	00000000 	.word	0x00000000
    b388:	0000b12f 	.word	0x0000b12f

0000b38c <_printf_common>:
    b38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b38e:	0015      	movs	r5, r2
    b390:	9301      	str	r3, [sp, #4]
    b392:	688a      	ldr	r2, [r1, #8]
    b394:	690b      	ldr	r3, [r1, #16]
    b396:	9000      	str	r0, [sp, #0]
    b398:	000c      	movs	r4, r1
    b39a:	4293      	cmp	r3, r2
    b39c:	da00      	bge.n	b3a0 <_printf_common+0x14>
    b39e:	0013      	movs	r3, r2
    b3a0:	0022      	movs	r2, r4
    b3a2:	602b      	str	r3, [r5, #0]
    b3a4:	3243      	adds	r2, #67	; 0x43
    b3a6:	7812      	ldrb	r2, [r2, #0]
    b3a8:	2a00      	cmp	r2, #0
    b3aa:	d001      	beq.n	b3b0 <_printf_common+0x24>
    b3ac:	3301      	adds	r3, #1
    b3ae:	602b      	str	r3, [r5, #0]
    b3b0:	6823      	ldr	r3, [r4, #0]
    b3b2:	069b      	lsls	r3, r3, #26
    b3b4:	d502      	bpl.n	b3bc <_printf_common+0x30>
    b3b6:	682b      	ldr	r3, [r5, #0]
    b3b8:	3302      	adds	r3, #2
    b3ba:	602b      	str	r3, [r5, #0]
    b3bc:	2706      	movs	r7, #6
    b3be:	6823      	ldr	r3, [r4, #0]
    b3c0:	401f      	ands	r7, r3
    b3c2:	d027      	beq.n	b414 <_printf_common+0x88>
    b3c4:	0023      	movs	r3, r4
    b3c6:	3343      	adds	r3, #67	; 0x43
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	1e5a      	subs	r2, r3, #1
    b3cc:	4193      	sbcs	r3, r2
    b3ce:	6822      	ldr	r2, [r4, #0]
    b3d0:	0692      	lsls	r2, r2, #26
    b3d2:	d430      	bmi.n	b436 <_printf_common+0xaa>
    b3d4:	0022      	movs	r2, r4
    b3d6:	9901      	ldr	r1, [sp, #4]
    b3d8:	3243      	adds	r2, #67	; 0x43
    b3da:	9800      	ldr	r0, [sp, #0]
    b3dc:	9e08      	ldr	r6, [sp, #32]
    b3de:	47b0      	blx	r6
    b3e0:	1c43      	adds	r3, r0, #1
    b3e2:	d025      	beq.n	b430 <_printf_common+0xa4>
    b3e4:	2306      	movs	r3, #6
    b3e6:	6820      	ldr	r0, [r4, #0]
    b3e8:	682a      	ldr	r2, [r5, #0]
    b3ea:	68e1      	ldr	r1, [r4, #12]
    b3ec:	4003      	ands	r3, r0
    b3ee:	2500      	movs	r5, #0
    b3f0:	2b04      	cmp	r3, #4
    b3f2:	d103      	bne.n	b3fc <_printf_common+0x70>
    b3f4:	1a8d      	subs	r5, r1, r2
    b3f6:	43eb      	mvns	r3, r5
    b3f8:	17db      	asrs	r3, r3, #31
    b3fa:	401d      	ands	r5, r3
    b3fc:	68a3      	ldr	r3, [r4, #8]
    b3fe:	6922      	ldr	r2, [r4, #16]
    b400:	4293      	cmp	r3, r2
    b402:	dd01      	ble.n	b408 <_printf_common+0x7c>
    b404:	1a9b      	subs	r3, r3, r2
    b406:	18ed      	adds	r5, r5, r3
    b408:	2700      	movs	r7, #0
    b40a:	42bd      	cmp	r5, r7
    b40c:	d120      	bne.n	b450 <_printf_common+0xc4>
    b40e:	2000      	movs	r0, #0
    b410:	e010      	b.n	b434 <_printf_common+0xa8>
    b412:	3701      	adds	r7, #1
    b414:	68e3      	ldr	r3, [r4, #12]
    b416:	682a      	ldr	r2, [r5, #0]
    b418:	1a9b      	subs	r3, r3, r2
    b41a:	429f      	cmp	r7, r3
    b41c:	dad2      	bge.n	b3c4 <_printf_common+0x38>
    b41e:	0022      	movs	r2, r4
    b420:	2301      	movs	r3, #1
    b422:	3219      	adds	r2, #25
    b424:	9901      	ldr	r1, [sp, #4]
    b426:	9800      	ldr	r0, [sp, #0]
    b428:	9e08      	ldr	r6, [sp, #32]
    b42a:	47b0      	blx	r6
    b42c:	1c43      	adds	r3, r0, #1
    b42e:	d1f0      	bne.n	b412 <_printf_common+0x86>
    b430:	2001      	movs	r0, #1
    b432:	4240      	negs	r0, r0
    b434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b436:	2030      	movs	r0, #48	; 0x30
    b438:	18e1      	adds	r1, r4, r3
    b43a:	3143      	adds	r1, #67	; 0x43
    b43c:	7008      	strb	r0, [r1, #0]
    b43e:	0021      	movs	r1, r4
    b440:	1c5a      	adds	r2, r3, #1
    b442:	3145      	adds	r1, #69	; 0x45
    b444:	7809      	ldrb	r1, [r1, #0]
    b446:	18a2      	adds	r2, r4, r2
    b448:	3243      	adds	r2, #67	; 0x43
    b44a:	3302      	adds	r3, #2
    b44c:	7011      	strb	r1, [r2, #0]
    b44e:	e7c1      	b.n	b3d4 <_printf_common+0x48>
    b450:	0022      	movs	r2, r4
    b452:	2301      	movs	r3, #1
    b454:	321a      	adds	r2, #26
    b456:	9901      	ldr	r1, [sp, #4]
    b458:	9800      	ldr	r0, [sp, #0]
    b45a:	9e08      	ldr	r6, [sp, #32]
    b45c:	47b0      	blx	r6
    b45e:	1c43      	adds	r3, r0, #1
    b460:	d0e6      	beq.n	b430 <_printf_common+0xa4>
    b462:	3701      	adds	r7, #1
    b464:	e7d1      	b.n	b40a <_printf_common+0x7e>
	...

0000b468 <_printf_i>:
    b468:	b5f0      	push	{r4, r5, r6, r7, lr}
    b46a:	b08b      	sub	sp, #44	; 0x2c
    b46c:	9206      	str	r2, [sp, #24]
    b46e:	000a      	movs	r2, r1
    b470:	3243      	adds	r2, #67	; 0x43
    b472:	9307      	str	r3, [sp, #28]
    b474:	9005      	str	r0, [sp, #20]
    b476:	9204      	str	r2, [sp, #16]
    b478:	7e0a      	ldrb	r2, [r1, #24]
    b47a:	000c      	movs	r4, r1
    b47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b47e:	2a6e      	cmp	r2, #110	; 0x6e
    b480:	d100      	bne.n	b484 <_printf_i+0x1c>
    b482:	e08f      	b.n	b5a4 <_printf_i+0x13c>
    b484:	d817      	bhi.n	b4b6 <_printf_i+0x4e>
    b486:	2a63      	cmp	r2, #99	; 0x63
    b488:	d02c      	beq.n	b4e4 <_printf_i+0x7c>
    b48a:	d808      	bhi.n	b49e <_printf_i+0x36>
    b48c:	2a00      	cmp	r2, #0
    b48e:	d100      	bne.n	b492 <_printf_i+0x2a>
    b490:	e099      	b.n	b5c6 <_printf_i+0x15e>
    b492:	2a58      	cmp	r2, #88	; 0x58
    b494:	d054      	beq.n	b540 <_printf_i+0xd8>
    b496:	0026      	movs	r6, r4
    b498:	3642      	adds	r6, #66	; 0x42
    b49a:	7032      	strb	r2, [r6, #0]
    b49c:	e029      	b.n	b4f2 <_printf_i+0x8a>
    b49e:	2a64      	cmp	r2, #100	; 0x64
    b4a0:	d001      	beq.n	b4a6 <_printf_i+0x3e>
    b4a2:	2a69      	cmp	r2, #105	; 0x69
    b4a4:	d1f7      	bne.n	b496 <_printf_i+0x2e>
    b4a6:	6821      	ldr	r1, [r4, #0]
    b4a8:	681a      	ldr	r2, [r3, #0]
    b4aa:	0608      	lsls	r0, r1, #24
    b4ac:	d523      	bpl.n	b4f6 <_printf_i+0x8e>
    b4ae:	1d11      	adds	r1, r2, #4
    b4b0:	6019      	str	r1, [r3, #0]
    b4b2:	6815      	ldr	r5, [r2, #0]
    b4b4:	e025      	b.n	b502 <_printf_i+0x9a>
    b4b6:	2a73      	cmp	r2, #115	; 0x73
    b4b8:	d100      	bne.n	b4bc <_printf_i+0x54>
    b4ba:	e088      	b.n	b5ce <_printf_i+0x166>
    b4bc:	d808      	bhi.n	b4d0 <_printf_i+0x68>
    b4be:	2a6f      	cmp	r2, #111	; 0x6f
    b4c0:	d029      	beq.n	b516 <_printf_i+0xae>
    b4c2:	2a70      	cmp	r2, #112	; 0x70
    b4c4:	d1e7      	bne.n	b496 <_printf_i+0x2e>
    b4c6:	2220      	movs	r2, #32
    b4c8:	6809      	ldr	r1, [r1, #0]
    b4ca:	430a      	orrs	r2, r1
    b4cc:	6022      	str	r2, [r4, #0]
    b4ce:	e003      	b.n	b4d8 <_printf_i+0x70>
    b4d0:	2a75      	cmp	r2, #117	; 0x75
    b4d2:	d020      	beq.n	b516 <_printf_i+0xae>
    b4d4:	2a78      	cmp	r2, #120	; 0x78
    b4d6:	d1de      	bne.n	b496 <_printf_i+0x2e>
    b4d8:	0022      	movs	r2, r4
    b4da:	2178      	movs	r1, #120	; 0x78
    b4dc:	3245      	adds	r2, #69	; 0x45
    b4de:	7011      	strb	r1, [r2, #0]
    b4e0:	4a6c      	ldr	r2, [pc, #432]	; (b694 <_printf_i+0x22c>)
    b4e2:	e030      	b.n	b546 <_printf_i+0xde>
    b4e4:	000e      	movs	r6, r1
    b4e6:	681a      	ldr	r2, [r3, #0]
    b4e8:	3642      	adds	r6, #66	; 0x42
    b4ea:	1d11      	adds	r1, r2, #4
    b4ec:	6019      	str	r1, [r3, #0]
    b4ee:	6813      	ldr	r3, [r2, #0]
    b4f0:	7033      	strb	r3, [r6, #0]
    b4f2:	2301      	movs	r3, #1
    b4f4:	e079      	b.n	b5ea <_printf_i+0x182>
    b4f6:	0649      	lsls	r1, r1, #25
    b4f8:	d5d9      	bpl.n	b4ae <_printf_i+0x46>
    b4fa:	1d11      	adds	r1, r2, #4
    b4fc:	6019      	str	r1, [r3, #0]
    b4fe:	2300      	movs	r3, #0
    b500:	5ed5      	ldrsh	r5, [r2, r3]
    b502:	2d00      	cmp	r5, #0
    b504:	da03      	bge.n	b50e <_printf_i+0xa6>
    b506:	232d      	movs	r3, #45	; 0x2d
    b508:	9a04      	ldr	r2, [sp, #16]
    b50a:	426d      	negs	r5, r5
    b50c:	7013      	strb	r3, [r2, #0]
    b50e:	4b62      	ldr	r3, [pc, #392]	; (b698 <_printf_i+0x230>)
    b510:	270a      	movs	r7, #10
    b512:	9303      	str	r3, [sp, #12]
    b514:	e02f      	b.n	b576 <_printf_i+0x10e>
    b516:	6820      	ldr	r0, [r4, #0]
    b518:	6819      	ldr	r1, [r3, #0]
    b51a:	0605      	lsls	r5, r0, #24
    b51c:	d503      	bpl.n	b526 <_printf_i+0xbe>
    b51e:	1d08      	adds	r0, r1, #4
    b520:	6018      	str	r0, [r3, #0]
    b522:	680d      	ldr	r5, [r1, #0]
    b524:	e005      	b.n	b532 <_printf_i+0xca>
    b526:	0640      	lsls	r0, r0, #25
    b528:	d5f9      	bpl.n	b51e <_printf_i+0xb6>
    b52a:	680d      	ldr	r5, [r1, #0]
    b52c:	1d08      	adds	r0, r1, #4
    b52e:	6018      	str	r0, [r3, #0]
    b530:	b2ad      	uxth	r5, r5
    b532:	4b59      	ldr	r3, [pc, #356]	; (b698 <_printf_i+0x230>)
    b534:	2708      	movs	r7, #8
    b536:	9303      	str	r3, [sp, #12]
    b538:	2a6f      	cmp	r2, #111	; 0x6f
    b53a:	d018      	beq.n	b56e <_printf_i+0x106>
    b53c:	270a      	movs	r7, #10
    b53e:	e016      	b.n	b56e <_printf_i+0x106>
    b540:	3145      	adds	r1, #69	; 0x45
    b542:	700a      	strb	r2, [r1, #0]
    b544:	4a54      	ldr	r2, [pc, #336]	; (b698 <_printf_i+0x230>)
    b546:	9203      	str	r2, [sp, #12]
    b548:	681a      	ldr	r2, [r3, #0]
    b54a:	6821      	ldr	r1, [r4, #0]
    b54c:	1d10      	adds	r0, r2, #4
    b54e:	6018      	str	r0, [r3, #0]
    b550:	6815      	ldr	r5, [r2, #0]
    b552:	0608      	lsls	r0, r1, #24
    b554:	d522      	bpl.n	b59c <_printf_i+0x134>
    b556:	07cb      	lsls	r3, r1, #31
    b558:	d502      	bpl.n	b560 <_printf_i+0xf8>
    b55a:	2320      	movs	r3, #32
    b55c:	4319      	orrs	r1, r3
    b55e:	6021      	str	r1, [r4, #0]
    b560:	2710      	movs	r7, #16
    b562:	2d00      	cmp	r5, #0
    b564:	d103      	bne.n	b56e <_printf_i+0x106>
    b566:	2320      	movs	r3, #32
    b568:	6822      	ldr	r2, [r4, #0]
    b56a:	439a      	bics	r2, r3
    b56c:	6022      	str	r2, [r4, #0]
    b56e:	0023      	movs	r3, r4
    b570:	2200      	movs	r2, #0
    b572:	3343      	adds	r3, #67	; 0x43
    b574:	701a      	strb	r2, [r3, #0]
    b576:	6863      	ldr	r3, [r4, #4]
    b578:	60a3      	str	r3, [r4, #8]
    b57a:	2b00      	cmp	r3, #0
    b57c:	db5c      	blt.n	b638 <_printf_i+0x1d0>
    b57e:	2204      	movs	r2, #4
    b580:	6821      	ldr	r1, [r4, #0]
    b582:	4391      	bics	r1, r2
    b584:	6021      	str	r1, [r4, #0]
    b586:	2d00      	cmp	r5, #0
    b588:	d158      	bne.n	b63c <_printf_i+0x1d4>
    b58a:	9e04      	ldr	r6, [sp, #16]
    b58c:	2b00      	cmp	r3, #0
    b58e:	d064      	beq.n	b65a <_printf_i+0x1f2>
    b590:	0026      	movs	r6, r4
    b592:	9b03      	ldr	r3, [sp, #12]
    b594:	3642      	adds	r6, #66	; 0x42
    b596:	781b      	ldrb	r3, [r3, #0]
    b598:	7033      	strb	r3, [r6, #0]
    b59a:	e05e      	b.n	b65a <_printf_i+0x1f2>
    b59c:	0648      	lsls	r0, r1, #25
    b59e:	d5da      	bpl.n	b556 <_printf_i+0xee>
    b5a0:	b2ad      	uxth	r5, r5
    b5a2:	e7d8      	b.n	b556 <_printf_i+0xee>
    b5a4:	6809      	ldr	r1, [r1, #0]
    b5a6:	681a      	ldr	r2, [r3, #0]
    b5a8:	0608      	lsls	r0, r1, #24
    b5aa:	d505      	bpl.n	b5b8 <_printf_i+0x150>
    b5ac:	1d11      	adds	r1, r2, #4
    b5ae:	6019      	str	r1, [r3, #0]
    b5b0:	6813      	ldr	r3, [r2, #0]
    b5b2:	6962      	ldr	r2, [r4, #20]
    b5b4:	601a      	str	r2, [r3, #0]
    b5b6:	e006      	b.n	b5c6 <_printf_i+0x15e>
    b5b8:	0649      	lsls	r1, r1, #25
    b5ba:	d5f7      	bpl.n	b5ac <_printf_i+0x144>
    b5bc:	1d11      	adds	r1, r2, #4
    b5be:	6019      	str	r1, [r3, #0]
    b5c0:	6813      	ldr	r3, [r2, #0]
    b5c2:	8aa2      	ldrh	r2, [r4, #20]
    b5c4:	801a      	strh	r2, [r3, #0]
    b5c6:	2300      	movs	r3, #0
    b5c8:	9e04      	ldr	r6, [sp, #16]
    b5ca:	6123      	str	r3, [r4, #16]
    b5cc:	e054      	b.n	b678 <_printf_i+0x210>
    b5ce:	681a      	ldr	r2, [r3, #0]
    b5d0:	1d11      	adds	r1, r2, #4
    b5d2:	6019      	str	r1, [r3, #0]
    b5d4:	6816      	ldr	r6, [r2, #0]
    b5d6:	2100      	movs	r1, #0
    b5d8:	6862      	ldr	r2, [r4, #4]
    b5da:	0030      	movs	r0, r6
    b5dc:	f000 f958 	bl	b890 <memchr>
    b5e0:	2800      	cmp	r0, #0
    b5e2:	d001      	beq.n	b5e8 <_printf_i+0x180>
    b5e4:	1b80      	subs	r0, r0, r6
    b5e6:	6060      	str	r0, [r4, #4]
    b5e8:	6863      	ldr	r3, [r4, #4]
    b5ea:	6123      	str	r3, [r4, #16]
    b5ec:	2300      	movs	r3, #0
    b5ee:	9a04      	ldr	r2, [sp, #16]
    b5f0:	7013      	strb	r3, [r2, #0]
    b5f2:	e041      	b.n	b678 <_printf_i+0x210>
    b5f4:	6923      	ldr	r3, [r4, #16]
    b5f6:	0032      	movs	r2, r6
    b5f8:	9906      	ldr	r1, [sp, #24]
    b5fa:	9805      	ldr	r0, [sp, #20]
    b5fc:	9d07      	ldr	r5, [sp, #28]
    b5fe:	47a8      	blx	r5
    b600:	1c43      	adds	r3, r0, #1
    b602:	d043      	beq.n	b68c <_printf_i+0x224>
    b604:	6823      	ldr	r3, [r4, #0]
    b606:	2500      	movs	r5, #0
    b608:	079b      	lsls	r3, r3, #30
    b60a:	d40f      	bmi.n	b62c <_printf_i+0x1c4>
    b60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b60e:	68e0      	ldr	r0, [r4, #12]
    b610:	4298      	cmp	r0, r3
    b612:	da3d      	bge.n	b690 <_printf_i+0x228>
    b614:	0018      	movs	r0, r3
    b616:	e03b      	b.n	b690 <_printf_i+0x228>
    b618:	0022      	movs	r2, r4
    b61a:	2301      	movs	r3, #1
    b61c:	3219      	adds	r2, #25
    b61e:	9906      	ldr	r1, [sp, #24]
    b620:	9805      	ldr	r0, [sp, #20]
    b622:	9e07      	ldr	r6, [sp, #28]
    b624:	47b0      	blx	r6
    b626:	1c43      	adds	r3, r0, #1
    b628:	d030      	beq.n	b68c <_printf_i+0x224>
    b62a:	3501      	adds	r5, #1
    b62c:	68e3      	ldr	r3, [r4, #12]
    b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b630:	1a9b      	subs	r3, r3, r2
    b632:	429d      	cmp	r5, r3
    b634:	dbf0      	blt.n	b618 <_printf_i+0x1b0>
    b636:	e7e9      	b.n	b60c <_printf_i+0x1a4>
    b638:	2d00      	cmp	r5, #0
    b63a:	d0a9      	beq.n	b590 <_printf_i+0x128>
    b63c:	9e04      	ldr	r6, [sp, #16]
    b63e:	0028      	movs	r0, r5
    b640:	0039      	movs	r1, r7
    b642:	f7fe fc57 	bl	9ef4 <__aeabi_uidivmod>
    b646:	9b03      	ldr	r3, [sp, #12]
    b648:	3e01      	subs	r6, #1
    b64a:	5c5b      	ldrb	r3, [r3, r1]
    b64c:	0028      	movs	r0, r5
    b64e:	7033      	strb	r3, [r6, #0]
    b650:	0039      	movs	r1, r7
    b652:	f7fe fbc9 	bl	9de8 <__udivsi3>
    b656:	1e05      	subs	r5, r0, #0
    b658:	d1f1      	bne.n	b63e <_printf_i+0x1d6>
    b65a:	2f08      	cmp	r7, #8
    b65c:	d109      	bne.n	b672 <_printf_i+0x20a>
    b65e:	6823      	ldr	r3, [r4, #0]
    b660:	07db      	lsls	r3, r3, #31
    b662:	d506      	bpl.n	b672 <_printf_i+0x20a>
    b664:	6863      	ldr	r3, [r4, #4]
    b666:	6922      	ldr	r2, [r4, #16]
    b668:	4293      	cmp	r3, r2
    b66a:	dc02      	bgt.n	b672 <_printf_i+0x20a>
    b66c:	2330      	movs	r3, #48	; 0x30
    b66e:	3e01      	subs	r6, #1
    b670:	7033      	strb	r3, [r6, #0]
    b672:	9b04      	ldr	r3, [sp, #16]
    b674:	1b9b      	subs	r3, r3, r6
    b676:	6123      	str	r3, [r4, #16]
    b678:	9b07      	ldr	r3, [sp, #28]
    b67a:	aa09      	add	r2, sp, #36	; 0x24
    b67c:	9300      	str	r3, [sp, #0]
    b67e:	0021      	movs	r1, r4
    b680:	9b06      	ldr	r3, [sp, #24]
    b682:	9805      	ldr	r0, [sp, #20]
    b684:	f7ff fe82 	bl	b38c <_printf_common>
    b688:	1c43      	adds	r3, r0, #1
    b68a:	d1b3      	bne.n	b5f4 <_printf_i+0x18c>
    b68c:	2001      	movs	r0, #1
    b68e:	4240      	negs	r0, r0
    b690:	b00b      	add	sp, #44	; 0x2c
    b692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b694:	0000d614 	.word	0x0000d614
    b698:	0000d603 	.word	0x0000d603

0000b69c <_putc_r>:
    b69c:	b570      	push	{r4, r5, r6, lr}
    b69e:	0006      	movs	r6, r0
    b6a0:	000d      	movs	r5, r1
    b6a2:	0014      	movs	r4, r2
    b6a4:	2800      	cmp	r0, #0
    b6a6:	d004      	beq.n	b6b2 <_putc_r+0x16>
    b6a8:	6983      	ldr	r3, [r0, #24]
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d101      	bne.n	b6b2 <_putc_r+0x16>
    b6ae:	f7ff faab 	bl	ac08 <__sinit>
    b6b2:	4b12      	ldr	r3, [pc, #72]	; (b6fc <_putc_r+0x60>)
    b6b4:	429c      	cmp	r4, r3
    b6b6:	d111      	bne.n	b6dc <_putc_r+0x40>
    b6b8:	6874      	ldr	r4, [r6, #4]
    b6ba:	68a3      	ldr	r3, [r4, #8]
    b6bc:	3b01      	subs	r3, #1
    b6be:	60a3      	str	r3, [r4, #8]
    b6c0:	2b00      	cmp	r3, #0
    b6c2:	da05      	bge.n	b6d0 <_putc_r+0x34>
    b6c4:	69a2      	ldr	r2, [r4, #24]
    b6c6:	4293      	cmp	r3, r2
    b6c8:	db12      	blt.n	b6f0 <_putc_r+0x54>
    b6ca:	b2eb      	uxtb	r3, r5
    b6cc:	2b0a      	cmp	r3, #10
    b6ce:	d00f      	beq.n	b6f0 <_putc_r+0x54>
    b6d0:	6823      	ldr	r3, [r4, #0]
    b6d2:	b2e8      	uxtb	r0, r5
    b6d4:	1c5a      	adds	r2, r3, #1
    b6d6:	6022      	str	r2, [r4, #0]
    b6d8:	701d      	strb	r5, [r3, #0]
    b6da:	bd70      	pop	{r4, r5, r6, pc}
    b6dc:	4b08      	ldr	r3, [pc, #32]	; (b700 <_putc_r+0x64>)
    b6de:	429c      	cmp	r4, r3
    b6e0:	d101      	bne.n	b6e6 <_putc_r+0x4a>
    b6e2:	68b4      	ldr	r4, [r6, #8]
    b6e4:	e7e9      	b.n	b6ba <_putc_r+0x1e>
    b6e6:	4b07      	ldr	r3, [pc, #28]	; (b704 <_putc_r+0x68>)
    b6e8:	429c      	cmp	r4, r3
    b6ea:	d1e6      	bne.n	b6ba <_putc_r+0x1e>
    b6ec:	68f4      	ldr	r4, [r6, #12]
    b6ee:	e7e4      	b.n	b6ba <_putc_r+0x1e>
    b6f0:	0022      	movs	r2, r4
    b6f2:	0029      	movs	r1, r5
    b6f4:	0030      	movs	r0, r6
    b6f6:	f7ff f8c3 	bl	a880 <__swbuf_r>
    b6fa:	e7ee      	b.n	b6da <_putc_r+0x3e>
    b6fc:	0000d5a8 	.word	0x0000d5a8
    b700:	0000d5c8 	.word	0x0000d5c8
    b704:	0000d588 	.word	0x0000d588

0000b708 <__sread>:
    b708:	b570      	push	{r4, r5, r6, lr}
    b70a:	000c      	movs	r4, r1
    b70c:	250e      	movs	r5, #14
    b70e:	5f49      	ldrsh	r1, [r1, r5]
    b710:	f000 f8f0 	bl	b8f4 <_read_r>
    b714:	2800      	cmp	r0, #0
    b716:	db03      	blt.n	b720 <__sread+0x18>
    b718:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b71a:	181b      	adds	r3, r3, r0
    b71c:	6563      	str	r3, [r4, #84]	; 0x54
    b71e:	bd70      	pop	{r4, r5, r6, pc}
    b720:	89a3      	ldrh	r3, [r4, #12]
    b722:	4a02      	ldr	r2, [pc, #8]	; (b72c <__sread+0x24>)
    b724:	4013      	ands	r3, r2
    b726:	81a3      	strh	r3, [r4, #12]
    b728:	e7f9      	b.n	b71e <__sread+0x16>
    b72a:	46c0      	nop			; (mov r8, r8)
    b72c:	ffffefff 	.word	0xffffefff

0000b730 <__swrite>:
    b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b732:	001f      	movs	r7, r3
    b734:	898b      	ldrh	r3, [r1, #12]
    b736:	0005      	movs	r5, r0
    b738:	000c      	movs	r4, r1
    b73a:	0016      	movs	r6, r2
    b73c:	05db      	lsls	r3, r3, #23
    b73e:	d505      	bpl.n	b74c <__swrite+0x1c>
    b740:	230e      	movs	r3, #14
    b742:	5ec9      	ldrsh	r1, [r1, r3]
    b744:	2200      	movs	r2, #0
    b746:	2302      	movs	r3, #2
    b748:	f000 f88e 	bl	b868 <_lseek_r>
    b74c:	89a3      	ldrh	r3, [r4, #12]
    b74e:	4a05      	ldr	r2, [pc, #20]	; (b764 <__swrite+0x34>)
    b750:	0028      	movs	r0, r5
    b752:	4013      	ands	r3, r2
    b754:	81a3      	strh	r3, [r4, #12]
    b756:	0032      	movs	r2, r6
    b758:	230e      	movs	r3, #14
    b75a:	5ee1      	ldrsh	r1, [r4, r3]
    b75c:	003b      	movs	r3, r7
    b75e:	f000 f839 	bl	b7d4 <_write_r>
    b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b764:	ffffefff 	.word	0xffffefff

0000b768 <__sseek>:
    b768:	b570      	push	{r4, r5, r6, lr}
    b76a:	000c      	movs	r4, r1
    b76c:	250e      	movs	r5, #14
    b76e:	5f49      	ldrsh	r1, [r1, r5]
    b770:	f000 f87a 	bl	b868 <_lseek_r>
    b774:	89a3      	ldrh	r3, [r4, #12]
    b776:	1c42      	adds	r2, r0, #1
    b778:	d103      	bne.n	b782 <__sseek+0x1a>
    b77a:	4a05      	ldr	r2, [pc, #20]	; (b790 <__sseek+0x28>)
    b77c:	4013      	ands	r3, r2
    b77e:	81a3      	strh	r3, [r4, #12]
    b780:	bd70      	pop	{r4, r5, r6, pc}
    b782:	2280      	movs	r2, #128	; 0x80
    b784:	0152      	lsls	r2, r2, #5
    b786:	4313      	orrs	r3, r2
    b788:	81a3      	strh	r3, [r4, #12]
    b78a:	6560      	str	r0, [r4, #84]	; 0x54
    b78c:	e7f8      	b.n	b780 <__sseek+0x18>
    b78e:	46c0      	nop			; (mov r8, r8)
    b790:	ffffefff 	.word	0xffffefff

0000b794 <__sclose>:
    b794:	b510      	push	{r4, lr}
    b796:	230e      	movs	r3, #14
    b798:	5ec9      	ldrsh	r1, [r1, r3]
    b79a:	f000 f82f 	bl	b7fc <_close_r>
    b79e:	bd10      	pop	{r4, pc}

0000b7a0 <strchr>:
    b7a0:	b2c9      	uxtb	r1, r1
    b7a2:	7803      	ldrb	r3, [r0, #0]
    b7a4:	2b00      	cmp	r3, #0
    b7a6:	d004      	beq.n	b7b2 <strchr+0x12>
    b7a8:	4299      	cmp	r1, r3
    b7aa:	d100      	bne.n	b7ae <strchr+0xe>
    b7ac:	4770      	bx	lr
    b7ae:	3001      	adds	r0, #1
    b7b0:	e7f7      	b.n	b7a2 <strchr+0x2>
    b7b2:	424b      	negs	r3, r1
    b7b4:	4159      	adcs	r1, r3
    b7b6:	4249      	negs	r1, r1
    b7b8:	4008      	ands	r0, r1
    b7ba:	e7f7      	b.n	b7ac <strchr+0xc>

0000b7bc <__ascii_wctomb>:
    b7bc:	1e0b      	subs	r3, r1, #0
    b7be:	d004      	beq.n	b7ca <__ascii_wctomb+0xe>
    b7c0:	2aff      	cmp	r2, #255	; 0xff
    b7c2:	d904      	bls.n	b7ce <__ascii_wctomb+0x12>
    b7c4:	238a      	movs	r3, #138	; 0x8a
    b7c6:	6003      	str	r3, [r0, #0]
    b7c8:	3b8b      	subs	r3, #139	; 0x8b
    b7ca:	0018      	movs	r0, r3
    b7cc:	4770      	bx	lr
    b7ce:	700a      	strb	r2, [r1, #0]
    b7d0:	2301      	movs	r3, #1
    b7d2:	e7fa      	b.n	b7ca <__ascii_wctomb+0xe>

0000b7d4 <_write_r>:
    b7d4:	b570      	push	{r4, r5, r6, lr}
    b7d6:	0005      	movs	r5, r0
    b7d8:	0008      	movs	r0, r1
    b7da:	0011      	movs	r1, r2
    b7dc:	2200      	movs	r2, #0
    b7de:	4c06      	ldr	r4, [pc, #24]	; (b7f8 <_write_r+0x24>)
    b7e0:	6022      	str	r2, [r4, #0]
    b7e2:	001a      	movs	r2, r3
    b7e4:	f7fb f85c 	bl	68a0 <_write>
    b7e8:	1c43      	adds	r3, r0, #1
    b7ea:	d103      	bne.n	b7f4 <_write_r+0x20>
    b7ec:	6823      	ldr	r3, [r4, #0]
    b7ee:	2b00      	cmp	r3, #0
    b7f0:	d000      	beq.n	b7f4 <_write_r+0x20>
    b7f2:	602b      	str	r3, [r5, #0]
    b7f4:	bd70      	pop	{r4, r5, r6, pc}
    b7f6:	46c0      	nop			; (mov r8, r8)
    b7f8:	20000778 	.word	0x20000778

0000b7fc <_close_r>:
    b7fc:	2300      	movs	r3, #0
    b7fe:	b570      	push	{r4, r5, r6, lr}
    b800:	4c06      	ldr	r4, [pc, #24]	; (b81c <_close_r+0x20>)
    b802:	0005      	movs	r5, r0
    b804:	0008      	movs	r0, r1
    b806:	6023      	str	r3, [r4, #0]
    b808:	f7fb f884 	bl	6914 <_close>
    b80c:	1c43      	adds	r3, r0, #1
    b80e:	d103      	bne.n	b818 <_close_r+0x1c>
    b810:	6823      	ldr	r3, [r4, #0]
    b812:	2b00      	cmp	r3, #0
    b814:	d000      	beq.n	b818 <_close_r+0x1c>
    b816:	602b      	str	r3, [r5, #0]
    b818:	bd70      	pop	{r4, r5, r6, pc}
    b81a:	46c0      	nop			; (mov r8, r8)
    b81c:	20000778 	.word	0x20000778

0000b820 <_fstat_r>:
    b820:	2300      	movs	r3, #0
    b822:	b570      	push	{r4, r5, r6, lr}
    b824:	4c06      	ldr	r4, [pc, #24]	; (b840 <_fstat_r+0x20>)
    b826:	0005      	movs	r5, r0
    b828:	0008      	movs	r0, r1
    b82a:	0011      	movs	r1, r2
    b82c:	6023      	str	r3, [r4, #0]
    b82e:	f7fb f874 	bl	691a <_fstat>
    b832:	1c43      	adds	r3, r0, #1
    b834:	d103      	bne.n	b83e <_fstat_r+0x1e>
    b836:	6823      	ldr	r3, [r4, #0]
    b838:	2b00      	cmp	r3, #0
    b83a:	d000      	beq.n	b83e <_fstat_r+0x1e>
    b83c:	602b      	str	r3, [r5, #0]
    b83e:	bd70      	pop	{r4, r5, r6, pc}
    b840:	20000778 	.word	0x20000778

0000b844 <_isatty_r>:
    b844:	2300      	movs	r3, #0
    b846:	b570      	push	{r4, r5, r6, lr}
    b848:	4c06      	ldr	r4, [pc, #24]	; (b864 <_isatty_r+0x20>)
    b84a:	0005      	movs	r5, r0
    b84c:	0008      	movs	r0, r1
    b84e:	6023      	str	r3, [r4, #0]
    b850:	f7fb f868 	bl	6924 <_isatty>
    b854:	1c43      	adds	r3, r0, #1
    b856:	d103      	bne.n	b860 <_isatty_r+0x1c>
    b858:	6823      	ldr	r3, [r4, #0]
    b85a:	2b00      	cmp	r3, #0
    b85c:	d000      	beq.n	b860 <_isatty_r+0x1c>
    b85e:	602b      	str	r3, [r5, #0]
    b860:	bd70      	pop	{r4, r5, r6, pc}
    b862:	46c0      	nop			; (mov r8, r8)
    b864:	20000778 	.word	0x20000778

0000b868 <_lseek_r>:
    b868:	b570      	push	{r4, r5, r6, lr}
    b86a:	0005      	movs	r5, r0
    b86c:	0008      	movs	r0, r1
    b86e:	0011      	movs	r1, r2
    b870:	2200      	movs	r2, #0
    b872:	4c06      	ldr	r4, [pc, #24]	; (b88c <_lseek_r+0x24>)
    b874:	6022      	str	r2, [r4, #0]
    b876:	001a      	movs	r2, r3
    b878:	f7fb f856 	bl	6928 <_lseek>
    b87c:	1c43      	adds	r3, r0, #1
    b87e:	d103      	bne.n	b888 <_lseek_r+0x20>
    b880:	6823      	ldr	r3, [r4, #0]
    b882:	2b00      	cmp	r3, #0
    b884:	d000      	beq.n	b888 <_lseek_r+0x20>
    b886:	602b      	str	r3, [r5, #0]
    b888:	bd70      	pop	{r4, r5, r6, pc}
    b88a:	46c0      	nop			; (mov r8, r8)
    b88c:	20000778 	.word	0x20000778

0000b890 <memchr>:
    b890:	b2c9      	uxtb	r1, r1
    b892:	1882      	adds	r2, r0, r2
    b894:	4290      	cmp	r0, r2
    b896:	d101      	bne.n	b89c <memchr+0xc>
    b898:	2000      	movs	r0, #0
    b89a:	4770      	bx	lr
    b89c:	7803      	ldrb	r3, [r0, #0]
    b89e:	428b      	cmp	r3, r1
    b8a0:	d0fb      	beq.n	b89a <memchr+0xa>
    b8a2:	3001      	adds	r0, #1
    b8a4:	e7f6      	b.n	b894 <memchr+0x4>

0000b8a6 <_realloc_r>:
    b8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8a8:	0007      	movs	r7, r0
    b8aa:	000d      	movs	r5, r1
    b8ac:	0016      	movs	r6, r2
    b8ae:	2900      	cmp	r1, #0
    b8b0:	d105      	bne.n	b8be <_realloc_r+0x18>
    b8b2:	0011      	movs	r1, r2
    b8b4:	f7fe fce4 	bl	a280 <_malloc_r>
    b8b8:	0004      	movs	r4, r0
    b8ba:	0020      	movs	r0, r4
    b8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8be:	2a00      	cmp	r2, #0
    b8c0:	d103      	bne.n	b8ca <_realloc_r+0x24>
    b8c2:	f7fe fc93 	bl	a1ec <_free_r>
    b8c6:	0034      	movs	r4, r6
    b8c8:	e7f7      	b.n	b8ba <_realloc_r+0x14>
    b8ca:	f000 f827 	bl	b91c <_malloc_usable_size_r>
    b8ce:	002c      	movs	r4, r5
    b8d0:	4286      	cmp	r6, r0
    b8d2:	d9f2      	bls.n	b8ba <_realloc_r+0x14>
    b8d4:	0031      	movs	r1, r6
    b8d6:	0038      	movs	r0, r7
    b8d8:	f7fe fcd2 	bl	a280 <_malloc_r>
    b8dc:	1e04      	subs	r4, r0, #0
    b8de:	d0ec      	beq.n	b8ba <_realloc_r+0x14>
    b8e0:	0029      	movs	r1, r5
    b8e2:	0032      	movs	r2, r6
    b8e4:	f7fe fc5e 	bl	a1a4 <memcpy>
    b8e8:	0029      	movs	r1, r5
    b8ea:	0038      	movs	r0, r7
    b8ec:	f7fe fc7e 	bl	a1ec <_free_r>
    b8f0:	e7e3      	b.n	b8ba <_realloc_r+0x14>
	...

0000b8f4 <_read_r>:
    b8f4:	b570      	push	{r4, r5, r6, lr}
    b8f6:	0005      	movs	r5, r0
    b8f8:	0008      	movs	r0, r1
    b8fa:	0011      	movs	r1, r2
    b8fc:	2200      	movs	r2, #0
    b8fe:	4c06      	ldr	r4, [pc, #24]	; (b918 <_read_r+0x24>)
    b900:	6022      	str	r2, [r4, #0]
    b902:	001a      	movs	r2, r3
    b904:	f7fa ffaa 	bl	685c <_read>
    b908:	1c43      	adds	r3, r0, #1
    b90a:	d103      	bne.n	b914 <_read_r+0x20>
    b90c:	6823      	ldr	r3, [r4, #0]
    b90e:	2b00      	cmp	r3, #0
    b910:	d000      	beq.n	b914 <_read_r+0x20>
    b912:	602b      	str	r3, [r5, #0]
    b914:	bd70      	pop	{r4, r5, r6, pc}
    b916:	46c0      	nop			; (mov r8, r8)
    b918:	20000778 	.word	0x20000778

0000b91c <_malloc_usable_size_r>:
    b91c:	1f0b      	subs	r3, r1, #4
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	1f18      	subs	r0, r3, #4
    b922:	2b00      	cmp	r3, #0
    b924:	da01      	bge.n	b92a <_malloc_usable_size_r+0xe>
    b926:	580b      	ldr	r3, [r1, r0]
    b928:	18c0      	adds	r0, r0, r3
    b92a:	4770      	bx	lr

0000b92c <mmc_trans_multipliers>:
    b92c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    b93c:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    b94c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    b95c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000b96c <sd_mmc_trans_units>:
    b96c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000b988 <sd_trans_multipliers>:
    b988:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    b998:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    b9a8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    b9b8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000b9c8 <__FUNCTION__.14519>:
    b9c8:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    b9d8:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    b9e8:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    b9f8:	746c 6320 646d 0000 1e50 0000 1e20 0000     lt cmd..P... ...
    ba08:	1e18 0000 1e30 0000 1e28 0000 1e48 0000     ....0...(...H...
    ba18:	1e38 0000 1e40 0000                         8...@...

0000ba20 <__FUNCTION__.13073>:
    ba20:	6968 5f66 6573 646e 0000 0000               hif_send....

0000ba2c <__FUNCTION__.13083>:
    ba2c:	6968 5f66 7369 0072                         hif_isr.

0000ba34 <__FUNCTION__.13089>:
    ba34:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000ba44 <__FUNCTION__.13101>:
    ba44:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000ba50 <__FUNCTION__.13117>:
    ba50:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    ba60:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    ba70:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    ba80:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    ba90:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    baa0:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    bab0:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    bac0:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    bad0:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    bae0:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    baf0:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    bb00:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    bb10:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    bb20:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    bb30:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    bb40:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    bb50:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    bb60:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    bb70:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    bb80:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    bb90:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    bba0:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    bbb0:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    bbc0:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    bbd0:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    bbe0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    bbf0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    bc00:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    bc10:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    bc20:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    bc30:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    bc40:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    bc50:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    bc60:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    bc70:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    bc80:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    bc90:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    bca0:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    bcb0:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    bcc0:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    bcd0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    bce0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    bcf0:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    bd00:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    bd10:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    bd20:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    bd30:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000bd40 <__FUNCTION__.13052>:
    bd40:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000bd4c <__FUNCTION__.13081>:
    bd4c:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000bd5c <__FUNCTION__.13109>:
    bd5c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    bd6c:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    bd7c:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    bd8c:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    bd9c:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    bdac:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    bdbc:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    bdcc:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    bddc:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    bdec:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    bdfc:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    be0c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    be1c:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    be2c:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    be3c:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    be4c:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    be5c:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    be6c:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    be7c:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    be8c:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    be9c:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    beac:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    bebc:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    becc:	3731 323a 3a37 3932 0000 0000 7041 2072     17:27:29....Apr 
    bedc:	3531 3220 3130 0038 7244 7669 7265 6220     15 2018.Driver b
    beec:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    befc:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    bf0c:	2065 6556 7372 6f69 006e 0000               e Version...

0000bf18 <__FUNCTION__.12915>:
    bf18:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000bf24 <__FUNCTION__.12964>:
    bf24:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    bf34:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    bf44:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    bf54:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    bf64:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    bf74:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    bf84:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000bf94 <__FUNCTION__.12962>:
    bf94:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000bfa0 <__FUNCTION__.12969>:
    bfa0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    bfb0:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    bfc0:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    bfd0:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    bfe0:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    bff0:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    c000:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    c010:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    c020:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    c030:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    c040:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    c050:	4920 2044 6c25 0a78 0000 0000 2e30 0000      ID %lx.....0...
    c060:	2e30 0000 2e60 0000 2de2 0000 2e06 0000     0...`....-......
    c070:	2e14 0000 2e46 0000 2e46 0000 2e8e 0000     ....F...F.......
    c080:	2dc6 0000 2ec8 0000 2ec8 0000 2ec8 0000     .-..............
    c090:	2ec8 0000 2e22 0000 c9c3 cac4               ....".......

0000c09c <__FUNCTION__.12268>:
    c09c:	7073 5f69 6d63 0064                         spi_cmd.

0000c0a4 <__FUNCTION__.12275>:
    c0a4:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000c0b4 <__FUNCTION__.12284>:
    c0b4:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000c0c0 <__FUNCTION__.12300>:
    c0c0:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000c0d0 <__FUNCTION__.12315>:
    c0d0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000c0e0 <__FUNCTION__.12327>:
    c0e0:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000c0f0 <__FUNCTION__.12338>:
    c0f0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000c100 <__FUNCTION__.12350>:
    c100:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000c110 <__FUNCTION__.12363>:
    c110:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000c11c <__FUNCTION__.12384>:
    c11c:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000c128 <crc7_syndrome_table>:
    c128:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    c138:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    c148:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    c158:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    c168:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    c178:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    c188:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    c198:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    c1a8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    c1b8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    c1c8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    c1d8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    c1e8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    c1f8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    c208:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    c218:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    c228:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c238:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    c248:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    c258:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    c268:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    c278:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c288:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    c298:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    c2a8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    c2b8:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    c2c8:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    c2d8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    c2e8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    c2f8:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    c308:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    c318:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    c328:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    c338:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    c348:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    c358:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    c368:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    c378:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    c388:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    c398:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    c3a8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c3b8:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    c3c8:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    c3d8:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    c3e8:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    c3f8:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    c408:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    c418:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    c428:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    c438:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    c448:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c458:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    c468:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    c478:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    c488:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    c498:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    c4a8:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    c4b8:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    c4c8:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    c4d8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    c4e8:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    c4f8:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    c508:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    c518:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    c528:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    c538:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    c548:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    c558:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c568:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    c578:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    c588:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    c598:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    c5a8:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    c5b8:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    c5c8:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    c5d8:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    c5e8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    c5f8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    c608:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    c618:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    c628:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    c638:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    c648:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    c658:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    c668:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    c678:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    c688:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    c698:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    c6a8:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    c6b8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    c6c8:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    c6d8:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    c6e8:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    c6f8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    c708:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    c718:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    c728:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    c738:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    c748:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    c758:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    c768:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    c778:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    c788:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    c798:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    c7a8:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    c7b8:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    c7c8:	1c00 4200 598a 0000 5986 0000 5986 0000     ...B.Y...Y...Y..
    c7d8:	59e8 0000 59e8 0000 599e 0000 5990 0000     .Y...Y...Y...Y..
    c7e8:	59a4 0000 59d6 0000 5ba8 0000 5b88 0000     .Y...Y...[...[..
    c7f8:	5b88 0000 5c14 0000 5b9a 0000 5bb6 0000     .[...\...[...[..
    c808:	5b8c 0000 5bc4 0000 5c04 0000               .[...[...\..

0000c814 <_tcc_apbcmasks>:
    c814:	0100 0000 0200 0000 0400 0000               ............

0000c820 <_tcc_cc_nums>:
    c820:	0204 0002                                   ....

0000c824 <_tcc_gclk_ids>:
    c824:	1a1a 001b                                   ....

0000c828 <_tcc_maxs>:
    c828:	ffff 00ff ffff 00ff ffff 0000               ............

0000c834 <_tcc_ow_nums>:
    c834:	0408 0002                                   ....

0000c838 <_tcc_intflag>:
    c838:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    c848:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    c858:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000c868 <tcc_interrupt_vectors.12458>:
    c868:	100f 0011                                   ....

0000c86c <LfnOfs>:
    c86c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000c87c <excvt.4558>:
    c87c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    c88c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    c89c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    c8ac:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    c8bc:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    c8cc:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    c8dc:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    c8ec:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    c8fc:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    c90c:	5d5b 0000                                   []..

0000c910 <Tbl>:
    c910:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    c920:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    c930:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    c940:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    c950:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    c960:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    c970:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    c980:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    c990:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    c9a0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    c9b0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    c9c0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    c9d0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    c9e0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    c9f0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    ca00:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000ca10 <tbl_lower.4308>:
    ca10:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    ca20:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    ca30:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    ca40:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    ca50:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    ca60:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    ca70:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    ca80:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    ca90:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    caa0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    cab0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    cac0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    cad0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    cae0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    caf0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    cb00:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    cb10:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    cb20:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    cb30:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    cb40:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    cb50:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    cb60:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    cb70:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    cb80:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    cb90:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    cba0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    cbb0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    cbc0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    cbd0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    cbe0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000cbf0 <tbl_upper.4309>:
    cbf0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    cc00:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    cc10:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    cc20:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    cc30:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    cc40:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    cc50:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    cc60:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    cc70:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    cc80:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    cc90:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    cca0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    ccb0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    ccc0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    ccd0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    cce0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    ccf0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    cd00:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    cd10:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    cd20:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    cd30:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    cd40:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    cd50:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    cd60:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    cd70:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    cd80:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    cd90:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    cda0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    cdb0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    cdc0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    cdd0:	92a2 0000 929c 0000 9296 0000 9290 0000     ................
    cde0:	92a8 0000 92b0 0000 92a8 0000 928a 0000     ................
    cdf0:	9284 0000 92a8 0000 927e 0000 927e 0000     ........~...~...
    ce00:	9278 0000 9272 0000 92b0 0000 931a 0000     x...r...........
    ce10:	9314 0000 930e 0000 9308 0000 9320 0000     ............ ...
    ce20:	9328 0000 9320 0000 9302 0000 92fc 0000     (... ...........
    ce30:	9320 0000 92f6 0000 92f6 0000 92f0 0000      ...............
    ce40:	92ea 0000 9328 0000 9394 0000 938e 0000     ....(...........
    ce50:	9388 0000 9382 0000 939a 0000 939a 0000     ................
    ce60:	939a 0000 937c 0000 9376 0000 939a 0000     ....|...v.......
    ce70:	9370 0000 9370 0000 936a 0000 9364 0000     p...p...j...d...
    ce80:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    ce90:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
    cea0:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
    ceb0:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
    cec0:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
    ced0:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
    cee0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
    cef0:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
    cf00:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
    cf10:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
    cf20:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
    cf30:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
    cf40:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
    cf50:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
    cf60:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
    cf70:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
    cf80:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
    cf90:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
    cfa0:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
    cfb0:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
    cfc0:	2800 4200 99f0 0000 99f8 0000 9a06 0000     .(.B............
    cfd0:	9a3e 0000 9a54 0000 7468 7074 635f 696c     >...T...http_cli
    cfe0:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
    cff0:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
    d000:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
    d010:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    d020:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
    d030:	706d 656c 6574 2e64 000d 0000 7468 7074     mpleted.....http
    d040:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
    d050:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
    d060:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
    d070:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
    d080:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
    d090:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
    d0a0:	6e6f 253a 0d64 000a 2d2d 4820 5454 2050     on:%d...-- HTTP 
    d0b0:	6966 656c 6420 776f 6c6e 616f 6564 2072     file downloader 
    d0c0:	7865 6d61 6c70 2065 2d2d 0a0d 2d2d 5320     example --..-- S
    d0d0:	4d41 3257 5f35 5058 414c 4e49 4445 505f     AMW25_XPLAINED_P
    d0e0:	4f52 2d20 0d2d 2d0a 202d 6f43 706d 6c69     RO --..-- Compil
    d0f0:	6465 203a 7041 2072 3531 3220 3130 2038     ed: Apr 15 2018 
    d100:	3731 343a 3a38 3734 2d20 0d2d 0000 0000     17:48:47 --.....
    d110:	0a0d 6854 7369 6520 6178 706d 656c 7220     ..This example r
    d120:	7165 6975 6572 2073 6874 2065 5041 7420     equires the AP t
    d130:	206f 6168 6576 6920 746e 7265 656e 2074     o have internet 
    d140:	6361 6563 7373 0d2e 0d0a 0000 6f63 666e     access......conf
    d150:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
    d160:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
    d170:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
    d180:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
    d190:	0000 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
    d1a0:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
    d1b0:	726f 2021 7228 7365 2520 2964 0a0d 0000     or! (res %d)....
    d1c0:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
    d1d0:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
    d1e0:	0d2e 000a 616d 6e69 203a 6c70 6165 6573     ....main: please
    d1f0:	7520 706e 756c 2067 6874 2065 4453 4d2f      unplug the SD/M
    d200:	434d 6320 7261 2e64 000d 0000 616d 6e69     MC card.....main
    d210:	203a 6f64 656e 0d2e 0000 0000 3025 6433     : done......%03d
    d220:	0000 0000 6572 6f73 766c 5f65 6263 203a     ....resolve_cb: 
    d230:	7325 4920 2050 6461 7264 7365 2073 7369     %s IP address is
    d240:	2520 2e64 6425 252e 2e64 6425 0a0d 0a0d      %d.%d.%d.%d....
    d250:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    d260:	6461 203a 4d4d 2043 7473 726f 6761 2065     ad: MMC storage 
    d270:	6f6e 2074 6572 6461 2e79 000d 7473 7261     not ready...star
    d280:	5f74 6f64 6e77 6f6c 6461 203a 6957 462d     t_download: Wi-F
    d290:	2069 7369 6e20 746f 6320 6e6f 656e 7463     i is not connect
    d2a0:	6465 0d2e 0000 0000 7473 7261 5f74 6f64     ed......start_do
    d2b0:	6e77 6f6c 6461 203a 6572 7571 7365 2074     wnload: request 
    d2c0:	7369 7320 6e65 2074 6c61 6572 6461 2e79     is sent already.
    d2d0:	000d 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    d2e0:	6461 203a 7572 6e6e 6e69 2067 6f64 6e77     ad: running down
    d2f0:	6f6c 6461 6120 726c 6165 7964 0d2e 0000     load already....
    d300:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
    d310:	6573 646e 6e69 2067 5448 5054 7220 7165     sending HTTP req
    d320:	6575 7473 2e2e 0d2e 0000 0000 7468 7074     uest........http
    d330:	2f3a 772f 7777 612e 6d74 6c65 632e 6d6f     ://www.atmel.com
    d340:	492f 616d 6567 2f73 7441 656d 2d6c 3534     /Images/Atmel-45
    d350:	3531 2d34 7250 646f 6375 2d74 6553 656c     154-Product-Sele
    d360:	7463 6f69 2d6e 7547 6469 5f65 7242 636f     ction-Guide_Broc
    d370:	7568 6572 702e 6664 0000 0000 7473 726f     hure.pdf....stor
    d380:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
    d390:	706d 7974 6420 7461 2e61 000d 7473 726f     mpty data...stor
    d3a0:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
    d3b0:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
    d3c0:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
    d3d0:	6361 656b 3a74 6620 6c69 2065 616e 656d     acket: file name
    d3e0:	6920 2073 6e69 6176 696c 2e64 4420 776f      is invalid. Dow
    d3f0:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
    d400:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
    d410:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
    d420:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
    d430:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
    d440:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    d450:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
    d460:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
    d470:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
    d480:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
    d490:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
    d4a0:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
    d4b0:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    d4c0:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
    d4d0:	7373 7566 6c6c 2e79 000d 0000 6977 6966     ssfully.....wifi
    d4e0:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
    d4f0:	4e4e 4345 4554 0d44 0000 0000 6977 6966     NNECTED.....wifi
    d500:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
    d510:	4353 4e4f 454e 5443 4445 000d 6977 6966     SCONNECTED..wifi
    d520:	635f 3a62 4520 7272 726f 6320 646f 2065     _cb: Error code 
    d530:	6425 0a0d 0000 0000 6570 6e6e 3731 3034     %d......penn1740
    d540:	6977 6966 0000 0000 6941 5072 6e65 4e6e     wifi....AirPennN
    d550:	7465 442d 7665 6369 0065 0000 6977 6966     et-Device...wifi
    d560:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
    d570:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
    d580:	0000 0000                                   ....

0000d584 <_global_impure_ptr>:
    d584:	0130 2000                                   0.. 

0000d588 <__sf_fake_stderr>:
	...

0000d5a8 <__sf_fake_stdin>:
	...

0000d5c8 <__sf_fake_stdout>:
	...
    d5e8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    d5f8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    d608:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    d618:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0000d625 <_ctype_>:
    d625:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    d635:	2020 2020 2020 2020 2020 2020 2020 2020                     
    d645:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    d655:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    d665:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    d675:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    d685:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    d695:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    d6a5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000d728 <_init>:
    d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d72a:	46c0      	nop			; (mov r8, r8)
    d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d72e:	bc08      	pop	{r3}
    d730:	469e      	mov	lr, r3
    d732:	4770      	bx	lr

0000d734 <__init_array_start>:
    d734:	000000dd 	.word	0x000000dd

0000d738 <_fini>:
    d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d73a:	46c0      	nop			; (mov r8, r8)
    d73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d73e:	bc08      	pop	{r3}
    d740:	469e      	mov	lr, r3
    d742:	4770      	bx	lr

0000d744 <__fini_array_start>:
    d744:	000000b5 	.word	0x000000b5
